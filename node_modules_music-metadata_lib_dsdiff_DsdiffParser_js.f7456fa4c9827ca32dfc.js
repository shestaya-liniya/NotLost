"use strict";
(self["webpackChunktelegram_t"] = self["webpackChunktelegram_t"] || []).push([["node_modules_music-metadata_lib_dsdiff_DsdiffParser_js"],{

/***/ "./node_modules/music-metadata/lib/dsdiff/DsdiffParser.js":
/*!****************************************************************!*\
  !*** ./node_modules/music-metadata/lib/dsdiff/DsdiffParser.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DsdiffContentParseError: () => (/* binding */ DsdiffContentParseError),
/* harmony export */   DsdiffParser: () => (/* binding */ DsdiffParser)
/* harmony export */ });
/* harmony import */ var token_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! token-types */ "./node_modules/token-types/lib/index.js");
/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js");
/* harmony import */ var strtok3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! strtok3 */ "./node_modules/strtok3/lib/core.js");
/* harmony import */ var _common_FourCC_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/FourCC.js */ "./node_modules/music-metadata/lib/common/FourCC.js");
/* harmony import */ var _common_BasicParser_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/BasicParser.js */ "./node_modules/music-metadata/lib/common/BasicParser.js");
/* harmony import */ var _id3v2_ID3v2Parser_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../id3v2/ID3v2Parser.js */ "./node_modules/music-metadata/lib/id3v2/ID3v2Parser.js");
/* harmony import */ var _DsdiffToken_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./DsdiffToken.js */ "./node_modules/music-metadata/lib/dsdiff/DsdiffToken.js");
/* harmony import */ var _ParseError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ParseError.js */ "./node_modules/music-metadata/lib/ParseError.js");








const debug = debug__WEBPACK_IMPORTED_MODULE_1__('music-metadata:parser:aiff');
class DsdiffContentParseError extends (0,_ParseError_js__WEBPACK_IMPORTED_MODULE_3__.makeUnexpectedFileContentError)('DSDIFF') {
}
/**
 * DSDIFF - Direct Stream Digital Interchange File Format (Phillips)
 *
 * Ref:
 * - http://www.sonicstudio.com/pdf/dsd/DSDIFF_1.5_Spec.pdf
 */
class DsdiffParser extends _common_BasicParser_js__WEBPACK_IMPORTED_MODULE_4__.BasicParser {
    async parse() {
        const header = await this.tokenizer.readToken(_DsdiffToken_js__WEBPACK_IMPORTED_MODULE_5__.ChunkHeader64);
        if (header.chunkID !== 'FRM8')
            throw new DsdiffContentParseError('Unexpected chunk-ID');
        const type = (await this.tokenizer.readToken(_common_FourCC_js__WEBPACK_IMPORTED_MODULE_6__.FourCcToken)).trim();
        switch (type) {
            case 'DSD':
                this.metadata.setFormat('container', `DSDIFF/${type}`);
                this.metadata.setFormat('lossless', true);
                return this.readFmt8Chunks(header.chunkSize - BigInt(_common_FourCC_js__WEBPACK_IMPORTED_MODULE_6__.FourCcToken.len));
            default:
                throw new DsdiffContentParseError(`Unsupported DSDIFF type: ${type}`);
        }
    }
    async readFmt8Chunks(remainingSize) {
        while (remainingSize >= _DsdiffToken_js__WEBPACK_IMPORTED_MODULE_5__.ChunkHeader64.len) {
            const chunkHeader = await this.tokenizer.readToken(_DsdiffToken_js__WEBPACK_IMPORTED_MODULE_5__.ChunkHeader64);
            //  If the data is an odd number of bytes in length, a pad byte must be added at the end
            debug(`Chunk id=${chunkHeader.chunkID}`);
            await this.readData(chunkHeader);
            remainingSize -= (BigInt(_DsdiffToken_js__WEBPACK_IMPORTED_MODULE_5__.ChunkHeader64.len) + chunkHeader.chunkSize);
        }
    }
    async readData(header) {
        debug(`Reading data of chunk[ID=${header.chunkID}, size=${header.chunkSize}]`);
        const p0 = this.tokenizer.position;
        switch (header.chunkID.trim()) {
            case 'FVER': { // 3.1 FORMAT VERSION CHUNK
                const version = await this.tokenizer.readToken(token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_LE);
                debug(`DSDIFF version=${version}`);
                break;
            }
            case 'PROP': { // 3.2 PROPERTY CHUNK
                const propType = await this.tokenizer.readToken(_common_FourCC_js__WEBPACK_IMPORTED_MODULE_6__.FourCcToken);
                if (propType !== 'SND ')
                    throw new DsdiffContentParseError('Unexpected PROP-chunk ID');
                await this.handleSoundPropertyChunks(header.chunkSize - BigInt(_common_FourCC_js__WEBPACK_IMPORTED_MODULE_6__.FourCcToken.len));
                break;
            }
            case 'ID3': { // Unofficial ID3 tag support
                const id3_data = await this.tokenizer.readToken(new token_types__WEBPACK_IMPORTED_MODULE_0__.Uint8ArrayType(Number(header.chunkSize)));
                const rst = strtok3__WEBPACK_IMPORTED_MODULE_2__.fromBuffer(id3_data);
                await new _id3v2_ID3v2Parser_js__WEBPACK_IMPORTED_MODULE_7__.ID3v2Parser().parse(this.metadata, rst, this.options);
                break;
            }
            case 'DSD':
                if (this.metadata.format.numberOfChannels) {
                    this.metadata.setFormat('numberOfSamples', Number(header.chunkSize * BigInt(8) / BigInt(this.metadata.format.numberOfChannels)));
                }
                if (this.metadata.format.numberOfSamples && this.metadata.format.sampleRate) {
                    this.metadata.setFormat('duration', this.metadata.format.numberOfSamples / this.metadata.format.sampleRate);
                }
                break;
            default:
                debug(`Ignore chunk[ID=${header.chunkID}, size=${header.chunkSize}]`);
                break;
        }
        const remaining = header.chunkSize - BigInt(this.tokenizer.position - p0);
        if (remaining > 0) {
            debug(`After Parsing chunk, remaining ${remaining} bytes`);
            await this.tokenizer.ignore(Number(remaining));
        }
    }
    async handleSoundPropertyChunks(remainingSize) {
        debug(`Parsing sound-property-chunks, remainingSize=${remainingSize}`);
        while (remainingSize > 0) {
            const sndPropHeader = await this.tokenizer.readToken(_DsdiffToken_js__WEBPACK_IMPORTED_MODULE_5__.ChunkHeader64);
            debug(`Sound-property-chunk[ID=${sndPropHeader.chunkID}, size=${sndPropHeader.chunkSize}]`);
            const p0 = this.tokenizer.position;
            switch (sndPropHeader.chunkID.trim()) {
                case 'FS': { // 3.2.1 Sample Rate Chunk
                    const sampleRate = await this.tokenizer.readToken(token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE);
                    this.metadata.setFormat('sampleRate', sampleRate);
                    break;
                }
                case 'CHNL': { // 3.2.2 Channels Chunk
                    const numChannels = await this.tokenizer.readToken(token_types__WEBPACK_IMPORTED_MODULE_0__.UINT16_BE);
                    this.metadata.setFormat('numberOfChannels', numChannels);
                    await this.handleChannelChunks(sndPropHeader.chunkSize - BigInt(token_types__WEBPACK_IMPORTED_MODULE_0__.UINT16_BE.len));
                    break;
                }
                case 'CMPR': { // 3.2.3 Compression Type Chunk
                    const compressionIdCode = (await this.tokenizer.readToken(_common_FourCC_js__WEBPACK_IMPORTED_MODULE_6__.FourCcToken)).trim();
                    const count = await this.tokenizer.readToken(token_types__WEBPACK_IMPORTED_MODULE_0__.UINT8);
                    const compressionName = await this.tokenizer.readToken(new token_types__WEBPACK_IMPORTED_MODULE_0__.StringType(count, 'ascii'));
                    if (compressionIdCode === 'DSD') {
                        this.metadata.setFormat('lossless', true);
                        this.metadata.setFormat('bitsPerSample', 1);
                    }
                    this.metadata.setFormat('codec', `${compressionIdCode} (${compressionName})`);
                    break;
                }
                case 'ABSS': { // 3.2.4 Absolute Start Time Chunk
                    const hours = await this.tokenizer.readToken(token_types__WEBPACK_IMPORTED_MODULE_0__.UINT16_BE);
                    const minutes = await this.tokenizer.readToken(token_types__WEBPACK_IMPORTED_MODULE_0__.UINT8);
                    const seconds = await this.tokenizer.readToken(token_types__WEBPACK_IMPORTED_MODULE_0__.UINT8);
                    const samples = await this.tokenizer.readToken(token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE);
                    debug(`ABSS ${hours}:${minutes}:${seconds}.${samples}`);
                    break;
                }
                case 'LSCO': { // 3.2.5 Loudspeaker Configuration Chunk
                    const lsConfig = await this.tokenizer.readToken(token_types__WEBPACK_IMPORTED_MODULE_0__.UINT16_BE);
                    debug(`LSCO lsConfig=${lsConfig}`);
                    break;
                }
                default:
                    debug(`Unknown sound-property-chunk[ID=${sndPropHeader.chunkID}, size=${sndPropHeader.chunkSize}]`);
                    await this.tokenizer.ignore(Number(sndPropHeader.chunkSize));
            }
            const remaining = sndPropHeader.chunkSize - BigInt(this.tokenizer.position - p0);
            if (remaining > 0) {
                debug(`After Parsing sound-property-chunk ${sndPropHeader.chunkSize}, remaining ${remaining} bytes`);
                await this.tokenizer.ignore(Number(remaining));
            }
            remainingSize -= BigInt(_DsdiffToken_js__WEBPACK_IMPORTED_MODULE_5__.ChunkHeader64.len) + sndPropHeader.chunkSize;
            debug(`Parsing sound-property-chunks, remainingSize=${remainingSize}`);
        }
        if (this.metadata.format.lossless && this.metadata.format.sampleRate && this.metadata.format.numberOfChannels && this.metadata.format.bitsPerSample) {
            const bitrate = this.metadata.format.sampleRate * this.metadata.format.numberOfChannels * this.metadata.format.bitsPerSample;
            this.metadata.setFormat('bitrate', bitrate);
        }
    }
    async handleChannelChunks(remainingSize) {
        debug(`Parsing channel-chunks, remainingSize=${remainingSize}`);
        const channels = [];
        while (remainingSize >= _common_FourCC_js__WEBPACK_IMPORTED_MODULE_6__.FourCcToken.len) {
            const channelId = await this.tokenizer.readToken(_common_FourCC_js__WEBPACK_IMPORTED_MODULE_6__.FourCcToken);
            debug(`Channel[ID=${channelId}]`);
            channels.push(channelId);
            remainingSize -= BigInt(_common_FourCC_js__WEBPACK_IMPORTED_MODULE_6__.FourCcToken.len);
        }
        debug(`Channels: ${channels.join(', ')}`);
        return channels;
    }
}
//# sourceMappingURL=DsdiffParser.js.map

/***/ }),

/***/ "./node_modules/music-metadata/lib/dsdiff/DsdiffToken.js":
/*!***************************************************************!*\
  !*** ./node_modules/music-metadata/lib/dsdiff/DsdiffToken.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ChunkHeader64: () => (/* binding */ ChunkHeader64)
/* harmony export */ });
/* harmony import */ var token_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! token-types */ "./node_modules/token-types/lib/index.js");
/* harmony import */ var _common_FourCC_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/FourCC.js */ "./node_modules/music-metadata/lib/common/FourCC.js");


/**
 * DSDIFF chunk header
 * The data-size encoding is deviating from EA-IFF 85
 * Ref: http://www.sonicstudio.com/pdf/dsd/DSDIFF_1.5_Spec.pdf
 */
const ChunkHeader64 = {
    len: 12,
    get: (buf, off) => {
        return {
            // Group-ID
            chunkID: _common_FourCC_js__WEBPACK_IMPORTED_MODULE_1__.FourCcToken.get(buf, off),
            // Size
            chunkSize: token_types__WEBPACK_IMPORTED_MODULE_0__.INT64_BE.get(buf, off + 4)
        };
    }
};
//# sourceMappingURL=DsdiffToken.js.map

/***/ })

}]);
//# sourceMappingURL=node_modules_music-metadata_lib_dsdiff_DsdiffParser_js.f7456fa4c9827ca32dfc.js.map