"use strict";
(self["webpackChunktelegram_t"] = self["webpackChunktelegram_t"] || []).push([["vendors-node_modules_music-metadata_lib_ogg_OggParser_js"],{

/***/ "./node_modules/music-metadata/lib/ogg/OggParser.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/OggParser.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   OggContentError: () => (/* binding */ OggContentError),
/* harmony export */   OggParser: () => (/* binding */ OggParser),
/* harmony export */   SegmentTable: () => (/* binding */ SegmentTable)
/* harmony export */ });
/* harmony import */ var token_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! token-types */ "./node_modules/token-types/lib/index.js");
/* harmony import */ var strtok3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! strtok3 */ "./node_modules/strtok3/lib/core.js");
/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js");
/* harmony import */ var _common_Util_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../common/Util.js */ "./node_modules/music-metadata/lib/common/Util.js");
/* harmony import */ var _common_FourCC_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../common/FourCC.js */ "./node_modules/music-metadata/lib/common/FourCC.js");
/* harmony import */ var _common_BasicParser_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/BasicParser.js */ "./node_modules/music-metadata/lib/common/BasicParser.js");
/* harmony import */ var _vorbis_VorbisParser_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./vorbis/VorbisParser.js */ "./node_modules/music-metadata/lib/ogg/vorbis/VorbisParser.js");
/* harmony import */ var _opus_OpusParser_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./opus/OpusParser.js */ "./node_modules/music-metadata/lib/ogg/opus/OpusParser.js");
/* harmony import */ var _speex_SpeexParser_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./speex/SpeexParser.js */ "./node_modules/music-metadata/lib/ogg/speex/SpeexParser.js");
/* harmony import */ var _theora_TheoraParser_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./theora/TheoraParser.js */ "./node_modules/music-metadata/lib/ogg/theora/TheoraParser.js");
/* harmony import */ var _ParseError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ParseError.js */ "./node_modules/music-metadata/lib/ParseError.js");











class OggContentError extends (0,_ParseError_js__WEBPACK_IMPORTED_MODULE_3__.makeUnexpectedFileContentError)('Ogg') {
}
const debug = debug__WEBPACK_IMPORTED_MODULE_2__('music-metadata:parser:ogg');
class SegmentTable {
    static sum(buf, off, len) {
        const dv = new DataView(buf.buffer, 0);
        let s = 0;
        for (let i = off; i < off + len; ++i) {
            s += dv.getUint8(i);
        }
        return s;
    }
    constructor(header) {
        this.len = header.page_segments;
    }
    get(buf, off) {
        return {
            totalPageSize: SegmentTable.sum(buf, off, this.len)
        };
    }
}
/**
 * Parser for Ogg logical bitstream framing
 */
class OggParser extends _common_BasicParser_js__WEBPACK_IMPORTED_MODULE_4__.BasicParser {
    constructor() {
        super(...arguments);
        this.header = null;
        this.pageNumber = 0;
        this.pageConsumer = null;
    }
    /**
     * Parse page
     * @returns {Promise<void>}
     */
    async parse() {
        debug('pos=%s, parsePage()', this.tokenizer.position);
        try {
            let header;
            do {
                header = await this.tokenizer.readToken(OggParser.Header);
                if (header.capturePattern !== 'OggS')
                    throw new OggContentError('Invalid Ogg capture pattern');
                this.metadata.setFormat('container', 'Ogg');
                this.header = header;
                this.pageNumber = header.pageSequenceNo;
                debug('page#=%s, Ogg.id=%s', header.pageSequenceNo, header.capturePattern);
                const segmentTable = await this.tokenizer.readToken(new SegmentTable(header));
                debug('totalPageSize=%s', segmentTable.totalPageSize);
                const pageData = await this.tokenizer.readToken(new token_types__WEBPACK_IMPORTED_MODULE_0__.Uint8ArrayType(segmentTable.totalPageSize));
                debug('firstPage=%s, lastPage=%s, continued=%s', header.headerType.firstPage, header.headerType.lastPage, header.headerType.continued);
                if (header.headerType.firstPage) {
                    const id = new TextDecoder('ascii').decode(pageData.subarray(0, 7));
                    switch (id) {
                        case '\x01vorbis': // Ogg/Vorbis
                            debug('Set page consumer to Ogg/Vorbis');
                            this.pageConsumer = new _vorbis_VorbisParser_js__WEBPACK_IMPORTED_MODULE_5__.VorbisParser(this.metadata, this.options);
                            break;
                        case 'OpusHea': // Ogg/Opus
                            debug('Set page consumer to Ogg/Opus');
                            this.pageConsumer = new _opus_OpusParser_js__WEBPACK_IMPORTED_MODULE_6__.OpusParser(this.metadata, this.options, this.tokenizer);
                            break;
                        case 'Speex  ': // Ogg/Speex
                            debug('Set page consumer to Ogg/Speex');
                            this.pageConsumer = new _speex_SpeexParser_js__WEBPACK_IMPORTED_MODULE_7__.SpeexParser(this.metadata, this.options, this.tokenizer);
                            break;
                        case 'fishead':
                        case '\x00theora': // Ogg/Theora
                            debug('Set page consumer to Ogg/Theora');
                            this.pageConsumer = new _theora_TheoraParser_js__WEBPACK_IMPORTED_MODULE_8__.TheoraParser(this.metadata, this.options, this.tokenizer);
                            break;
                        default:
                            throw new OggContentError(`gg audio-codec not recognized (id=${id})`);
                    }
                }
                await this.pageConsumer.parsePage(header, pageData);
            } while (!header.headerType.lastPage);
        }
        catch (err) {
            if (err instanceof Error) {
                if (err instanceof strtok3__WEBPACK_IMPORTED_MODULE_1__.EndOfStreamError) {
                    this.metadata.addWarning('Last OGG-page is not marked with last-page flag');
                    debug("End-of-stream");
                    this.metadata.addWarning('Last OGG-page is not marked with last-page flag');
                    if (this.header) {
                        this.pageConsumer.calculateDuration(this.header);
                    }
                }
                else if (err.message.startsWith('FourCC')) {
                    if (this.pageNumber > 0) {
                        // ignore this error: work-around if last OGG-page is not marked with last-page flag
                        this.metadata.addWarning('Invalid FourCC ID, maybe last OGG-page is not marked with last-page flag');
                        await this.pageConsumer.flush();
                    }
                }
            }
            else
                throw err;
        }
    }
}
OggParser.Header = {
    len: 27,
    get: (buf, off) => {
        return {
            capturePattern: _common_FourCC_js__WEBPACK_IMPORTED_MODULE_9__.FourCcToken.get(buf, off),
            version: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT8.get(buf, off + 4),
            headerType: {
                continued: _common_Util_js__WEBPACK_IMPORTED_MODULE_10__.getBit(buf, off + 5, 0),
                firstPage: _common_Util_js__WEBPACK_IMPORTED_MODULE_10__.getBit(buf, off + 5, 1),
                lastPage: _common_Util_js__WEBPACK_IMPORTED_MODULE_10__.getBit(buf, off + 5, 2)
            },
            // packet_flag: Token.UINT8.get(buf, off + 5),
            absoluteGranulePosition: Number(token_types__WEBPACK_IMPORTED_MODULE_0__.UINT64_LE.get(buf, off + 6)),
            streamSerialNumber: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_LE.get(buf, off + 14),
            pageSequenceNo: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_LE.get(buf, off + 18),
            pageChecksum: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_LE.get(buf, off + 22),
            page_segments: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT8.get(buf, off + 26)
        };
    }
};
//# sourceMappingURL=OggParser.js.map

/***/ }),

/***/ "./node_modules/music-metadata/lib/ogg/opus/Opus.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/opus/Opus.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IdHeader: () => (/* binding */ IdHeader),
/* harmony export */   OpusContentError: () => (/* binding */ OpusContentError)
/* harmony export */ });
/* harmony import */ var token_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! token-types */ "./node_modules/token-types/lib/index.js");
/* harmony import */ var _ParseError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ParseError.js */ "./node_modules/music-metadata/lib/ParseError.js");


class OpusContentError extends (0,_ParseError_js__WEBPACK_IMPORTED_MODULE_1__.makeUnexpectedFileContentError)('Opus') {
}
/**
 * Opus ID Header parser
 * Ref: https://wiki.xiph.org/OggOpus#ID_Header
 */
class IdHeader {
    constructor(len) {
        if (len < 19) {
            throw new OpusContentError('ID-header-page 0 should be at least 19 bytes long');
        }
        this.len = len;
    }
    get(buf, off) {
        return {
            magicSignature: new token_types__WEBPACK_IMPORTED_MODULE_0__.StringType(8, 'ascii').get(buf, off + 0),
            version: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT8.get(buf, off + 8),
            channelCount: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT8.get(buf, off + 9),
            preSkip: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT16_LE.get(buf, off + 10),
            inputSampleRate: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_LE.get(buf, off + 12),
            outputGain: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT16_LE.get(buf, off + 16),
            channelMapping: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT8.get(buf, off + 18)
        };
    }
}
//# sourceMappingURL=Opus.js.map

/***/ }),

/***/ "./node_modules/music-metadata/lib/ogg/opus/OpusParser.js":
/*!****************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/opus/OpusParser.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   OpusParser: () => (/* binding */ OpusParser)
/* harmony export */ });
/* harmony import */ var token_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! token-types */ "./node_modules/token-types/lib/index.js");
/* harmony import */ var _vorbis_VorbisParser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../vorbis/VorbisParser.js */ "./node_modules/music-metadata/lib/ogg/vorbis/VorbisParser.js");
/* harmony import */ var _Opus_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Opus.js */ "./node_modules/music-metadata/lib/ogg/opus/Opus.js");




/**
 * Opus parser
 * Internet Engineering Task Force (IETF) - RFC 6716
 * Used by OggParser
 */
class OpusParser extends _vorbis_VorbisParser_js__WEBPACK_IMPORTED_MODULE_1__.VorbisParser {
    constructor(metadata, options, tokenizer) {
        super(metadata, options);
        this.idHeader = null;
        this.lastPos = -1;
        this.tokenizer = tokenizer;
    }
    /**
     * Parse first Opus Ogg page
     * @param {IPageHeader} header
     * @param {Uint8Array} pageData
     */
    parseFirstPage(header, pageData) {
        this.metadata.setFormat('codec', 'Opus');
        // Parse Opus ID Header
        this.idHeader = new _Opus_js__WEBPACK_IMPORTED_MODULE_2__.IdHeader(pageData.length).get(pageData, 0);
        if (this.idHeader.magicSignature !== "OpusHead")
            throw new _Opus_js__WEBPACK_IMPORTED_MODULE_2__.OpusContentError("Illegal ogg/Opus magic-signature");
        this.metadata.setFormat('sampleRate', this.idHeader.inputSampleRate);
        this.metadata.setFormat('numberOfChannels', this.idHeader.channelCount);
    }
    async parseFullPage(pageData) {
        const magicSignature = new token_types__WEBPACK_IMPORTED_MODULE_0__.StringType(8, 'ascii').get(pageData, 0);
        switch (magicSignature) {
            case 'OpusTags':
                await this.parseUserCommentList(pageData, 8);
                this.lastPos = this.tokenizer.position - pageData.length;
                break;
            default:
                break;
        }
    }
    calculateDuration(header) {
        if (this.metadata.format.sampleRate && header.absoluteGranulePosition >= 0) {
            // Calculate duration
            const pos_48bit = header.absoluteGranulePosition - this.idHeader.preSkip;
            this.metadata.setFormat('numberOfSamples', pos_48bit);
            this.metadata.setFormat('duration', pos_48bit / 48000);
            if (this.lastPos !== -1 && this.tokenizer.fileInfo.size && this.metadata.format.duration) {
                const dataSize = this.tokenizer.fileInfo.size - this.lastPos;
                this.metadata.setFormat('bitrate', 8 * dataSize / this.metadata.format.duration);
            }
        }
    }
}
//# sourceMappingURL=OpusParser.js.map

/***/ }),

/***/ "./node_modules/music-metadata/lib/ogg/speex/Speex.js":
/*!************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/speex/Speex.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Header: () => (/* binding */ Header)
/* harmony export */ });
/* harmony import */ var token_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! token-types */ "./node_modules/token-types/lib/index.js");
/* harmony import */ var _common_Util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/Util.js */ "./node_modules/music-metadata/lib/common/Util.js");


/**
 * Speex Header Packet
 * Ref: https://www.speex.org/docs/manual/speex-manual/node8.html#SECTION00830000000000000000
 */
const Header = {
    len: 80,
    get: (buf, off) => {
        return {
            speex: new token_types__WEBPACK_IMPORTED_MODULE_0__.StringType(8, 'ascii').get(buf, off + 0),
            version: _common_Util_js__WEBPACK_IMPORTED_MODULE_1__.trimRightNull(new token_types__WEBPACK_IMPORTED_MODULE_0__.StringType(20, 'ascii').get(buf, off + 8)),
            version_id: token_types__WEBPACK_IMPORTED_MODULE_0__.INT32_LE.get(buf, off + 28),
            header_size: token_types__WEBPACK_IMPORTED_MODULE_0__.INT32_LE.get(buf, off + 32),
            rate: token_types__WEBPACK_IMPORTED_MODULE_0__.INT32_LE.get(buf, off + 36),
            mode: token_types__WEBPACK_IMPORTED_MODULE_0__.INT32_LE.get(buf, off + 40),
            mode_bitstream_version: token_types__WEBPACK_IMPORTED_MODULE_0__.INT32_LE.get(buf, off + 44),
            nb_channels: token_types__WEBPACK_IMPORTED_MODULE_0__.INT32_LE.get(buf, off + 48),
            bitrate: token_types__WEBPACK_IMPORTED_MODULE_0__.INT32_LE.get(buf, off + 52),
            frame_size: token_types__WEBPACK_IMPORTED_MODULE_0__.INT32_LE.get(buf, off + 56),
            vbr: token_types__WEBPACK_IMPORTED_MODULE_0__.INT32_LE.get(buf, off + 60),
            frames_per_packet: token_types__WEBPACK_IMPORTED_MODULE_0__.INT32_LE.get(buf, off + 64),
            extra_headers: token_types__WEBPACK_IMPORTED_MODULE_0__.INT32_LE.get(buf, off + 68),
            reserved1: token_types__WEBPACK_IMPORTED_MODULE_0__.INT32_LE.get(buf, off + 72),
            reserved2: token_types__WEBPACK_IMPORTED_MODULE_0__.INT32_LE.get(buf, off + 76)
        };
    }
};
//# sourceMappingURL=Speex.js.map

/***/ }),

/***/ "./node_modules/music-metadata/lib/ogg/speex/SpeexParser.js":
/*!******************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/speex/SpeexParser.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SpeexParser: () => (/* binding */ SpeexParser)
/* harmony export */ });
/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js");
/* harmony import */ var _vorbis_VorbisParser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../vorbis/VorbisParser.js */ "./node_modules/music-metadata/lib/ogg/vorbis/VorbisParser.js");
/* harmony import */ var _Speex_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Speex.js */ "./node_modules/music-metadata/lib/ogg/speex/Speex.js");



const debug = debug__WEBPACK_IMPORTED_MODULE_0__('music-metadata:parser:ogg:speex');
/**
 * Speex, RFC 5574
 * Ref:
 * - https://www.speex.org/docs/manual/speex-manual/
 * - https://tools.ietf.org/html/rfc5574
 */
class SpeexParser extends _vorbis_VorbisParser_js__WEBPACK_IMPORTED_MODULE_1__.VorbisParser {
    constructor(metadata, options, tokenizer) {
        super(metadata, options);
        this.tokenizer = tokenizer;
    }
    /**
     * Parse first Speex Ogg page
     * @param {IPageHeader} header
     * @param {Uint8Array} pageData
     */
    parseFirstPage(header, pageData) {
        debug('First Ogg/Speex page');
        const speexHeader = _Speex_js__WEBPACK_IMPORTED_MODULE_2__.Header.get(pageData, 0);
        this.metadata.setFormat('codec', `Speex ${speexHeader.version}`);
        this.metadata.setFormat('numberOfChannels', speexHeader.nb_channels);
        this.metadata.setFormat('sampleRate', speexHeader.rate);
        if (speexHeader.bitrate !== -1) {
            this.metadata.setFormat('bitrate', speexHeader.bitrate);
        }
    }
}
//# sourceMappingURL=SpeexParser.js.map

/***/ }),

/***/ "./node_modules/music-metadata/lib/ogg/theora/Theora.js":
/*!**************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/theora/Theora.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IdentificationHeader: () => (/* binding */ IdentificationHeader)
/* harmony export */ });
/* harmony import */ var token_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! token-types */ "./node_modules/token-types/lib/index.js");

/**
 * 6.2 Identification Header
 * Ref: https://theora.org/doc/Theora.pdf: 6.2 Identification Header Decode
 */
const IdentificationHeader = {
    len: 42,
    get: (buf, off) => {
        return {
            id: new token_types__WEBPACK_IMPORTED_MODULE_0__.StringType(7, 'ascii').get(buf, off),
            vmaj: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT8.get(buf, off + 7),
            vmin: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT8.get(buf, off + 8),
            vrev: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT8.get(buf, off + 9),
            vmbw: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT16_BE.get(buf, off + 10),
            vmbh: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT16_BE.get(buf, off + 17),
            nombr: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT24_BE.get(buf, off + 37),
            nqual: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT8.get(buf, off + 40)
        };
    }
};
//# sourceMappingURL=Theora.js.map

/***/ }),

/***/ "./node_modules/music-metadata/lib/ogg/theora/TheoraParser.js":
/*!********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/theora/TheoraParser.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TheoraParser: () => (/* binding */ TheoraParser)
/* harmony export */ });
/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js");
/* harmony import */ var _Theora_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Theora.js */ "./node_modules/music-metadata/lib/ogg/theora/Theora.js");


const debug = debug__WEBPACK_IMPORTED_MODULE_0__('music-metadata:parser:ogg:theora');
/**
 * Ref:
 * - https://theora.org/doc/Theora.pdf
 */
class TheoraParser {
    constructor(metadata, options, tokenizer) {
        this.metadata = metadata;
        this.tokenizer = tokenizer;
    }
    /**
     * Vorbis 1 parser
     * @param header Ogg Page Header
     * @param pageData Page data
     */
    async parsePage(header, pageData) {
        if (header.headerType.firstPage) {
            await this.parseFirstPage(header, pageData);
        }
    }
    async flush() {
        debug('flush');
    }
    calculateDuration(header) {
        debug('duration calculation not implemented');
    }
    /**
     * Parse first Theora Ogg page. the initial identification header packet
     * @param {IPageHeader} header
     * @param {Buffer} pageData
     */
    async parseFirstPage(header, pageData) {
        debug('First Ogg/Theora page');
        this.metadata.setFormat('codec', 'Theora');
        const idHeader = _Theora_js__WEBPACK_IMPORTED_MODULE_1__.IdentificationHeader.get(pageData, 0);
        this.metadata.setFormat('bitrate', idHeader.nombr);
    }
}
//# sourceMappingURL=TheoraParser.js.map

/***/ }),

/***/ "./node_modules/music-metadata/lib/ogg/vorbis/Vorbis.js":
/*!**************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/vorbis/Vorbis.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CommonHeader: () => (/* binding */ CommonHeader),
/* harmony export */   IdentificationHeader: () => (/* binding */ IdentificationHeader),
/* harmony export */   VorbisPictureToken: () => (/* binding */ VorbisPictureToken)
/* harmony export */ });
/* harmony import */ var token_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! token-types */ "./node_modules/token-types/lib/index.js");
/* harmony import */ var _id3v2_ID3v2Token_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../id3v2/ID3v2Token.js */ "./node_modules/music-metadata/lib/id3v2/ID3v2Token.js");


/**
 * Parse the METADATA_BLOCK_PICTURE
 * Ref: https://wiki.xiph.org/VorbisComment#METADATA_BLOCK_PICTURE
 * Ref: https://xiph.org/flac/format.html#metadata_block_picture
 * // ToDo: move to ID3 / APIC?
 */
class VorbisPictureToken {
    static fromBase64(base64str) {
        return VorbisPictureToken.fromBuffer(Uint8Array.from(atob(base64str), c => c.charCodeAt(0)));
    }
    static fromBuffer(buffer) {
        const pic = new VorbisPictureToken(buffer.length);
        return pic.get(buffer, 0);
    }
    constructor(len) {
        this.len = len;
    }
    get(buffer, offset) {
        const type = _id3v2_ID3v2Token_js__WEBPACK_IMPORTED_MODULE_1__.AttachedPictureType[token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE.get(buffer, offset)];
        offset += 4;
        const mimeLen = token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE.get(buffer, offset);
        offset += 4;
        const format = new token_types__WEBPACK_IMPORTED_MODULE_0__.StringType(mimeLen, 'utf-8').get(buffer, offset);
        offset += mimeLen;
        const descLen = token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE.get(buffer, offset);
        offset += 4;
        const description = new token_types__WEBPACK_IMPORTED_MODULE_0__.StringType(descLen, 'utf-8').get(buffer, offset);
        offset += descLen;
        const width = token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE.get(buffer, offset);
        offset += 4;
        const height = token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE.get(buffer, offset);
        offset += 4;
        const colour_depth = token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE.get(buffer, offset);
        offset += 4;
        const indexed_color = token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE.get(buffer, offset);
        offset += 4;
        const picDataLen = token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE.get(buffer, offset);
        offset += 4;
        const data = Uint8Array.from(buffer.slice(offset, offset + picDataLen));
        return {
            type,
            format,
            description,
            width,
            height,
            colour_depth,
            indexed_color,
            data
        };
    }
}
/**
 * Comment header decoder
 * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-620004.2.1
 */
const CommonHeader = {
    len: 7,
    get: (buf, off) => {
        return {
            packetType: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT8.get(buf, off),
            vorbis: new token_types__WEBPACK_IMPORTED_MODULE_0__.StringType(6, 'ascii').get(buf, off + 1)
        };
    }
};
/**
 * Identification header decoder
 * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-630004.2.2
 */
const IdentificationHeader = {
    len: 23,
    get: (uint8Array, off) => {
        return {
            version: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_LE.get(uint8Array, off + 0),
            channelMode: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT8.get(uint8Array, off + 4),
            sampleRate: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_LE.get(uint8Array, off + 5),
            bitrateMax: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_LE.get(uint8Array, off + 9),
            bitrateNominal: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_LE.get(uint8Array, off + 13),
            bitrateMin: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_LE.get(uint8Array, off + 17)
        };
    }
};
//# sourceMappingURL=Vorbis.js.map

/***/ }),

/***/ "./node_modules/music-metadata/lib/ogg/vorbis/VorbisDecoder.js":
/*!*********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/vorbis/VorbisDecoder.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VorbisDecoder: () => (/* binding */ VorbisDecoder)
/* harmony export */ });
/* harmony import */ var token_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! token-types */ "./node_modules/token-types/lib/index.js");

class VorbisDecoder {
    constructor(data, offset) {
        this.data = data;
        this.offset = offset;
    }
    readInt32() {
        const value = token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_LE.get(this.data, this.offset);
        this.offset += 4;
        return value;
    }
    readStringUtf8() {
        const len = this.readInt32();
        const value = new TextDecoder('utf-8').decode(this.data.subarray(this.offset, this.offset + len));
        this.offset += len;
        return value;
    }
    parseUserComment() {
        const offset0 = this.offset;
        const v = this.readStringUtf8();
        const idx = v.indexOf('=');
        return {
            key: v.slice(0, idx).toUpperCase(),
            value: v.slice(idx + 1),
            len: this.offset - offset0
        };
    }
}
//# sourceMappingURL=VorbisDecoder.js.map

/***/ }),

/***/ "./node_modules/music-metadata/lib/ogg/vorbis/VorbisParser.js":
/*!********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/vorbis/VorbisParser.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VorbisContentError: () => (/* binding */ VorbisContentError),
/* harmony export */   VorbisParser: () => (/* binding */ VorbisParser)
/* harmony export */ });
/* harmony import */ var token_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! token-types */ "./node_modules/token-types/lib/index.js");
/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js");
/* harmony import */ var _VorbisDecoder_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./VorbisDecoder.js */ "./node_modules/music-metadata/lib/ogg/vorbis/VorbisDecoder.js");
/* harmony import */ var _Vorbis_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Vorbis.js */ "./node_modules/music-metadata/lib/ogg/vorbis/Vorbis.js");
/* harmony import */ var _ParseError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../ParseError.js */ "./node_modules/music-metadata/lib/ParseError.js");





const debug = debug__WEBPACK_IMPORTED_MODULE_1__('music-metadata:parser:ogg:vorbis1');
class VorbisContentError extends (0,_ParseError_js__WEBPACK_IMPORTED_MODULE_2__.makeUnexpectedFileContentError)('Vorbis') {
}
/**
 * Vorbis 1 Parser.
 * Used by OggParser
 */
class VorbisParser {
    constructor(metadata, options) {
        this.pageSegments = [];
        this.metadata = metadata;
        this.options = options;
    }
    /**
     * Vorbis 1 parser
     * @param header Ogg Page Header
     * @param pageData Page data
     */
    async parsePage(header, pageData) {
        if (header.headerType.firstPage) {
            this.parseFirstPage(header, pageData);
        }
        else {
            if (header.headerType.continued) {
                if (this.pageSegments.length === 0) {
                    throw new VorbisContentError('Cannot continue on previous page');
                }
                this.pageSegments.push(pageData);
            }
            if (header.headerType.lastPage || !header.headerType.continued) {
                // Flush page segments
                if (this.pageSegments.length > 0) {
                    const fullPage = VorbisParser.mergeUint8Arrays(this.pageSegments);
                    await this.parseFullPage(fullPage);
                }
                // Reset page segments
                this.pageSegments = header.headerType.lastPage ? [] : [pageData];
            }
        }
        if (header.headerType.lastPage) {
            this.calculateDuration(header);
        }
    }
    static mergeUint8Arrays(arrays) {
        const totalSize = arrays.reduce((acc, e) => acc + e.length, 0);
        const merged = new Uint8Array(totalSize);
        arrays.forEach((array, i, _arrays) => {
            const offset = _arrays.slice(0, i).reduce((acc, e) => acc + e.length, 0);
            merged.set(array, offset);
        });
        return merged;
    }
    async flush() {
        await this.parseFullPage(VorbisParser.mergeUint8Arrays(this.pageSegments));
    }
    async parseUserComment(pageData, offset) {
        const decoder = new _VorbisDecoder_js__WEBPACK_IMPORTED_MODULE_3__.VorbisDecoder(pageData, offset);
        const tag = decoder.parseUserComment();
        await this.addTag(tag.key, tag.value);
        return tag.len;
    }
    async addTag(id, value) {
        if (id === 'METADATA_BLOCK_PICTURE' && (typeof value === 'string')) {
            if (this.options.skipCovers) {
                debug("Ignore picture");
                return;
            }
            value = _Vorbis_js__WEBPACK_IMPORTED_MODULE_4__.VorbisPictureToken.fromBase64(value);
            debug(`Push picture: id=${id}, format=${value.format}`);
        }
        else {
            debug(`Push tag: id=${id}, value=${value}`);
        }
        await this.metadata.addTag('vorbis', id, value);
    }
    calculateDuration(header) {
        if (this.metadata.format.sampleRate && header.absoluteGranulePosition >= 0) {
            // Calculate duration
            this.metadata.setFormat('numberOfSamples', header.absoluteGranulePosition);
            this.metadata.setFormat('duration', header.absoluteGranulePosition / this.metadata.format.sampleRate);
        }
    }
    /**
     * Parse first Ogg/Vorbis page
     * @param header
     * @param pageData
     */
    parseFirstPage(header, pageData) {
        this.metadata.setFormat('codec', 'Vorbis I');
        debug('Parse first page');
        // Parse  Vorbis common header
        const commonHeader = _Vorbis_js__WEBPACK_IMPORTED_MODULE_4__.CommonHeader.get(pageData, 0);
        if (commonHeader.vorbis !== 'vorbis')
            throw new VorbisContentError('Metadata does not look like Vorbis');
        if (commonHeader.packetType === 1) {
            const idHeader = _Vorbis_js__WEBPACK_IMPORTED_MODULE_4__.IdentificationHeader.get(pageData, _Vorbis_js__WEBPACK_IMPORTED_MODULE_4__.CommonHeader.len);
            this.metadata.setFormat('sampleRate', idHeader.sampleRate);
            this.metadata.setFormat('bitrate', idHeader.bitrateNominal);
            this.metadata.setFormat('numberOfChannels', idHeader.channelMode);
            debug('sample-rate=%s[hz], bitrate=%s[b/s], channel-mode=%s', idHeader.sampleRate, idHeader.bitrateNominal, idHeader.channelMode);
        }
        else
            throw new VorbisContentError('First Ogg page should be type 1: the identification header');
    }
    async parseFullPage(pageData) {
        // New page
        const commonHeader = _Vorbis_js__WEBPACK_IMPORTED_MODULE_4__.CommonHeader.get(pageData, 0);
        debug('Parse full page: type=%s, byteLength=%s', commonHeader.packetType, pageData.byteLength);
        switch (commonHeader.packetType) {
            case 3: //  type 3: comment header
                return this.parseUserCommentList(pageData, _Vorbis_js__WEBPACK_IMPORTED_MODULE_4__.CommonHeader.len);
            case 1: // type 1: the identification header
            case 5: // type 5: setup header type
                break; // ignore
        }
    }
    /**
     * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-840005.2
     */
    async parseUserCommentList(pageData, offset) {
        const strLen = token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_LE.get(pageData, offset);
        offset += 4;
        // const vendorString = new Token.StringType(strLen, 'utf-8').get(pageData, offset);
        offset += strLen;
        let userCommentListLength = token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_LE.get(pageData, offset);
        offset += 4;
        while (userCommentListLength-- > 0) {
            offset += (await this.parseUserComment(pageData, offset));
        }
    }
}
//# sourceMappingURL=VorbisParser.js.map

/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_music-metadata_lib_ogg_OggParser_js.e392a491ae2d30596f2e.js.map