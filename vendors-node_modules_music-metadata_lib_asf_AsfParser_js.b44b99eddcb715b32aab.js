"use strict";
(self["webpackChunktelegram_t"] = self["webpackChunktelegram_t"] || []).push([["vendors-node_modules_music-metadata_lib_asf_AsfParser_js"],{

/***/ "./node_modules/music-metadata/lib/asf/AsfObject.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/asf/AsfObject.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AsfContentParseError: () => (/* binding */ AsfContentParseError),
/* harmony export */   ContentDescriptionObjectState: () => (/* binding */ ContentDescriptionObjectState),
/* harmony export */   DataType: () => (/* binding */ DataType),
/* harmony export */   ExtendedContentDescriptionObjectState: () => (/* binding */ ExtendedContentDescriptionObjectState),
/* harmony export */   ExtendedStreamPropertiesObjectState: () => (/* binding */ ExtendedStreamPropertiesObjectState),
/* harmony export */   FilePropertiesObject: () => (/* binding */ FilePropertiesObject),
/* harmony export */   HeaderExtensionObject: () => (/* binding */ HeaderExtensionObject),
/* harmony export */   HeaderObjectToken: () => (/* binding */ HeaderObjectToken),
/* harmony export */   IgnoreObjectState: () => (/* binding */ IgnoreObjectState),
/* harmony export */   MetadataLibraryObjectState: () => (/* binding */ MetadataLibraryObjectState),
/* harmony export */   MetadataObjectState: () => (/* binding */ MetadataObjectState),
/* harmony export */   State: () => (/* binding */ State),
/* harmony export */   StreamPropertiesObject: () => (/* binding */ StreamPropertiesObject),
/* harmony export */   TopLevelHeaderObjectToken: () => (/* binding */ TopLevelHeaderObjectToken),
/* harmony export */   WmPictureToken: () => (/* binding */ WmPictureToken),
/* harmony export */   readCodecEntries: () => (/* binding */ readCodecEntries)
/* harmony export */ });
/* harmony import */ var token_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! token-types */ "./node_modules/token-types/lib/index.js");
/* harmony import */ var _common_Util_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/Util.js */ "./node_modules/music-metadata/lib/common/Util.js");
/* harmony import */ var _GUID_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GUID.js */ "./node_modules/music-metadata/lib/asf/GUID.js");
/* harmony import */ var _AsfUtil_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AsfUtil.js */ "./node_modules/music-metadata/lib/asf/AsfUtil.js");
/* harmony import */ var _id3v2_ID3v2Token_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../id3v2/ID3v2Token.js */ "./node_modules/music-metadata/lib/id3v2/ID3v2Token.js");
/* harmony import */ var _ParseError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ParseError.js */ "./node_modules/music-metadata/lib/ParseError.js");
// ASF Objects






class AsfContentParseError extends (0,_ParseError_js__WEBPACK_IMPORTED_MODULE_1__.makeUnexpectedFileContentError)('ASF') {
}
/**
 * Data Type: Specifies the type of information being stored. The following values are recognized.
 */
const DataType = {
    /**
     * Unicode string. The data consists of a sequence of Unicode characters.
     */
    UnicodeString: 0,
    /**
     * BYTE array. The type of data is implementation-specific.
     */
    ByteArray: 1,
    /**
     * BOOL. The data is 2 bytes long and should be interpreted as a 16-bit unsigned integer. Only 0x0000 or 0x0001 are permitted values.
     */
    Bool: 2,
    /**
     * DWORD. The data is 4 bytes long and should be interpreted as a 32-bit unsigned integer.
     */
    DWord: 3,
    /**
     * QWORD. The data is 8 bytes long and should be interpreted as a 64-bit unsigned integer.
     */
    QWord: 4,
    /**
     * WORD. The data is 2 bytes long and should be interpreted as a 16-bit unsigned integer.
     */
    Word: 5
};
/**
 * Token for: 3. ASF top-level Header Object
 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3
 */
const TopLevelHeaderObjectToken = {
    len: 30,
    get: (buf, off) => {
        return {
            objectId: _GUID_js__WEBPACK_IMPORTED_MODULE_2__["default"].fromBin(buf, off),
            objectSize: Number(token_types__WEBPACK_IMPORTED_MODULE_0__.UINT64_LE.get(buf, off + 16)),
            numberOfHeaderObjects: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_LE.get(buf, off + 24)
            // Reserved: 2 bytes
        };
    }
};
/**
 * Token for: 3.1 Header Object (mandatory, one only)
 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_1
 */
const HeaderObjectToken = {
    len: 24,
    get: (buf, off) => {
        return {
            objectId: _GUID_js__WEBPACK_IMPORTED_MODULE_2__["default"].fromBin(buf, off),
            objectSize: Number(token_types__WEBPACK_IMPORTED_MODULE_0__.UINT64_LE.get(buf, off + 16))
        };
    }
};
class State {
    constructor(header) {
        this.len = Number(header.objectSize) - HeaderObjectToken.len;
    }
    postProcessTag(tags, name, valueType, data) {
        if (name === 'WM/Picture') {
            tags.push({ id: name, value: WmPictureToken.fromBuffer(data) });
        }
        else {
            const parseAttr = (0,_AsfUtil_js__WEBPACK_IMPORTED_MODULE_3__.getParserForAttr)(valueType);
            if (!parseAttr) {
                throw new AsfContentParseError(`unexpected value headerType: ${valueType}`);
            }
            tags.push({ id: name, value: parseAttr(data) });
        }
    }
}
// ToDo: use ignore type
class IgnoreObjectState extends State {
    get(buf, off) {
        return null;
    }
}
/**
 * Token for: 3.2: File Properties Object (mandatory, one only)
 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_2
 */
class FilePropertiesObject extends State {
    get(buf, off) {
        return {
            fileId: _GUID_js__WEBPACK_IMPORTED_MODULE_2__["default"].fromBin(buf, off),
            fileSize: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT64_LE.get(buf, off + 16),
            creationDate: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT64_LE.get(buf, off + 24),
            dataPacketsCount: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT64_LE.get(buf, off + 32),
            playDuration: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT64_LE.get(buf, off + 40),
            sendDuration: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT64_LE.get(buf, off + 48),
            preroll: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT64_LE.get(buf, off + 56),
            flags: {
                broadcast: _common_Util_js__WEBPACK_IMPORTED_MODULE_4__.getBit(buf, off + 64, 24),
                seekable: _common_Util_js__WEBPACK_IMPORTED_MODULE_4__.getBit(buf, off + 64, 25)
            },
            // flagsNumeric: Token.UINT32_LE.get(buf, off + 64),
            minimumDataPacketSize: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_LE.get(buf, off + 68),
            maximumDataPacketSize: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_LE.get(buf, off + 72),
            maximumBitrate: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_LE.get(buf, off + 76)
        };
    }
}
FilePropertiesObject.guid = _GUID_js__WEBPACK_IMPORTED_MODULE_2__["default"].FilePropertiesObject;
/**
 * Token for: 3.3 Stream Properties Object (mandatory, one per stream)
 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_3
 */
class StreamPropertiesObject extends State {
    get(buf, off) {
        return {
            streamType: _GUID_js__WEBPACK_IMPORTED_MODULE_2__["default"].decodeMediaType(_GUID_js__WEBPACK_IMPORTED_MODULE_2__["default"].fromBin(buf, off)),
            errorCorrectionType: _GUID_js__WEBPACK_IMPORTED_MODULE_2__["default"].fromBin(buf, off + 8)
            // ToDo
        };
    }
}
StreamPropertiesObject.guid = _GUID_js__WEBPACK_IMPORTED_MODULE_2__["default"].StreamPropertiesObject;
/**
 * 3.4: Header Extension Object (mandatory, one only)
 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_4
 */
class HeaderExtensionObject {
    constructor() {
        this.len = 22;
    }
    get(buf, off) {
        const view = new DataView(buf.buffer, off);
        return {
            reserved1: _GUID_js__WEBPACK_IMPORTED_MODULE_2__["default"].fromBin(buf, off),
            reserved2: view.getUint16(16, true),
            extensionDataSize: view.getUint16(18, true)
        };
    }
}
HeaderExtensionObject.guid = _GUID_js__WEBPACK_IMPORTED_MODULE_2__["default"].HeaderExtensionObject;
/**
 * 3.5: The Codec List Object provides user-friendly information about the codecs and formats used to encode the content found in the ASF file.
 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_5
 */
const CodecListObjectHeader = {
    len: 20,
    get: (buf, off) => {
        const view = new DataView(buf.buffer, off);
        return {
            entryCount: view.getUint16(16, true)
        };
    }
};
async function readString(tokenizer) {
    const length = await tokenizer.readNumber(token_types__WEBPACK_IMPORTED_MODULE_0__.UINT16_LE);
    return (await tokenizer.readToken(new token_types__WEBPACK_IMPORTED_MODULE_0__.StringType(length * 2, 'utf-16le'))).replace('\0', '');
}
/**
 * 3.5: Read the Codec-List-Object, which provides user-friendly information about the codecs and formats used to encode the content found in the ASF file.
 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_5
 */
async function readCodecEntries(tokenizer) {
    const codecHeader = await tokenizer.readToken(CodecListObjectHeader);
    const entries = [];
    for (let i = 0; i < codecHeader.entryCount; ++i) {
        entries.push(await readCodecEntry(tokenizer));
    }
    return entries;
}
async function readInformation(tokenizer) {
    const length = await tokenizer.readNumber(token_types__WEBPACK_IMPORTED_MODULE_0__.UINT16_LE);
    const buf = new Uint8Array(length);
    await tokenizer.readBuffer(buf);
    return buf;
}
/**
 * Read Codec-Entries
 * @param tokenizer
 */
async function readCodecEntry(tokenizer) {
    const type = await tokenizer.readNumber(token_types__WEBPACK_IMPORTED_MODULE_0__.UINT16_LE);
    return {
        type: {
            videoCodec: (type & 0x0001) === 0x0001,
            audioCodec: (type & 0x0002) === 0x0002
        },
        codecName: await readString(tokenizer),
        description: await readString(tokenizer),
        information: await readInformation(tokenizer)
    };
}
/**
 * 3.10 Content Description Object (optional, one only)
 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_10
 */
class ContentDescriptionObjectState extends State {
    get(buf, off) {
        const tags = [];
        const view = new DataView(buf.buffer, off);
        let pos = 10;
        for (let i = 0; i < ContentDescriptionObjectState.contentDescTags.length; ++i) {
            const length = view.getUint16(i * 2, true);
            if (length > 0) {
                const tagName = ContentDescriptionObjectState.contentDescTags[i];
                const end = pos + length;
                tags.push({ id: tagName, value: (0,_AsfUtil_js__WEBPACK_IMPORTED_MODULE_3__.parseUnicodeAttr)(buf.slice(off + pos, off + end)) });
                pos = end;
            }
        }
        return tags;
    }
}
ContentDescriptionObjectState.guid = _GUID_js__WEBPACK_IMPORTED_MODULE_2__["default"].ContentDescriptionObject;
ContentDescriptionObjectState.contentDescTags = ['Title', 'Author', 'Copyright', 'Description', 'Rating'];
/**
 * 3.11 Extended Content Description Object (optional, one only)
 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_11
 */
class ExtendedContentDescriptionObjectState extends State {
    get(buf, off) {
        const tags = [];
        const view = new DataView(buf.buffer, off);
        const attrCount = view.getUint16(0, true);
        let pos = 2;
        for (let i = 0; i < attrCount; i += 1) {
            const nameLen = view.getUint16(pos, true);
            pos += 2;
            const name = (0,_AsfUtil_js__WEBPACK_IMPORTED_MODULE_3__.parseUnicodeAttr)(buf.slice(off + pos, off + pos + nameLen));
            pos += nameLen;
            const valueType = view.getUint16(pos, true);
            pos += 2;
            const valueLen = view.getUint16(pos, true);
            pos += 2;
            const value = buf.slice(off + pos, off + pos + valueLen);
            pos += valueLen;
            this.postProcessTag(tags, name, valueType, value);
        }
        return tags;
    }
}
ExtendedContentDescriptionObjectState.guid = _GUID_js__WEBPACK_IMPORTED_MODULE_2__["default"].ExtendedContentDescriptionObject;
/**
 * 4.1 Extended Stream Properties Object (optional, 1 per media stream)
 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/04_objects_in_the_asf_header_extension_object.html#4_1
 */
class ExtendedStreamPropertiesObjectState extends State {
    get(buf, off) {
        const view = new DataView(buf.buffer, off);
        return {
            startTime: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT64_LE.get(buf, off),
            endTime: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT64_LE.get(buf, off + 8),
            dataBitrate: view.getInt32(12, true),
            bufferSize: view.getInt32(16, true),
            initialBufferFullness: view.getInt32(20, true),
            alternateDataBitrate: view.getInt32(24, true),
            alternateBufferSize: view.getInt32(28, true),
            alternateInitialBufferFullness: view.getInt32(32, true),
            maximumObjectSize: view.getInt32(36, true),
            flags: {
                reliableFlag: _common_Util_js__WEBPACK_IMPORTED_MODULE_4__.getBit(buf, off + 40, 0),
                seekableFlag: _common_Util_js__WEBPACK_IMPORTED_MODULE_4__.getBit(buf, off + 40, 1),
                resendLiveCleanpointsFlag: _common_Util_js__WEBPACK_IMPORTED_MODULE_4__.getBit(buf, off + 40, 2)
            },
            // flagsNumeric: Token.UINT32_LE.get(buf, off + 64),
            streamNumber: view.getInt16(42, true),
            streamLanguageId: view.getInt16(44, true),
            averageTimePerFrame: view.getInt32(52, true),
            streamNameCount: view.getInt32(54, true),
            payloadExtensionSystems: view.getInt32(56, true),
            streamNames: [], // ToDo
            streamPropertiesObject: null
        };
    }
}
ExtendedStreamPropertiesObjectState.guid = _GUID_js__WEBPACK_IMPORTED_MODULE_2__["default"].ExtendedStreamPropertiesObject;
/**
 * 4.7  Metadata Object (optional, 0 or 1)
 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/04_objects_in_the_asf_header_extension_object.html#4_7
 */
class MetadataObjectState extends State {
    get(uint8Array, off) {
        const tags = [];
        const view = new DataView(uint8Array.buffer, off);
        const descriptionRecordsCount = view.getUint16(0, true);
        let pos = 2;
        for (let i = 0; i < descriptionRecordsCount; i += 1) {
            pos += 4;
            const nameLen = view.getUint16(pos, true);
            pos += 2;
            const dataType = view.getUint16(pos, true);
            pos += 2;
            const dataLen = view.getUint32(pos, true);
            pos += 4;
            const name = (0,_AsfUtil_js__WEBPACK_IMPORTED_MODULE_3__.parseUnicodeAttr)(uint8Array.slice(off + pos, off + pos + nameLen));
            pos += nameLen;
            const data = uint8Array.slice(off + pos, off + pos + dataLen);
            pos += dataLen;
            this.postProcessTag(tags, name, dataType, data);
        }
        return tags;
    }
}
MetadataObjectState.guid = _GUID_js__WEBPACK_IMPORTED_MODULE_2__["default"].MetadataObject;
// 4.8	Metadata Library Object (optional, 0 or 1)
class MetadataLibraryObjectState extends MetadataObjectState {
}
MetadataLibraryObjectState.guid = _GUID_js__WEBPACK_IMPORTED_MODULE_2__["default"].MetadataLibraryObject;
/**
 * Ref: https://msdn.microsoft.com/en-us/library/windows/desktop/dd757977(v=vs.85).aspx
 */
class WmPictureToken {
    static fromBuffer(buffer) {
        const pic = new WmPictureToken(buffer.length);
        return pic.get(buffer, 0);
    }
    constructor(len) {
        this.len = len;
    }
    get(buffer, offset) {
        const view = new DataView(buffer.buffer, offset);
        const typeId = view.getUint8(0);
        const size = view.getInt32(1, true);
        let index = 5;
        while (view.getUint16(index) !== 0) {
            index += 2;
        }
        const format = new token_types__WEBPACK_IMPORTED_MODULE_0__.StringType(index - 5, 'utf-16le').get(buffer, 5);
        while (view.getUint16(index) !== 0) {
            index += 2;
        }
        const description = new token_types__WEBPACK_IMPORTED_MODULE_0__.StringType(index - 5, 'utf-16le').get(buffer, 5);
        return {
            type: _id3v2_ID3v2Token_js__WEBPACK_IMPORTED_MODULE_5__.AttachedPictureType[typeId],
            format,
            description,
            size,
            data: buffer.slice(index + 4)
        };
    }
}
//# sourceMappingURL=AsfObject.js.map

/***/ }),

/***/ "./node_modules/music-metadata/lib/asf/AsfParser.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/asf/AsfParser.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AsfParser: () => (/* binding */ AsfParser)
/* harmony export */ });
/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js");
/* harmony import */ var _type_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../type.js */ "./node_modules/music-metadata/lib/matroska/types.js");
/* harmony import */ var _GUID_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./GUID.js */ "./node_modules/music-metadata/lib/asf/GUID.js");
/* harmony import */ var _AsfObject_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AsfObject.js */ "./node_modules/music-metadata/lib/asf/AsfObject.js");
/* harmony import */ var _common_BasicParser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/BasicParser.js */ "./node_modules/music-metadata/lib/common/BasicParser.js");






const debug = debug__WEBPACK_IMPORTED_MODULE_0__('music-metadata:parser:ASF');
const headerType = 'asf';
/**
 * Windows Media Metadata Usage Guidelines
 * - Ref: https://msdn.microsoft.com/en-us/library/ms867702.aspx
 *
 * Ref:
 * - https://tools.ietf.org/html/draft-fleischman-asf-01
 * - https://hwiegman.home.xs4all.nl/fileformats/asf/ASF_Specification.pdf
 * - http://drang.s4.xrea.com/program/tips/id3tag/wmp/index.html
 * - https://msdn.microsoft.com/en-us/library/windows/desktop/ee663575(v=vs.85).aspx
 */
class AsfParser extends _common_BasicParser_js__WEBPACK_IMPORTED_MODULE_1__.BasicParser {
    async parse() {
        const header = await this.tokenizer.readToken(_AsfObject_js__WEBPACK_IMPORTED_MODULE_2__.TopLevelHeaderObjectToken);
        if (!header.objectId.equals(_GUID_js__WEBPACK_IMPORTED_MODULE_3__["default"].HeaderObject)) {
            throw new _AsfObject_js__WEBPACK_IMPORTED_MODULE_2__.AsfContentParseError(`expected asf header; but was not found; got: ${header.objectId.str}`);
        }
        try {
            await this.parseObjectHeader(header.numberOfHeaderObjects);
        }
        catch (err) {
            debug('Error while parsing ASF: %s', err);
        }
    }
    async parseObjectHeader(numberOfObjectHeaders) {
        let tags;
        do {
            // Parse common header of the ASF Object (3.1)
            const header = await this.tokenizer.readToken(_AsfObject_js__WEBPACK_IMPORTED_MODULE_2__.HeaderObjectToken);
            // Parse data part of the ASF Object
            debug('header GUID=%s', header.objectId.str);
            switch (header.objectId.str) {
                case _AsfObject_js__WEBPACK_IMPORTED_MODULE_2__.FilePropertiesObject.guid.str: { // 3.2
                    const fpo = await this.tokenizer.readToken(new _AsfObject_js__WEBPACK_IMPORTED_MODULE_2__.FilePropertiesObject(header));
                    this.metadata.setFormat('duration', Number(fpo.playDuration / BigInt(1000)) / 10000 - Number(fpo.preroll) / 1000);
                    this.metadata.setFormat('bitrate', fpo.maximumBitrate);
                    break;
                }
                case _AsfObject_js__WEBPACK_IMPORTED_MODULE_2__.StreamPropertiesObject.guid.str: { // 3.3
                    const spo = await this.tokenizer.readToken(new _AsfObject_js__WEBPACK_IMPORTED_MODULE_2__.StreamPropertiesObject(header));
                    this.metadata.setFormat('container', `ASF/${spo.streamType}`);
                    break;
                }
                case _AsfObject_js__WEBPACK_IMPORTED_MODULE_2__.HeaderExtensionObject.guid.str: { // 3.4
                    const extHeader = await this.tokenizer.readToken(new _AsfObject_js__WEBPACK_IMPORTED_MODULE_2__.HeaderExtensionObject());
                    await this.parseExtensionObject(extHeader.extensionDataSize);
                    break;
                }
                case _AsfObject_js__WEBPACK_IMPORTED_MODULE_2__.ContentDescriptionObjectState.guid.str: // 3.10
                    tags = await this.tokenizer.readToken(new _AsfObject_js__WEBPACK_IMPORTED_MODULE_2__.ContentDescriptionObjectState(header));
                    await this.addTags(tags);
                    break;
                case _AsfObject_js__WEBPACK_IMPORTED_MODULE_2__.ExtendedContentDescriptionObjectState.guid.str: // 3.11
                    tags = await this.tokenizer.readToken(new _AsfObject_js__WEBPACK_IMPORTED_MODULE_2__.ExtendedContentDescriptionObjectState(header));
                    await this.addTags(tags);
                    break;
                case _GUID_js__WEBPACK_IMPORTED_MODULE_3__["default"].CodecListObject.str: {
                    const codecs = await _AsfObject_js__WEBPACK_IMPORTED_MODULE_2__.readCodecEntries(this.tokenizer);
                    codecs.forEach(codec => {
                        this.metadata.addStreamInfo({
                            type: codec.type.videoCodec ? _type_js__WEBPACK_IMPORTED_MODULE_4__.TrackType.video : _type_js__WEBPACK_IMPORTED_MODULE_4__.TrackType.audio,
                            codecName: codec.codecName
                        });
                    });
                    const audioCodecs = codecs.filter(codec => codec.type.audioCodec).map(codec => codec.codecName).join('/');
                    this.metadata.setFormat('codec', audioCodecs);
                    break;
                }
                case _GUID_js__WEBPACK_IMPORTED_MODULE_3__["default"].StreamBitratePropertiesObject.str:
                    // ToDo?
                    await this.tokenizer.ignore(header.objectSize - _AsfObject_js__WEBPACK_IMPORTED_MODULE_2__.HeaderObjectToken.len);
                    break;
                case _GUID_js__WEBPACK_IMPORTED_MODULE_3__["default"].PaddingObject.str:
                    // ToDo: register bytes pad
                    debug('Padding: %s bytes', header.objectSize - _AsfObject_js__WEBPACK_IMPORTED_MODULE_2__.HeaderObjectToken.len);
                    await this.tokenizer.ignore(header.objectSize - _AsfObject_js__WEBPACK_IMPORTED_MODULE_2__.HeaderObjectToken.len);
                    break;
                default:
                    this.metadata.addWarning(`Ignore ASF-Object-GUID: ${header.objectId.str}`);
                    debug('Ignore ASF-Object-GUID: %s', header.objectId.str);
                    await this.tokenizer.readToken(new _AsfObject_js__WEBPACK_IMPORTED_MODULE_2__.IgnoreObjectState(header));
            }
        } while (--numberOfObjectHeaders);
        // done
    }
    async addTags(tags) {
        await Promise.all(tags.map(({ id, value }) => this.metadata.addTag(headerType, id, value)));
    }
    async parseExtensionObject(extensionSize) {
        do {
            // Parse common header of the ASF Object (3.1)
            const header = await this.tokenizer.readToken(_AsfObject_js__WEBPACK_IMPORTED_MODULE_2__.HeaderObjectToken);
            const remaining = header.objectSize - _AsfObject_js__WEBPACK_IMPORTED_MODULE_2__.HeaderObjectToken.len;
            // Parse data part of the ASF Object
            switch (header.objectId.str) {
                case _AsfObject_js__WEBPACK_IMPORTED_MODULE_2__.ExtendedStreamPropertiesObjectState.guid.str: // 4.1
                    // ToDo: extended stream header properties are ignored
                    await this.tokenizer.readToken(new _AsfObject_js__WEBPACK_IMPORTED_MODULE_2__.ExtendedStreamPropertiesObjectState(header));
                    break;
                case _AsfObject_js__WEBPACK_IMPORTED_MODULE_2__.MetadataObjectState.guid.str: { // 4.7
                    const moTags = await this.tokenizer.readToken(new _AsfObject_js__WEBPACK_IMPORTED_MODULE_2__.MetadataObjectState(header));
                    await this.addTags(moTags);
                    break;
                }
                case _AsfObject_js__WEBPACK_IMPORTED_MODULE_2__.MetadataLibraryObjectState.guid.str: { // 4.8
                    const mlTags = await this.tokenizer.readToken(new _AsfObject_js__WEBPACK_IMPORTED_MODULE_2__.MetadataLibraryObjectState(header));
                    await this.addTags(mlTags);
                    break;
                }
                case _GUID_js__WEBPACK_IMPORTED_MODULE_3__["default"].PaddingObject.str:
                    // ToDo: register bytes pad
                    await this.tokenizer.ignore(remaining);
                    break;
                case _GUID_js__WEBPACK_IMPORTED_MODULE_3__["default"].CompatibilityObject.str:
                    await this.tokenizer.ignore(remaining);
                    break;
                case _GUID_js__WEBPACK_IMPORTED_MODULE_3__["default"].ASF_Index_Placeholder_Object.str:
                    await this.tokenizer.ignore(remaining);
                    break;
                default:
                    this.metadata.addWarning(`Ignore ASF-Object-GUID: ${header.objectId.str}`);
                    // console.log("Ignore ASF-Object-GUID: %s", header.objectId.str);
                    await this.tokenizer.readToken(new _AsfObject_js__WEBPACK_IMPORTED_MODULE_2__.IgnoreObjectState(header));
                    break;
            }
            extensionSize -= header.objectSize;
        } while (extensionSize > 0);
    }
}
//# sourceMappingURL=AsfParser.js.map

/***/ }),

/***/ "./node_modules/music-metadata/lib/asf/AsfUtil.js":
/*!********************************************************!*\
  !*** ./node_modules/music-metadata/lib/asf/AsfUtil.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getParserForAttr: () => (/* binding */ getParserForAttr),
/* harmony export */   parseUnicodeAttr: () => (/* binding */ parseUnicodeAttr)
/* harmony export */ });
/* harmony import */ var token_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! token-types */ "./node_modules/token-types/lib/index.js");
/* harmony import */ var _common_Util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/Util.js */ "./node_modules/music-metadata/lib/common/Util.js");


function getParserForAttr(i) {
    return attributeParsers[i];
}
function parseUnicodeAttr(uint8Array) {
    return _common_Util_js__WEBPACK_IMPORTED_MODULE_1__.stripNulls(_common_Util_js__WEBPACK_IMPORTED_MODULE_1__.decodeString(uint8Array, 'utf-16le'));
}
const attributeParsers = [
    parseUnicodeAttr,
    parseByteArrayAttr,
    parseBoolAttr,
    parseDWordAttr,
    parseQWordAttr,
    parseWordAttr,
    parseByteArrayAttr
];
function parseByteArrayAttr(buf) {
    return new Uint8Array(buf);
}
function parseBoolAttr(buf, offset = 0) {
    return parseWordAttr(buf, offset) === 1;
}
function parseDWordAttr(buf, offset = 0) {
    return token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_LE.get(buf, offset);
}
function parseQWordAttr(buf, offset = 0) {
    return token_types__WEBPACK_IMPORTED_MODULE_0__.UINT64_LE.get(buf, offset);
}
function parseWordAttr(buf, offset = 0) {
    return token_types__WEBPACK_IMPORTED_MODULE_0__.UINT16_LE.get(buf, offset);
}
//# sourceMappingURL=AsfUtil.js.map

/***/ }),

/***/ "./node_modules/music-metadata/lib/asf/GUID.js":
/*!*****************************************************!*\
  !*** ./node_modules/music-metadata/lib/asf/GUID.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var uint8array_extras__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8array-extras */ "./node_modules/uint8array-extras/index.js");

/**
 * Ref:
 * - https://tools.ietf.org/html/draft-fleischman-asf-01, Appendix A: ASF GUIDs
 * - http://drang.s4.xrea.com/program/tips/id3tag/wmp/10_asf_guids.html
 * - http://drang.s4.xrea.com/program/tips/id3tag/wmp/index.html
 * - http://drang.s4.xrea.com/program/tips/id3tag/wmp/10_asf_guids.html
 *
 * ASF File Structure:
 * - https://msdn.microsoft.com/en-us/library/windows/desktop/ee663575(v=vs.85).aspx
 *
 * ASF GUIDs:
 * - http://drang.s4.xrea.com/program/tips/id3tag/wmp/10_asf_guids.html
 * - https://github.com/dji-sdk/FFmpeg/blob/master/libavformat/asf.c
 */
class GUID {
    static fromBin(bin, offset = 0) {
        return new GUID(GUID.decode(bin, offset));
    }
    /**
     * Decode GUID in format like "B503BF5F-2EA9-CF11-8EE3-00C00C205365"
     * @param objectId Binary GUID
     * @param offset Read offset in bytes, default 0
     * @returns GUID as dashed hexadecimal representation
     */
    static decode(objectId, offset = 0) {
        const view = new DataView(objectId.buffer, offset);
        const guid = `${view.getUint32(0, true).toString(16)}-${view.getUint16(4, true).toString(16)}-${view.getUint16(6, true).toString(16)}-${view.getUint16(8).toString(16)}-${(0,uint8array_extras__WEBPACK_IMPORTED_MODULE_0__.uint8ArrayToHex)(objectId.slice(offset + 10, offset + 16))}`;
        return guid.toUpperCase();
    }
    /**
     * Decode stream type
     * @param mediaType Media type GUID
     * @returns Media type
     */
    static decodeMediaType(mediaType) {
        switch (mediaType.str) {
            case GUID.AudioMedia.str: return 'audio';
            case GUID.VideoMedia.str: return 'video';
            case GUID.CommandMedia.str: return 'command';
            case GUID.Degradable_JPEG_Media.str: return 'degradable-jpeg';
            case GUID.FileTransferMedia.str: return 'file-transfer';
            case GUID.BinaryMedia.str: return 'binary';
        }
    }
    /**
     * Encode GUID
     * @param guid GUID like: "B503BF5F-2EA9-CF11-8EE3-00C00C205365"
     * @returns Encoded Binary GUID
     */
    static encode(str) {
        const bin = new Uint8Array(16);
        const view = new DataView(bin.buffer);
        view.setUint32(0, Number.parseInt(str.slice(0, 8), 16), true);
        view.setUint16(4, Number.parseInt(str.slice(9, 13), 16), true);
        view.setUint16(6, Number.parseInt(str.slice(14, 18), 16), true);
        bin.set((0,uint8array_extras__WEBPACK_IMPORTED_MODULE_0__.hexToUint8Array)(str.slice(19, 23)), 8);
        bin.set((0,uint8array_extras__WEBPACK_IMPORTED_MODULE_0__.hexToUint8Array)(str.slice(24)), 10);
        return bin;
    }
    constructor(str) {
        this.str = str;
    }
    equals(guid) {
        return this.str === guid.str;
    }
    toBin() {
        return GUID.encode(this.str);
    }
}
// 10.1 Top-level ASF object GUIDs
GUID.HeaderObject = new GUID("75B22630-668E-11CF-A6D9-00AA0062CE6C");
GUID.DataObject = new GUID("75B22636-668E-11CF-A6D9-00AA0062CE6C");
GUID.SimpleIndexObject = new GUID("33000890-E5B1-11CF-89F4-00A0C90349CB");
GUID.IndexObject = new GUID("D6E229D3-35DA-11D1-9034-00A0C90349BE");
GUID.MediaObjectIndexObject = new GUID("FEB103F8-12AD-4C64-840F-2A1D2F7AD48C");
GUID.TimecodeIndexObject = new GUID("3CB73FD0-0C4A-4803-953D-EDF7B6228F0C");
// 10.2 Header Object GUIDs
GUID.FilePropertiesObject = new GUID("8CABDCA1-A947-11CF-8EE4-00C00C205365");
GUID.StreamPropertiesObject = new GUID("B7DC0791-A9B7-11CF-8EE6-00C00C205365");
GUID.HeaderExtensionObject = new GUID("5FBF03B5-A92E-11CF-8EE3-00C00C205365");
GUID.CodecListObject = new GUID("86D15240-311D-11D0-A3A4-00A0C90348F6");
GUID.ScriptCommandObject = new GUID("1EFB1A30-0B62-11D0-A39B-00A0C90348F6");
GUID.MarkerObject = new GUID("F487CD01-A951-11CF-8EE6-00C00C205365");
GUID.BitrateMutualExclusionObject = new GUID("D6E229DC-35DA-11D1-9034-00A0C90349BE");
GUID.ErrorCorrectionObject = new GUID("75B22635-668E-11CF-A6D9-00AA0062CE6C");
GUID.ContentDescriptionObject = new GUID("75B22633-668E-11CF-A6D9-00AA0062CE6C");
GUID.ExtendedContentDescriptionObject = new GUID("D2D0A440-E307-11D2-97F0-00A0C95EA850");
GUID.ContentBrandingObject = new GUID("2211B3FA-BD23-11D2-B4B7-00A0C955FC6E");
GUID.StreamBitratePropertiesObject = new GUID("7BF875CE-468D-11D1-8D82-006097C9A2B2");
GUID.ContentEncryptionObject = new GUID("2211B3FB-BD23-11D2-B4B7-00A0C955FC6E");
GUID.ExtendedContentEncryptionObject = new GUID("298AE614-2622-4C17-B935-DAE07EE9289C");
GUID.DigitalSignatureObject = new GUID("2211B3FC-BD23-11D2-B4B7-00A0C955FC6E");
GUID.PaddingObject = new GUID("1806D474-CADF-4509-A4BA-9AABCB96AAE8");
// 10.3 Header Extension Object GUIDs
GUID.ExtendedStreamPropertiesObject = new GUID("14E6A5CB-C672-4332-8399-A96952065B5A");
GUID.AdvancedMutualExclusionObject = new GUID("A08649CF-4775-4670-8A16-6E35357566CD");
GUID.GroupMutualExclusionObject = new GUID("D1465A40-5A79-4338-B71B-E36B8FD6C249");
GUID.StreamPrioritizationObject = new GUID("D4FED15B-88D3-454F-81F0-ED5C45999E24");
GUID.BandwidthSharingObject = new GUID("A69609E6-517B-11D2-B6AF-00C04FD908E9");
GUID.LanguageListObject = new GUID("7C4346A9-EFE0-4BFC-B229-393EDE415C85");
GUID.MetadataObject = new GUID("C5F8CBEA-5BAF-4877-8467-AA8C44FA4CCA");
GUID.MetadataLibraryObject = new GUID("44231C94-9498-49D1-A141-1D134E457054");
GUID.IndexParametersObject = new GUID("D6E229DF-35DA-11D1-9034-00A0C90349BE");
GUID.MediaObjectIndexParametersObject = new GUID("6B203BAD-3F11-48E4-ACA8-D7613DE2CFA7");
GUID.TimecodeIndexParametersObject = new GUID("F55E496D-9797-4B5D-8C8B-604DFE9BFB24");
GUID.CompatibilityObject = new GUID("26F18B5D-4584-47EC-9F5F-0E651F0452C9");
GUID.AdvancedContentEncryptionObject = new GUID("43058533-6981-49E6-9B74-AD12CB86D58C");
// 10.4 Stream Properties Object Stream Type GUIDs
GUID.AudioMedia = new GUID("F8699E40-5B4D-11CF-A8FD-00805F5C442B");
GUID.VideoMedia = new GUID("BC19EFC0-5B4D-11CF-A8FD-00805F5C442B");
GUID.CommandMedia = new GUID("59DACFC0-59E6-11D0-A3AC-00A0C90348F6");
GUID.JFIF_Media = new GUID("B61BE100-5B4E-11CF-A8FD-00805F5C442B");
GUID.Degradable_JPEG_Media = new GUID("35907DE0-E415-11CF-A917-00805F5C442B");
GUID.FileTransferMedia = new GUID("91BD222C-F21C-497A-8B6D-5AA86BFC0185");
GUID.BinaryMedia = new GUID("3AFB65E2-47EF-40F2-AC2C-70A90D71D343");
GUID.ASF_Index_Placeholder_Object = new GUID("D9AADE20-7C17-4F9C-BC28-8555DD98E2A2");
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GUID);
//# sourceMappingURL=GUID.js.map

/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_music-metadata_lib_asf_AsfParser_js.b44b99eddcb715b32aab.js.map