{"version":3,"file":"7768.c8f64d3f4be2137f2716.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/middleSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/stars.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/chatsFilters.ts","webpack://telegram-t/./src/global/actions/ui/bots.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/helpers/meta.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/middleSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/account.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/stars.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/ui/statistics.ts","webpack://telegram-t/./src/global/actions/ui/workspace.ts","webpack://telegram-t/./src/global/actions/ui/webContentsView.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/api/notlost/types.ts","webpack://telegram-t/./src/api/notlost/workspace.ts","webpack://telegram-t/./src/global/actions/apiNotlost/workspace.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/global/selectors/workspace.ts","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/main/FilteredChatList.module.scss?be27","webpack://telegram-t/./src/components/left/main/FilteredChatList.tsx","webpack://telegram-t/./src/components/left/main/workspace/WorkspaceChat.tsx","webpack://telegram-t/./src/components/left/main/workspace/Workspace.module.scss?f512","webpack://telegram-t/./src/components/left/main/workspace/WorkspaceChatFolder.tsx","webpack://telegram-t/./src/components/left/main/workspace/WorkspaceChatFolderNew.tsx","webpack://telegram-t/./src/api/notlost/webContents.ts","webpack://telegram-t/./src/components/left/main/workspace/WorkspaceLink.tsx","webpack://telegram-t/./src/components/left/main/workspace/WorkspaceLinkNew.tsx","webpack://telegram-t/./src/components/left/main/workspace/WorkspaceRightSidebar.module.scss?7aea","webpack://telegram-t/./src/components/left/main/workspace/WorkspaceRightSidebar.tsx","webpack://telegram-t/./src/components/left/main/workspace/WorkspaceSection.tsx","webpack://telegram-t/./src/components/left/main/workspace/WorkspaceSection.module.scss?fb9b","webpack://telegram-t/./src/components/left/main/workspace/Workspace.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/FrozenAccountPlaceholder.tsx","webpack://telegram-t/./src/components/middle/FrozenAccountPlaceholder.module.scss?f487","webpack://telegram-t/./src/components/middle/GreetingsBlock.module.scss?e89c","webpack://telegram-t/./src/components/middle/GreetingsBlock.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListAccountInfo.module.scss?912e","webpack://telegram-t/./src/components/middle/MessageListAccountInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.module.scss?0f2f","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/RequirementToContactMessage.module.scss?677e","webpack://telegram-t/./src/components/middle/RequirementToContactMessage.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/panes/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/middle/panes/BotAdPane.module.scss?ff1a","webpack://telegram-t/./src/components/middle/panes/BotAdPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.module.scss?a09a","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.tsx","webpack://telegram-t/./src/components/middle/panes/ChatReportPane.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.module.scss?7a09","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.module.scss?0dc7","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.module.scss?d2aa","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.async.tsx","webpack://telegram-t/./src/components/middle/WebContentsError.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.async.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/resale/GiftResalePriceComposerModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.async.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.async.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/chatRefund/ChatRefundModal.async.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.async.tsx","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/common/gift/SavedGift.module.scss?4193","webpack://telegram-t/./src/components/common/gift/SavedGift.tsx","webpack://telegram-t/./src/components/common/PreviewMedia.tsx","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.async.tsx","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/sidebar/MainSidebarSection.tsx","webpack://telegram-t/./src/components/main/sidebar/MainSidebar.module.scss?c1e0","webpack://telegram-t/./src/components/main/sidebar/MainSidebarTab.module.scss?e85e","webpack://telegram-t/./src/components/main/sidebar/MainSidebarTab.tsx","webpack://telegram-t/./src/components/left/main/AccountMenuItems.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/main/sidebar/MainSidebarTabProfile.tsx","webpack://telegram-t/./src/components/main/sidebar/MainSidebarWebContentsTab.module.scss?77b0","webpack://telegram-t/./src/components/main/sidebar/MainSidebarWebContentsTab.tsx","webpack://telegram-t/./src/components/main/sidebar/MainSidebarWorkspaces.tsx","webpack://telegram-t/./src/components/main/sidebar/MainSidebar.tsx","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.module.scss?a4ff","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.module.scss?b372","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts","webpack://telegram-t/./src/util/captureEnterKeyListener.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReactionWithPaid } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReactionWithPaid[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    if (reaction.type === 'paid') return;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport {\n  addPaidReaction,\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updatePeerFullInfo,\n  updatePoll,\n  updatePollVote,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateSnapEffect,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\nconst SNAP_ANIMATION_DELAY = 1000;\nconst VIDEO_PROCESSING_NOTIFICATION_DELAY = 1000;\nlet lastVideoProcessingNotificationTime = 0;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted, poll,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (message.reportDeliveryUntilDate && message.reportDeliveryUntilDate > getServerTime()) {\n        actions.reportMessageDelivery({ chatId, messageId: id });\n      }\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!isLocal && !chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (!isLocal && selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message)?.text !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const {\n        chatId, id, message, poll, isFromNew,\n      } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        if (isFromNew) {\n          actions.apiUpdate({\n            '@type': 'newScheduledMessage',\n            id: update.id,\n            chatId: update.chatId,\n            message: update.message as ApiMessage,\n            poll: update.poll,\n          });\n        }\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const {\n        chatId, id, message, poll, isFromNew, shouldForceReply,\n      } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n\n      if (!currentMessage) {\n        if (isFromNew) {\n          actions.apiUpdate({\n            '@type': 'newMessage',\n            id: update.id,\n            chatId: update.chatId,\n            message: update.message,\n            poll: update.poll,\n            shouldForceReply,\n          });\n        }\n        return;\n      }\n\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message, poll } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateVideoProcessingPending': {\n      const {\n        chatId, localId, newScheduledMessageId,\n      } = update;\n\n      global = deleteChatMessages(global, chatId, [localId]);\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const currentMessageList = selectCurrentMessageList(global, tabId);\n        if (currentMessageList?.chatId !== chatId) return;\n\n        const now = Date.now();\n        if (now - lastVideoProcessingNotificationTime < VIDEO_PROCESSING_NOTIFICATION_DELAY) {\n          return;\n        }\n        lastVideoProcessingNotificationTime = now;\n\n        actions.showNotification({\n          message: {\n            key: 'VideoConversionText',\n          },\n          title: {\n            key: 'VideoConversionTitle',\n          },\n          tabId,\n        });\n\n        actions.focusMessage({\n          chatId,\n          messageId: newScheduledMessageId,\n          messageListType: 'scheduled',\n          tabId,\n        });\n      });\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n\n      global = updateListedAndViewportIds(global, actions, message);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      const chat = selectChat(global, chatId);\n      // Reload dialogs if chat is not present in the list\n      if (!chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (chat?.isForum) {\n        if (!topic || topic.lastMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        } else {\n          global = updateTopic(global, chatId, Number(threadId), {\n            unreadCount: 0,\n          });\n        }\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, newIds, chatId } = update;\n\n      const hadVideoProcessing = ids?.some((id) => (\n        selectScheduledMessage(global, chatId, id)?.isVideoProcessingPending\n      ));\n      const processedVideoId = newIds?.find((id) => {\n        const message = selectChatMessage(global, chatId, id);\n        return message?.content.video;\n      });\n\n      if (hadVideoProcessing && processedVideoId) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showNotification({\n            message: {\n              key: 'VideoConversionDone',\n            },\n            actionText: {\n              key: 'VideoConversionView',\n            },\n            action: {\n              action: 'focusMessage',\n              payload: {\n                chatId,\n                messageId: processedVideoId,\n                tabId,\n              },\n            },\n            tabId,\n          });\n        });\n      }\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'deleteParticipantHistory': {\n      const { chatId, peerId } = update;\n\n      global = getGlobal();\n      deleteParticipantHistory(global, chatId, peerId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      global = updatePoll(global, pollId, pollUpdate);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      global = updatePollVote(global, pollId, peerId, options);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  const localPaidReaction = currentReactions?.results.find((r) => r.localAmount);\n  // Save local count on update, but reset if we sent reaction\n  if (localPaidReaction?.localAmount) {\n    const { localIsPrivate: isPrivate, localAmount, localPeerId } = localPaidReaction;\n    reactions.results = addPaidReaction(reactions.results, localAmount, isPrivate, localPeerId);\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteParticipantHistory<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  peerId: string,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n\n  const messageIds = Object.values(byId).filter((message) => {\n    return message.senderId === peerId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      // Prevent local deletion of sent messages in case of desync\n      const stillDeletedIds = ids.filter((id) => selectChatMessage(global, chatId, id)?.isDeleting);\n      global = deleteChatMessages(global, chatId, stillDeletedIds);\n      setGlobal(global);\n    }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiChatType,\n  ApiDraft,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiOnProgress,\n  ApiStory,\n  ApiUser,\n} from '../../../api/types';\nimport type {\n  ForwardMessagesParams,\n  SendMessageParams,\n  ThreadId,\n} from '../../../types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_ID_REQUIRED_ERROR,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { ensureProtocol, isMixedScriptUrl } from '../../../util/browser/url';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { getTranslationFn, type RegularLangFnParameters } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n  splitMessagesForForwarding,\n} from '../../helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../helpers/peers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateGlobalSearch,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updatePeerFullInfo,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanForwardMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerStory,\n  selectPinnedIds,\n  selectPollFromMessage,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    global = updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n  const lastMessageId = selectChatLastMessageId(global, chatId!);\n  const messagePriceInStars = await getPeerStarsForMessage(global, chatId!);\n\n  const params: SendMessageParams = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n    messagePriceInStars,\n    isStoryReply,\n    isPending: messagePriceInStars ? true : undefined,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = (!payload.attachments || payload.attachments.length <= 1) && !isForwarding;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n  const localMessages: SendMessageParams[] = [];\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    const sendParams: SendMessageParams = {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    };\n    await sendMessageOrReduceLocal(global, sendParams, localMessages);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    for (let groupIndex = 0; groupIndex < byType.length; groupIndex++) {\n      const group = byType[groupIndex];\n      const groupedAttachments = split(group, MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n\n          let sendParams: SendMessageParams = {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n\n          for (const attachment of restAttachments) {\n            sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          for (const attachment of firstAttachments) {\n            const sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n\n          const sendParams = {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n        }\n      }\n    }\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      const sendParams = {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      };\n      await sendMessageOrReduceLocal(global, sendParams, localMessages);\n    }\n\n    if (attachments) {\n      for (const attachment of attachments) {\n        const sendParams = {\n          ...commonParams,\n          attachment,\n        };\n        await sendMessageOrReduceLocal(global, sendParams, localMessages);\n      }\n    }\n  }\n  if (isForwarding) {\n    const localForwards = await executeForwardMessages(global, params, tabId);\n    if (localForwards) {\n      localMessages.push(...localForwards);\n    }\n  }\n  if (localMessages?.length) sendMessagesWithNotification(global, localMessages);\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('updateInsertingPeerIdMention', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    insertingPeerIdMention: peerId,\n  }, tabId);\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n}: {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, isUnpin, isOneSide, isSilent,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    messageIds, shouldDeleteForAll, messageList: payloadMessageList, tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const messageList = payloadMessageList || currentMessageList;\n  if (!messageList) {\n    return;\n  }\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) || isChatSuperGroup(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('resetLocalPaidMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const notifications = selectTabState(global, tabId).notifications;\n  if (!notifications || !notifications.length) return global;\n\n  notifications.forEach((notification) => {\n    if (notification.type === 'paidMessage') {\n      const action = notification.dismissAction;\n      if (action && !Array.isArray(action)) {\n        // @ts-ignore\n        actions[action.action](action.payload);\n      }\n      actions.dismissNotification({ localId: notification.localId, tabId });\n    }\n  });\n  return global;\n});\n\naddActionHandler('deleteParticipantHistory', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, peerId,\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n  const peer = selectPeer(global, peerId)!;\n\n  void callApi('deleteParticipantHistory', { chat, peer });\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, description = '', option = '', chatId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n\n  const response = await callApi('reportMessages', {\n    peer: chat, messageIds, description, option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('reportChannelSpam', (global, actions, payload): ActionReturnType => {\n  const { participantId, chatId, messageIds } = payload;\n  const peer = selectPeer(global, participantId);\n  const chat = selectChat(global, chatId);\n  if (!peer || !chat) {\n    return;\n  }\n\n  void callApi('reportChannelSpam', { peer, chat, messageIds });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const { maxId, tabId = getCurrentTabId() } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const poll = message && selectPollFromMessage(global, message);\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (!ids.length) {\n    global = updatePeerFullInfo(global, chat.id, { hasScheduledMessages: false });\n  }\n\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n  const { toChatId } = selectTabState(global, tabId).forwardMessages;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  if (!toChat) return;\n  executeForwardMessages(global, { chat: toChat, isSilent, scheduledAt }, tabId);\n});\n\nasync function executeForwardMessages(global: GlobalState, sendParams: SendMessageParams, tabId: number) {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n  const { messagePriceInStars, isSilent, scheduledAt } = sendParams;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return undefined;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n  const localMessages: SendMessageParams[] = [];\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  const forwardableRealMessages = realMessages.filter((message) => selectCanForwardMessage(global, message));\n  if (forwardableRealMessages.length) {\n    const messageSlices = global.config?.maxForwardedCount\n      ? splitMessagesForForwarding(forwardableRealMessages, global.config.maxForwardedCount)\n      : [forwardableRealMessages];\n    for (const slice of messageSlices) {\n      const forwardParams: ForwardMessagesParams = {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: slice,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n        messagePriceInStars,\n      };\n\n      if (!messagePriceInStars) {\n        callApi('forwardMessages', forwardParams);\n      } else {\n        const forwardedLocalMessagesSlice = await callApi('forwardMessagesLocal', forwardParams);\n        localMessages.push({\n          ...sendParams,\n          forwardParams: { ...forwardParams, forwardedLocalMessagesSlice },\n          forwardedLocalMessagesSlice,\n        });\n      }\n    }\n  }\n\n  for (const message of serviceMessages) {\n    const { text, entities } = message.content.text || {};\n    const { sticker } = message.content;\n\n    const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n    const params: SendMessageParams = {\n      chat: toChat,\n      replyInfo,\n      text,\n      entities,\n      sticker,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      lastMessageId,\n    };\n\n    await sendMessageOrReduceLocal(global, params, localMessages);\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  return localMessages;\n}\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nexport async function getPeerStarsForMessage<T extends GlobalState>(\n  global: T,\n  peerId: string,\n): Promise<number | undefined> {\n  const peer = selectPeer(global, peerId);\n  if (!peer) return undefined;\n\n  if (isApiPeerChat(peer)) {\n    return peer.paidMessagesStars;\n  }\n\n  if (!peer?.paidMessagesStars) return undefined;\n\n  const fullInfo = selectUserFullInfo(global, peer.id);\n  if (fullInfo) {\n    return fullInfo.paidMessagesStars;\n  }\n\n  const result = await callApi('fetchPaidMessagesStarsAmount', peer);\n  return result;\n}\n\nasync function sendMessageOrReduceLocal<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams,\n  localMessages: SendMessageParams[],\n) {\n  if (!sendParams.messagePriceInStars) {\n    sendMessage(global, sendParams);\n  } else {\n    const message = await callApi('sendMessageLocal', sendParams);\n    if (message) {\n      localMessages.push({\n        ...sendParams,\n        localMessage: message,\n      });\n    }\n  }\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: SendMessageParams) {\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n  await callApi('sendMessage', params, progressCallback);\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\nasync function sendMessagesWithNotification<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams[],\n) {\n  const chat = sendParams[0]?.chat;\n  if (!chat || !sendParams.length) return;\n  const starsForOneMessage = await getPeerStarsForMessage(global, chat.id);\n  if (!starsForOneMessage) {\n    getActions().sendMessages({ sendParams });\n    return;\n  }\n  const messageIdsForUndo = sendParams.reduce((ids, params) => {\n    if (params.localMessage?.id) {\n      ids.push(params.localMessage.id);\n    } else if (params.forwardedLocalMessagesSlice?.localMessages) {\n      const forwardedIds = Object.values(params.forwardedLocalMessagesSlice.localMessages)\n        .map((forwardedMessage) => forwardedMessage.id)\n        .filter(Boolean);\n      ids.push(...forwardedIds);\n    }\n    return ids;\n  }, [] as number[]);\n\n  const localForwards = sendParams[0]?.forwardedLocalMessagesSlice?.localMessages;\n  const firstMessage = sendParams[0]?.localMessage\n    || (localForwards && Object.values(localForwards)[0]);\n  if (!firstMessage) return;\n\n  const messagesCount = messageIdsForUndo.length;\n\n  const firstSendParam = sendParams[0];\n  let storySendMessage: RegularLangFnParameters | undefined;\n  if (sendParams.length === 1 && firstSendParam.isStoryReply) {\n    const { gif, sticker, isReaction } = firstSendParam;\n\n    if (gif) {\n      storySendMessage = { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } };\n    } else if (sticker) {\n      storySendMessage = { key: 'StoryTooltipStickerSent' };\n    } else if (isReaction) {\n      storySendMessage = { key: 'StoryTooltipReactionSent' };\n    }\n  }\n\n  const titleKey: RegularLangFnParameters = storySendMessage || {\n    key: 'MessageSentPaidToastTitle',\n    variables: { count: messagesCount },\n    options: { pluralValue: messagesCount },\n  };\n\n  getActions().sendMessages({ sendParams });\n\n  getActions().showNotification({\n    localId: getMessageKey(firstMessage),\n    title: titleKey,\n    message: {\n      key: 'MessageSentPaidToastText',\n      variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage * messagesCount) },\n    },\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n  });\n}\n\naddActionHandler('sendMessages', async (global, actions, payload): Promise<void> => {\n  const { sendParams } = payload;\n  await Promise.all(sendParams.map(async (params) => {\n    if (params.forwardedLocalMessagesSlice && params.forwardParams) {\n      await rafPromise();\n      await callApi('forwardApiMessages', params.forwardParams);\n    } else {\n      await sendMessage(global, params);\n    }\n  }));\n  if (sendParams.length > 0 && sendParams[0].messagePriceInStars) actions.loadStarStatus();\n});\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSendPaidReactionsAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat, isForPaidReactions: true });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendPaidReactionsAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendPaidReactionsAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (isApiPeerUser(peer) && selectIsChatBotNotStarted(global, peer.id)) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, peerId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId } = payload;\n\n  void callApi('viewSponsoredMessage', { random: randomId });\n});\n\naddActionHandler('clickSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId, isMedia, isFullscreen } = payload;\n\n  void callApi('clickSponsoredMessage', {\n    random: randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsored', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('reportSponsoredMessage', { randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    if (peerId) {\n      global = deleteSponsoredMessage(global, peerId);\n    } else {\n      global = updateGlobalSearch(global, {\n        sponsoredPeer: undefined,\n      }, tabId);\n    }\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId: peerId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsored', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chatId, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateChat(global, chat.id, {\n      unreadMentionsCount: undefined,\n      unreadMentions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support mentions in threads\n  return undefined;\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url);\n  const parsedUrl = new URL(urlWithProtocol);\n  const isMixedScript = isMixedScriptUrl(urlWithProtocol);\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.closeStoryViewer({ tabId });\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: isMixedScript ? parsedUrl.toString() : urlWithProtocol, tabId });\n  } else {\n    window.open(parsedUrl, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n  global = getGlobal();\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    quoteText: replyingInfo.quoteText,\n    quoteOffset: replyingInfo.quoteOffset,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadPaidReactionPrivacy', (): ActionReturnType => {\n  callApi('fetchPaidReactionPrivacy');\n  return undefined;\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nconst MESSAGES_TO_REPORT_DELIVERY = new Map<string, number[]>();\nlet reportDeliveryTimeout: number | undefined;\naddActionHandler('reportMessageDelivery', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const currentIds = MESSAGES_TO_REPORT_DELIVERY.get(chatId) || [];\n  currentIds.push(messageId);\n  MESSAGES_TO_REPORT_DELIVERY.set(chatId, currentIds);\n\n  if (!reportDeliveryTimeout) {\n    // Slightly unsafe in the multitab environment, but there is no better way to do it now.\n    // Not critical if user manages to close the tab in a show window before the report is sent.\n    reportDeliveryTimeout = window.setTimeout(() => {\n      reportDeliveryTimeout = undefined;\n\n      MESSAGES_TO_REPORT_DELIVERY.forEach((messageIds, cId) => {\n        const chat = selectChat(global, cId);\n        if (!chat) return;\n\n        callApi('reportMessagesDelivery', { chat, messageIds });\n      });\n      MESSAGES_TO_REPORT_DELIVERY.clear();\n    }, 500);\n  }\n});\n\naddActionHandler('openPreparedInlineMessageModal', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, messageId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const result = await callApi('fetchPreparedInlineMessage', {\n    bot,\n    id: messageId,\n  });\n  if (!result) {\n    actions.sendWebAppEvent({\n      webAppKey,\n      event: {\n        eventType: 'prepared_message_failed',\n        eventData: { error: 'MESSAGE_EXPIRED' },\n      },\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    preparedMessageModal: {\n      message: result,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    webAppKey, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const supportedFilters = message.peerTypes?.filter((type): type is ApiChatType => type !== 'self');\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      webAppKey,\n      filter: supportedFilters,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET, RESTRICTED_EMOJI_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectTabState,\n} from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadUserCollectibleStatuses', async (global, actions): Promise<void> => {\n  setGlobal(global);\n\n  const { hash } = global.collectibleEmojiStatuses || {};\n\n  const result = await callApi('fetchCollectibleEmojiStatuses', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    collectibleEmojiStatuses: {\n      hash: result.hash,\n      statuses: result.statuses,\n    },\n  };\n  setGlobal(global);\n  const documentIds = result.statuses.map(({ documentId }) => documentId);\n\n  actions.loadCustomEmojis({ ids: documentIds });\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadRestrictedEmojiStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: RESTRICTED_EMOJI_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    restrictedEmoji: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error: unknown) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, shouldIgnoreCache, tabId = getCurrentTabId() } = payload;\n  if (shouldIgnoreCache || !selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiMessageSearchContext, ApiPeer, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { toChannelId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup } from '../../helpers/chats';\nimport { isApiPeerChat } from '../../helpers/peers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectPeer, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const [searchResult, sponsoredResult] = await Promise.all([\n        callApi('searchChats', { query }),\n        callApi('fetchSponsoredPeer', { query }),\n      ]);\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!searchResult || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = searchResult;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n        sponsoredPeer: sponsoredResult,\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const {\n    type, context, shouldResetResultsByType, shouldCheckFetchingMessagesStatus, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (shouldCheckFetchingMessagesStatus) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: true }, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = (!shouldResetResultsByType && resultsByType?.[type]) || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectPeer(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectPeer(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    context,\n    shouldResetResultsByType,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    peer: chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  context?: ApiMessageSearchContext;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiPeer;\n  peer?: ApiPeer;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n  shouldResetResultsByType?: boolean;\n}) {\n  const {\n    query = '', type, context, offsetRate, offsetId, offsetPeer,\n    peer, maxDate, minDate, shouldResetResultsByType, tabId = getCurrentTabId(),\n  } = params;\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (peer) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      peer,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const isChat = isApiPeerChat(peer);\n    const topicsRequest = isChat && peer.isForum ? callApi('fetchTopics', {\n      chat: peer,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      context,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (shouldResetResultsByType) {\n    global = updateGlobalSearch(global, {\n      resultsByType: {\n        ...(selectTabState(global, tabId).globalSearch || {}).resultsByType,\n        [type]: undefined,\n      },\n    }, tabId);\n  }\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, peer!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n  selectPeer,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = realChatId ? selectPeer(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!peer) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const shouldReuseParams = results?.query === query;\n\n  const offsetId = shouldReuseParams ? results?.nextOffsetId : undefined;\n  const offsetRate = shouldReuseParams ? results?.nextOffsetRate : undefined;\n  const offsetPeerId = shouldReuseParams ? results?.nextOffsetPeerId : undefined;\n  const offsetPeer = shouldReuseParams && offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      peer,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchHashtagPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : peer.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = selectPeer(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!peer || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, peer, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n    global = getGlobal();\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, peer, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n): number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction: LoadMoreDirection,\n  limit: number, newFoundIdsCount: number,\n  currentSegment?: ChatMediaSearchSegment,\n): LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectIsCurrentUserFrozen,\n  selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }));\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hidePeerSettingsBar', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const user = selectUser(global, peerId);\n  if (!user) return;\n\n  const result = await callApi('hidePeerSettingsBar', user);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { Thread, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    whenFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadAccountDaysTtl', async (global, actions, payload): Promise<void> => {\n  const result = await callApi('fetchAccountTTL');\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      accountDaysTtl: result.days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('setAccountTTL', async (global, actions, payload): Promise<void> => {\n  const { days, tabId = getCurrentTabId() } = payload || {};\n  if (!days) return;\n\n  const result = await callApi('setAccountTTL', { days });\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      accountDaysTtl: days,\n    },\n  };\n  setGlobal(global);\n  actions.closeDeleteAccountModal({ tabId });\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_VERIFICATION_PEERS_LIMIT } from '../../../config';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', user, commonChats?.maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('addNoPaidMessagesException', async (global, actions, payload): Promise<void> => {\n  const { userId, shouldRefundCharged } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('addNoPaidMessagesException',\n    { user, shouldRefundCharged });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, userId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatRefundModal', async (global, actions, payload): Promise<void> => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const starsAmount = await callApi('fetchPaidMessagesRevenue', { user });\n  if (starsAmount === undefined) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    chatRefundModal: {\n      userId,\n      starsToRefund: starsAmount,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadPeerSettings({ peerId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', async (global, actions, payload): Promise<void> => {\n  const {\n    emojiStatus, referrerWebAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    if (referrerWebAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n        tabId,\n      });\n    }\n\n    actions.openPremiumModal({ initialSection: 'emoji_status', tabId });\n    return;\n  }\n\n  const result = await callApi('updateEmojiStatus', emojiStatus);\n\n  if (referrerWebAppKey) {\n    if (!result) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SERVER_ERROR',\n          },\n        },\n        tabId,\n      });\n      return;\n    }\n\n    actions.sendWebAppEvent({\n      webAppKey: referrerWebAppKey,\n      event: {\n        eventType: 'emoji_status_set',\n      },\n      tabId,\n    });\n    actions.showNotification({\n      message: {\n        key: 'BotSuggestedStatusUpdated',\n      },\n      customEmojiIconId: emojiStatus.documentId,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openSuggestedStatusModal', async (global, actions, payload): Promise<void> => {\n  const {\n    customEmojiId, duration, botId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: [customEmojiId],\n  });\n  if (!customEmoji?.[0]) {\n    if (webAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SUGGESTED_EMOJI_INVALID',\n          },\n        },\n        tabId,\n      });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    suggestedStatusModal: {\n      customEmojiId,\n      duration,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSettings', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  if (!userFullInfo) {\n    actions.loadFullUser({ userId: peerId });\n    return;\n  }\n\n  const user = selectUser(global, peerId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerSettings', user);\n  if (!result) return;\n\n  const { settings } = result;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('markBotVerificationInfoShown', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n\n  const currentPeerIds = global.settings.botVerificationShownPeerIds;\n  const newPeerIds = unique([peerId, ...currentPeerIds]).slice(0, BOT_VERIFICATION_PEERS_LIMIT);\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      botVerificationShownPeerIds: newPeerIds,\n    },\n  };\n\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './browser/windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened.location.href = url;\n      this.preOpened.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { WebApp, WebAppModalStateType } from '../../types/webapp';\nimport type {\n  GlobalState, TabArgs,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectActiveWebApp, selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp<T extends GlobalState>(\n  global: T, key: string, webAppUpdate: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const originalWebApp = openedWebApps[key];\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webAppUpdate,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: webAppKey,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebAppKey: key },\n      isMoreAppsTabActive: false,\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const activeWebAppKey = currentTabState.webApps.activeWebAppKey;\n\n  if (!activeWebAppKey) return global;\n\n  return removeWebAppFromOpenList(global, activeWebAppKey, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, key: string, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const { openedWebApps, openedOrderedKeys, activeWebAppKey } = currentTabState.webApps;\n  const webApp = openedWebApps[key];\n  if (!webApp) return global;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, key, { isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = openedOrderedKeys.filter((k) => k !== removingWebAppKey);\n  }\n\n  const isRemovedAppActive = activeWebAppKey === getWebAppKey(webApp);\n\n  const openedWebAppsKeys = Object.keys(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebAppKey: openedWebAppsCount\n          ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      ([, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebAppKey: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = selectActiveWebApp(global, tabId);\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  const newActiveWebAppKey = getWebAppKey(newActiveWebApp);\n\n  if (newActiveWebAppKey) {\n    webAppsNotAllowedToClose[newActiveWebAppKey] = {\n      ...newActiveWebApp,\n      isCloseModalOpen: true,\n    };\n  }\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => webAppsNotAllowedToClose[k]);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebAppKey: newActiveWebAppKey,\n      isMoreAppsTabActive: false,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function hasOpenedMoreThanOneWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 1;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { WebApp } from '../../../types/webapp';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport {\n  type ApiChat,\n  type ApiContact,\n  type ApiInputMessageReplyInfo,\n  type ApiPeer,\n  type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getUsernameFromDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getTranslationFn } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  getWebAppKey,\n} from '../../helpers/bots';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser,\n  updateBotAppPermissions,\n  updateManagementProgress,\n  updateSharedSettings,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList,\n  replaceInlineBotSettings,\n  replaceInlineBotsIsLoading,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsCurrentUserFrozen,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\nimport { fetchChatByUsername } from './chats';\nimport { getPeerStarsForMessage } from './messages';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'copy': {\n      copyTextToClipboard(button.copyText);\n      actions.showNotification({ message: oldTranslate('ExactTextCopied', button.copyText), tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${getMainUsername(botSender)} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotApiResult', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, id, queryId, replyInfo, sendAs, isSilent, scheduledAt, allowPaidStars,\n  } = payload;\n\n  await callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs,\n    isSilent,\n    scheduleDate: scheduledAt,\n    allowPaidStars,\n  });\n\n  if (allowPaidStars) actions.loadStarStatus();\n});\n\naddActionHandler('sendInlineBotResult', async (global, actions, payload): Promise<void> => {\n  const {\n    id, queryId, isSilent, scheduledAt, threadId, chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const starsForOneMessage = await getPeerStarsForMessage(global, chatId);\n  const params = {\n    chat,\n    id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduledAt,\n    allowPaidStars: starsForOneMessage,\n  };\n  if (!starsForOneMessage) {\n    actions.sendInlineBotApiResult(params);\n    return;\n  }\n\n  actions.sendInlineBotApiResult({ ...params });\n\n  actions.showNotification({\n    localId: queryId,\n    title: { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } },\n    message: {\n      key: 'MessageSentPaidToastText', variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage) },\n    },\n\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n    tabId,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    appName: bot.firstName,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam, isFullscreen,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n    isFullscreen,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullScreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullScreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, mode, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n    mode,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullscreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipInFuture, tabId = getCurrentTabId() } = payload || {};\n\n  global = updateSharedSettings(global, {\n    shouldSkipWebAppCloseConfirmation: Boolean(shouldSkipInFuture),\n  });\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, mode, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const { url, isFullscreen } = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    mode,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    appName: appName && bot.firstName,\n    peerId,\n    botId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId,\n      botId: (isFromBotMenu ? chatId : bot.id),\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = selectSharedSettings(global).language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserEmojiStatusPermission', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, isEnabled, isBotAccessEmojiGranted,\n  } = payload;\n\n  const bot = selectBot(global, botId);\n\n  if (!botId || !bot) {\n    return;\n  }\n\n  const result = await callApi('toggleUserEmojiStatusPermission', {\n    bot, isEnabled,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, botId, {\n    isBotCanManageEmojiStatus: isEnabled,\n    isBotAccessEmojiGranted,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserLocationPermission', (global, actions, payload): ActionReturnType => {\n  const {\n    botId, isAccessGranted,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  global = getGlobal();\n  global = updateBotAppPermissions(global, bot.id, { geolocation: isAccessGranted });\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n\naddActionHandler('loadBotFreezeAppeal', async (global): Promise<void> => {\n  const botUrl = global.appConfig?.freezeAppealUrl;\n  if (!botUrl) return;\n  const botAppealUsername = botUrl ? getUsernameFromDeepLink(botUrl) : undefined;\n  if (!botAppealUsername) return;\n  const chat = await fetchChatByUsername(global, botAppealUsername);\n  global = getGlobal();\n  global = {\n    ...global,\n    botFreezeAppealId: chat?.id,\n  };\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: email,\n  }, tabId);\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { errorKey: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type {\n  ApiInputInvoice, ApiInputInvoicePremiumGiftStars, ApiInputInvoiceStarGift, ApiInputInvoiceStarGiftResale,\n  ApiRequestInputInvoice,\n} from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { RegularLangFnParameters } from '../../../util/localization';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getRequestInputInvoice,\n  getRequestInputSavedStarGift,\n} from '../../helpers/payments';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  closeInvoice,\n  openStarsTransactionFromReceipt,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo,\n  setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserFrozen,\n  selectPaymentInputInvoice,\n  selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStarsPayment,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n\n  if ('error' in form) {\n    setGlobal(global);\n\n    handlePaymentFormError(form.error, tabId);\n    return;\n  }\n\n  if (form.type === 'regular') {\n    global = updatePayment(global, {\n      inputInvoice: payload,\n      form,\n      isPaymentModalOpen: true,\n      isExtendedMedia: (payload as any).isExtendedMedia,\n      status: undefined,\n    }, tabId);\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice,\n        form,\n        status: 'pending',\n      },\n    }, tabId);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('sendStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, message, shouldHideName, shouldUpgrade, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGift = {\n    type: 'stargift',\n    peerId,\n    giftId: gift.id,\n    message,\n    shouldHideName,\n    shouldUpgrade: shouldUpgrade || undefined,\n  };\n\n  payInputStarInvoice(global, inputInvoice, gift.stars, tabId);\n});\n\naddActionHandler('buyStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    slug, peerId, stars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGiftResale = {\n    type: 'stargiftResale',\n    slug,\n    peerId,\n  };\n\n  payInputStarInvoice(global, inputInvoice, stars, tabId);\n});\n\naddActionHandler('sendPremiumGiftByStars', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, months, amount, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoicePremiumGiftStars = {\n    type: 'premiumGiftStars',\n    userId,\n    months,\n    message,\n  };\n\n  payInputStarInvoice(global, inputInvoice, amount, tabId);\n});\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment.form!;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const paymentState = selectTabState(global, tabId).payment;\n  const { form, temporaryPassword, inputInvoice } = paymentState;\n\n  if (!inputInvoice || !form) {\n    return;\n  }\n\n  const { nativeProvider, formId } = form;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    paymentState,\n    tabId,\n  });\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { directInfo, tabId = getCurrentTabId() } = payload;\n  const starPayment = selectStarsPayment(global, tabId);\n  const inputInvoice = starPayment?.inputInvoice || directInfo?.inputInvoice;\n  if (!inputInvoice) return;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const formId = (starPayment.form?.formId || starPayment.subscriptionInfo?.subscriptionFormId || directInfo?.formId)!;\n\n  global = updateStarsPayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateStarsPayment(global, { status: 'failed' }, tabId);\n    setGlobal(global);\n    actions.closeStarsPaymentModal({ tabId });\n    actions.closeGiftModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStarsPayment(global, { status: 'paid' }, tabId);\n  setGlobal(global);\n  actions.closeStarsPaymentModal({ tabId });\n\n  if ('channelId' in result) {\n    actions.openChat({ id: result.channelId, tabId });\n  }\n\n  actions.apiUpdate({\n    '@type': 'updateStarPaymentStateCompleted',\n    paymentState: directInfo ? { inputInvoice } : starPayment,\n    tabId,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.form?.nativeParams.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n    && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { descriptionKey: { key: 'ErrorUnexpected' } satisfies RegularLangFnParameters };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen: true,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n  if (!gifts) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftModal: {\n      forPeerId: forUserId,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { messageKey: { key: 'ErrorUnexpected' }, field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { messageKey: result.messageKey, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = Math.floor(Date.now() / 1000);\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('upgradeGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, shouldKeepOriginalDetails, upgradeStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftUpgrade: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftUpgradeModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!upgradeStars) {\n    callApi('upgradeStarGift', {\n      inputSavedGift: requestSavedGift,\n      shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftUpgrade',\n    inputSavedGift: gift,\n    shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n  };\n\n  payInputStarInvoice(global, invoice, upgradeStars, tabId);\n});\n\naddActionHandler('transferGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, recipientId, transferStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectChat(global, recipientId);\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!peer || !requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftTransfer: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftTransferModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!transferStars) {\n    callApi('transferStarGift', {\n      inputSavedGift: requestSavedGift,\n      toPeer: peer,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftTransfer',\n    inputSavedGift: gift,\n    recipientId,\n  };\n\n  payInputStarInvoice(global, invoice, transferStars, tabId);\n});\n\nasync function payInputStarInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice, price: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const actions = getActions();\n  const balance = global.stars?.balance;\n\n  if (balance === undefined) return;\n\n  if (balance.amount < price) {\n    actions.openStarsBalanceModal({ tabId });\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n  setGlobal(global);\n\n  if ('error' in form) {\n    handlePaymentFormError(form.error, tabId);\n    return;\n  }\n\n  actions.sendStarPaymentForm({\n    directInfo: {\n      inputInvoice,\n      formId: form.formId,\n    },\n    tabId,\n  });\n}\n\naddActionHandler('openUniqueGiftBySlug', async (global, actions, payload): Promise<void> => {\n  const {\n    slug, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gift = await callApi('fetchUniqueStarGift', { slug });\n\n  if (!gift) {\n    actions.showNotification({\n      message: {\n        key: 'GiftWasNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.openGiftInfoModal({ gift, tabId });\n});\n\naddActionHandler('processStarGiftWithdrawal', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, password, tabId = getCurrentTabId(),\n  } = payload;\n\n  let giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  global = updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      isLoading: true,\n      errorKey: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const inputGift = getRequestInputSavedStarGift(global, gift);\n  if (!inputGift) {\n    return;\n  }\n\n  const result = await callApi('fetchStarGiftWithdrawalUrl', { inputGift, password });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  if ('error' in result) {\n    global = updateTabState(global, {\n      giftWithdrawModal: {\n        ...giftWithdrawModal,\n        isLoading: false,\n        errorKey: result.messageKey,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.openUrl({ url: result.url, shouldSkipModal: true, tabId });\n  actions.closeGiftWithdrawModal({ tabId });\n});\n\nfunction handlePaymentFormError(error: string, tabId: number) {\n  if (error === 'SLUG_INVALID') {\n    getActions().showNotification({\n      message: {\n        key: 'PaymentInvoiceNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  getActions().showDialog({ data: { message: error, hasErrorKey: true }, tabId });\n}\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiSavedStarGift, ApiStarGiftUnique } from '../../../api/types';\nimport type { StarGiftCategory } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_RESALE_GIFTS_FILTER_OPTIONS, RESALE_GIFTS_LIMIT } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { areInputSavedGiftsEqual, getRequestInputSavedStarGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsSubscriptions,\n  appendStarsTransactions,\n  replacePeerSavedGifts,\n  updateChats,\n  updateStarsBalance,\n  updateStarsSubscriptionLoading,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectGiftProfileFilter,\n  selectPeer,\n  selectPeerSavedGifts,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStatus = global.stars;\n  const needsTopupOptions = !currentStatus?.topupOptions;\n\n  const [status, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!status || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stars: {\n      ...currentStatus,\n      balance: status.balance,\n      topupOptions: topupOptions || currentStatus!.topupOptions,\n      history: {\n        all: undefined,\n        inbound: undefined,\n        outbound: undefined,\n      },\n      subscriptions: undefined,\n    },\n  };\n\n  if (status.history) {\n    global = appendStarsTransactions(global, 'all', status.history, status.nextHistoryOffset);\n  }\n\n  if (status.subscriptions) {\n    global = appendStarsSubscriptions(global, status.subscriptions, status.nextSubscriptionOffset);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type } = payload;\n\n  const history = global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound' || undefined,\n    isOutbound: type === 'outbound' || undefined,\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarGifts', async (global): Promise<void> => {\n  const result = await callApi('fetchStarGifts');\n\n  if (!result) {\n    return;\n  }\n\n  const byId = buildCollectionByKey(result, 'id');\n\n  const idsByCategoryName: Record<StarGiftCategory, string[]> = {\n    all: [],\n    stock: [],\n    limited: [],\n    resale: [],\n  };\n\n  const allStarGiftIds = Object.keys(byId);\n  const allStarGifts = Object.values(byId);\n\n  const limitedStarGiftIds = allStarGifts.map((gift) => (gift.isLimited ? gift.id : undefined))\n    .filter(Boolean);\n\n  const stockedStarGiftIds = allStarGifts.map((gift) => (\n    gift.availabilityRemains || !gift.availabilityTotal ? gift.id : undefined\n  )).filter(Boolean);\n\n  const resaleStarGiftIds = allStarGifts.map((gift) => (gift.availabilityResale ? gift.id : undefined))\n    .filter(Boolean);\n\n  idsByCategoryName.all = allStarGiftIds;\n  idsByCategoryName.limited = limitedStarGiftIds;\n  idsByCategoryName.stock = stockedStarGiftIds;\n  idsByCategoryName.resale = resaleStarGiftIds;\n\n  allStarGifts.forEach((gift) => {\n    const starsCategory = gift.stars;\n    if (!idsByCategoryName[starsCategory]) {\n      idsByCategoryName[starsCategory] = [];\n    }\n    idsByCategoryName[starsCategory].push(gift.id);\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    starGifts: {\n      byId,\n      idsByCategory: idsByCategoryName,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('updateResaleGiftsFilter', (global, actions, payload): ActionReturnType => {\n  const {\n    filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      filter,\n    },\n  }, tabId);\n  if (tabState.resaleGifts.giftId) {\n    actions.loadResaleGifts({ giftId: tabState.resaleGifts.giftId, shouldRefresh: true, tabId });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadResaleGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  let tabState = selectTabState(global, tabId);\n  if (tabState.resaleGifts.isLoading || (tabState.resaleGifts.isAllLoaded && !shouldRefresh)) return;\n\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      isLoading: true,\n      ...(shouldRefresh && {\n        count: 0,\n        nextOffset: undefined,\n        isAllLoaded: false,\n      }),\n    },\n  }, tabId);\n  setGlobal(global);\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const nextOffset = tabState.resaleGifts.nextOffset;\n  const attributesHash = tabState.resaleGifts.attributesHash;\n  const filter = tabState.resaleGifts.filter;\n\n  const result = await callApi('fetchResaleGifts', {\n    giftId,\n    offset: nextOffset,\n    limit: RESALE_GIFTS_LIMIT,\n    attributesHash,\n    filter,\n  });\n\n  if (!result) {\n    return;\n  };\n\n  const {\n    chats,\n    users,\n  } = result;\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n\n  const currentGifts = tabState.resaleGifts.gifts;\n  const newGifts = !shouldRefresh ? currentGifts.concat(result.gifts) : result.gifts;\n  const currentUpdateIteration = tabState.resaleGifts.updateIteration;\n  const shouldUpdateIteration = tabState.resaleGifts.giftId !== giftId || shouldRefresh;\n  const updateIteration = shouldUpdateIteration ? currentUpdateIteration + 1 : currentUpdateIteration;\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      giftId,\n      count: result.count || tabState.resaleGifts.count,\n      gifts: newGifts,\n      attributes: result.attributes || tabState.resaleGifts.attributes,\n      counters: result.counters || tabState.resaleGifts.counters,\n      attributesHash: result.attributesHash,\n      nextOffset: result.nextOffset,\n      isLoading: false,\n      isAllLoaded: !result.nextOffset,\n      updateIteration,\n    },\n  }, tabId);\n\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateChats(global, buildCollectionByKey(chats, 'id'));\n\n  setGlobal(global);\n});\n\naddActionHandler('resetResaleGifts', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    resaleGifts: {\n      updateIteration: tabState.resaleGifts.updateIteration + 1,\n      filter: DEFAULT_RESALE_GIFTS_FILTER_OPTIONS,\n      count: 0,\n      gifts: [],\n    },\n  }, tabId);\n});\n\naddActionHandler('loadPeerSavedGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  global = getGlobal();\n\n  const currentGifts = selectPeerSavedGifts(global, peerId, tabId);\n  const localNextOffset = currentGifts?.nextOffset;\n\n  if (!shouldRefresh && currentGifts && !localNextOffset) return; // Already loaded all\n\n  const fetchingFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  const result = await callApi('fetchSavedStarGifts', {\n    peer,\n    offset: !shouldRefresh ? localNextOffset : '',\n    filter: fetchingFilter,\n  });\n\n  global = getGlobal();\n  const currentFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  if (!result || currentFilter !== fetchingFilter) {\n    return;\n  }\n\n  const newGifts = currentGifts && !shouldRefresh ? currentGifts.gifts.concat(result.gifts) : result.gifts;\n\n  global = replacePeerSavedGifts(global, peerId, newGifts, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reloadPeerSavedGifts', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n  } = payload;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('loadStarsSubscriptions', async (global): Promise<void> => {\n  const subscriptions = global.stars?.subscriptions;\n  const offset = subscriptions?.nextOffset;\n  if (subscriptions && !offset) return; // Already loaded all\n\n  global = updateStarsSubscriptionLoading(global, true);\n  setGlobal(global);\n\n  const result = await callApi('fetchStarsSubscriptions', {\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsSubscriptions(global, result.subscriptions, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('changeStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id, isCancelled } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('changeStarsSubscription', {\n    peer,\n    subscriptionId: id,\n    isCancelled,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('fulfillStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('fulfillStarsSubscription', {\n    peer,\n    subscriptionId: id,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('changeGiftVisibility', async (global, actions, payload): Promise<void> => {\n  const { gift, shouldUnsave, tabId = getCurrentTabId() } = payload;\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const oldGifts = selectTabState(global, tabId).savedGifts.giftsByPeerId[peerId];\n  if (oldGifts?.gifts?.length) {\n    const newGifts = oldGifts.gifts.map((g) => {\n      if (g.inputGift && areInputSavedGiftsEqual(g.inputGift, gift)) {\n        return {\n          ...g,\n          isUnsaved: shouldUnsave,\n        } satisfies ApiSavedStarGift;\n      }\n      return g;\n    });\n    global = replacePeerSavedGifts(global, peerId, newGifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('saveStarGift', {\n    inputGift: requestInputGift,\n    shouldUnsave,\n  });\n  global = getGlobal();\n\n  if (!result) {\n    global = replacePeerSavedGifts(global, peerId, oldGifts.gifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  // Reload gift list to avoid issues with pagination\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabId)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('convertGiftToStars', async (global, actions, payload): Promise<void> => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const result = await callApi('convertStarGift', {\n    inputSavedGift: requestInputGift,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n  actions.openStarsBalanceModal({ tabId });\n});\n\naddActionHandler('openGiftUpgradeModal', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const samples = await callApi('fetchStarGiftUpgradePreview', {\n    giftId,\n  });\n\n  if (!samples) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftUpgradeModal: {\n      recipientId: peerId,\n      gift,\n      sampleAttributes: samples,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleSavedGiftPinned', async (global, actions, payload): Promise<void> => {\n  const { gift, peerId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const savedGifts = selectPeerSavedGifts(global, peerId, tabId);\n  if (!savedGifts) return;\n  const pinLimit = global.appConfig?.savedGiftPinLimit;\n  const currentPinnedGifts = savedGifts.gifts.filter((g) => g.isPinned);\n  const newPinnedGifts = gift.isPinned\n    ? currentPinnedGifts.filter((g) => (g.gift as ApiStarGiftUnique).slug !== (gift.gift as ApiStarGiftUnique).slug)\n    : [...currentPinnedGifts, gift];\n\n  const trimmedPinnedGifts = pinLimit ? newPinnedGifts.slice(-pinLimit) : newPinnedGifts;\n\n  const inputSavedGifts = trimmedPinnedGifts.map((g) => getRequestInputSavedStarGift(global, g.inputGift!))\n    .filter(Boolean);\n\n  const result = await callApi('toggleSavedGiftPinned', {\n    inputSavedGifts,\n    peer,\n  });\n\n  if (!result) return;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('updateStarGiftPrice', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, price,\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n\n  if (!requestSavedGift) {\n    return;\n  }\n\n  const result = await callApi('updateStarGiftPrice', {\n    inputSavedGift: requestSavedGift,\n    price,\n  });\n\n  if (!result) return;\n\n  actions.reloadPeerSavedGifts({ peerId: global.currentUserId! });\n});\n","import type { ApiError, ApiReaction, ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, partition, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addPaidReaction,\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions: ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        type: 'emoji',\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n    * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const [paidReactions, regularReactions] = partition(newUserReactions, (r) => r.type === 'paid');\n  const trimmedRegularReactions = regularReactions.slice(-limit) as ApiReaction[];\n  const localReactions = [...paidReactions, ...trimmedRegularReactions];\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, localReactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions: trimmedRegularReactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('addLocalPaidReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, count, shouldIgnoreDefaultPrivacy = false, tabId = getCurrentTabId(),\n  } = payload;\n  const defaultPrivacy = global.settings.paidReactionPrivacy;\n  const isPrivate = !shouldIgnoreDefaultPrivacy ? defaultPrivacy?.type === 'anonymous' : payload.isPrivate;\n  const peerId = !shouldIgnoreDefaultPrivacy\n    ? (defaultPrivacy?.type === 'peer' ? defaultPrivacy.peerId : undefined) : payload.peerId;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const currentReactions = message.reactions?.results || [];\n  const newReactions = addPaidReaction(currentReactions, count, isPrivate, peerId);\n  global = updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results: newReactions,\n    },\n  });\n  setGlobal(global);\n\n  const messageKey = getMessageKey(message);\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    actions.startActiveReaction({\n      containerId: messageKey,\n      reaction: {\n        type: 'paid',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('sendPaidReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, forcedAmount, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const paidReaction = message.reactions?.results?.find((r) => r.reaction.type === 'paid');\n  const count = forcedAmount || paidReaction?.localAmount || 0;\n  if (!count) {\n    return;\n  }\n  actions.resetLocalPaidReactions({ chatId, messageId });\n\n  try {\n    await callApi('sendPaidReaction', {\n      chat,\n      messageId,\n      count,\n      isPrivate: paidReaction?.localIsPrivate,\n      peerId: paidReaction?.localPeerId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'BALANCE_TOO_LOW') {\n      actions.openStarsBalanceModal({ originReaction: { chatId, messageId, amount: count }, tabId });\n    }\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactionsCount: undefined,\n      unreadReactions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support unread reactions in threads\n  return undefined;\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n  updateVerifyMonetizationModal,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeer,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  const chatFullInfo = selectChatFullInfo(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const dcId = chatFullInfo?.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { peer, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('processMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, currentPassword, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchMonetizationRevenueWithdrawalUrl', { peer, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: false,\n    errorKey: 'error' in result ? result.messageKey : undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if ('url' in result) {\n    actions.openUrl({\n      url: result.url,\n      shouldSkipModal: true,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n    actions.closeMonetizationVerificationModal({ tabId });\n  }\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, MESSAGE_ID_REQUIRED_ERROR } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen,\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories, selectTabState,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      byPeerId: {\n        ...global.stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.profileIds?.length && peerStories?.profileIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.archiveIds?.length && peerStories?.archiveIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    description = '',\n    option = '',\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const response = await callApi('reportStory', {\n    peer,\n    storyId,\n    description,\n    option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        subject: 'story',\n        peerId,\n        description,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        description,\n        peerId,\n        subject: 'story',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n    botsPrivacy: 'none',\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ELECTRON } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsTransactionModal({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      monetizationStatistics: undefined,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  /* if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  } */\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n\naddActionHandler('closeChatInviteModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatInviteModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../..';\n\naddActionHandler('toggleShowLastMessage', (global, actions, payload): ActionReturnType => {\n  global = {\n    ...global,\n    chatFilters: {\n      ...global.chatFilters,\n      shouldShowLastMessage: !global.chatFilters.shouldShowLastMessage,\n    },\n  };\n\n  setGlobal(global);\n});\n","import type { ApiChatType } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getWebAppKey } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { updateSharedSettings } from '../../reducers';\nimport {\n  addWebAppToOpenList,\n  clearOpenedWebApps,\n  hasOpenedMoreThanOneWebApps,\n  hasOpenedWebApps,\n  removeActiveWebAppFromOpenList,\n  removeWebAppFromOpenList,\n  replaceIsWebAppModalOpen,\n  replaceWebAppModalState,\n  updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveWebApp, selectCurrentMessageList, selectTabState, selectWebApp,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!webApp) return;\n\n  global = getGlobal();\n  global = addWebAppToOpenList(global, webApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    key, update, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, key, update, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('openMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      activeWebAppKey: undefined,\n      isMoreAppsTabActive: true,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  const openedWebApps = tabState.webApps.openedWebApps;\n\n  const openedWebAppsKeys = Object.keys(openedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: openedWebAppsCount ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      isModalOpen: openedWebAppsCount > 0,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { key, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, key, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  const shouldShowConfirmation = !shouldSkipConfirmation\n    && !selectSharedSettings(global).shouldSkipWebAppCloseConfirmation && hasOpenedMoreThanOneWebApps(global, tabId);\n\n  if (shouldShowConfirmation) {\n    actions.openWebAppsCloseConfirmationModal({ tabId });\n    return global;\n  }\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { state, tabId = getCurrentTabId() } = payload;\n\n  return replaceWebAppModalState(global, state, tabId);\n});\n\naddActionHandler('updateMiniAppCachedPosition', (global, actions, payload): ActionReturnType => {\n  const { position } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedPosition: position,\n  });\n  return global;\n});\n\naddActionHandler('updateMiniAppCachedSize', (global, actions, payload): ActionReturnType => {\n  const { size } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedSize: size,\n  });\n\n  return global;\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const activeWebApp = selectActiveWebApp(global, tabId);\n  if (!activeWebApp?.url) return undefined;\n\n  const key = getWebAppKey(activeWebApp);\n\n  return updateWebApp(global, key, { slug: payload.slug }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-expect-error -- No idea how to type this properly\n    actions[action]({\n      ...(callbackPayload),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendWebAppEvent', (global, actions, payload): ActionReturnType => {\n  const { event, webAppKey, tabId = getCurrentTabId() } = payload;\n  const webApp = selectWebApp(global, webAppKey, tabId);\n  if (!webApp) return global;\n\n  const newPlannedEvents = webApp.plannedEvents ? [...webApp.plannedEvents, event] : [event];\n\n  actions.updateWebApp({\n    key: webAppKey,\n    update: {\n      plannedEvents: newPlannedEvents,\n    },\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    emojiStatusAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    emojiStatusAccessModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    locationAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    locationAccessModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { type ActiveDownloads, FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageDownloadableMedia,\n  getMessageStatefulContent,\n  isChatChannel,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectCanForwardMessage,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { getPeerStarsForMessage } from '../api/messages';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted, timestamp,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      timestamp,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, quoteOffset,\n    scrollTargetPosition, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  const onMessageReady = timestamp\n    ? () => actions.openMediaFromTimestamp({\n      chatId, threadId, messageId, timestamp, tabId,\n    }) : undefined;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    quoteOffset,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    onMessageReady?.();\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n    onLoaded: onMessageReady,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, quoteOffset, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n      quoteOffset,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  const forwardableMessageIds = messageIds.filter((id) => {\n    const message = selectChatMessage(global, fromChatId, id);\n    return message && selectCanForwardMessage(global, message);\n  });\n\n  if (!forwardableMessageIds.length) {\n    return;\n  }\n\n  actions.openForwardMenu({ fromChatId, messageIds: forwardableMessageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = getMessageDownloadableMedia(message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line @stylistic/max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportModal = selectTabState(global, tabId).reportModal;\n  if (!reportModal) {\n    return undefined;\n  }\n\n  if (reportModal.sections.length === 1) {\n    actions.closeReportModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportModal: {\n      ...reportModal,\n      sections: reportModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    paidReactionModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closePaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    paidReactionModal: undefined,\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getPeerTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n    const statefulContent = getMessageStatefulContent(global, message);\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, statefulContent, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, isSchedule,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      chatId,\n      messageIds,\n      isSchedule,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const {\n    randomId, additionalInfo, canReport, sponsorInfo, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: {\n      randomId,\n      canReport,\n      additionalInfo,\n      sponsorInfo,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closePreparedInlineMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    preparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    sharePreparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateSharePreparedMessageModalSendArgs', async (global, actions, payload): Promise<void> => {\n  const { args, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.sharePreparedMessageModal) {\n    return;\n  }\n\n  if (!args) {\n    global = updateTabState(global, {\n      sharePreparedMessageModal: {\n        ...tabState.sharePreparedMessageModal,\n        pendingSendArgs: undefined,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const starsForSendMessage = await getPeerStarsForMessage(global, args.peerId);\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      ...tabState.sharePreparedMessageModal,\n      pendingSendArgs: {\n        peerId: args.peerId,\n        threadId: args.threadId,\n        starsForSendMessage,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ApiMessage } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getGlobal } from '..';\nimport { getMessageStatefulContent } from './messages';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: OldLangFn,\n  message: ApiMessage,\n) {\n  const global = getGlobal();\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = (renderMessageText({ message, shouldRenderAsHtml: true }) as string[])?.join('');\n\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text, true) as string;\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType, TabState } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { updateTabState } from '../reducers/tabs';\nimport { addActionHandler, type TabStateActionNames } from '..';\n\nexport function addTabStateResetterAction<ActionName extends TabStateActionNames>(\n  name: ActionName, key: keyof TabState,\n) {\n  // @ts-ignore\n  addActionHandler(name, (global, actions, payload): ActionReturnType => {\n    const { tabId = getCurrentTabId() } = payload || {};\n\n    return updateTabState(global, {\n      [key]: undefined,\n    }, tabId);\n  });\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query && currentContent !== GlobalSearchContent.BotApps\n    ? { chats: !chatId, messages: true } : undefined;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../..';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: false,\n  }, tabId);\n});\n\naddActionHandler('openDeleteAccountModal', (global, actions, payload): ActionReturnType => {\n  const { days, tabId = getCurrentTabId() } = payload || {};\n  if (!days) return;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    deleteAccountModal: {\n      selfDestructAccountDays: days,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteAccountModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserFrozen } from '../../selectors';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n\naddActionHandler('closeSuggestedStatusModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    suggestedStatusModal: undefined,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeChatRefundModal', 'chatRefundModal');\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { IS_ELECTRON } from './browser/windowEnvironment';\nimport { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  ANIMATION_WAVE_MIN_INTERVAL,\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectPeerPaidMessagesStars,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  const hasLocalId = notification.localId;\n  notification.localId ||= generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => (\n    hasLocalId ? n.localId === notification.localId : n.message === notification.message\n  ));\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageListType, tabId = getCurrentTabId() } = payload;\n\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n\n  if (paidMessagesStars && messageListType === 'scheduled') {\n    actions.showNotification({\n      message: {\n        key: 'DescriptionScheduledPaidMessagesNotAllowed',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('requestWave', (global, actions, payload): ActionReturnType => {\n  const {\n    startX, startY, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!IS_WAVE_TRANSFORM_SUPPORTED || !selectCanAnimateInterface(global)) return undefined;\n\n  const tabState = selectTabState(global, tabId);\n  const currentLastTime = tabState.wave?.lastWaveTime || 0;\n  if (Date.now() - currentLastTime < ANIMATION_WAVE_MIN_INTERVAL) return undefined;\n\n  return updateTabState(global, {\n    wave: {\n      lastWaveTime: Date.now(),\n      startX,\n      startY,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped, isInvertedMedia, webPageMediaSize,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n      isInvertedMedia,\n      webPageMediaSize,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setPaidMessageAutoApprove', (global): ActionReturnType => {\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      byKey: {\n        ...global.settings.byKey,\n        shouldPaidMessageAutoApprove: true,\n      },\n    },\n  };\n\n  return global;\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload.isAvailable),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = selectSharedSettings(global);\n  const currentUserId = global.currentUserId;\n  const isTestServer = global.config?.isTestServer;\n  const prefix = isTestServer ? '[T] ' : '';\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${prefix}${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${prefix}${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${prefix}${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(`${prefix}${title}`);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : `${prefix}${PAGE_TITLE}`);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline({ isOnline: newBlurredTabsCount !== getAllMultitabTokens().length });\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n\naddActionHandler('persistExpandedState', (global, actions, payload): ActionReturnType => {\n  const { id, isExpanded } = payload;\n\n  const expandedState = {\n    ...global.expandedState,\n    [id]: isExpanded,\n  };\n\n  global = {\n    ...global,\n    expandedState,\n  };\n\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_GIFT_PROFILE_FILTER_OPTIONS } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  clearPayment,\n  updatePayment,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const starsBalanceModal = selectTabState(global, tabId).starsBalanceModal;\n\n  actions.processOriginStarsPayment({\n    originData: starsBalanceModal,\n    status,\n    tabId,\n  });\n\n  global = clearPayment(global, tabId);\n  global = updatePayment(global, {\n    status,\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('resetPaymentStatus', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updatePayment(global, { status: undefined }, tabId);\n  global = updateStarsPayment(global, { status: undefined }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { filter, peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const prevFilter = tabState.savedGifts.filter;\n  let updatedFilter = {\n    ...prevFilter,\n    ...filter,\n  };\n\n  if (!updatedFilter.shouldIncludeUnlimited\n    && !updatedFilter.shouldIncludeLimited\n    && !updatedFilter.shouldIncludeUnique) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeUnlimited: true,\n      shouldIncludeLimited: true,\n      shouldIncludeUnique: true,\n      ...filter,\n    };\n  }\n\n  if (!updatedFilter.shouldIncludeDisplayed && !updatedFilter.shouldIncludeHidden) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeDisplayed: true,\n      shouldIncludeHidden: true,\n      ...filter,\n    };\n  }\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: updatedFilter,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('resetGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: {\n        ...DEFAULT_GIFT_PROFILE_FILTER_OPTIONS,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('openPaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closePaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: false,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin, MediaViewerOrigin } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { getTimestampableMedia } from '../../helpers';\nimport { getMessageReplyInfo } from '../../helpers/replies';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectReplyMessage, selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, timestamp, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n      timestamp,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('openMediaFromTimestamp', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, threadId, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const replyInfo = getMessageReplyInfo(message);\n  const replyMessage = selectReplyMessage(global, message);\n\n  const messageMedia = getTimestampableMedia(message);\n  const maxMessageDuration = messageMedia?.duration;\n  if (maxMessageDuration) {\n    if (maxMessageDuration <= timestamp) return;\n\n    if (messageMedia.mediaType === 'video') {\n      actions.openMediaViewer({\n        chatId,\n        messageId,\n        threadId,\n        origin: MediaViewerOrigin.Inline,\n        timestamp,\n        tabId,\n      });\n      return;\n    }\n\n    actions.openAudioPlayer({\n      chatId,\n      messageId,\n      threadId,\n      origin: AudioOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  const replyMessageMedia = replyMessage ? getTimestampableMedia(replyMessage) : undefined;\n  const maxReplyMessageDuration = replyMessageMedia?.duration;\n  if (!maxReplyMessageDuration || maxReplyMessageDuration <= timestamp) return;\n\n  if (replyMessageMedia.mediaType === 'video') {\n    actions.openMediaViewer({\n      chatId: replyMessage!.chatId,\n      messageId: replyMessage!.id,\n      threadId: replyInfo?.replyToTopId,\n      origin: MediaViewerOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  actions.openAudioPlayer({\n    chatId: replyMessage!.chatId,\n    messageId: replyMessage!.id,\n    threadId: replyInfo?.replyToTopId,\n    origin: AudioOrigin.Inline,\n    timestamp,\n    tabId,\n  });\n});\n\naddActionHandler('updateLastPlaybackTimestamp', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, timestamp } = payload;\n\n  const currentChatPlaybacks = global.messages.playbackByChatId[chatId]?.byId || {};\n\n  if (!timestamp) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        playbackByChatId: {\n          ...global.messages.playbackByChatId,\n          [chatId]: {\n            byId: omit(currentChatPlaybacks, [messageId]),\n          },\n        },\n      },\n    };\n  }\n\n  return {\n    ...global,\n    messages: {\n      ...global.messages,\n      playbackByChatId: {\n        ...global.messages.playbackByChatId,\n        [chatId]: {\n          byId: {\n            ...currentChatPlaybacks,\n            [messageId]: timestamp,\n          },\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SCREEN_LOCKED_CACHE_KEY } from '../../../config';\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.openSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  localStorage.removeItem(IS_SCREEN_LOCKED_CACHE_KEY);\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ApiInputSavedStarGift, ApiSavedStarGift } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPrizeStarsTransactionFromGiveaway, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler } from '../../index';\nimport {\n  clearStarPayment, openStarsTransactionModal,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChatMessage, selectIsCurrentUserFrozen, selectStarsPayment, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOriginStarsPayment', (global, actions, payload): ActionReturnType => {\n  const { originData, status, tabId = getCurrentTabId() } = payload;\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = originData || {};\n\n  if (!originStarsPayment && !originReaction && !originGift && !topup) {\n    return undefined;\n  }\n\n  actions.closeStarsBalanceModal({ tabId });\n\n  if (status !== 'paid') {\n    return undefined;\n  }\n\n  // Re-open previous payment modal\n  if (originStarsPayment) {\n    global = updateTabState(global, {\n      starsPayment: originStarsPayment,\n    }, tabId);\n  }\n\n  if (originReaction) {\n    actions.sendPaidReaction({\n      chatId: originReaction.chatId,\n      messageId: originReaction.messageId,\n      forcedAmount: originReaction.amount,\n      tabId,\n    });\n  }\n\n  if (originGift) {\n    actions.sendStarGift({\n      ...originGift,\n      tabId,\n    });\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: true,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftRecipientPicker', 'isGiftRecipientPickerOpen');\n\naddActionHandler('openStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: {\n      isOpen: true,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsGiftingPickerModal', 'starsGiftingPickerModal');\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originStarsPayment,\n    originReaction,\n    originGift,\n    topup,\n    shouldIgnoreBalance,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starBalance = global.stars?.balance;\n\n  if (!shouldIgnoreBalance && starBalance && topup && topup.balanceNeeded <= starBalance.amount) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('StarsTopupLinkEnough'),\n      actionText: langProvider.oldTranslate('StarsTopupLinkTopupAnyway'),\n      action: {\n        action: 'openStarsBalanceModal',\n        payload: { topup, shouldIgnoreBalance: true, tabId },\n      },\n      icon: 'star',\n      tabId,\n    });\n    return undefined;\n  }\n\n  global = clearStarPayment(global, tabId);\n\n  // Always refresh status on opening\n  actions.loadStarStatus();\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originStarsPayment,\n      originReaction,\n      originGift,\n      topup,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsBalanceModal', 'starsBalanceModal');\n\naddActionHandler('closeStarsPaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const starsPayment = selectStarsPayment(global, tabId);\n  let status = starsPayment?.status;\n  if (!status || status === 'pending') {\n    status = 'cancelled';\n  }\n\n  return updateTabState(global, {\n    starsPayment: {\n      status,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddTabStateResetterAction('closeStarsTransactionModal', 'starsTransactionModal');\n\naddActionHandler('openStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { subscription, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    starsSubscriptionModal: {\n      subscription,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsSubscriptionModal', 'starsSubscriptionModal');\n\naddTabStateResetterAction('closeGiftModal', 'giftModal');\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n});\n\naddActionHandler('openGiftInfoModalFromMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message || !message.content.action) return;\n\n  const action = message.content.action;\n  if (action.type !== 'starGift' && action.type !== 'starGiftUnique') return;\n\n  const starGift = action.type === 'starGift' ? action : undefined;\n  const uniqueGift = action.type === 'starGiftUnique' ? action : undefined;\n\n  const giftReceiverId = action.peerId || (message.isOutgoing ? message.chatId : global.currentUserId!);\n\n  const inputGift: ApiInputSavedStarGift = action.savedId\n    ? { type: 'chat', chatId, savedId: action.savedId }\n    : { type: 'user', messageId };\n\n  const fromId = action.fromId || (message.isOutgoing ? global.currentUserId! : message.chatId);\n\n  const gift: ApiSavedStarGift = {\n    date: message.date,\n    gift: action.gift,\n    message: starGift?.message,\n    starsToConvert: starGift?.starsToConvert,\n    isNameHidden: starGift?.isNameHidden,\n    isUnsaved: !action.isSaved,\n    fromId,\n    messageId: message.id,\n    isConverted: starGift?.isConverted,\n    upgradeMsgId: starGift?.upgradeMsgId,\n    canUpgrade: starGift?.canUpgrade,\n    alreadyPaidUpgradeStars: starGift?.alreadyPaidUpgradeStars,\n    inputGift,\n    canExportAt: uniqueGift?.canExportAt,\n    savedId: action.savedId,\n    transferStars: uniqueGift?.transferStars,\n  };\n\n  actions.openGiftInfoModal({ peerId: giftReceiverId, gift, tabId });\n});\n\naddActionHandler('openGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peerId = 'peerId' in payload ? payload.peerId : undefined;\n  const recipientId = 'recipientId' in payload ? payload.recipientId : undefined;\n\n  return updateTabState(global, {\n    giftInfoModal: {\n      peerId,\n      gift,\n      recipientId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftResalePriceComposerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    giftResalePriceComposerModal: {\n      peerId,\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftInfoModal', 'giftInfoModal');\n\naddTabStateResetterAction('closeGiftResalePriceComposerModal', 'giftResalePriceComposerModal');\n\naddTabStateResetterAction('closeGiftUpgradeModal', 'giftUpgradeModal');\n\naddActionHandler('openGiftWithdrawModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftWithdrawModal', 'giftWithdrawModal');\n\naddActionHandler('openGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: {\n      emojiStatus,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearGiftWithdrawError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const giftWithdrawModal = tabState?.giftWithdrawModal;\n  if (!giftWithdrawModal) return undefined;\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      errorKey: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftTransferModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    giftTransferModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftTransferModal', 'giftTransferModal');\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { addActionHandler } from '../../index';\nimport { updateChatMessage } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetLocalPaidReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const { reactions } = message;\n\n  if (!reactions) {\n    return undefined;\n  }\n\n  const updatedResults = reactions.results.map((reaction) => {\n    if (reaction.localAmount) {\n      if (!reaction.count) return undefined;\n      return {\n        ...reaction,\n        localAmount: undefined,\n        localPreviousChosenOrder: undefined,\n        chosenOrder: reaction.localPreviousChosenOrder,\n      };\n    }\n    return reaction;\n  }).filter(Boolean);\n\n  Object.values(global.byTabId)\n    .forEach(({ id: tabId }) => {\n      actions.dismissNotification({\n        localId: getMessageKey(message),\n        tabId,\n      });\n    });\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results: updatedResults,\n    },\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\nimport { getPeerStarsForMessage } from '../api/messages';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerId: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n  const messagePriceInStars = await getPeerStarsForMessage(global, storyPeerId!);\n  if (messagePriceInStars === undefined) return;\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../..';\nimport { updateVerifyMonetizationModal } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('openMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), chatId } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearMonetizationVerificationError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateVerifyMonetizationModal(global, { errorKey: undefined }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../..';\n\naddActionHandler('setActiveWorkspaceId', (global, actions, payload): ActionReturnType => {\n  global = {\n    ...global,\n    workspaces: {\n      ...global.workspaces,\n      activeId: payload,\n    },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('setWorkspaceSelectedItemId', (global, actions, payload): ActionReturnType => {\n  global = {\n    ...global,\n    workspaces: {\n      ...global.workspaces,\n      selectedItemId: payload,\n    },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('setWorkspaceSidebarOpen', (global, actions, payload): ActionReturnType => {\n  global = {\n    ...global,\n    workspaces: {\n      ...global.workspaces,\n      sidebarIsOpen: payload,\n    },\n  };\n\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, getGlobal, setGlobal } from '../..';\n\naddActionHandler('loadWebContentsViewUrl', (global, actions, payload): ActionReturnType => {\n  const { url } = payload;\n\n  global = {\n    ...global,\n    webContentsViewIsLoading: true,\n    webContentsViewError: undefined,\n  };\n\n  setGlobal(global);\n\n  actions.openChat({ id: undefined, tabId: getCurrentTabId() });\n\n  window.electron?.setWebContentsViewVisible(true);\n  window.electron?.setWebContentsViewUrl(url)\n    .then(() => {\n      global = getGlobal();\n      global = {\n        ...global,\n        webContentsViewIsLoading: false,\n        webContentsViewIsVisible: true,\n      };\n\n      setGlobal(global);\n    })\n    .catch((e) => {\n      global = getGlobal();\n      global = {\n        ...global,\n        webContentsViewIsLoading: false,\n        webContentsViewIsVisible: false,\n        webContentsViewError: e,\n      };\n\n      setGlobal(global);\n    });\n});\n\naddActionHandler('closeWebContentsView', (global, actions, payload): ActionReturnType => {\n  global = {\n    ...global,\n    webContentsViewIsVisible: false,\n    webContentsViewIsLoading: false,\n    webContentsViewError: undefined,\n  };\n  setGlobal(global);\n\n  window.electron?.setWebContentsViewVisible(false);\n});\n\naddActionHandler('closeWebContentsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId } = payload;\n\n  global = {\n    ...global,\n    webContentsViewIsVisible: false,\n    webContentsViewIsLoading: false,\n    webContentsViewError: undefined,\n  };\n  setGlobal(global);\n\n  window.electron?.closeWebContentsTab(tabId);\n});\n","import type { ApiChat, ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\nconst INVALIDATE_FULL_CHAT_FIELDS = new Set<keyof ApiChat>([\n  'boostLevel', 'isForum', 'isLinkedInDiscussion', 'fakeType', 'restrictionReason', 'isJoinToSend', 'isJoinRequest',\n  'type',\n]);\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)\n        && !updatedChat?.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      if (localChat) {\n        const chatUpdate = update.chat;\n        const changedFields = (Object.keys(chatUpdate) as (keyof ApiChat)[])\n          .filter((key) => localChat[key] !== chatUpdate[key]);\n        if (changedFields.some((key) => INVALIDATE_FULL_CHAT_FIELDS.has(key))) {\n          actions.invalidateFullInfo({ peerId: update.id });\n        }\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = addChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        if (chatMessages) {\n          const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n          global = deleteChatMessages(global, chat.id, localMessageIds);\n        }\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const isLocal = isLocalMessageId(message.id!);\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (!isLocal || chat.id === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        });\n\n        if (hasMention) {\n          global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n        }\n\n        const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n        if (topic) {\n          global = updateTopic(global, update.chatId, topic.id, {\n            unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n          && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n      if (!ids) {\n        actions.loadPinnedDialogs({ listType });\n        return global;\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updateChat,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      global = updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n      global = updateChat(global, update.userId, { emojiStatus: update.emojiStatus });\n      return global;\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n\n    case 'updateBotCommands': {\n      const { botId, commands } = update;\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          commands,\n        },\n      });\n    }\n\n    case 'updatePeerSettings': {\n      const { id, settings } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, id);\n      if (!targetUserFullInfo?.botInfo) {\n        actions.loadFullUser({ userId: id });\n        return undefined;\n      }\n\n      global = updateUserFullInfo(global, id, {\n        settings,\n      });\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { applyLangPackDifference, getTranslationFn, requestLangPackDifference } from '../../../util/localization';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updatePoll,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const {\n        users, chats, threadInfos, polls,\n      } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      if (polls) {\n        polls.forEach((poll) => {\n          global = updatePoll(global, poll.id, poll);\n        });\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder?.some((id) => id === update.id)) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        Object.entries(tabState.webApps.openedWebApps).forEach(([webAppKey, webApp]) => {\n          if (webApp.queryId === update.queryId) {\n            actions.resetDraftReplyInfo({ tabId: tabState.id });\n            actions.closeWebApp({ key: webAppKey, tabId: tabState.id });\n          }\n        });\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n      break;\n    }\n\n    case 'updatePaidReactionPrivacy': {\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          paidReactionPrivacy: update.private,\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateLangPackTooLong': {\n      requestLangPackDifference(update.langCode);\n      break;\n    }\n\n    case 'updateLangPack': {\n      applyLangPackDifference(update.version, update.strings, update.keysToRemove);\n      break;\n    }\n\n    case 'newMessage': {\n      const action = update.message.content?.action;\n      if (!update.message.isOutgoing && update.message.chatId !== SERVICE_NOTIFICATIONS_USER_ID) return undefined;\n      if (action?.type !== 'starGiftUnique') return undefined;\n      const actionStarGift = action.gift;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        if (tabState.isWaitingForStarGiftUpgrade) {\n          actions.openUniqueGiftBySlug({\n            slug: actionStarGift.slug,\n            tabId,\n          });\n\n          actions.showNotification({\n            title: { key: 'GiftUpgradedTitle' },\n            message: { key: 'GiftUpgradedDescription' },\n            tabId,\n          });\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftUpgrade: undefined,\n          }, tabId);\n        }\n\n        if (tabState.isWaitingForStarGiftTransfer) {\n          const chatId = update.message.chatId;\n          const receiver = chatId ? selectPeer(global, chatId) : undefined;\n          if (receiver) {\n            actions.focusMessage({\n              chatId: receiver.id,\n              messageId: update.message.id!,\n              tabId,\n            });\n\n            actions.showNotification({\n              message: {\n                key: 'GiftTransferSuccessMessage',\n                variables: {\n                  gift: {\n                    key: 'GiftUnique',\n                    variables: {\n                      title: actionStarGift.title,\n                      number: actionStarGift.number,\n                    },\n                  },\n                  peer: getPeerTitle(getTranslationFn(), receiver),\n                },\n              },\n              tabId,\n            });\n          }\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftTransfer: undefined,\n          }, tabId);\n        }\n      });\n\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException,\n  updateNotifyDefaults,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateDefaultNotifySettings': {\n      return updateNotifyDefaults(global, update.peerType, update.settings);\n    }\n\n    case 'updateChatNotifySettings': {\n      const {\n        chatId, settings,\n      } = update;\n\n      global = addNotifyException(global, chatId, settings);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifySettings': {\n      const {\n        chatId, topicId, settings,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { notifySettings: settings });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          errorKey: update.messageKey,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          const user = selectPhoneCallUser(global);\n          if (!user) return;\n          notifyAboutCall({\n            call,\n            user,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const form = paymentState.form!;\n      const { invoice } = form;\n\n      const { totalAmount, currency } = invoice;\n      const inputInvoice = paymentState.inputInvoice;\n      if (inputInvoice?.type === 'stars') {\n        actions.closeStarsBalanceModal({ tabId });\n        actions.showNotification({\n          message: langProvider.oldTranslate('StarsAcquiredInfo', inputInvoice.stars),\n          title: langProvider.oldTranslate('StarsAcquired'),\n          icon: 'star',\n          tabId,\n        });\n        actions.requestConfetti({ withStars: true, tabId });\n      } else if (inputInvoice?.type === 'giftcode') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice?.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'GiftSent',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      } else {\n        actions.showNotification({\n          tabId,\n          message: langProvider.oldTranslate('PaymentInfoHint', [\n            formatCurrencyAsString(totalAmount, currency, langProvider.getTranslationFn().code),\n            form.title,\n          ]),\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateStarPaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const { inputInvoice, subscriptionInfo, form } = paymentState;\n      if (inputInvoice?.type === 'chatInviteSubscription' && subscriptionInfo) {\n        const amount = subscriptionInfo.subscriptionPricing!.amount;\n\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            subscriptionInfo.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (form?.invoice.subscriptionPeriod) {\n        const amount = form.invoice.totalAmount;\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            form.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (inputInvoice?.type === 'giftcode') {\n        if (!inputInvoice.userIds) {\n          return;\n        }\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'premiumGiftStars') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userId === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'starsgift') {\n        if (!inputInvoice.userId) {\n          return;\n        }\n        const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n        if (starsModalState?.isOpen && inputInvoice.userId === starsModalState.forUserId) {\n          global = updateTabState(global, {\n            starsGiftModal: {\n              ...starsModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n      }\n\n      if (inputInvoice?.type === 'stargift') {\n        if (!inputInvoice.peerId) {\n          return;\n        }\n\n        const starGiftModalState = selectTabState(global, tabId).giftModal;\n\n        if (starGiftModalState && inputInvoice.peerId === starGiftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'stargiftResale') {\n        const starGiftModalState = selectTabState(global, tabId).giftInfoModal;\n\n        if (starGiftModalState) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftBought',\n            },\n            tabId,\n          });\n          if (starGiftModalState.peerId) {\n            actions.reloadPeerSavedGifts({ peerId: starGiftModalState.peerId });\n          }\n          actions.reloadPeerSavedGifts({ peerId: inputInvoice.peerId });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftInfoModal({ tabId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      const stars = global.stars;\n      if (!stars) {\n        return;\n      }\n\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import type { IconName } from '../../types/icons';\n\nexport const MAX_WORKSPACES = 3;\n\nexport const NotLostLocalStorageKeys = {\n  workspaces: 'workspaces',\n  webContentsViewFavicons: 'webContentsViewFavicons',\n};\n\nexport type NotLostLocalStorageKey = keyof typeof NotLostLocalStorageKeys;\n\n// Api\n\nexport type ApiWorkspace = {\n  id: string;\n  title: string;\n  iconName: IconName;\n  chats: ApiWorkspaceChat[];\n  links: ApiWorkspaceLink[];\n  chatFolders: ApiWorkspaceChatFolder[];\n  linkFolders: ApiWorkspaceLinkFolder[];\n};\n\nexport type ApiWorkspaceLink = {\n  id: string;\n  title: string;\n  url: string;\n};\nexport type ApiWorkspaceChat = {\n  chatId: string;\n};\n\ntype BaseFolder = {\n  id: string;\n  title: string;\n};\nexport type ApiWorkspaceChatFolder = BaseFolder & {\n  chats: ApiWorkspaceChat[];\n};\nexport type ApiWorkspaceLinkFolder = BaseFolder & {\n  links: ApiWorkspaceLink[];\n};\n\n// Favicons cache\n\nexport type WebContentsViewFavicon = {\n  url: string;\n  faviconUrl: string;\n};\n","import type { ApiWorkspace, ApiWorkspaceChatFolder, ApiWorkspaceLink, ApiWorkspaceLinkFolder } from './types';\nimport { MAX_WORKSPACES, NotLostLocalStorageKeys } from './types';\n\nimport { MAIN_IDB_STORE } from '../../util/browser/idb';\n\nclass ApiWorkspaceLayer {\n  store = MAIN_IDB_STORE;\n\n  private findChatFolderIndex(workspace: ApiWorkspace, chatFolderId: string) {\n    return workspace.chatFolders.findIndex((f) => f.id === chatFolderId);\n  }\n\n  private findLinkFolderIndex(workspace: ApiWorkspace, linkFolderId: string) {\n    return workspace.linkFolders.findIndex((f) => f.id === linkFolderId);\n  }\n\n  private findLinkIndex(workspace: ApiWorkspace, linkId: string) {\n    return workspace.links.findIndex((l) => l.id === linkId);\n  }\n\n  // Workspace\n\n  getWorkspaces = async (): Promise<ApiWorkspace[]> => {\n    return (await this.store.get<ApiWorkspace[]>(NotLostLocalStorageKeys.workspaces)) ?? [];\n  };\n\n  addWorkspace = async (newWorkspace: ApiWorkspace): Promise<void> => {\n    await this.store.update<ApiWorkspace[]>(\n      NotLostLocalStorageKeys.workspaces,\n      (old = []) => {\n        if (old.length < MAX_WORKSPACES) {\n          return [...old, newWorkspace];\n        }\n\n        return old;\n      },\n    );\n  };\n\n  deleteWorkspace = async (workspaceId: string): Promise<void> => {\n    await this.store.update<ApiWorkspace[]>(\n      NotLostLocalStorageKeys.workspaces,\n      (old = []) => old.filter((w) => w.id !== workspaceId),\n    );\n  };\n\n  renameWorkspace = async (workspaceId: string, newTitle: string): Promise<void> => {\n    await this.store.update<ApiWorkspace[]>(\n      NotLostLocalStorageKeys.workspaces,\n      (old = []) => old.map((w) => {\n        if (w.id === workspaceId) {\n          return {\n            ...w,\n            title: newTitle,\n          };\n        }\n        return w;\n      }),\n    );\n  };\n\n  updateWorkspaceChats = async (workspaceId: string, chatIds: string[]): Promise<void> => {\n    await this.store.update<ApiWorkspace[]>(\n      NotLostLocalStorageKeys.workspaces,\n      (old = []) => old.map((workspace) => {\n        if (workspace.id === workspaceId) {\n          const chats = chatIds.map((chatId) => ({ chatId }));\n          return {\n            ...workspace,\n            chats,\n          };\n        }\n        return workspace;\n      }),\n    );\n  };\n\n  addLinkIntoWorkspace = async (workspaceId: string, newLink: ApiWorkspaceLink): Promise<void> => {\n    await this.store.update<ApiWorkspace[]>(\n      NotLostLocalStorageKeys.workspaces,\n      (old = []) => old.map((workspace) => {\n        if (workspace.id === workspaceId) {\n          const links = workspace.links ?? [];\n          return {\n            ...workspace,\n            links: [...links, newLink],\n          };\n        }\n        return workspace;\n      }),\n    );\n  };\n\n  deleteLink = async (linkId: string): Promise<void> => {\n    await this.store.update<ApiWorkspace[]>(\n      NotLostLocalStorageKeys.workspaces,\n      (old = []) =>\n        old.map((workspace) => {\n          const linkIndex = this.findLinkIndex(workspace, linkId);\n\n          if (linkIndex === -1) return workspace;\n\n          return {\n            ...workspace,\n            links: workspace.links.filter((l) => l.id !== linkId),\n          };\n        }),\n    );\n  };\n\n  // Workspace -> Chat folder\n\n  addChatFolder = async (workspaceId: string, newChatFolder: ApiWorkspaceChatFolder): Promise<void> => {\n    await this.store.update<ApiWorkspace[]>(\n      NotLostLocalStorageKeys.workspaces,\n      (old = []) => old.map((workspace) => {\n        if (workspace.id === workspaceId) {\n          const chatFolders = workspace.chatFolders ?? [];\n          return {\n            ...workspace,\n            chatFolders: [...chatFolders, newChatFolder],\n          };\n        }\n        return workspace;\n      }),\n    );\n  };\n\n  deleteChatFolder = async (chatFolderId: string): Promise<void> => {\n    await this.store.update<ApiWorkspace[]>(\n      NotLostLocalStorageKeys.workspaces,\n      (old = []) =>\n        old.map((workspace) => {\n          const folderIndex = this.findChatFolderIndex(workspace, chatFolderId);\n\n          if (folderIndex === -1) return workspace;\n\n          return {\n            ...workspace,\n            chatFolders: workspace.chatFolders.filter((f) => f.id !== chatFolderId),\n          };\n        }),\n    );\n  };\n\n  renameChatFolder = async (chatFolderId: string, newTitle: string): Promise<void> => {\n    await this.store.update<ApiWorkspace[]>(\n      NotLostLocalStorageKeys.workspaces,\n      (old = []) =>\n        old.map((workspace) => {\n          const folderIndex = this.findChatFolderIndex(workspace, chatFolderId);\n\n          if (folderIndex === -1) return workspace;\n\n          return {\n            ...workspace,\n            chatFolders: workspace.chatFolders.map((f, idx) =>\n              idx === folderIndex ? { ...f, title: newTitle } : f,\n            ),\n          };\n        }),\n    );\n  };\n\n  updateChatFolderChats = async (chatFolderId: string, chatIds: string[]): Promise<void> => {\n    await this.store.update<ApiWorkspace[]>(\n      NotLostLocalStorageKeys.workspaces,\n      (old = []) =>\n        old.map((workspace) => {\n          const folderIndex = this.findChatFolderIndex(workspace, chatFolderId);\n\n          if (folderIndex === -1) return workspace;\n\n          const updatedChats = chatIds.map((chatId) => ({ chatId }));\n\n          return {\n            ...workspace,\n            chatFolders: workspace.chatFolders.map((f, idx) =>\n              idx === folderIndex ? { ...f, chats: updatedChats } : f,\n            ),\n          };\n        }),\n    );\n  };\n\n  // Workspace -> Link folder\n\n  addLinkFolder = async (workspaceId: string, newLinkFolder: ApiWorkspaceLinkFolder): Promise<void> => {\n    await this.store.update<ApiWorkspace[]>(\n      NotLostLocalStorageKeys.workspaces,\n      (old = []) => old.map((workspace) => {\n        if (workspace.id === workspaceId) {\n          const linkFolders = workspace.linkFolders ?? [];\n          return {\n            ...workspace,\n            linkFolders: [...linkFolders, newLinkFolder],\n          };\n        }\n        return workspace;\n      }),\n    );\n  };\n\n  deleteLinkFolder = async (linkFolderId: string): Promise<void> => {\n    await this.store.update<ApiWorkspace[]>(\n      NotLostLocalStorageKeys.workspaces,\n      (old = []) =>\n        old.map((workspace) => {\n          const folderIndex = this.findLinkFolderIndex(workspace, linkFolderId);\n\n          if (folderIndex === -1) return workspace;\n\n          return {\n            ...workspace,\n            linkFolders: workspace.linkFolders.filter((f) => f.id !== linkFolderId),\n          };\n        }),\n    );\n  };\n\n  renameLinkFolder = async (linkFolderId: string, newTitle: string): Promise<void> => {\n    await this.store.update<ApiWorkspace[]>(\n      NotLostLocalStorageKeys.workspaces,\n      (old = []) =>\n        old.map((workspace) => {\n          const folderIndex = this.findLinkFolderIndex(workspace, linkFolderId);\n\n          if (folderIndex === -1) return workspace;\n\n          return {\n            ...workspace,\n            linkFolders: workspace.linkFolders.map((f, idx) =>\n              idx === folderIndex ? { ...f, title: newTitle } : f,\n            ),\n          };\n        }),\n    );\n  };\n\n  updateLinkFolderLinks = async (linkFolderId: string, links: ApiWorkspaceLink[]): Promise<void> => {\n    await this.store.update<ApiWorkspace[]>(\n      NotLostLocalStorageKeys.workspaces,\n      (old = []) =>\n        old.map((workspace) => {\n          const folderIndex = this.findLinkFolderIndex(workspace, linkFolderId);\n\n          if (folderIndex === -1) return workspace;\n\n          return {\n            ...workspace,\n            linkFolders: workspace.linkFolders.map((f, idx) =>\n              idx === folderIndex ? { ...f, links } : f,\n            ),\n          };\n        }),\n    );\n  };\n}\n\nexport default new ApiWorkspaceLayer();\n","import type {\n  ApiWorkspace,\n  ApiWorkspaceChatFolder,\n  ApiWorkspaceLink,\n  ApiWorkspaceLinkFolder,\n} from '../../../api/notlost/types';\nimport type { ActionReturnType } from '../../types';\n\nimport ApiWorkspaceLayer from '../../../api/notlost/workspace';\nimport { addActionHandler, getGlobal, setGlobal } from '../..';\n\n// Helpers\n\nconst findWorkspaceByChatFolderId = (workspaces: ApiWorkspace[], chatFolderId: string): ApiWorkspace | undefined => {\n  return workspaces.find((w) =>\n    w.chatFolders.some((f) => f.id === chatFolderId),\n  ) || undefined;\n};\n\nconst findWorkspaceByLinkFolderId = (workspaces: ApiWorkspace[], linkFolderId: string): ApiWorkspace | undefined => {\n  return workspaces.find((w) =>\n    w.linkFolders.some((f) => f.id === linkFolderId),\n  ) || undefined;\n};\n\nconst findWorkspaceByLinkId = (workspaces: ApiWorkspace[], linkId: string): ApiWorkspace | undefined => {\n  return workspaces.find((w) =>\n    w.links.some((l) => l.id === linkId),\n  ) || undefined;\n};\n\n// Workspace\n\naddActionHandler('loadAllWorkspaces', async (global): Promise<void> => {\n  const result = await ApiWorkspaceLayer.getWorkspaces();\n\n  if (result) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      workspaces: {\n        ...global.workspaces,\n        areLoaded: true,\n        byOrder: result,\n      },\n    };\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('createInitialWorkspace', (global, actions, payload): ActionReturnType => {\n  const pinnedChatIds = global.chats.orderedPinnedIds.active?.map((chatId) => ({ chatId })) || [];\n  const chatFolders: ApiWorkspaceChatFolder[] = Object.values(global.chatFolders.byId).map((tgChatFolder) => {\n    return {\n      id: crypto.randomUUID(),\n      title: tgChatFolder.title.text,\n      chats: tgChatFolder.includedChatIds.map((chatId) => ({ chatId })),\n    };\n  });\n\n  const newWorkspace: ApiWorkspace = {\n    id: crypto.randomUUID(),\n    title: 'Personal',\n    iconName: 'lamp',\n    chats: pinnedChatIds,\n    links: [],\n    chatFolders,\n    linkFolders: [],\n  };\n\n  ApiWorkspaceLayer.addWorkspace(newWorkspace);\n\n  global = {\n    ...global,\n    workspaces: {\n      ...global.workspaces,\n      byOrder: [...global.workspaces.byOrder, newWorkspace],\n    },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('addNewWorkspace', async (global, actions, payload): Promise<void> => {\n  const { title, iconName } = payload;\n\n  const newWorkspace: ApiWorkspace = {\n    id: crypto.randomUUID(),\n    title,\n    iconName,\n    chats: [],\n    links: [],\n    chatFolders: [],\n    linkFolders: [],\n  };\n\n  await ApiWorkspaceLayer.addWorkspace(newWorkspace);\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    workspaces: {\n      ...global.workspaces,\n      byOrder: [...global.workspaces.byOrder, newWorkspace],\n    },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('deleteWorkspace', (global, actions, payload): ActionReturnType => {\n  const { workspaceId } = payload;\n\n  ApiWorkspaceLayer.deleteWorkspace(workspaceId);\n\n  global = {\n    ...global,\n    workspaces: {\n      ...global.workspaces,\n      byOrder: global.workspaces.byOrder.filter((w) => w.id !== workspaceId),\n    },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('renameWorkspace', (global, actions, payload): ActionReturnType => {\n  const { workspaceId, newTitle } = payload;\n\n  ApiWorkspaceLayer.renameWorkspace(workspaceId, newTitle);\n\n  global = {\n    ...global,\n    workspaces: {\n      ...global.workspaces,\n      byOrder: global.workspaces.byOrder.map((w) => {\n        if (w.id === workspaceId) {\n          return {\n            ...w,\n            title: newTitle,\n          };\n        }\n\n        return w;\n      }),\n    },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('updateWorkspaceChats', (global, actions, payload): ActionReturnType => {\n  const { workspaceId, chatIds } = payload;\n\n  const updatedChats = chatIds.map((chatId) => ({ chatId }));\n\n  ApiWorkspaceLayer.updateWorkspaceChats(workspaceId, chatIds);\n\n  global = {\n    ...global,\n    workspaces: {\n      ...global.workspaces,\n      byOrder: global.workspaces.byOrder.map((w) => {\n        if (w.id === workspaceId) {\n          return {\n            ...w,\n            chats: updatedChats,\n          };\n        }\n\n        return w;\n      }),\n    },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('deleteChatFromWorkspace', (global, actions, payload): ActionReturnType => {\n  const { workspaceId, chatId } = payload;\n\n  const workspace = global.workspaces.byOrder.find((w) => w.id === workspaceId);\n  if (!workspace) return;\n\n  const updatedChatIds = workspace.chats.filter((c) => c.chatId !== chatId).map((c) => c.chatId);\n  ApiWorkspaceLayer.updateWorkspaceChats(workspaceId, updatedChatIds);\n\n  const updatedWorkspace: ApiWorkspace = {\n    ...workspace,\n    chats: (workspace.chats ?? []).filter((c) => c.chatId !== chatId),\n  };\n\n  global = {\n    ...global,\n    workspaces: {\n      ...global.workspaces,\n      byOrder: global.workspaces.byOrder.map((w) => (w.id === workspace.id ? updatedWorkspace : w)),\n    },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('addLinkIntoWorkspace', (global, actions, payload): ActionReturnType => {\n  const { workspaceId, title, url } = payload;\n\n  const newLink: ApiWorkspaceLink = {\n    id: crypto.randomUUID(),\n    title,\n    url,\n  };\n\n  ApiWorkspaceLayer.addLinkIntoWorkspace(workspaceId, newLink);\n\n  global = {\n    ...global,\n    workspaces: {\n      ...global.workspaces,\n      byOrder: global.workspaces.byOrder.map((w) => {\n        if (w.id === workspaceId) {\n          return {\n            ...w,\n            links: [...(w.links || []), newLink],\n          };\n        }\n\n        return w;\n      }),\n    },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('deleteLinkFromWorkspace', (global, actions, payload): ActionReturnType => {\n  const { linkId } = payload;\n\n  ApiWorkspaceLayer.deleteLink(linkId);\n\n  const workspace = findWorkspaceByLinkId(global.workspaces.byOrder, linkId);\n  if (!workspace) return;\n\n  const updatedWorkspace: ApiWorkspace = {\n    ...workspace,\n    links: (workspace.links ?? []).filter((l) => l.id !== linkId),\n  };\n\n  global = {\n    ...global,\n    workspaces: {\n      ...global.workspaces,\n      byOrder: global.workspaces.byOrder.map((w) => (w.id === workspace.id ? updatedWorkspace : w)),\n    },\n  };\n\n  setGlobal(global);\n});\n\n// Chat folder\n\naddActionHandler('addChatFolderIntoWorkspace', (global, actions, payload): ActionReturnType => {\n  const { workspaceId, title } = payload;\n  const id = crypto.randomUUID();\n\n  const newChatFolder: ApiWorkspaceChatFolder = {\n    id,\n    title,\n    chats: [],\n  };\n\n  const workspace = global.workspaces.byOrder.find((w) => w.id === workspaceId);\n  if (!workspace) {\n    return;\n  }\n\n  ApiWorkspaceLayer.addChatFolder(workspaceId, newChatFolder);\n\n  const updatedWorkspace: ApiWorkspace = {\n    ...workspace,\n    chatFolders: [...(workspace.chatFolders || []), newChatFolder],\n  };\n\n  global = {\n    ...global,\n    workspaces: {\n      ...global.workspaces,\n      byOrder: global.workspaces.byOrder.map((w) => (w.id === workspaceId ? updatedWorkspace : w)),\n    },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('deleteChatFolderFromWorkspace', (global, actions, payload): ActionReturnType => {\n  const { chatFolderId } = payload;\n\n  ApiWorkspaceLayer.deleteChatFolder(chatFolderId);\n\n  const workspace = findWorkspaceByChatFolderId(global.workspaces.byOrder, chatFolderId);\n  if (!workspace) return;\n\n  const updatedWorkspace: ApiWorkspace = {\n    ...workspace,\n    chatFolders: (workspace.chatFolders ?? []).filter((f) => f.id !== chatFolderId),\n  };\n\n  global = {\n    ...global,\n    workspaces: {\n      ...global.workspaces,\n      byOrder: global.workspaces.byOrder.map((w) => (w.id === workspace.id ? updatedWorkspace : w)),\n    },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('renameChatFolderInWorkspace', (global, actions, payload): ActionReturnType => {\n  const { chatFolderId, newTitle } = payload;\n\n  ApiWorkspaceLayer.renameChatFolder(chatFolderId, newTitle);\n\n  const workspace = findWorkspaceByChatFolderId(global.workspaces.byOrder, chatFolderId);\n  if (!workspace) return;\n\n  global = {\n    ...global,\n    workspaces: {\n      ...global.workspaces,\n      byOrder: global.workspaces.byOrder.map((w) => {\n        if (w.id === workspace.id) {\n          return {\n            ...w,\n            chatFolders: w.chatFolders.map((f) => {\n              if (f.id === chatFolderId) {\n                return { ...f, title: newTitle };\n              }\n              return f;\n            }),\n          };\n        }\n\n        return w;\n      }),\n    },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('updateChatFolderChats', (global, actions, payload): ActionReturnType => {\n  const { chatFolderId, chatIds } = payload;\n\n  ApiWorkspaceLayer.updateChatFolderChats(chatFolderId, chatIds);\n\n  const workspace = findWorkspaceByChatFolderId(global.workspaces.byOrder, chatFolderId);\n  if (!workspace) return;\n\n  const updatedChats = chatIds.map((chatId) => ({ chatId }));\n\n  global = {\n    ...global,\n    workspaces: {\n      ...global.workspaces,\n      byOrder: global.workspaces.byOrder.map((w) => {\n        if (w.id === workspace.id) {\n          return {\n            ...w,\n            chatFolders: w.chatFolders.map((f) => {\n              if (f.id === chatFolderId) {\n                return { ...f, chats: updatedChats };\n              }\n              return f;\n            }),\n          };\n        }\n\n        return w;\n      }),\n    },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('deleteChatFromChatsFolder', (global, actions, payload): ActionReturnType => {\n  const { chatFolderId, chatId } = payload;\n\n  const workspace = findWorkspaceByChatFolderId(global.workspaces.byOrder, chatFolderId);\n  if (!workspace) return;\n\n  const chatFolder = workspace.chatFolders.find((f) => f.id === chatFolderId);\n  if (!chatFolder) return;\n\n  const updatedChatIds = chatFolder.chats.filter((c) => c.chatId !== chatId).map((c) => c.chatId);\n  ApiWorkspaceLayer.updateChatFolderChats(chatFolderId, updatedChatIds);\n\n  global = {\n    ...global,\n    workspaces: {\n      ...global.workspaces,\n      byOrder: global.workspaces.byOrder.map((w) => {\n        if (w.id === workspace.id) {\n          return {\n            ...w,\n            chatFolders: w.chatFolders.map((f) => {\n              if (f.id === chatFolderId) {\n                return { ...f, chats: updatedChatIds.map((id) => ({ chatId: id })) };\n              }\n              return f;\n            }),\n          };\n        }\n\n        return w;\n      }),\n    },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('addLinkFolderIntoWorkspace', (global, actions, payload): ActionReturnType => {\n  const { workspaceId, title } = payload;\n\n  const newLinkFolder: ApiWorkspaceLinkFolder = {\n    id: crypto.randomUUID(),\n    title,\n    links: [],\n  };\n\n  ApiWorkspaceLayer.addLinkFolder(workspaceId, newLinkFolder);\n\n  const workspace = global.workspaces.byOrder.find((w) => w.id === workspaceId);\n  if (!workspace) return;\n\n  const updatedWorkspace: ApiWorkspace = {\n    ...workspace,\n    linkFolders: [...(workspace.linkFolders || []), newLinkFolder],\n  };\n\n  global = {\n    ...global,\n    workspaces: {\n      ...global.workspaces,\n      byOrder: global.workspaces.byOrder.map((w) => (w.id === workspaceId ? updatedWorkspace : w)),\n    },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('deleteLinkFolderFromWorkspace', (global, actions, payload): ActionReturnType => {\n  const { linkFolderId } = payload;\n\n  ApiWorkspaceLayer.deleteLinkFolder(linkFolderId);\n\n  const workspace = findWorkspaceByLinkFolderId(global.workspaces.byOrder, linkFolderId);\n  if (!workspace) return;\n\n  const updatedWorkspace: ApiWorkspace = {\n    ...workspace,\n    linkFolders: (workspace.linkFolders ?? []).filter((f) => f.id !== linkFolderId),\n  };\n\n  global = {\n    ...global,\n    workspaces: {\n      ...global.workspaces,\n      byOrder: global.workspaces.byOrder.map((w) => (w.id === workspace.id ? updatedWorkspace : w)),\n    },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('renameLinkFolderInWorkspace', (global, actions, payload): ActionReturnType => {\n  const { linkFolderId, newTitle } = payload;\n\n  ApiWorkspaceLayer.renameLinkFolder(linkFolderId, newTitle);\n\n  const workspace = findWorkspaceByLinkFolderId(global.workspaces.byOrder, linkFolderId);\n  if (!workspace) return;\n\n  global = {\n    ...global,\n    workspaces: {\n      ...global.workspaces,\n      byOrder: global.workspaces.byOrder.map((w) => {\n        if (w.id === workspace.id) {\n          return {\n            ...w,\n            linkFolders: w.linkFolders.map((f) => {\n              if (f.id === linkFolderId) {\n                return { ...f, title: newTitle };\n              }\n              return f;\n            }),\n          };\n        }\n\n        return w;\n      }),\n    },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('updateLinkFolderLinks', (global, actions, payload): ActionReturnType => {\n  const { linkFolderId, links } = payload;\n\n  ApiWorkspaceLayer.updateLinkFolderLinks(linkFolderId, links);\n\n  const workspace = findWorkspaceByLinkFolderId(global.workspaces.byOrder, linkFolderId);\n  if (!workspace) return;\n\n  global = {\n    ...global,\n    workspaces: {\n      ...global.workspaces,\n      byOrder: global.workspaces.byOrder.map((w) => {\n        if (w.id === workspace.id) {\n          return {\n            ...w,\n            linkFolders: w.linkFolders.map((f) => {\n              if (f.id === linkFolderId) {\n                return { ...f, links };\n              }\n              return f;\n            }),\n          };\n        }\n\n        return w;\n      }),\n    },\n  };\n\n  setGlobal(global);\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(lang, unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { ApiWorkspace } from '../../api/notlost/types';\nimport type { GlobalState } from '../types';\n\nexport function selectActiveWorkspace<T extends GlobalState>(global: T): ApiWorkspace | undefined {\n  const activeId = global.workspaces.activeId;\n  return global.workspaces.byOrder.find((w) => w.id === activeId);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n  isAccountFrozen?: boolean;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n  isAccountFrozen,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const { openFrozenAccountModal } = getActions();\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen, isAccountFrozen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <Icon name=\"new-chat-filled\" />\n        <Icon name=\"close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"Container\":\"hjhOgeZl\",\"container\":\"hjhOgeZl\",\"SearchContainer\":\"av16FjtA\",\"searchContainer\":\"av16FjtA\",\"search\":\"NgWRBmMj\",\"IconContainer\":\"cfmGcOVB\",\"iconContainer\":\"cfmGcOVB\",\"SettingsIcon\":\"aTGKveLA\",\"settingsIcon\":\"aTGKveLA\",\"FilterMenu\":\"L_WpfPqo\",\"filterMenu\":\"L_WpfPqo\"};","import type { FC } from '@teact';\nimport { memo, useState } from '@teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ChatListCategory, ChatListFolderType } from './ChatList';\n\nimport Icon from '../../common/icons/Icon';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport SearchInput from '../../ui/SearchInput';\nimport Switcher from '../../ui/Switcher';\nimport ChatList from './ChatList';\n\nimport styles from './FilteredChatList.module.scss';\n\ntype OwnProps = {\n  folderType?: ChatListFolderType;\n  category?: ChatListCategory;\n};\n\ntype StateProps = {\n  shouldShowLastMessage: boolean;\n};\n\nconst FilteredChatList: FC<OwnProps & StateProps> = ({\n  folderType = 'all',\n  category,\n  shouldShowLastMessage,\n}) => {\n  const { toggleShowLastMessage } = getActions();\n  const [isFilterMenuOpen, setIsFilterMenuOpen] = useState(false);\n  return (\n    <div className={styles.container}>\n      <div className={styles.searchContainer}>\n        <SearchInput className={styles.search} onChange={() => {}} />\n        <div className={styles.iconContainer} onClick={() => setIsFilterMenuOpen(true)}>\n          <Icon name=\"filter\" className={styles.settingsIcon} />\n        </div>\n        <Menu\n          id=\"attach-menu-controls\"\n          isOpen={isFilterMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          onClose={() => setIsFilterMenuOpen(false)}\n          className={styles.filterMenu}\n          onCloseAnimationEnd={() => setIsFilterMenuOpen(false)}\n          ariaLabelledBy=\"attach-menu-button\"\n        >\n          <MenuItem\n            key=\"comments\"\n            icon=\"unread\"\n            onClick={() => toggleShowLastMessage()}\n          >\n            <span className=\"list-item-ellipsis\" style=\"margin-right: 1.25rem;\">\n              Show last message\n            </span>\n            <Switcher\n              id=\"last-message\"\n              label=\"yo\"\n              checked={shouldShowLastMessage}\n              onChange={() => toggleShowLastMessage()}\n              noAnimation\n            />\n          </MenuItem>\n        </Menu>\n      </div>\n      <ChatList\n        isActive\n        folderType={folderType}\n        category={category}\n        shouldShowLastMessage={shouldShowLastMessage}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      shouldShowLastMessage: global.chatFilters.shouldShowLastMessage,\n    };\n  },\n)(FilteredChatList));\n","import type { FC } from '@teact';\nimport { memo, useCallback, useMemo } from '@teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChat, ApiTopic } from '../../../../api/types';\nimport type { MenuItemContextAction } from '../../../ui/ListItem';\n\nimport { selectChat, selectTopicsInfo } from '../../../../global/selectors';\nimport { compact } from '../../../../util/iteratees';\n\nimport useLang from '../../../../hooks/useLang';\nimport { ChatAnimationTypes } from '../hooks/useChatAnimationType';\n\nimport Chat from '../Chat';\n\ntype OwnProps = {\n  workspaceId: string;\n  chatId: string;\n  chatFolderId?: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topics?: Record<number, ApiTopic>;\n};\n\nconst WorkspaceChat: FC<OwnProps & StateProps> = ({\n  workspaceId,\n  chatId,\n  chatFolderId,\n  chat,\n  topics,\n}) => {\n  const { deleteChatFromWorkspace, deleteChatFromChatsFolder, markChatMessagesRead } = getActions();\n  const lang = useLang();\n\n  const handleDelete = useCallback(() => {\n    if (chatFolderId) {\n      deleteChatFromChatsFolder({\n        chatFolderId,\n        chatId,\n      });\n    } else {\n      deleteChatFromWorkspace({\n        workspaceId,\n        chatId,\n      });\n    }\n  }, [chatFolderId, chatId, workspaceId]);\n\n  const contextActions = useMemo(() => {\n    const actionDelete = {\n      title: 'Remove',\n      icon: 'delete',\n      destructive: true,\n      handler: handleDelete,\n    };\n\n    const actionMaskAsRead = (\n      chat?.unreadCount || chat?.hasUnreadMark || Object.values(topics || {}).some(({ unreadCount }) => unreadCount)\n    ) ? {\n        title: lang('ChatListContextMaskAsRead'),\n        icon: 'readchats',\n        handler: () => markChatMessagesRead({ id: chatId }),\n      } : undefined;\n\n    return compact([\n      actionMaskAsRead,\n      actionDelete,\n    ]) as MenuItemContextAction[];\n  }, [chat, chatId, handleDelete, lang, topics]);\n\n  return (\n    <Chat\n      chatId={chatId}\n      orderDiff={0}\n      animationType={ChatAnimationTypes.Opacity}\n      isStatic\n      avatarSize=\"tiny\"\n      contextActions={contextActions}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const topicsInfo = selectTopicsInfo(global, chatId);\n\n    return {\n      chat: selectChat(global, chatId),\n      topics: topicsInfo?.topicsById,\n    };\n  },\n)(WorkspaceChat));\n","// extracted by mini-css-extract-plugin\nexport default {\"Container\":\"ab9U0vie\",\"container\":\"ab9U0vie\",\"Header\":\"HMWbdBdv\",\"header\":\"HMWbdBdv\",\"addLinkButton\":\"r92L6xyW\",\"addFolderButton\":\"BBU33Lnk\",\"headerTitle\":\"SQn_a9FN\",\"headerButtons\":\"fwbMPfWp\",\"addSectionButton\":\"mU_Qr03D\",\"selected\":\"AvqXNTyJ\",\"Chats\":\"rX0i5mUl\",\"chats\":\"rX0i5mUl\",\"Sections\":\"Nt4Wpnxj\",\"sections\":\"Nt4Wpnxj\",\"Sidebar\":\"Gjidt3V5\",\"sidebar\":\"Gjidt3V5\",\"Link\":\"encVC8WH\",\"link\":\"encVC8WH\",\"linkTitle\":\"ANmwTSsf\",\"LinkIconContainer\":\"_apvQnw3\",\"linkIconContainer\":\"_apvQnw3\",\"withFavicon\":\"gC2sXBAd\",\"WorkspaceChatFolder\":\"eHIt6WY_\",\"workspaceChatFolder\":\"eHIt6WY_\",\"new\":\"aG0tGiiv\",\"CustomListItem\":\"as2g8nJj\",\"customListItem\":\"as2g8nJj\",\"Hover\":\"cI1rjKE5\",\"hover\":\"cI1rjKE5\"};","import type { FC } from '@teact';\nimport { memo, useCallback, useMemo, useState } from '@teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiWorkspaceChatFolder } from '../../../../api/notlost/types';\nimport type { IconName } from '../../../../types/icons';\nimport type { MenuItemContextAction } from '../../../ui/ListItem';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport { compact } from '../../../../util/iteratees';\n\nimport Accordion from '../../../ui/accordion/Accordion';\nimport AccordionSavedState from '../../../ui/accordion/AccordionSavedState';\nimport WorkspaceChat from './WorkspaceChat';\n\nimport styles from './Workspace.module.scss';\n\ntype OwnProps = {\n  workspaceId: string;\n  chatFolder: ApiWorkspaceChatFolder;\n  isHighlighted?: boolean;\n  selectForAddingChats?: NoneToVoidFunction;\n};\n\nconst WorkspaceChatFolder: FC<OwnProps> = ({\n  workspaceId,\n  chatFolder,\n  isHighlighted,\n  selectForAddingChats,\n},\n) => {\n  const { renameChatFolderInWorkspace, deleteChatFolderFromWorkspace } = getActions();\n  const [isRenaming, setIsRenaming] = useState(false);\n  const [leftIcon, setLeftIcon] = useState<IconName>('folder');\n\n  const handleRename = useCallback((newTitle: string) => {\n    if (newTitle.length === 0) return;\n\n    renameChatFolderInWorkspace({\n      chatFolderId: chatFolder.id,\n      newTitle,\n    });\n    setIsRenaming(false);\n  }, [chatFolder.id]);\n\n  const handleDelete = useCallback(() => {\n    deleteChatFolderFromWorkspace({\n      chatFolderId: chatFolder.id,\n    });\n  }, [chatFolder.id]);\n\n  const contextActions = useMemo(() => {\n    const actionRename = {\n      title: 'Rename',\n      icon: 'edit',\n      handler: () => {\n        setIsRenaming(true);\n      },\n    } satisfies MenuItemContextAction;\n\n    const actionDelete = {\n      title: 'Delete',\n      icon: 'delete',\n      destructive: true,\n      handler: handleDelete,\n    } satisfies MenuItemContextAction;\n\n    return compact([actionRename, actionDelete]);\n  }, [handleDelete]);\n\n  const className = buildClassName(\n    styles.customListItem,\n    styles.workspaceChatFolder,\n  );\n\n  return (\n\n    <AccordionSavedState\n      id={chatFolder.id}\n      isInitiallyExpanded={false}\n    >\n      {({ isExpandedByDefault, onChange }) => (\n        <Accordion\n          key={chatFolder.id}\n          title={chatFolder.title}\n          leftIconName={leftIcon}\n          isHighlighted={isHighlighted}\n          isExpandedByDefault={isExpandedByDefault}\n          withInnerPadding\n          onChange={(isExpanded) => {\n            onChange(isExpanded);\n            if (isExpanded) {\n              setLeftIcon('folder-badge');\n            } else {\n              setLeftIcon('folder');\n            }\n          }}\n          isRenaming={isRenaming}\n          onAddClick={selectForAddingChats}\n          onRenameFinish={handleRename}\n          onRenameCancel={() => setIsRenaming(false)}\n          contextActions={contextActions}\n          className={className}\n        >\n          {chatFolder.chats.map((chat) => (\n            <WorkspaceChat\n              key={chat.chatId}\n              workspaceId={workspaceId}\n              chatId={chat.chatId}\n              chatFolderId={chatFolder.id}\n            />\n          ))}\n        </Accordion>\n      )}\n    </AccordionSavedState>\n  );\n};\n\nexport default memo(WorkspaceChatFolder);\n","import type { FC } from '@teact';\nimport { memo, useCallback } from '@teact';\nimport { getActions } from '../../../../global';\n\nimport Icon from '../../../common/icons/Icon';\nimport Accordion from '../../../ui/accordion/Accordion';\n\nimport styles from './Workspace.module.scss';\n\ntype OwnProps = {\n  workspaceId: string;\n  onCreationFinishOrCancel: NoneToVoidFunction;\n};\n\nconst WorkspaceChatFolderNew: FC<OwnProps> = ({\n  workspaceId,\n  onCreationFinishOrCancel,\n}) => {\n  const { addChatFolderIntoWorkspace } = getActions();\n\n  const handleRenameFinish = useCallback((title: string) => {\n    if (title.length === 0) return;\n\n    addChatFolderIntoWorkspace({\n      title,\n      workspaceId,\n    });\n\n    onCreationFinishOrCancel();\n  }, [onCreationFinishOrCancel, workspaceId]);\n\n  return (\n    <div style=\"display: flex; align-items: center; gap: 0.5rem; padding: 0.25rem;\">\n      <div className={styles.linkIconContainer}>\n        <Icon name=\"folder\" />\n      </div>\n      <Accordion\n        isRenaming\n        onRenameFinish={(title) => handleRenameFinish(title)}\n        onRenameCancel={onCreationFinishOrCancel}\n        className={styles.customListItem}\n      />\n    </div>\n  );\n};\n\nexport default memo(WorkspaceChatFolderNew);\n","import type { WebContentsViewFavicon } from './types';\nimport { NotLostLocalStorageKeys } from './types';\n\nimport { MAIN_IDB_STORE } from '../../util/browser/idb';\n\nclass WebContentsFaviconsStorage {\n  store = MAIN_IDB_STORE;\n\n  getFavicon = async (url: string): Promise<string> => {\n    const favicons = await this.store.get<WebContentsViewFavicon[]>\n    (NotLostLocalStorageKeys.webContentsViewFavicons);\n\n    return favicons?.find((f) => f.url === url)?.faviconUrl || '';\n  };\n\n  addFavicon = async (url: string, faviconUrl: string): Promise<void> => {\n    const newFavicon: WebContentsViewFavicon = { url, faviconUrl };\n\n    await this.store.update<WebContentsViewFavicon[]>(\n      NotLostLocalStorageKeys.webContentsViewFavicons,\n      (old = []) => [...old, newFavicon],\n    );\n  };\n}\n\nexport default new WebContentsFaviconsStorage();\n","import type { FC } from '@teact';\nimport { memo, useCallback, useEffect, useMemo, useState } from '@teact';\nimport { getActions } from '../../../../global';\n\nimport type { MenuItemContextAction } from '../../../ui/ListItem';\nimport { ElectronEvent } from '../../../../types/electron';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport { compact } from '../../../../util/iteratees';\nimport WebContentsFaviconsStorage from '../../../../api/notlost/webContents';\n\nimport Icon from '../../../common/icons/Icon';\nimport ListItem from '../../../ui/ListItem';\n\nimport styles from './Workspace.module.scss';\n\ntype OwnProps = {\n  id: string;\n  url: string;\n  title: string;\n  selected: boolean;\n};\n\nconst WorkspaceLink: FC<OwnProps> = ({\n  id,\n  url,\n  title,\n  selected,\n}) => {\n  const { setWorkspaceSelectedItemId, deleteLinkFromWorkspace, loadWebContentsViewUrl } = getActions();\n\n  const [faviconUrl, setFaviconUrl] = useState<string | undefined>(undefined);\n\n  const handleClick = () => {\n    setWorkspaceSelectedItemId(id);\n    loadWebContentsViewUrl({\n      url,\n    });\n  };\n\n  const handleDelete = useCallback(() => {\n    deleteLinkFromWorkspace({\n      linkId: id,\n    });\n  }, [id]);\n\n  const contextActions = useMemo(() => {\n    const actionDelete = {\n      title: 'Delete',\n      icon: 'delete',\n      destructive: true,\n      handler: handleDelete,\n    } satisfies MenuItemContextAction;\n\n    return compact([actionDelete]);\n  }, [handleDelete]);\n\n  const getDomain = (url: string): string => {\n    return new URL(url).hostname.replace(/^www\\./, '');\n  };\n\n  const isSameDomain = useCallback((url1: string, url2: string): boolean => {\n    try {\n      const domain1 = getDomain(url1);\n      const domain2 = getDomain(url2);\n      return domain1 === domain2;\n    } catch (error) {\n      return false;\n    }\n  }, []);\n\n  useEffect(() => {\n    const listenForMetaDataUpdate = window.electron!.on(ElectronEvent.ON_WEB_CONTENTS_TAB_META_DATA, (data: {\n      url: string;\n      metaData: {\n        faviconUrl: string;\n        title: string;\n      };\n    }) => {\n      if (isSameDomain(data.url, url)) {\n        WebContentsFaviconsStorage.getFavicon(getDomain(url)).then((cachedFavicon) => {\n          if (!cachedFavicon) {\n            WebContentsFaviconsStorage.addFavicon(getDomain(url), data.metaData.faviconUrl || '');\n            setFaviconUrl(data.metaData.faviconUrl);\n          }\n        });\n      }\n    });\n\n    WebContentsFaviconsStorage.getFavicon(getDomain(url)).then((cachedFavicon) => {\n      if (cachedFavicon) {\n        setFaviconUrl(cachedFavicon);\n        listenForMetaDataUpdate();\n      }\n    });\n\n    return () => {\n      listenForMetaDataUpdate();\n    };\n  }, [isSameDomain, url]);\n\n  const listItemClassName = buildClassName(\n    styles.customListItem,\n    styles.hover,\n    selected && styles.selected,\n  );\n\n  const linkIconContainerClassName = buildClassName(\n    styles.linkIconContainer,\n    faviconUrl && styles.withFavicon,\n  );\n\n  return (\n    <ListItem\n      isStatic\n      ripple\n      withPortalForMenu\n      className={listItemClassName}\n      onClick={handleClick}\n      contextActions={contextActions}\n    >\n      <div className={styles.link}>\n        <div className={linkIconContainerClassName}>\n          {faviconUrl\n            ? <img src={faviconUrl} alt=\"favicon\" />\n            : (\n              <Icon name=\"link\" />\n            )}\n        </div>\n        <div className={styles.linkTitle}>{title}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(WorkspaceLink);\n","import type { FC } from '@teact';\nimport { memo, useCallback, useState } from '@teact';\nimport { getActions } from '../../../../global';\n\nimport Icon from '../../../common/icons/Icon';\nimport Accordion from '../../../ui/accordion/Accordion';\n\nimport styles from './Workspace.module.scss';\n\ntype OwnProps = {\n  workspaceId: string;\n  onCreationFinishOrCancel: NoneToVoidFunction;\n};\n\nconst WorkspaceLinkNew: FC<OwnProps> = ({\n  workspaceId,\n  onCreationFinishOrCancel,\n}) => {\n  const { addLinkIntoWorkspace } = getActions();\n  const [newLinkState, setNewLinkState] = useState({\n    title: '',\n    url: '',\n  });\n  const [step, setStep] = useState<'url' | 'title'>('url');\n\n  const handleStep = useCallback((value: string) => {\n    if (value.length === 0) return;\n\n    if (step === 'url') {\n      setNewLinkState((prevState) => ({\n        ...prevState,\n        url: value,\n      }));\n      setStep('title');\n    } else {\n      const finalLinkData = {\n        ...newLinkState,\n        title: value,\n      };\n\n      addLinkIntoWorkspace({\n        workspaceId,\n        title: finalLinkData.title,\n        url: finalLinkData.url,\n      });\n\n      onCreationFinishOrCancel();\n    }\n  }, [step, newLinkState, addLinkIntoWorkspace, workspaceId, onCreationFinishOrCancel]);\n\n  const getPlaceholderText = () => {\n    return step === 'url' ? 'Enter URL...' : 'Enter title...';\n  };\n\n  return (\n    <div style=\"display: flex; align-items: center; gap: 0.5rem; padding: 0.25rem;\">\n      <div className={styles.linkIconContainer}>\n        <Icon name=\"link\" />\n      </div>\n      <Accordion\n        isRenaming\n        placeholder={getPlaceholderText()}\n        onRenameFinish={handleStep}\n        onRenameCancel={onCreationFinishOrCancel}\n        className={styles.customListItem}\n      />\n    </div>\n  );\n};\n\nexport default memo(WorkspaceLinkNew);\n","// extracted by mini-css-extract-plugin\nexport default {\"Container\":\"EFNIDECD\",\"container\":\"EFNIDECD\",\"Sidebar\":\"URiT03b8\",\"sidebar\":\"URiT03b8\",\"header\":\"wy0UyH42\",\"headerTitle\":\"eznyVno2\",\"closeButton\":\"CmCGRSdM\",\"folderTitle\":\"k6epb0AS\",\"Backdrop\":\"BeqhC0P8\",\"backdrop\":\"BeqhC0P8\",\"TransitionContainer\":\"DNMnisg2\",\"transitionContainer\":\"DNMnisg2\",\"Portal\":\"lH1aZt8f\",\"portal\":\"lH1aZt8f\",\"Picker\":\"Ba7RPaWG\",\"picker\":\"Ba7RPaWG\"};","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ActiveEntity, ActiveEntityType } from './Workspace';\n\nimport { ALL_FOLDER_ID } from '../../../../config';\nimport { filterPeersByQuery } from '../../../../global/helpers/peers';\nimport buildClassName from '../../../../util/buildClassName';\nimport { unique } from '../../../../util/iteratees';\n\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\n\nimport Icon from '../../../common/icons/Icon';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport Portal from '../../../ui/Portal';\nimport SearchInput from '../../../ui/SearchInput';\nimport Transition from '../../../ui/Transition';\n\nimport styles from './WorkspaceRightSidebar.module.scss';\n\ntype OwnProps = {\n  activeEntity?: ActiveEntity;\n  activeEntityType?: ActiveEntityType;\n  onClose?: NoneToVoidFunction;\n  handleStartAddingNewSection: NoneToVoidFunction;\n};\n\nconst WorkspaceRightSidebar: FC<OwnProps> = ({\n  activeEntity,\n  activeEntityType,\n  onClose,\n  handleStartAddingNewSection,\n}) => {\n  const { updateWorkspaceChats, updateChatFolderChats } = getActions();\n  const [searchValue, setSearchValue] = useState('');\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n\n  const displayedIds = useMemo(() => {\n    const chatIds = folderAllOrderedIds || [];\n    return unique(\n      filterPeersByQuery({ ids: chatIds, query: searchValue, type: 'chat' }),\n    );\n  }, [folderAllOrderedIds, searchValue]);\n\n  const [isAnimating, setIsAnimating] = useState(false);\n\n  useEffect(() => {\n    if (activeEntity) {\n      setIsAnimating(true);\n      return undefined;\n    } else {\n      const timeout = setTimeout(() => {\n        setIsAnimating(false);\n      }, 300);\n\n      return () => clearTimeout(timeout);\n    }\n  }, [activeEntity]);\n\n  const handleSelectedIdsChange = useCallback((newSelectedIds: string[]) => {\n    if (!activeEntity || !activeEntityType) return;\n\n    switch (activeEntityType) {\n      case 'workspace': {\n        updateWorkspaceChats({\n          workspaceId: activeEntity.id,\n          chatIds: newSelectedIds,\n        });\n        break;\n      }\n      case 'chatFolder': {\n        updateChatFolderChats({\n          chatFolderId: activeEntity.id,\n          chatIds: newSelectedIds,\n        });\n        break;\n      }\n\n      default:\n        break;\n    }\n  }, [activeEntity, activeEntityType]);\n\n  const containerClassName = buildClassName(styles.container);\n\n  return (\n    <Portal containerSelector=\"#middle-column-left-sidebar-portals\" className={styles.portal}>\n      <Transition\n        name=\"slideFade\"\n        direction=\"inverse\"\n        activeKey={activeEntity ? 1 : 0}\n        className={isAnimating ? styles.transitionContainer : undefined}\n      >\n        <div className={containerClassName}>\n          {activeEntity && (\n            <div className={styles.sidebar}>\n              <div className={styles.header}>\n                <div className={styles.headerTitle}>\n                  {activeEntity.title}\n                </div>\n                <Icon name=\"close\" className={styles.closeButton} onClick={onClose} />\n              </div>\n              <SearchInput onChange={setSearchValue} />\n              <PeerPicker\n                itemIds={displayedIds}\n                selectedIds={activeEntity.chats.map((c) => c.chatId)}\n                filterValue={searchValue}\n                categoryPlaceholderKey=\"FilterChatTypes\"\n                searchInputId=\"new-group-picker-search\"\n                withDefaultPadding\n                withPeerTypes\n                allowMultiple\n                itemInputType=\"checkbox\"\n                className={styles.picker}\n                onSelectedIdsChange={handleSelectedIdsChange}\n              />\n            </div>\n          )}\n          <div className={styles.backdrop} onClick={onClose} />\n        </div>\n      </Transition>\n    </Portal>\n  );\n};\n\nexport default memo(WorkspaceRightSidebar);\n","import type { FC, TeactNode } from '@teact';\nimport { memo } from '@teact';\n\nimport Accordion from '../../../ui/accordion/Accordion';\nimport AccordionSavedState from '../../../ui/accordion/AccordionSavedState';\n\nimport styles from './WorkspaceSection.module.scss';\n\ntype OwnProps = {\n  workspaceId: string;\n  sectionTitle: string;\n  children: TeactNode;\n  onAddClick?: NoneToVoidFunction;\n};\n\nconst WorkspaceSection: FC<OwnProps> = ({\n  workspaceId,\n  sectionTitle,\n  children,\n  onAddClick,\n},\n) => {\n  const id = `accordion-saved-state-${workspaceId}-${sectionTitle}`;\n  return (\n    <AccordionSavedState id={id}>\n      {({ isExpandedByDefault, onChange }) => (\n        <Accordion\n          key={id}\n          onAddClick={onAddClick}\n          title={sectionTitle}\n          isExpandedByDefault={isExpandedByDefault}\n          onChange={onChange}\n          className={styles.accordion}\n        >\n          {children}\n        </Accordion>\n      )}\n    </AccordionSavedState>\n  );\n};\n\nexport default memo(WorkspaceSection);\n","// extracted by mini-css-extract-plugin\nexport default {\"Accordion\":\"EWCVwPyr\",\"accordion\":\"EWCVwPyr\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiWorkspace, ApiWorkspaceChatFolder } from '../../../../api/notlost/types';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport Icon from '../../../common/icons/Icon';\nimport WorkspaceChat from './WorkspaceChat';\nimport WorkspaceChatFolder from './WorkspaceChatFolder';\nimport WorkspaceChatFolderNew from './WorkspaceChatFolderNew';\nimport WorkspaceLink from './WorkspaceLink';\nimport WorkspaceLinkNew from './WorkspaceLinkNew';\nimport WorkspaceRightSidebar from './WorkspaceRightSidebar';\nimport WorkspaceSection from './WorkspaceSection';\n\nimport styles from './Workspace.module.scss';\n\nexport type ActiveEntityType = 'workspace' | 'chatFolder';\nexport type ActiveEntity = ApiWorkspace | ApiWorkspaceChatFolder;\n\ntype OwnProps = {\n  workspace: ApiWorkspace;\n};\n\ntype StateProps = {\n  selectedItemId?: string;\n};\n\nconst Workspace: FC<OwnProps & StateProps> = ({\n  workspace,\n  selectedItemId,\n}) => {\n  const { setWorkspaceSidebarOpen } = getActions();\n\n  const [activeEntity, setActiveEntity] = useState<ActiveEntity | undefined>(undefined);\n  const [activeEntityType, setActiveEntityType] = useState<ActiveEntityType | undefined>(undefined);\n\n  const [isAddingNewChatFolder, setIsAddingNewChatFolder] = useState(false);\n  const [isAddingNewLink, setIsAddingNewLink] = useState(false);\n\n  const handleUnselectEntityForChatsAdd = useCallback(() => {\n    setActiveEntity(undefined);\n    setActiveEntityType(undefined);\n\n    setWorkspaceSidebarOpen(false);\n  }, []);\n\n  const handleSetActiveEntity = useCallback(\n    (entity: ActiveEntity, entityType: ActiveEntityType) => {\n      setActiveEntity(entity);\n      setActiveEntityType(entityType);\n\n      setWorkspaceSidebarOpen(true);\n    }, []);\n\n  useEffect(() => {\n    // refresh active entity on workspace update, should refactor somehow\n    if (!activeEntity) return;\n\n    if (activeEntityType === 'workspace') {\n      handleSetActiveEntity(workspace, 'workspace');\n    } else if (activeEntityType === 'chatFolder') {\n      const updatedSection = workspace.chatFolders.find((f) => f.id === activeEntity.id)!;\n      handleSetActiveEntity(updatedSection, 'chatFolder');\n    }\n  }, [activeEntity, activeEntityType, handleSetActiveEntity, workspace]);\n\n  useEffect(() => {\n    // reset active entity when workspace changes\n    handleUnselectEntityForChatsAdd();\n  }, [handleUnselectEntityForChatsAdd, workspace.id]);\n\n  const containerClassName = buildClassName(\n    styles.container,\n    'custom-scroll',\n  );\n\n  const headerClassName = buildClassName(\n    styles.header,\n    activeEntityType === 'workspace' && styles.selected,\n  );\n\n  return (\n    <div className={containerClassName}>\n      <div className={headerClassName}>\n        <div className={styles.headerTitle}>{workspace?.title}</div>\n        <div className={styles.headerButtons}>\n          <Icon\n            className={styles.addLinkButton}\n            name=\"link\"\n            onClick={() => setIsAddingNewLink(true)}\n          />\n          <Icon\n            className={styles.addFolderButton}\n            name=\"folder\"\n            onClick={() => setIsAddingNewChatFolder(true)}\n          />\n          <Icon\n            className={styles.addSectionButton}\n            name=\"add\"\n            onClick={() => handleSetActiveEntity(workspace, 'workspace')}\n          />\n        </div>\n      </div>\n      <div className={styles.chats}>\n        {workspace?.chats.map((chat) => (\n          <WorkspaceChat\n            key={chat.chatId}\n            workspaceId={workspace.id}\n            chatId={chat.chatId}\n          />\n        ))}\n      </div>\n      {(workspace.chatFolders.length > 0 || isAddingNewChatFolder) && (\n        <WorkspaceSection\n          workspaceId={workspace.id}\n          sectionTitle=\"Folders\"\n          onAddClick={() => setIsAddingNewChatFolder(true)}\n        >\n          {workspace.chatFolders.map((chatFolder) => (\n            <WorkspaceChatFolder\n              key={chatFolder.id}\n              workspaceId={workspace.id}\n              chatFolder={chatFolder}\n              isHighlighted={activeEntity?.id === chatFolder.id}\n              selectForAddingChats={() => handleSetActiveEntity(chatFolder, 'chatFolder')}\n            />\n          ))}\n          {isAddingNewChatFolder && (\n            <WorkspaceChatFolderNew\n              workspaceId={workspace.id}\n              onCreationFinishOrCancel={() => setIsAddingNewChatFolder(false)}\n            />\n          )}\n        </WorkspaceSection>\n      )}\n      {(workspace.links.length > 0 || isAddingNewLink) && (\n        <WorkspaceSection\n          workspaceId={workspace.id}\n          sectionTitle=\"Links\"\n          onAddClick={() => setIsAddingNewLink(true)}\n        >\n          {workspace.links.map((link) => (\n            <WorkspaceLink\n              key={link.id}\n              id={link.id}\n              url={link.url}\n              title={link.title}\n              selected={selectedItemId === link.id}\n            />\n          ))}\n          {isAddingNewLink && (\n            <WorkspaceLinkNew\n              workspaceId={workspace.id}\n              onCreationFinishOrCancel={() => setIsAddingNewLink(false)}\n            />\n          )}\n        </WorkspaceSection>\n      )}\n      <WorkspaceRightSidebar\n        activeEntity={activeEntity}\n        activeEntityType={activeEntityType}\n        onClose={handleUnselectEntityForChatsAdd}\n        handleStartAddingNewSection={() => setIsAddingNewChatFolder(true)}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      selectedItemId: global.workspaces.selectedItemId,\n    };\n  },\n)(Workspace));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiWorkspace } from '../../../api/notlost/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport { selectActiveWorkspace } from '../../../global/selectors/workspace';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport FilteredChatList from './FilteredChatList';\nimport ForumPanel from './ForumPanel';\nimport Workspace from './workspace/Workspace';\n\n// import LeftMainHeader from './LeftMainHeader';\nimport './LeftMain.scss';\n\ntype StateProps = {\n  activeWorkspace?: ApiWorkspace;\n};\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onTopicSearch: NoneToVoidFunction;\n  isAccountFrozen?: boolean;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps & StateProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  /* isClosingSearch, */\n  contactsFilter,\n  shouldSkipTransition,\n  /* foldersDispatch, */\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  /* onSearchQuery, */\n  onReset,\n  onTopicSearch,\n  isAccountFrozen,\n  activeWorkspace,\n}) => {\n  const { /* closeForumPanel */ openLeftColumnContent } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, /* isAnimationStarted */\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  // const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransitionDeprecated(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  /* const handleSelectSettings = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n  }); */\n\n  const handleSelectContacts = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Contacts });\n  });\n\n  /* const handleSelectArchived = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n    closeForumPanel();\n  }); */\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.NewChannelStep1 });\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.NewGroupStep1 });\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {/* <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      /> */}\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'none'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.Workspace:\n              if (activeWorkspace) {\n                return <Workspace workspace={activeWorkspace} />;\n              }\n              return undefined;\n            case LeftColumnContent.ChatList:\n              return <FilteredChatList />;\n            case LeftColumnContent.Saved:\n              return <FilteredChatList folderType=\"saved\" />;\n            case LeftColumnContent.AllUnread:\n              return <FilteredChatList category=\"unread\" />;\n            case LeftColumnContent.Groups:\n              return <FilteredChatList category=\"groups\" />;\n            case LeftColumnContent.Channels:\n              return <FilteredChatList category=\"channels\" />;\n            case LeftColumnContent.Bots:\n              return <FilteredChatList category=\"bots\" />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          badge\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n        isAccountFrozen={isAccountFrozen}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      activeWorkspace: selectActiveWorkspace(global),\n    };\n  },\n)(LeftMain));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type {\n  ElementRef } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport {\n  selectCurrentChat, selectIsCurrentUserFrozen, selectIsForumPanelOpen, selectTabState,\n} from '../../global/selectors';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/browser/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: ElementRef<HTMLDivElement>;\n}\n\ntype StateProps = {\n  contentKey: LeftColumnContent;\n  settingsScreen: SettingsScreens;\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nenum ContentType {\n  Main,\n\n  Settings,\n  Archived,\n\n  NewGroup,\n\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  contentKey,\n  settingsScreen,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    openLeftColumnContent,\n    openSettingsScreen,\n  } = getActions();\n\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (contentKey) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      openLeftColumnContent({ contentKey: undefined });\n      openSettingsScreen({ screen: undefined });\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewGroupStep2) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.NewGroupStep1 });\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewChannelStep2) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.NewChannelStep1 });\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (contentKey === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          openSettingsScreen({ screen: SettingsScreens.Main });\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          openSettingsScreen({ screen: SettingsScreens.General });\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          openSettingsScreen({ screen: SettingsScreens.GeneralChatBackground });\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyGifts:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          openSettingsScreen({ screen: SettingsScreens.Privacy });\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          openSettingsScreen({\n            screen: hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n          });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeEnabled });\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscode });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeCurrent });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeNew });\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneNumber });\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyLastSeen });\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyProfilePhoto });\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBio });\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBirthday });\n          return;\n        case SettingsScreens.PrivacyGiftsAllowedContacts:\n        case SettingsScreens.PrivacyGiftsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGifts });\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneCall });\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneP2P });\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyForwarding });\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyVoiceMessages });\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGroupChats });\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaDisabled });\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPassword });\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordConfirm });\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordHint });\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmail });\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaEnabled });\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordCurrent });\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordNew });\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordConfirm });\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCurrentPassword });\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmail });\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          openSettingsScreen({ screen: SettingsScreens.Folders });\n          return;\n\n        case SettingsScreens.FoldersShare:\n          openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          openSettingsScreen({ screen: SettingsScreens.FoldersEditFolderFromChatList });\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          openLeftColumnContent({ contentKey: LeftColumnContent.ChatList });\n          openSettingsScreen({ screen: SettingsScreens.Main });\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          openSettingsScreen({ screen: SettingsScreens.Stickers });\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          openSettingsScreen({ screen: SettingsScreens.Language });\n          return;\n\n        case SettingsScreens.PrivacyNoPaidMessages:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyMessages });\n          return;\n\n        default:\n          break;\n      }\n    }\n\n    if (contentKey === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (contentKey === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = contentKey === LeftColumnContent.Archived;\n      const isChatList = contentKey === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, contentKey, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (contentKey === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction]);\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n        openSettingsScreen({ screen: prevSettingsScreenRef.current! });\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={contentKey}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={contentKey}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={contentKey}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onSearchQuery={handleSearchQuery}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n            isAccountFrozen={isAccountFrozen}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      leftColumn,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n      isAccountFrozen,\n      contentKey: leftColumn.contentKey,\n      settingsScreen: leftColumn.settingsScreen,\n    };\n  },\n)(LeftColumn));\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newPinnedIndex),\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedIndexAboveFocused),\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newIndex),\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n\nfunction clampIndex(id: number) {\n  return Math.max(0, id);\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const ref = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={oldLang(ariaLabelLang)}\n      >\n        <Icon name={icon} className={styles.icon} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(lang, unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{oldLang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  threadId?: ThreadId;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  threadId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  const elementRef = useRef<HTMLDivElement>();\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  const handleReadAllReactions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllReactions({ chatId, threadId });\n  });\n\n  const handleReadAllMentions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllMentions({ chatId, threadId });\n  });\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll({\n        container: messagesContainer,\n        element: lastMessageElement,\n        position: 'end',\n        margin: FOCUS_MARGIN,\n      });\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={handleReadAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={handleReadAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      threadId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './FrozenAccountPlaceholder.module.scss';\n\nfunction FrozenAccountPlaceholder() {\n  const lang = useLang();\n\n  const { openFrozenAccountModal } = getActions();\n\n  const handleClick = useLastCallback(() => {\n    openFrozenAccountModal();\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>{lang('ComposerTitleFrozenAccount')}</div>\n      <div className={styles.subtitle}>{lang('ComposerSubtitleFrozenAccount')}</div>\n    </div>\n  );\n}\n\nexport default memo(FrozenAccountPlaceholder);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GuZke_HG\",\"title\":\"oLWeN4mA\",\"subtitle\":\"ZxTe54MY\"};","// extracted by mini-css-extract-plugin\nexport default {\"Container\":\"CNDwHkEN\",\"container\":\"CNDwHkEN\",\"Block\":\"uFAetXJ1\",\"block\":\"uFAetXJ1\",\"accent\":\"QxYLhMDG\",\"title\":\"MLwbofFC\",\"bannerWelcome\":\"L3Wf8lF1\",\"banner\":\"hWxQ67sc\",\"content\":\"YCRpguuU\",\"paragraph\":\"RXAZ_gr0\",\"NavigationButtons\":\"XfmxOz8M\",\"navigationButtons\":\"XfmxOz8M\",\"button\":\"m0b6dumZ\"};","import { memo, useState } from '@teact';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\n\nimport styles from './GreetingsBlock.module.scss';\n\nimport featuresBanner from '../../assets/notlost-banner-features.svg';\nimport welcomeBanner from '../../assets/notlost-banner-welcome.svg';\n\nconst Intro = () => {\n  return (\n    <>\n      <img src={welcomeBanner} className={styles.bannerWelcome} alt=\"Welcome to NotLost\" />\n      <div className={styles.content}>\n        <div className={styles.paragraph}>\n          <Icon name=\"boost-outline\" />\n          <div>\n            We kicked off development in\n            <span className={styles.accent}> May 2025 </span>\n            — after months of thinking, prototyping, and testing ideas.\n          </div>\n        </div>\n        <div className={styles.paragraph}>\n          <Icon name=\"heart-outline\" />\n          <div>\n            All with the mission to bring thoughtful features that make\n            <span className={styles.accent}> Telegram work better </span>\n            for people\n            who live in it daily.\n          </div>\n        </div>\n        <div className={styles.paragraph}>\n          <Icon name=\"group\" />\n          <div>\n            If you share our vision, join the\n            <span className={styles.accent}> community </span>\n            and let us know what you'd love to see in the future of NotLost.\n          </div>\n        </div>\n        <div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst Features = () => {\n  return (\n    <>\n      <img src={featuresBanner} className={styles.banner} alt=\"Features\" />\n      <div className={styles.content}>\n        <div className={styles.paragraph}>\n          <Icon name=\"folder\" />\n          <div>\n            <span className={styles.accent}> Spaces </span>\n            <div>\n              Now you can create entire spaces with favorite chats,\n              {' '}\n              unlimited chat folders, useful links and notes (coming soon).\n            </div>\n          </div>\n        </div>\n        <div className={styles.paragraph}>\n          <Icon name=\"link\" />\n          <div>\n            <span className={styles.accent}> Embeded links </span>\n            <div>\n              You can add links into your space and they will open in app.\n            </div>\n          </div>\n        </div>\n        <div className={styles.paragraph}>\n          <Icon name=\"forums\" />\n          <div>\n            <span className={styles.accent}> Sidebar </span>\n            <div>\n              New sidebar at the left with predefined filters (unreads, channels etc.) to navigate more easily.\n            </div>\n          </div>\n        </div>\n        <div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst GreetingsBlock = () => {\n  const steps = ['intro', 'features'];\n  const [step, setStep] = useState(steps[0]);\n\n  const stepIndex = steps.indexOf(step);\n  const nextStep = steps[stepIndex + 1];\n  const prevStep = steps[stepIndex - 1];\n\n  const isFirstStep = step === steps[0];\n  const isLastStep = step === steps[steps.length - 1];\n\n  const handlePrev = () => {\n    if (isFirstStep) return undefined;\n    setStep(steps[stepIndex - 1]);\n  };\n\n  const handleNext = () => {\n    if (isLastStep) return undefined;\n    setStep(steps[stepIndex + 1]);\n  };\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.block}>\n        <Transition activeKey={stepIndex} name=\"slideFade\" shouldCleanup>\n          {step === 'intro' && <Intro />}\n          {step === 'features' && <Features />}\n        </Transition>\n      </div>\n      <div className={styles.navigationButtons}>\n        <div className={styles.leftButton}>\n          {!isFirstStep && (\n            <Button\n              onClick={handlePrev}\n              color=\"dark\"\n              size=\"tiny\"\n              noForcedUpperCase\n              pill\n              className={styles.button}\n            >\n              <Icon name=\"arrow-left\" style=\"font-size: 0.875rem; margin-right: 0.25rem;\" />\n              {prevStep}\n            </Button>\n          )}\n        </div>\n        <div className={styles.rightButton}>\n          {!isLastStep && (\n            <Button\n              onClick={handleNext}\n              color=\"dark\"\n              size=\"tiny\"\n              noForcedUpperCase\n              pill\n              className={styles.button}\n            >\n              {nextStep}\n              <Icon name=\"arrow-right\" style=\"font-size: 0.875rem; margin-left: 0.25rem;\" />\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(GreetingsBlock);\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean, withUsers?: boolean,\n) {\n  const initDateGroup: MessageDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [[]],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [initDateGroup];\n\n  messages.forEach((message, index) => {\n    const currentDateGroup = dateGroups[dateGroups.length - 1];\n    const currentSenderGroup = currentDateGroup.senderGroups[currentDateGroup.senderGroups.length - 1];\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastMessageInSenderGroup = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage && !currentAlbum) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        const newDateGroup: MessageDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [[]],\n        };\n        dateGroups.push(newDateGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || (!withUsers && message.paidMessageStars)\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && message.content.action?.type !== 'phoneCall')\n        || (isActionMessage(nextMessage) && nextMessage.content.action?.type !== 'phoneCall')\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastMessageInSenderGroup\n              && 'mainMessage' in lastMessageInSenderGroup\n              && lastMessageInSenderGroup.mainMessage?.id === topMessageId))\n            && nextMessage.id !== topMessageId)\n          || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentDateGroup.senderGroups.push([]);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFPZHCMt\",\"chatInfo\":\"ubFGDy3d\",\"chatBackground\":\"niS9Gfcl\",\"botBackground\":\"kXKBpNnb\",\"bot-info-description\":\"kpMdEhns\",\"botInfoDescription\":\"kpMdEhns\",\"bot-info-title\":\"H__cBlx8\",\"botInfoTitle\":\"H__cBlx8\",\"media\":\"mtKNWJmZ\",\"chatInfoTitle\":\"RyB2zw9K\",\"chatInfoSubtitle\":\"n9OcHdnh\",\"chatDescription\":\"TYJGFKqJ\",\"country\":\"WuX68A65\",\"chatNotVerified\":\"sCB3zhO3\",\"verifiedTitle\":\"dlaTjW_s\",\"link\":\"yIJ4jRxH\",\"linkInfo\":\"_MPDNfhr\",\"icon\":\"KYcoeDmo\",\"textColor\":\"BH_g_jqY\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiChat, ApiCountryCode, ApiUserCommonChats, ApiUserFullInfo,\n} from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getChatTitle,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n  isChatWithVerificationCodesBot,\n} from '../../global/helpers';\nimport {\n  selectBot, selectChat, selectPeer, selectUserCommonChats, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport { formatPastDatetime, formatRegistrationMonth } from '../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../util/emoji/emoji';\nimport { getCountryCodeByIso } from '../../util/phoneNumber';\nimport stopEvent from '../../util/stopEvent';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport MiniTable, { type TableEntry } from '../common/MiniTable';\nimport Link from '../ui/Link';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListAccountInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botInfo?: ApiBotInfo;\n  isLoadingFullUser?: boolean;\n  phoneCodeList?: ApiCountryCode[];\n  commonChats?: ApiUserCommonChats;\n  userFullInfo?: ApiUserFullInfo;\n};\n\nconst MessageListAccountInfo: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  botInfo,\n  isLoadingFullUser,\n  phoneCodeList,\n  commonChats,\n  userFullInfo,\n}) => {\n  const { loadCommonChats, openChatWithInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    phoneCountry,\n    registrationMonth,\n    nameChangeDate,\n    photoChangeDate,\n  } = userFullInfo?.settings || {};\n\n  useEffect(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n\n  const country = useMemo(() => {\n    if (!phoneCodeList || !phoneCountry) return undefined;\n    return getCountryCodeByIso(phoneCodeList, phoneCountry);\n  }, [phoneCodeList, phoneCountry]);\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n  const isChatInfoEmpty = !country || !registrationMonth;\n\n  const isVerifyCodes = isChatWithVerificationCodesBot(chatId);\n\n  const { width, height } = botInfoDimensions || {};\n\n  const handleClick = useLastCallback((e: React.SyntheticEvent<any>) => {\n    stopEvent(e);\n    openChatWithInfo({\n      id: chatId, shouldReplaceHistory: true, profileTab: 'commonChats', forceScrollProfileTab: true,\n    });\n  });\n\n  const securityNameInfo = nameChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-name-message\">\n      <span>\n        {lang('UserUpdatedName', {\n          user: chat.title,\n          time: formatPastDatetime(lang, nameChangeDate),\n        }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const securityPhotoInfo = photoChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-photo-message\">\n      <span>\n        {lang('UserUpdatedPhoto', {\n          user: chat.title,\n          time: formatPastDatetime(lang, photoChangeDate),\n        }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const tableData = useMemo((): TableEntry[] => {\n    const entries: TableEntry[] = [];\n    if (country) {\n      entries.push([\n        oldLang('PrivacyPhone'),\n        <span className={styles.chatDescription}>\n          <span className={styles.country}>\n            {renderText(isoToEmoji(country?.iso2))}\n          </span>\n          {country?.defaultName}\n        </span>,\n      ]);\n    }\n    if (registrationMonth) {\n      entries.push([\n        lang('ContactInfoRegistration'),\n        formatRegistrationMonth(lang.code, registrationMonth),\n      ]);\n    }\n    if (userFullInfo?.commonChatsCount) {\n      const global = getGlobal();\n      const peers = commonChats?.ids.slice(0, 3).map((id) => selectPeer(global, id)!).filter(Boolean);\n      entries.push([\n        lang('ChatNonContactUserGroups'),\n        <Link className={styles.link} onClick={handleClick}>\n          <span className={styles.linkInfo}>\n            {lang('ChatGroups', {\n              count: userFullInfo.commonChatsCount,\n            }, {\n              pluralValue: userFullInfo.commonChatsCount,\n            })}\n          </span>\n          {Boolean(peers?.length) && <AvatarList size=\"micro\" peers={peers} />}\n          <Icon name=\"next\" className={styles.icon} />\n        </Link>,\n      ]);\n    }\n    return entries;\n  }, [lang, oldLang, country, registrationMonth, commonChats, userFullInfo]);\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingFullUser && isChatInfoEmpty && <span>{oldLang('Loading')}</span>}\n      {(isBotInfoEmpty && isChatInfoEmpty) && !isLoadingFullUser && <span>{oldLang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.botBackground)}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {isVerifyCodes && (\n            <div className={styles.botInfoDescription}>\n              {oldLang('VerifyChatInfo')}\n            </div>\n          )}\n          {!isVerifyCodes && botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{oldLang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n      {!isChatInfoEmpty && chat && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.chatBackground)}\n        >\n          <h3 className={styles.chatInfoTitle}>{renderText(getChatTitle(lang, chat))}</h3>\n          <p className={buildClassName(styles.chatInfoSubtitle, styles.textColor)}>\n            {lang('ChatNonContactUserSubtitle')}\n          </p>\n          <MiniTable keyClassName={styles.textColor} data={tableData} />\n          {!chat?.isVerified && (\n            <div className={buildClassName(styles.chatNotVerified, styles.textColor)}>\n              <Icon name=\"info-filled\" />\n              <p className={styles.verifiedTitle}>{lang('ContactInfoNotVerified')}</p>\n            </div>\n          )}\n        </div>\n      )}\n      {securityNameInfo}\n      {securityPhotoInfo}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const {\n      countryList: { phoneCodes: phoneCodeList },\n    } = global;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const commonChats = selectUserCommonChats(global, chatId);\n    const chatBot = selectBot(global, chatId);\n\n    let isLoadingFullUser = false;\n    let botInfo;\n    if (chatBot) {\n      if (userFullInfo) {\n        botInfo = userFullInfo.botInfo;\n      } else {\n        isLoadingFullUser = true;\n      }\n    }\n\n    return {\n      chat,\n      userFullInfo,\n      botInfo,\n      isLoadingFullUser,\n      phoneCodeList,\n      commonChats,\n    };\n  },\n)(MessageListAccountInfo));\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { OnIntersectPinnedMessage } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: ElementRef<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onIntersectPinnedMessage: OnIntersectPinnedMessage,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ chatId, messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onIntersectPinnedMessage({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Tk8btfOT\",\"avatarContainer\":\"UPrRM3Ks\",\"senderAvatar\":\"jdvqXfYh\",\"contextMenu\":\"FHxnbOg6\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n} from '../../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MESSAGE_APPEARANCE_DELAY,\n} from '../../../config';\nimport {\n  getMainUsername,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isSystemBot,\n} from '../../../global/helpers';\nimport { isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectSender,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport styles from './SenderGroupContainer.module.scss';\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    withAvatar?: boolean;\n    children: React.ReactNode;\n    id: string;\n    appearanceOrder: number;\n    canPost?: boolean;\n  };\n\n  type StateProps = {\n    sender?: ApiPeer;\n    canShowSender: boolean;\n    originSender?: ApiPeer;\n    isChatWithSelf?: boolean;\n    isRepliesChat?: boolean;\n    isAnonymousForwards?: boolean;\n  };\n\nconst SenderGroupContainer: FC<OwnProps & StateProps> = ({\n  message,\n  withAvatar,\n  children,\n  id,\n  appearanceOrder,\n  sender,\n  canShowSender,\n  originSender,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  canPost,\n}) => {\n  const { openChat, updateInsertingPeerIdMention } = getActions();\n  const ref = useRef<HTMLDivElement>();\n\n  const { forwardInfo } = message;\n\n  const messageSender = canShowSender ? sender : undefined;\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * MESSAGE_APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const isAvatarPeerUser = avatarPeer && isApiPeerUser(avatarPeer);\n\n  const handleOpenChat = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleMention = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (messageInput) {\n      updateInsertingPeerIdMention({ peerId: avatarPeer.id });\n    }\n  });\n\n  const handleAvatarClick = useLastCallback(() => {\n    handleOpenChat();\n  });\n\n  const {\n    ref: avatarRef,\n    shouldRender,\n  } = useShowTransition({\n    isOpen: withAvatar && isShown,\n    withShouldRender: true,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleContextMenu, handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => avatarRef.current);\n  const getRootElement = useLastCallback(() => document.querySelector('.Transition_slide-active > .MessageList'));\n  const getMenuElement = useLastCallback(\n    () => ref?.current?.querySelector(`.${styles.contextMenu} .bubble`),\n  );\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const canMention = canPost && avatarPeer && (isAvatarPeerUser || Boolean(getMainUsername(avatarPeer)));\n  const shouldRenderContextMenu = Boolean(contextMenuAnchor) && (isAvatarPeerUser || canMention);\n\n  function renderContextMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        getTriggerElement={getTriggerElement}\n        getRootElement={getRootElement}\n        getLayout={getLayout}\n        getMenuElement={getMenuElement}\n        className={styles.contextMenu}\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n        withPortal\n        autoClose\n      >\n        <>\n          {isAvatarPeerUser && (\n            <MenuItem\n              icon=\"comments\"\n              onClick={handleOpenChat}\n            >\n              {lang('SendMessage')}\n            </MenuItem>\n          )}\n          {canMention && (\n            <MenuItem\n              icon=\"mention\"\n              onClick={handleMention}\n            >\n              {lang('ContextMenuItemMention')}\n            </MenuItem>\n          )}\n        </>\n      </Menu>\n    );\n  }\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        className={styles.senderAvatar}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n        onContextMenu={handleContextMenu}\n      />\n    );\n  }\n\n  const className = buildClassName(\n    'sender-group-container',\n    styles.root,\n  );\n\n  return (\n    <div id={id} className={className} ref={ref}>\n      {shouldRender && (\n        <div ref={avatarRef} className={styles.avatarContainer}>\n          {renderAvatar()}\n        </div>\n      )}\n      {children}\n      {shouldRenderContextMenu && renderContextMenu()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      message, withAvatar,\n    } = ownProps;\n    const { chatId } = message;\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n\n    return {\n      sender,\n      canShowSender,\n      originSender,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n    };\n  },\n)(SenderGroupContainer));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredContextMenuContainer', !isOpen,\n  );\n\n  return SponsoredContextMenuContainer ? <SponsoredContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredContextMenuContainerAsync;\n","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n  getMessageDownloadableMedia,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredContextMenuContainer from './SponsoredContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: ElementRef<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ThemeKey;\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsored,\n    openUrl,\n    hideSponsored,\n    clickSponsored,\n    openMediaViewer,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  const contentRef = useRef<HTMLDivElement>();\n  const ref = useRef<HTMLDivElement>();\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting && message?.randomId) {\n        viewSponsored({ randomId: message.randomId });\n      }\n    }) : undefined;\n  }, [message?.randomId, shouldObserve, observeIntersection, viewSponsored]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsored();\n  });\n\n  const {\n    photo, video,\n  } = message ? getMessageContent(message) : { photo: undefined, video: undefined };\n\n  const isGif = video?.isGif;\n  const hasMedia = Boolean(photo || video);\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsored({ randomId: message.randomId, isMedia: photo || isGif ? true : undefined });\n    openUrl({ url: message.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    if (!message) return;\n    clickSponsored({ randomId: message.randomId, isMedia: true });\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const handleOpenAboutAdsModal = useLastCallback(() => {\n    if (!message) return;\n    openAboutAdsModal({\n      randomId: message.randomId,\n      canReport: message.canReport,\n      additionalInfo: message.additionalInfo,\n      sponsorInfo: message.sponsorInfo,\n    });\n  });\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleClick}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={isGif ? handleClick : handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        style={style}\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <BadgeButton onClick={handleOpenAboutAdsModal} className=\"ad-about\">\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" className=\"sponsored-action-icon\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" className=\"sponsored-action-icon\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={message.randomId}\n          canReport={message.canReport}\n          sponsorInfo={message.sponsorInfo}\n          additionalInfo={message.additionalInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? getMessageDownloadableMedia(message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { ElementRef, FC } from '../../lib/teact/teact';\nimport { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum, MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dates/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { formatStarsAsText } from '../../util/localization/format';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './message/ActionMessage';\nimport Message from './message/Message';\nimport SenderGroupContainer from './message/SenderGroupContainer';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListAccountInfo from './MessageListAccountInfo';\n\ninterface OwnProps {\n  canShowAds?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: ElementRef<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderAccountInfo?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  canPost?: boolean;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  canShowAds,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderAccountInfo,\n  nameChangeDate,\n  photoChangeDate,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onIntersectPinnedMessage,\n  canPost,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{oldLang('UnreadMessages')}</span>\n    </div>\n  );\n  const renderPaidMessageAction = (message: ApiMessage, album?: IAlbum) => {\n    if (message.paidMessageStars) {\n      const messagesLength = album?.messages?.length || 1;\n      const amount = message.paidMessageStars * messagesLength;\n      return (\n        <div\n          className={buildClassName('local-action-message')}\n          key={`paid-messages-action-${message.id}`}\n        >\n          <span>\n            {\n              message.isOutgoing\n                ? lang('ActionPaidOneMessageOutgoing', {\n                  amount: formatStarsAsText(lang, amount),\n                })\n                : (() => {\n                  const sender = selectSender(getGlobal(), message);\n                  const userTitle = sender ? getPeerTitle(lang, sender) : '';\n                  return lang('ActionPaidOneMessageIncoming', {\n                    user: userTitle,\n                    amount: formatStarsAsText(lang, amount),\n                  });\n                })()\n            }\n          </span>\n        </div>\n      );\n    }\n    return undefined;\n  };\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  function calculateSenderGroups(\n    dateGroup: MessageDateGroup, dateGroupIndex: number, dateGroupsArray: MessageDateGroup[],\n  ) {\n    return dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && senderGroup[0].content.action?.type !== 'phoneCall'\n      ) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            getIsMessageListReady={getIsReady}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      const senderGroupElements = senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          message.paidMessageStars && !withUsers && renderPaidMessageAction(message, album),\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            // eslint-disable-next-line react-x/no-duplicate-key\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>\n                {oldLang(isEmptyThread\n                  ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n\n      if (!withUsers) return senderGroupElements;\n\n      const lastMessageOrAlbum = senderGroup[senderGroup.length - 1];\n      const lastMessage = isAlbum(lastMessageOrAlbum) ? lastMessageOrAlbum.mainMessage : lastMessageOrAlbum;\n      const lastMessageId = getMessageOriginalId(lastMessage);\n      const lastAppearanceOrder = messageCountToAnimate - appearanceIndex;\n\n      const isTopicTopMessage = lastMessage.id === threadId;\n      const isOwn = isOwnMessage(lastMessage);\n\n      const firstMessageOrAlbum = senderGroup[0];\n      const firstMessage = isAlbum(firstMessageOrAlbum) ? firstMessageOrAlbum.mainMessage : firstMessageOrAlbum;\n      const firstMessageId = getMessageOriginalId(firstMessage);\n\n      const key = `${firstMessageId}-${lastMessageId}`;\n      const id = (firstMessageId === lastMessageId) ? `message-group-${firstMessageId}`\n        : `message-group-${firstMessageId}-${lastMessageId}`;\n\n      const withAvatar = withUsers && !isOwn && (!isTopicTopMessage || !isComments);\n      return (\n        <SenderGroupContainer\n          key={key}\n          id={id}\n          message={lastMessage}\n          withAvatar={withAvatar}\n          appearanceOrder={lastAppearanceOrder}\n          canPost={canPost}\n        >\n          {senderGroupElements}\n        </SenderGroupContainer>\n      );\n    });\n  }\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = calculateSenderGroups(dateGroup, dateGroupIndex, dateGroupsArray);\n\n    return (\n      <div\n        className={buildClassName('message-date-group', !(nameChangeDate || photoChangeDate)\n        && dateGroupIndex === 0 && 'first-message-date-group')}\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledOn', formatHumanDate(oldLang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(oldLang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderAccountInfo\n        && <MessageListAccountInfo key={`account_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n      {canShowAds && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/browser/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: ElementRef<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  const backwardsTriggerRef = useRef<HTMLDivElement>();\n  const forwardsTriggerRef = useRef<HTMLDivElement>();\n  const fabTriggerRef = useRef<HTMLDivElement>();\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    const fabTrigger = fabTriggerRef.current;\n    if (!container || !fabTrigger) return;\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const fabOffsetTop = fabTrigger.offsetTop;\n    const scrollBottom = Math.round(fabOffsetTop - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\nimport type { MessageListType } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: OldLangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: OldLangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <Icon name=\"cloud-download\" className=\"no-messages-icon\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"J2RfusJI\",\"button\":\"Nz8BOo0i\",\"disabled\":\"zHsizIwX\",\"inner\":\"C90W_KKX\",\"icons-container\":\"Qi7tZATP\",\"iconsContainer\":\"Qi7tZATP\",\"animated-unlock\":\"lfcZJyxp\",\"animatedUnlock\":\"lfcZJyxp\",\"comments-icon\":\"zd5EAc5e\",\"commentsIcon\":\"zd5EAc5e\",\"description\":\"E_YZ3IQs\",\"starIconContainer\":\"IL_EHscS\",\"starIcon\":\"C_e1ij6A\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTheme, selectThemeValues, selectUser } from '../../global/selectors';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Sparkles from '../common/Sparkles';\nimport Button from '../ui/Button';\n\nimport styles from './RequirementToContactMessage.module.scss';\n\ntype OwnProps = {\n\n  userId: string;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  userName?: string;\n};\n\nfunction RequirementToContactMessage({ patternColor, userName, paidMessagesStars }: OwnProps & StateProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { openPremiumModal, openStarsBalanceModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  const handleGetMoreStars = useLastCallback(() => {\n    openStarsBalanceModal({});\n  });\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {\n            paidMessagesStars\n              ? lang('FirstMessageInPaidMessagesChat', {\n                user: userName,\n                amount: formatStarsAsIcon(lang,\n                  paidMessagesStars,\n                  {\n                    asFont: true,\n                    className: styles.starIcon,\n                    containerClassName: styles.starIconContainer,\n                  }),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })\n              : renderText(oldLang('MessageLockedPremium', userName), ['simple_markdown'])\n          }\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"default\"\n          pill\n          onClick={paidMessagesStars ? handleGetMoreStars : handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {\n            paidMessagesStars\n              ? (\n                <>\n                  {lang('ButtonBuyStars')}\n                  <Sparkles preset=\"button\" />\n                </>\n              )\n              : oldLang('MessagePremiumUnlock')\n          }\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = selectThemeValues(global, theme) || {};\n    const user = selectUser(global, userId);\n\n    return {\n      patternColor,\n      userName: getUserFirstOrLastName(user),\n    };\n  })(RequirementToContactMessage),\n);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  beginHeavyAnimation, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatFullInfo,\n  ApiMessage,\n  ApiRestrictionReason,\n  ApiTopic,\n} from '../../api/types';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type MessageListType, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isSystemBot,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport getOffsetToContainer from '../../util/visibility/getOffsetToContainer';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListAccountInfo from './MessageListAccountInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport RequirementToContactMessage from './RequirementToContactMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  isContactRequirePremium?: boolean;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isSystemBotChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isNonContact?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  isAccountFrozen?: boolean;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n  isChatProtected?: boolean;\n  hasCustomGreeting?: boolean;\n  isAppConfigLoaded?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isSystemBotChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  isNonContact,\n  nameChangeDate,\n  photoChangeDate,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  isContactRequirePremium,\n  paidMessagesStars,\n  areAdsEnabled,\n  channelJoinInfo,\n  isChatProtected,\n  onIntersectPinnedMessage,\n  onScrollDownToggle,\n  onNotchToggle,\n  isAccountFrozen,\n  hasCustomGreeting,\n  isAppConfigLoaded,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isSystemBotChat || isAnonymousForwards || isChannelWithAvatars);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    const canHaveAds = isChannelChat || isBot;\n    if (areAdsEnabled && canHaveAds && isSynced && isReady && isAppConfigLoaded) {\n      loadSponsoredMessages({ peerId: chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, isBot, areAdsEnabled, isAppConfigLoaded]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo || type !== 'thread') return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              mediaType: 'action',\n              type: 'channelJoined',\n              inviterId: channelJoinInfo?.inviterId,\n              isViaRequest: channelJoinInfo?.isViaRequest || undefined,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n        withUsers,\n      )\n      : undefined;\n  }, [withUsers,\n    messageIds, messagesById, type,\n    isServiceNotificationsChat, isForum,\n    threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled' || isAccountFrozen) return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n\n      const isFocusing = Boolean(selectTabState(global).focusedMessage?.chatId);\n      if (!isFocusing) {\n        onIntersectPinnedMessage({ shouldCancelWaiting: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n          animateScroll({\n            container,\n            element: shouldScrollToBottom ? lastItemElement : firstUnreadElement,\n            position: shouldScrollToBottom ? 'end' : 'start',\n            margin: BOTTOM_FOCUS_MARGIN,\n            forceDuration: noMessageSendingAnimation ? 0 : undefined,\n          });\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          getOffsetToContainer(unreadDivider, container).top - UNREAD_DIVIDER_TOP,\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n    isChatProtected && 'hide-on-print',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : paidMessagesStars && isPrivate && !hasMessages && !hasCustomGreeting ? (\n        <RequirementToContactMessage paidMessagesStars={paidMessagesStars} userId={chatId} />\n      ) : isContactRequirePremium && !hasMessages ? (\n        <RequirementToContactMessage userId={chatId} />\n      ) : (isBot || isNonContact) && !hasMessages ? (\n        <MessageListAccountInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          canShowAds={areAdsEnabled && isChannelChat}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderAccountInfo={isBot || isNonContact}\n          nameChangeDate={nameChangeDate}\n          photoChangeDate={photoChangeDate}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onScrollDownToggle={onScrollDownToggle}\n          onNotchToggle={onNotchToggle}\n          onIntersectPinnedMessage={onIntersectPinnedMessage}\n          canPost={canPost}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n    const isNonContact = Boolean(userFullInfo?.settings?.canAddContact);\n    const nameChangeDate = userFullInfo?.settings?.nameChangeDate;\n    const photoChangeDate = userFullInfo?.settings?.photoChangeDate;\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    const hasCustomGreeting = Boolean(userFullInfo?.businessIntro);\n    const isAppConfigLoaded = global.isAppConfigLoaded;\n\n    return {\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isSystemBotChat: isSystemBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isNonContact,\n      nameChangeDate,\n      photoChangeDate,\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      isChatProtected: selectIsChatProtected(global, chatId),\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n      isAccountFrozen,\n      hasCustomGreeting,\n      isAppConfigLoaded,\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container);\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  const computedStyle = getComputedStyle(container);\n  const headerActionsHeight = parseInt(computedStyle.getPropertyValue('--middle-header-panes-height'), 10);\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= headerActionsHeight + STICKY_TOP;\n  });\n}\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: ElementRef<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { GlobalState } from '../global/types';\nimport type { OldLangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: OldLangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n  MediaContent,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent,\n} from '../global/helpers';\nimport { getPeerTitle } from '../global/helpers/peers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message?: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = message ? getMessageContent(message) : {} satisfies MediaContent;\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getPeerTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../../lib/teact/teact';\nimport { useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n  MediaContent,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, isMessageLocal,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat, selectChatMessage, selectSender, selectTabState,\n} from '../../../global/selectors';\nimport { makeTrackId } from '../../../util/audioPlayer';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { clearMediaSession } from '../../../util/mediaSession';\nimport renderText from '../../common/helpers/renderText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useAudioPlayer from '../../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport RippleEffect from '../../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  className?: string;\n  noUi?: boolean;\n  isFullWidth?: boolean;\n  isHidden?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n  timestamp?: number;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n  isFullWidth,\n  timestamp,\n  onPaneStateChange,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n  const renderingMessage = useCurrentOrPrev(message);\n\n  const { audio, voice, video } = renderingMessage ? getMessageContent(renderingMessage) : {} satisfies MediaContent;\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getPeerTitle(lang, sender) : undefined;\n\n  const mediaHash = renderingMessage && getMessageMediaHash(renderingMessage, 'inline');\n  const mediaData = mediaHash && mediaLoader.getFromMemory(mediaHash);\n  const mediaMetadata = useMessageMediaMetadata(renderingMessage, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n    setCurrentTime,\n  } = useAudioPlayer(\n    message && makeTrackId(message),\n    message ? getMediaDuration(message)! : 0,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    message && isMessageLocal(message),\n    true,\n  );\n\n  const isOpen = Boolean(message);\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(transitionRef, !shouldRender);\n\n  useEffect(() => {\n    if (timestamp) {\n      setCurrentTime(timestamp);\n    }\n  }, [timestamp, setCurrentTime]);\n\n  const handleClick = useLastCallback(() => {\n    const { chatId, id } = renderingMessage!;\n    focusMessage({ chatId, messageId: id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi || !shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName('AudioPlayer', isFullWidth ? 'full-width-player' : 'mini-player', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      ref={ref}\n    >\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <Icon name=\"skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <Icon name=\"play\" />\n        <Icon name=\"pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <Icon name=\"skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <Icon name=\"placeholder\" /> : undefined}\n    >\n      {rate}\n      X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { isHidden }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const { chatId, messageId } = audioPlayer;\n    const message = !isHidden && chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    const sender = message && selectSender(global, message);\n    const chat = message && selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive, timestamp,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      message,\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n      timestamp,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { type MessageListType, StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n} from '../../config';\nimport {\n  getIsSavedDialog,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPeer,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport HeaderActions from './HeaderActions';\nimport AudioPlayer from './panes/AudioPlayer';\n\nimport './MiddleHeader.scss';\n\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSavedDialog?: boolean;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n  emojiStatusSlug?: string;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  emojiStatusSlug,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    openChat,\n    openPreviousChat,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openStickerSet,\n    updateMiddleSearch,\n    openUniqueGiftBySlug,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const { isDesktop } = useAppLayout();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  const componentRef = useRef<HTMLDivElement>();\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const isAudioPlayerActive = Boolean(audioMessage);\n  const isAudioPlayerRendering = isDesktop && isAudioPlayerActive;\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(realChatId) ? (\n            <PrivateChatInfo\n              key={realChatId}\n              userId={realChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={realChatId}\n              chatId={realChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n      <div className=\"header-tools\">\n        {isAudioPlayerRendering && (\n          <AudioPlayer />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendering}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const peer = selectPeer(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = peer?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n    const emojiStatusSlug = emojiStatus?.type === 'collectible' ? emojiStatus.slug : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    return {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      emojiStatusSlug,\n      isSavedDialog,\n    };\n  },\n)(MiddleHeader));\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"yMkfzjus\",\"content\":\"__w9Ejd3\",\"info\":\"wdU19Be7\",\"avatar\":\"AQFE1t4V\",\"title\":\"u2vIptvT\",\"text\":\"SVG6BaX3\",\"aboutAd\":\"SrgXYpPk\"};","import type React from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { MessageListType } from '../../../types';\n\nimport { selectBot, selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getApiPeerColorClass } from '../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport SponsoredMessageContextMenuContainer from '../message/SponsoredContextMenuContainer';\n\nimport styles from './BotAdPane.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  messageListType: MessageListType;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  isBot?: boolean;\n  sponsoredMessage?: ApiSponsoredMessage;\n};\n\nconst BotAdPane = ({\n  chatId,\n  isBot,\n  messageListType,\n  sponsoredMessage,\n  onPaneStateChange,\n}: OwnProps & StateProps) => {\n  const {\n    viewSponsored,\n    openUrl,\n    clickSponsored,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(isBot && sponsoredMessage && messageListType === 'thread');\n\n  const renderingSponsoredMessage = useCurrentOrPrev(sponsoredMessage);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    withResizeObserver: true,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !shouldRender, true);\n\n  const handleClick = useLastCallback(() => {\n    if (!renderingSponsoredMessage) return;\n\n    clickSponsored({ randomId: renderingSponsoredMessage.randomId });\n    openUrl({ url: renderingSponsoredMessage.url, shouldSkipModal: true });\n  });\n\n  const handleAboutClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (!renderingSponsoredMessage) return;\n    const {\n      randomId, additionalInfo, canReport, sponsorInfo,\n    } = renderingSponsoredMessage;\n    e.stopPropagation();\n    openAboutAdsModal({\n      randomId,\n      additionalInfo,\n      canReport,\n      sponsorInfo,\n    });\n  });\n\n  useEffect(() => {\n    if (shouldRender && renderingSponsoredMessage) {\n      viewSponsored({ randomId: renderingSponsoredMessage.randomId });\n    }\n  }, [shouldRender, renderingSponsoredMessage, chatId]);\n\n  if (!shouldRender || !renderingSponsoredMessage) {\n    return undefined;\n  }\n\n  const {\n    randomId, canReport, additionalInfo, sponsorInfo,\n  } = renderingSponsoredMessage;\n\n  const {\n    peerColor,\n    content,\n    photo,\n    title,\n  } = renderingSponsoredMessage;\n\n  return (\n    <>\n      <div\n        ref={ref}\n        className={styles.root}\n        onClick={handleClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <div className={buildClassName(styles.content, peerColor && getApiPeerColorClass(peerColor))}>\n          <span className={styles.info}>\n            {lang('SponsoredMessageAd')}\n            <BadgeButton onClick={handleAboutClick} className={styles.aboutAd}>\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          <div className={styles.title}>{title}</div>\n          {content.text && (\n            <div className={styles.text}>\n              {renderTextWithEntities({\n                text: content.text.text,\n                entities: content.text.entities,\n              })}\n            </div>\n          )}\n        </div>\n        {photo && (\n          <Avatar\n            size=\"large\"\n            photo={photo}\n            className={styles.avatar}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport={canReport}\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const bot = selectBot(global, chatId);\n    const sponsoredMessage = selectSponsoredMessage(global, chatId);\n    return {\n      isBot: Boolean(bot),\n      sponsoredMessage,\n    };\n  },\n)(BotAdPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sAWttcxl\",\"icon\":\"tK9d2y8u\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotVerification } from '../../../api/types';\n\nimport {\n  selectPeerFullInfo,\n} from '../../../global/selectors';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './BotVerificationPane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  wasShown: boolean;\n  botVerification?: ApiBotVerification;\n};\nconst BOT_VERIFICATION_ICON_SIZE = 16;\nconst DISPLAY_DURATION_MS = 5000; // 5 sec\n\nconst BotVerificationPane: FC<OwnProps & StateProps> = ({\n  peerId,\n  wasShown,\n  botVerification,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(!wasShown && botVerification);\n\n  const {\n    markBotVerificationInfoShown,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const markAsShowed = useLastCallback(() => {\n    markBotVerificationInfoShown({ peerId });\n  });\n  useTimeout(markAsShowed, !wasShown ? DISPLAY_DURATION_MS : undefined);\n\n  if (!shouldRender || !botVerification) return undefined;\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <span className={styles.icon}>\n        <CustomEmoji\n          documentId={botVerification.iconId}\n          size={BOT_VERIFICATION_ICON_SIZE}\n        />\n      </span>\n      {botVerification.description}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const peerFullInfo = selectPeerFullInfo(global, peerId);\n\n    const botVerification = peerFullInfo?.botVerification;\n    const wasShown = global.settings.botVerificationShownPeerIds.includes(peerId);\n\n    return {\n      botVerification,\n      wasShown,\n    };\n  },\n)(BotVerificationPane));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './ChatReportPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  isAutoArchived?: boolean;\n  canReportSpam?: boolean;\n  canAddContact?: boolean;\n  canBlockContact?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  peer?: ApiPeer;\n};\n\nconst ChatReportPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  className,\n  isAutoArchived,\n  canReportSpam,\n  canAddContact,\n  canBlockContact,\n  peer,\n  currentUserId,\n  onPaneStateChange,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hidePeerSettingsBar,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n\n  const renderingPeer = useCurrentOrPrev(peer);\n  const chat = renderingPeer && isApiPeerChat(renderingPeer) ? renderingPeer : undefined;\n  const user = renderingPeer && isApiPeerUser(renderingPeer) ? renderingPeer : undefined;\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const renderingCanAddContact = useCurrentOrPrev(canAddContact);\n  const renderingCanBlockContact = useCurrentOrPrev(canBlockContact);\n  const renderingCanReportSpam = useCurrentOrPrev(canReportSpam);\n  const renderingIsAutoArchived = useCurrentOrPrev(isAutoArchived);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (renderingIsAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (renderingCanReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPane = useLastCallback(() => {\n    hidePeerSettingsBar({ peerId: chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  const hasAnyButton = canAddContact || canBlockContact || canReportSpam;\n\n  const isRendering = Boolean(hasAnyButton && peer);\n\n  useEffect(() => {\n    if (!isRendering) {\n      closeBlockUserModal();\n    }\n  }, [isRendering]);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen: isRendering,\n    onStateChange: onPaneStateChange,\n  });\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('ChatReportPane', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {renderingCanAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {renderingCanReportSpam && !renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={handleCloseReportPane}\n        ariaLabel={lang('Close')}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            className=\"ChatReportPane--Checkbox dialog-checkbox\"\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    peer: selectPeer(global, chatId),\n  }),\n)(ChatReportPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tE8PJzpv\",\"mini\":\"lrBhOgvf\",\"fullWidth\":\"gutn4asD\",\"pinnedMessage\":\"ayLUtX1S\",\"messageText\":\"ETMw73qH\",\"loading\":\"yvd9_9PF\",\"pinListIcon\":\"LFRysfVa\",\"pinListIconHidden\":\"E_C4DXKN\",\"no-hover\":\"WVjde2rq\",\"noHover\":\"WVjde2rq\",\"messageTextTransition\":\"mA1i07pG\",\"withMedia\":\"BWZytkCB\",\"title\":\"IWpRWVBg\",\"summary\":\"k19QLKaH\",\"inlineButton\":\"fpQMpARI\",\"pictogramTransition\":\"Gp431jU4\",\"pinnedThumb\":\"XjjZeOUy\",\"pinnedThumbImage\":\"ljzqevcj\"};","import type React from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  getIsSavedDialog,\n  getMessageIsSpoiler,\n  getMessageMediaHash,\n  getMessageSingleInlineButton,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectPinnedIds,\n} from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { getPictogramDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useThumbnail from '../../../hooks/useThumbnail';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport MessageSummary from '../../common/MessageSummary';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RippleEffect from '../../ui/RippleEffect';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\nimport PinnedMessageNavigation from '../PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst MAX_LENGTH = 256;\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n\n  messageListType: MessageListType;\n  className?: string;\n  isFullWidth?: boolean;\n  shouldHide?: boolean;\n  getLoadingPinnedId: Signal<number | undefined>;\n  getCurrentPinnedIndex: Signal<number>;\n  onFocusPinnedMessage: (messageId: number) => void;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  isSynced?: boolean;\n};\n\nconst HeaderPinnedMessage = ({\n  chatId,\n  threadId,\n  canUnpin,\n  getLoadingPinnedId,\n  pinnedMessageIds,\n  messagesById,\n  isFullWidth,\n  topMessageSender,\n  getCurrentPinnedIndex,\n  className,\n  chat,\n  isSynced,\n  shouldHide,\n  onPaneStateChange,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const {\n    clickBotInlineButton, focusMessage, openThread, pinMessage, loadPinnedMessages,\n  } = getActions();\n  const lang = useLang();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const pinnedMessageNumber = Math.max(pinnedMessagesCount - currentPinnedIndex, 1);\n\n  const topMessageTitle = topMessageSender ? getPeerTitle(lang, topMessageSender) : undefined;\n\n  const video = pinnedMessage && getMessageVideo(pinnedMessage);\n  const gif = video?.isGif ? video : undefined;\n  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);\n\n  const mediaThumbnail = useThumbnail(pinnedMessage);\n  const mediaHash = pinnedMessage && getMessageMediaHash(pinnedMessage, isVideoThumbnail ? 'full' : 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isSpoiler = pinnedMessage && getMessageIsSpoiler(pinnedMessage);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n\n  useEffect(() => {\n    if (isSynced && (threadId === MAIN_THREAD_ID || chat?.isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, chat?.isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const isOpen = Boolean(pinnedMessage) && !shouldHide;\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    noOpenTransition: true,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n    pinMessage({ chatId, messageId: pinnedMessage!.id, isUnpin: true });\n  });\n\n  const inlineButton = pinnedMessage && getMessageSingleInlineButton(pinnedMessage);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: pinnedMessage.chatId, messageId: pinnedMessage.id, button: inlineButton });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const handleMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const nextMessageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId: nextMessageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(nextMessageId);\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(handleMessageClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, isFullVideo?: boolean, asSpoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n    const shouldRenderVideo = isFullVideo && blobUrl;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !asSpoiler && !shouldRenderVideo && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {shouldRenderVideo && !asSpoiler && (\n          <video\n            src={blobUrl}\n            width={width}\n            height={height}\n            playsInline\n            disablePictureInPicture\n            className={styles.pinnedThumbImage}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(asSpoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  if (!shouldRender || !renderingPinnedMessage) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'HeaderPinnedMessageWrapper', styles.root, isFullWidth ? styles.fullWidth : styles.mini, className,\n      )}\n    >\n      {(pinnedMessagesCount > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? handleAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <Icon\n            name=\"pin-list\"\n            className={buildClassName(\n              styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {canUnpin && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text={lang('PinnedConfirmUnpin')}\n        confirmLabel={lang('DialogUnpin')}\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={pinnedMessagesCount}\n          index={currentPinnedIndex}\n        />\n        <Transition activeKey={renderingPinnedMessage.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isVideoThumbnail,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!topMessageTitle && (\n              <AnimatedCounter\n                text={pinnedMessagesCount === 1\n                  ? lang('PinnedMessageTitleSingle')\n                  : lang('PinnedMessageTitle', { index: pinnedMessageNumber }, { pluralValue: pinnedMessagesCount })}\n              />\n            )}\n\n            {topMessageTitle && renderText(topMessageTitle)}\n          </div>\n          <Transition\n            activeKey={renderingPinnedMessage.id}\n            name=\"slideVerticalFade\"\n            className={styles.messageTextTransition}\n          >\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={renderingPinnedMessage}\n                truncateLength={MAX_LENGTH}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const isSynced = global.isSynced;\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const messagesById = selectChatMessages(global, chatId);\n\n    const state = {\n      chat,\n      isSynced,\n    };\n\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(HeaderPinnedMessage));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xqcWnBH4\",\"message\":\"CJhqoyif\",\"messageStars\":\"sZR8zqEk\",\"messageStarIcon\":\"AKXOpk8S\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n} from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\n// import useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Button from '../../ui/Button';\n\n// import CustomEmoji from '../../common/CustomEmoji';\nimport styles from './PaidMessageChargePane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chargedPaidMessageStars?: number;\n  chat?: ApiChat;\n};\n\nconst PaidMessageChargePane: FC<OwnProps & StateProps> = ({\n  chargedPaidMessageStars,\n  chat,\n  peerId,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(chargedPaidMessageStars);\n  const lang = useLang();\n\n  const {\n    openChatRefundModal,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const handleRefund = useLastCallback(() => {\n    openChatRefundModal({ userId: peerId });\n  });\n\n  if (!shouldRender || !chargedPaidMessageStars) return undefined;\n\n  const peerName = chat ? getPeerTitle(lang, chat) : undefined;\n\n  const message = lang('PaneMessagePaidMessageCharge', {\n    peer: peerName,\n    amount: formatStarsAsIcon(lang,\n      chargedPaidMessageStars,\n      { asFont: true, className: styles.messageStarIcon, containerClassName: styles.messageStars }),\n  }, {\n    withMarkdown: true,\n    withNodes: true,\n  });\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <div className={styles.message}>\n        {message}\n      </div>\n      <Button\n        isText\n        noForcedUpperCase\n        pill\n        fluid\n        size=\"tiny\"\n        className={styles.button}\n        onClick={handleRefund}\n      >\n        {lang('RemoveFeeTitle')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const chat = selectChat(global, peerId);\n    const peerFullInfo = selectUserFullInfo(global, peerId);\n    const chargedPaidMessageStars = peerFullInfo?.settings?.chargedPaidMessageStars;\n\n    return {\n      chargedPaidMessageStars,\n      chat,\n    };\n  },\n)(PaidMessageChargePane));\n","import {\n  memo, useRef, useSignal,\n} from '../../lib/teact/teact';\nimport { setExtraStyles } from '../../lib/teact/teact-dom';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiUserFullInfo } from '../../api/types';\nimport type { MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectCurrentMiddleSearch, selectTabState, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useEffectOnce from '../../hooks/useEffectOnce';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport { applyAnimationState, type PaneState } from './hooks/useHeaderPane';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport AudioPlayer from './panes/AudioPlayer';\nimport BotAdPane from './panes/BotAdPane';\nimport BotVerificationPane from './panes/BotVerificationPane';\nimport ChatReportPane from './panes/ChatReportPane';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\nimport PaidMessageChargePane from './panes/PaidMessageChargePane';\n\nimport styles from './MiddleHeaderPanes.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  userFullInfo?: ApiUserFullInfo;\n  isAudioPlayerRendered?: boolean;\n  isMiddleSearchOpen?: boolean;\n};\n\nconst FALLBACK_PANE_STATE = { height: 0 };\n\nconst MiddleHeaderPanes = ({\n  className,\n  chatId,\n  threadId,\n  messageListType,\n  chat,\n  userFullInfo,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  isAudioPlayerRendered,\n  isMiddleSearchOpen,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const { settings } = userFullInfo || {};\n\n  const { isDesktop } = useAppLayout();\n  const [getAudioPlayerState, setAudioPlayerState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPinnedState, setPinnedState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getGroupCallState, setGroupCallState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getChatReportState, setChatReportState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotAdState, setBotAdState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotVerificationState, setBotVerificationState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPaidMessageChargeState, setPaidMessageChargeState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n\n  const isFirstRenderRef = useRef(true);\n  const {\n    shouldRender,\n    ref,\n  } = useShowTransition({\n    isOpen: !isMiddleSearchOpen,\n    withShouldRender: true,\n    noMountTransition: true,\n  });\n\n  useEffectOnce(() => {\n    isFirstRenderRef.current = false;\n  });\n\n  useSignalEffect(() => {\n    const audioPlayerState = getAudioPlayerState();\n    const botVerificationState = getBotVerificationState();\n    const pinnedState = getPinnedState();\n    const groupCallState = getGroupCallState();\n    const chatReportState = getChatReportState();\n    const botAdState = getBotAdState();\n    const paidMessageState = getPaidMessageChargeState();\n\n    // Keep in sync with the order of the panes in the DOM\n    const stateArray = [audioPlayerState, groupCallState,\n      chatReportState, botVerificationState, pinnedState, botAdState, paidMessageState];\n\n    const isFirstRender = isFirstRenderRef.current;\n    const totalHeight = stateArray.reduce((acc, state) => acc + state.height, 0);\n\n    const middleColumn = document.getElementById('MiddleColumn');\n    if (!middleColumn) return;\n\n    applyAnimationState(stateArray, isFirstRender);\n\n    setExtraStyles(middleColumn, {\n      '--middle-header-panes-height': `${totalHeight}px`,\n    });\n  }, [getAudioPlayerState, getGroupCallState, getPinnedState,\n    getChatReportState, getBotAdState, getBotVerificationState, getPaidMessageChargeState]);\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div ref={ref} className={buildClassName(styles.root, className)}>\n      <AudioPlayer\n        isFullWidth\n        onPaneStateChange={setAudioPlayerState}\n        isHidden={isDesktop}\n      />\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          chatId={chatId}\n          onPaneStateChange={setGroupCallState}\n        />\n      )}\n      <ChatReportPane\n        chatId={chatId}\n        canAddContact={settings?.canAddContact}\n        canBlockContact={settings?.canBlockContact}\n        canReportSpam={settings?.canReportSpam}\n        isAutoArchived={settings?.isAutoArchived}\n        onPaneStateChange={setChatReportState}\n      />\n      <BotVerificationPane\n        peerId={chatId}\n        onPaneStateChange={setBotVerificationState}\n      />\n      <PaidMessageChargePane\n        peerId={chatId}\n        onPaneStateChange={setPaidMessageChargeState}\n      />\n      <HeaderPinnedMessage\n        chatId={chatId}\n        threadId={threadId}\n        messageListType={messageListType}\n        onFocusPinnedMessage={onFocusPinnedMessage}\n        getLoadingPinnedId={getLoadingPinnedId}\n        getCurrentPinnedIndex={getCurrentPinnedIndex}\n        onPaneStateChange={setPinnedState}\n        isFullWidth\n      />\n      <BotAdPane\n        chatId={chatId}\n        messageListType={messageListType}\n        onPaneStateChange={setBotAdState}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId,\n  }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    return {\n      chat,\n      userFullInfo,\n      isAudioPlayerRendered: Boolean(audioMessage),\n      isMiddleSearchOpen,\n    };\n  },\n)(MiddleHeaderPanes));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oCUr3DTX\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import type { FC } from '@teact';\nimport { memo } from '@teact';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\n\nimport './MiddleColumn.module.scss';\n\ntype OwnProps = {\n  errorMessage: string;\n};\n\nconst WebContentsError: FC<OwnProps> = ({\n  errorMessage,\n}) => {\n  return (\n    <div className=\"webContentsError\">\n      <div className=\"webContentsErrorTitle\">Hmmm...</div>\n      <AnimatedIconWithPreview\n        size={160}\n        tgsUrl={LOCAL_TGS_URLS.SearchingDuck}\n        nonInteractive\n        noLoop\n      />\n      <div className=\"webContentsErrorMessage\">\n        {errorMessage}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WebContentsError);\n","import type {\n  ElementRef } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo,\n  useRef,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiTopic,\n} from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n  ThemeKey,\n  ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsCurrentUserFrozen,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPeerPaidMessagesStars,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThemeValues,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport {\n  IS_ANDROID, IS_IOS, IS_SAFARI, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { isUserId } from '../../util/entities/ids';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useResizeObserver from '../../hooks/useResizeObserver';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport useFluidBackgroundFilter from './message/hooks/useFluidBackgroundFilter';\n\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport FrozenAccountPlaceholder from './FrozenAccountPlaceholder';\nimport GreetingsBlock from './GreetingsBlock';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MiddleHeaderPanes from './MiddleHeaderPanes';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\nimport WebContentsError from './WebContentsError';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: ElementRef<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n  freezeAppealChat?: ApiChat;\n  workspaceSidebarIsOpen?: boolean;\n  webContentsViewIsLoading?: boolean;\n  webContentsViewError?: string;\n  webContentsViewIsVisible?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nfunction isVideo(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_VIDEO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  arePeerSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n  paidMessagesStars,\n  isAccountFrozen,\n  freezeAppealChat,\n  workspaceSidebarIsOpen,\n  webContentsViewIsLoading,\n  webContentsViewError,\n  webContentsViewIsVisible,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadPeerSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement | undefined>(undefined);\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useOldLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId: chatId! });\n    }\n  }, [chatId, isPrivate, arePeerSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    // In Safari, the e.dataTransfer.items list may be empty during dragenter/dragover events,\n    // preventing the ability to determine file types in advance. More details: https://bugs.webkit.org/show_bug.cgi?id=223517\n    const shouldDrawQuick = IS_SAFARI || (items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every((item) => isImage(item) || isVideo(item)));\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, topics, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    ?? forumComposerPlaceholder\n    ?? (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined)\n    ?? (isAccountFrozen && freezeAppealChat?.id !== chatId ? <FrozenAccountPlaceholder /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  // Prepare filter beforehand to avoid flickering\n  useFluidBackgroundFilter(patternColor);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  ) || (isAccountFrozen && freezeAppealChat?.id !== chatId);\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  useResizeObserver(containerRef, (entry) => {\n    updateWebContentsViewBounds(entry.target.getBoundingClientRect());\n  });\n\n  const updateWebContentsViewBounds = useCallback((rect: DOMRect) => {\n    const workspaceSidebarWidth = 300;\n    const calcX = workspaceSidebarIsOpen ? rect.left + workspaceSidebarWidth + 1 : rect.left + 1; // 1px: include left column border\n    const calcWidth = workspaceSidebarIsOpen ? rect.width - workspaceSidebarWidth - 1 : rect.width - 1;\n\n    window.electron?.setWebContentsViewBounds({\n      x: calcX,\n      y: rect.top,\n      height: window.innerHeight - 22, // bottom inset (padding + border)\n      width: calcWidth,\n    });\n  }, [workspaceSidebarIsOpen]);\n\n  useEffect(() => {\n    const rect = containerRef.current?.getBoundingClientRect();\n    if (rect) {\n      updateWebContentsViewBounds(rect);\n    }\n  }, [updateWebContentsViewBounds, workspaceSidebarIsOpen]);\n\n  return (\n    <div\n      ref={containerRef}\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      <div id=\"middle-column-left-sidebar-portals\" style=\"height: 100%\" />\n      {webContentsViewIsLoading && <div className=\"webContentsShimmer\" />}\n      {webContentsViewError && <WebContentsError errorMessage={webContentsViewError} />}\n      {!chatId && !webContentsViewIsVisible && <GreetingsBlock />}\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeaderPanes\n              key={renderingChatId}\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isMobile={isMobile}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              isBlockingAnimation\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                paidMessagesStars={paidMessagesStars}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage!}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <Icon name=\"unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{lang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = selectThemeValues(global, theme) || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, reactorModal, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n      workspaceSidebarIsOpen: global.workspaces.sidebarIsOpen,\n      webContentsViewIsLoading: global.webContentsViewIsLoading,\n      webContentsViewIsVisible: global.webContentsViewIsVisible,\n      webContentsViewError: global.webContentsViewError,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const userFullInfo = chatId ? selectUserFullInfo(global, chatId) : undefined;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n        || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const userFull = selectUserFullInfo(global, chatId);\n\n    const isContactRequirePremium = userFull?.isContactRequirePremium;\n    const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const botFreezeAppealId = global.botFreezeAppealId;\n    const freezeAppealChat = botFreezeAppealId\n      ? selectChat(global, botFreezeAppealId) : undefined;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !isSavedDialog\n        && (!isAccountFrozen || freezeAppealChat?.id === chatId),\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n      paidMessagesStars,\n      isAccountFrozen,\n      freezeAppealChat,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: ElementRef<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import type React from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport VerificationMonetizationModal from '../common/VerificationMonetizationModal.async';\nimport WebAppsCloseConfirmationModal from '../main/WebAppsCloseConfirmationModal.async';\nimport AboutAdsModal from './aboutAds/AboutAdsModal.async';\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatInviteModal from './chatInvite/ChatInviteModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport DeleteAccountModal from './deleteAccount/DeleteAccountModal.async';\nimport EmojiStatusAccessModal from './emojiStatusAccess/EmojiStatusAccessModal.async';\nimport FrozenAccountModal from './frozenAccount/FrozenAccountModal.async';\nimport PremiumGiftModal from './gift/GiftModal.async';\nimport GiftInfoModal from './gift/info/GiftInfoModal.async';\nimport GiftRecipientPicker from './gift/recipient/GiftRecipientPicker.async';\nimport GiftResalePriceComposerModal from './gift/resale/GiftResalePriceComposerModal.async';\nimport GiftStatusInfoModal from './gift/status/GiftStatusInfoModal.async';\nimport GiftTransferModal from './gift/transfer/GiftTransferModal.async';\nimport GiftUpgradeModal from './gift/upgrade/GiftUpgradeModal.async';\nimport GiftWithdrawModal from './gift/withdraw/GiftWithdrawModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport LocationAccessModal from './locationAccess/LocationAccessModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport PaidReactionModal from './paidReaction/PaidReactionModal.async';\nimport PreparedMessageModal from './preparedMessage/PreparedMessageModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport ReportModal from './reportModal/ReportModal.async';\nimport SharePreparedMessageModal from './sharePreparedMessage/SharePreparedMessageModal.async';\nimport ChatRefundModal from './stars/chatRefund/ChatRefundModal.async';\nimport StarsGiftModal from './stars/gift/StarsGiftModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsSubscriptionModal from './stars/subscription/StarsSubscriptionModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport SuggestedStatusModal from './suggestedStatus/SuggestedStatusModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n  'giftCodeModal' |\n  'boostModal' |\n  'chatlistModal' |\n  'urlAuth' |\n  'mapModal' |\n  'oneTimeMediaModal' |\n  'inviteViaLinkModal' |\n  'requestedAttachBotInstall' |\n  'collectibleInfoModal' |\n  'reportAdModal' |\n  'reportModal' |\n  'starsBalanceModal' |\n  'starsPayment' |\n  'starsTransactionModal' |\n  'paidReactionModal' |\n  'webApps' |\n  'chatInviteModal' |\n  'starsSubscriptionModal' |\n  'starsGiftModal' |\n  'giftModal' |\n  'isGiftRecipientPickerOpen' |\n  'isWebAppsCloseConfirmationModalOpen' |\n  'giftInfoModal' |\n  'giftResalePriceComposerModal' |\n  'suggestedStatusModal' |\n  'emojiStatusAccessModal' |\n  'locationAccessModal' |\n  'aboutAdsModal' |\n  'giftUpgradeModal' |\n  'monetizationVerificationModal' |\n  'giftWithdrawModal' |\n  'preparedMessageModal' |\n  'sharePreparedMessageModal' |\n  'giftStatusInfoModal' |\n  'giftTransferModal' |\n  'chatRefundModal' |\n  'isFrozenAccountModalOpen' |\n  'deleteAccountModal'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  reportModal: ReportModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  starsPayment: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n  chatInviteModal: ChatInviteModal,\n  paidReactionModal: PaidReactionModal,\n  starsSubscriptionModal: StarsSubscriptionModal,\n  starsGiftModal: StarsGiftModal,\n  giftModal: PremiumGiftModal,\n  isGiftRecipientPickerOpen: GiftRecipientPicker,\n  isWebAppsCloseConfirmationModalOpen: WebAppsCloseConfirmationModal,\n  giftInfoModal: GiftInfoModal,\n  giftResalePriceComposerModal: GiftResalePriceComposerModal,\n  suggestedStatusModal: SuggestedStatusModal,\n  emojiStatusAccessModal: EmojiStatusAccessModal,\n  locationAccessModal: LocationAccessModal,\n  aboutAdsModal: AboutAdsModal,\n  giftUpgradeModal: GiftUpgradeModal,\n  monetizationVerificationModal: VerificationMonetizationModal,\n  giftWithdrawModal: GiftWithdrawModal,\n  giftStatusInfoModal: GiftStatusInfoModal,\n  preparedMessageModal: PreparedMessageModal,\n  sharePreparedMessageModal: SharePreparedMessageModal,\n  giftTransferModal: GiftTransferModal,\n  chatRefundModal: ChatRefundModal,\n  isFrozenAccountModalOpen: FrozenAccountModal,\n  deleteAccountModal: DeleteAccountModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportModal = useModuleLoader(Bundles.Extra, 'ReportModal', !modal);\n\n  return ReportModal ? <ReportModal {...props} /> : undefined;\n};\n\nexport default ReportModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Stars, 'StarPaymentModal', !modal);\n\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Stars, 'StarsBalanceModal', !modal);\n\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Stars, 'StarsTransactionInfoModal', !modal);\n\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatInviteModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatInviteModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatInviteModal = useModuleLoader(Bundles.Extra, 'ChatInviteModal', !modal);\n\n  return ChatInviteModal ? <ChatInviteModal {...props} /> : undefined;\n};\n\nexport default ChatInviteModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PaidReactionModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PaidReactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PaidReactionModal = useModuleLoader(Bundles.Stars, 'PaidReactionModal', !modal);\n\n  return PaidReactionModal ? <PaidReactionModal {...props} /> : undefined;\n};\n\nexport default PaidReactionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsSubscriptionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsSubscriptionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsSubscriptionModal = useModuleLoader(Bundles.Stars, 'StarsSubscriptionModal', !modal);\n\n  return StarsSubscriptionModal ? <StarsSubscriptionModal {...props} /> : undefined;\n};\n\nexport default StarsSubscriptionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Stars, 'StarsGiftModal', !modal);\n\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftModal = useModuleLoader(Bundles.Stars, 'GiftModal', !modal);\n\n  return GiftModal ? <GiftModal {...props} /> : undefined;\n};\n\nexport default GiftModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftRecipientPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftRecipientPicker = useModuleLoader(Bundles.Stars, 'GiftRecipientPicker', !modal);\n\n  return GiftRecipientPicker ? <GiftRecipientPicker {...props} /> : undefined;\n};\n\nexport default GiftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppsCloseConfirmationModalAsync: FC = (props) => {\n  const { modal } = props;\n  const WebAppsCloseConfirmationModal = useModuleLoader(Bundles.Extra, 'WebAppsCloseConfirmationModal', !modal);\n\n  return WebAppsCloseConfirmationModal ? <WebAppsCloseConfirmationModal isOpen={modal} /> : undefined;\n};\n\nexport default WebAppsCloseConfirmationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoModal = useModuleLoader(Bundles.Stars, 'GiftInfoModal', !modal);\n\n  return GiftInfoModal ? <GiftInfoModal {...props} /> : undefined;\n};\n\nexport default GiftInfoModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftResalePriceComposerModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftResalePriceComposerModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftResalePriceComposerModal = useModuleLoader(Bundles.Stars, 'GiftResalePriceComposerModal', !modal);\n\n  return GiftResalePriceComposerModal ? <GiftResalePriceComposerModal {...props} /> : undefined;\n};\n\nexport default GiftResalePriceComposerModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedStatusModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedStatusModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedStatusModal = useModuleLoader(Bundles.Extra, 'SuggestedStatusModal', !modal);\n\n  return SuggestedStatusModal ? <SuggestedStatusModal {...props} /> : undefined;\n};\n\nexport default SuggestedStatusModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiStatusAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst EmojiStatusAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const EmojiStatusAccessModal = useModuleLoader(Bundles.Extra, 'EmojiStatusAccessModal', !modal);\n\n  return EmojiStatusAccessModal ? <EmojiStatusAccessModal {...props} /> : undefined;\n};\n\nexport default EmojiStatusAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LocationAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst LocationAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const LocationAccessModal = useModuleLoader(Bundles.Extra, 'LocationAccessModal', !modal);\n\n  return LocationAccessModal ? <LocationAccessModal {...props} /> : undefined;\n};\n\nexport default LocationAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !modal);\n\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftUpgradeModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftUpgradeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftUpgradeModal = useModuleLoader(Bundles.Stars, 'GiftUpgradeModal', !modal);\n\n  return GiftUpgradeModal ? <GiftUpgradeModal {...props} /> : undefined;\n};\n\nexport default GiftUpgradeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !modal);\n\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftWithdrawModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftWithdrawModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftWithdrawModal = useModuleLoader(Bundles.Stars, 'GiftWithdrawModal', !modal);\n\n  return GiftWithdrawModal ? <GiftWithdrawModal {...props} /> : undefined;\n};\n\nexport default GiftWithdrawModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftStatusInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftStatusInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftStatusInfoModal = useModuleLoader(Bundles.Stars, 'GiftStatusInfoModal', !modal);\n\n  return GiftStatusInfoModal ? <GiftStatusInfoModal {...props} /> : undefined;\n};\n\nexport default GiftStatusInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PreparedMessageModal = useModuleLoader(Bundles.Extra, 'PreparedMessageModal', !modal);\n\n  return PreparedMessageModal ? <PreparedMessageModal {...props} /> : undefined;\n};\n\nexport default PreparedMessageModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SharePreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SharePreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SharePreparedMessageModal = useModuleLoader(Bundles.Extra, 'SharePreparedMessageModal', !modal);\n\n  return SharePreparedMessageModal ? <SharePreparedMessageModal {...props} /> : undefined;\n};\n\nexport default SharePreparedMessageModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftTransferModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftTransferModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftTransferModal = useModuleLoader(Bundles.Stars, 'GiftTransferModal', !modal);\n\n  return GiftTransferModal ? <GiftTransferModal {...props} /> : undefined;\n};\n\nexport default GiftTransferModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatRefundModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ChatRefundModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatRefundModal = useModuleLoader(Bundles.Stars, 'ChatRefundModal', !modal);\n\n  return ChatRefundModal ? <ChatRefundModal {...props} /> : undefined;\n};\n\nexport default ChatRefundModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './FrozenAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst FrozenAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const FrozenAccountModal = useModuleLoader(Bundles.Extra, 'FrozenAccountModal', modal);\n\n  return FrozenAccountModal ? <FrozenAccountModal {...props} /> : undefined;\n};\n\nexport default FrozenAccountModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DeleteAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const DeleteAccountModal = useModuleLoader(Bundles.Extra, 'DeleteAccountModal', !modal);\n\n  return DeleteAccountModal ? <DeleteAccountModal {...props} /> : undefined;\n};\n\nexport default DeleteAccountModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredIds = filterPeersByQuery({\n      ids: unique([\n        ...(localContactIds || []),\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]),\n      query: searchQuery,\n      type: 'user',\n    });\n\n    return sortChatIds(\n      filteredIds.filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <Icon name=\"arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: ElementRef<HTMLDivElement>,\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs: () => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll({\n          container,\n          element: tabsEl,\n          position: 'start',\n          forceDuration: TRANSITION_DURATION,\n        });\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n\n    animateScroll({\n      container,\n      element: container.firstElementChild as HTMLElement,\n      position: 'start',\n      maxDistance: container.offsetHeight * 2,\n    });\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (Math.ceil(container.scrollTop) >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'gifts':\n      return ProfileState.GiftList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds({\n  loadMoreMembers,\n  loadCommonChats,\n  searchMessages,\n  loadStories,\n  loadStoriesArchive,\n  loadMoreGifts,\n  tabType,\n  mediaSearchType,\n  groupChatMembers,\n  commonChatIds,\n  usersById,\n  userStatusesById,\n  chatsById,\n  chatMessages,\n  foundIds,\n  threadId,\n  storyIds,\n  giftIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  similarChannels,\n  similarBots,\n}: {\n  loadMoreMembers: AnyToVoidFunction;\n  loadCommonChats: AnyToVoidFunction;\n  searchMessages: AnyToVoidFunction;\n  loadStories: AnyToVoidFunction;\n  loadStoriesArchive: AnyToVoidFunction;\n  loadMoreGifts: AnyToVoidFunction;\n  tabType: ProfileTabType;\n  mediaSearchType?: SharedMediaType;\n  groupChatMembers?: ApiChatMember[];\n  commonChatIds?: string[];\n  usersById?: Record<string, ApiUser>;\n  userStatusesById?: Record<string, ApiUserStatus>;\n  chatsById?: Record<string, ApiChat>;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  threadId?: ThreadId;\n  storyIds?: number[];\n  giftIds?: string[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  similarChannels?: string[];\n  similarBots?: string[];\n}) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'similarBots':\n      viewportIds = similarBots;\n      break;\n    case 'gifts':\n      viewportIds = giftIds;\n      getMore = loadMoreGifts;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HN4dYXIk\",\"topIcon\":\"_TMVTkD4\",\"hiddenGift\":\"xY4yqqYA\",\"radialPattern\":\"_I9aOdGr\",\"stickerWrapper\":\"NYuBBB9j\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusType, ApiPeer, ApiSavedStarGift } from '../../../api/types';\n\nimport { getHasAdminRight } from '../../../global/helpers';\nimport { selectChat, selectPeer, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { CUSTOM_PEER_HIDDEN } from '../../../util/objects/customPeer';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift, getTotalGiftAvailability } from '../helpers/gifts';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { type ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport StickerView from '../../common/StickerView';\nimport Menu from '../../ui/Menu';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport RadialPatternBackground from '../profile/RadialPatternBackground';\nimport GiftMenuItems from './GiftMenuItems';\nimport GiftRibbon from './GiftRibbon';\n\nimport styles from './SavedGift.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  gift: ApiSavedStarGift;\n  style?: string;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  currentUserId?: string;\n  hasAdminRights?: boolean;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nconst SavedGift = ({\n  peerId,\n  gift,\n  style,\n  fromPeer,\n  currentUserId,\n  hasAdminRights,\n  collectibleEmojiStatuses,\n  currentUserEmojiStatus,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { openGiftInfoModal } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const stickerRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  const canManage = peerId === currentUserId || hasAdminRights;\n\n  const totalIssued = getTotalGiftAvailability(gift.gift);\n  const starGift = gift.gift;\n  const starGiftUnique = starGift.type === 'starGiftUnique' ? starGift : undefined;\n  const ribbonText = (() => {\n    if (starGiftUnique?.resellPriceInStars) {\n      return lang('GiftRibbonSale');\n    }\n    if (gift.isPinned && starGiftUnique) {\n      return lang('GiftSavedNumber', { number: starGiftUnique.number });\n    }\n    if (totalIssued) {\n      return lang('ActionStarGiftLimitedRibbon', { total: formatIntegerCompact(lang, totalIssued) });\n    }\n    return undefined;\n  })();\n\n  const ribbonColor = starGiftUnique?.resellPriceInStars ? 'green' : 'blue';\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll'));\n  const getMenuElement = useLastCallback(() => (\n    document.querySelector('#portals')?.querySelector('.saved-gift-context-menu .bubble')\n  ));\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({\n      peerId,\n      gift,\n    });\n  });\n\n  const avatarPeer = (gift.isNameHidden && !fromPeer) ? CUSTOM_PEER_HIDDEN : fromPeer;\n\n  const sticker = getStickerFromGift(gift.gift);\n\n  const radialPatternBackdrop = useMemo(() => {\n    const { backdrop, pattern } = getGiftAttributes(gift.gift) || {};\n\n    if (!backdrop || !pattern) {\n      return undefined;\n    }\n\n    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];\n    const patternColor = backdrop.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={pattern.sticker}\n      />\n    );\n  }, [gift.gift]);\n\n  if (!sticker) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(styles.root, 'scroll-item')}\n      style={style}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onMouseDown={handleBeforeContextMenu}\n    >\n      {radialPatternBackdrop}\n      {!radialPatternBackdrop && <Avatar className={styles.topIcon} peer={avatarPeer} size=\"micro\" />}\n      {gift.isPinned && <Icon name=\"pinned-message\" className={styles.topIcon} />}\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${GIFT_STICKER_SIZE}px; height: ${GIFT_STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            observeIntersectionForPlaying={observeIntersection}\n            observeIntersectionForLoading={observeIntersection}\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={GIFT_STICKER_SIZE}\n            shouldPreloadPreview\n          />\n        )}\n\n      </div>\n      {gift.isUnsaved && (\n        <div className={styles.hiddenGift}>\n          <Icon name=\"eye-crossed-outline\" />\n        </div>\n      )}\n      {ribbonText && (\n        <GiftRibbon\n          color={ribbonColor}\n          text={ribbonText}\n        />\n      )}\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          className=\"saved-gift-context-menu\"\n          autoClose\n          withPortal\n          getMenuElement={getMenuElement}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getLayout={getLayout}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          <GiftMenuItems\n            peerId={peerId}\n            gift={gift}\n            canManage={canManage}\n            collectibleEmojiStatuses={collectibleEmojiStatuses}\n            currentUserEmojiStatus={currentUserEmojiStatus}\n          />\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId, gift }): StateProps => {\n    const fromPeer = gift.fromId ? selectPeer(global, gift.fromId) : undefined;\n    const chat = selectChat(global, peerId);\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n\n    const currentUserId = global.currentUserId;\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      fromPeer,\n      hasAdminRights,\n      currentUserId,\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n    };\n  },\n)(SavedGift));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getMessageMediaHash, getMessageMediaThumbDataUri,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = getMessageMediaThumbDataUri(media);\n\n  const mediaBlobUrl = useMedia(getMessageMediaHash(media, 'preview'), !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): StateProps => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig || {};\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiSavedStarGift,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type {\n  ProfileState, ProfileTabType, SharedMediaType, ThemeKey, ThreadId,\n} from '../../types';\nimport type { RegularLangKey } from '../../types/language';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  getMessageDownloadableMedia,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectPeerStories,\n  selectSimilarBotsIds,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { isUserId } from '../../util/entities/ids';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport { useViewTransition } from '../../hooks/animations/useViewTransition';\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport SavedGift from '../common/gift/SavedGift';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Icon from '../common/icons/Icon';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Link from '../ui/Link';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n  isChannel?: boolean;\n  isBot?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  hasGiftsTab?: boolean;\n  gifts?: ApiSavedStarGift[];\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  similarBots?: string[];\n  botPreviewMedia?: ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarPeers: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  key: RegularLangKey;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', key: 'ProfileTabMedia' },\n  { type: 'documents', key: 'ProfileTabFiles' },\n  { type: 'links', key: 'ProfileTabLinks' },\n  { type: 'audio', key: 'ProfileTabMusic' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  threadId,\n  profileState,\n  theme,\n  isChannel,\n  isBot,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  hasGiftsTab,\n  gifts,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  similarBots,\n  isCurrentUserPremium,\n  limitSimilarPeers,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n  onProfileStateChange,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadBotRecommendations,\n    loadPreviewMedias,\n    loadPeerSavedGifts,\n    resetGiftProfileFilter,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => {\n    const arr: TabProps[] = [];\n    if (isSavedMessages && !isSavedDialog) {\n      arr.push({ type: 'dialogs', key: 'ProfileTabSavedDialogs' });\n    }\n\n    if (hasStoriesTab) {\n      arr.push({ type: 'stories', key: 'ProfileTabStories' });\n    }\n\n    if (hasStoriesTab && isSavedMessages) {\n      arr.push({ type: 'storiesArchive', key: 'ProfileTabStoriesArchive' });\n    }\n\n    if (hasGiftsTab) {\n      arr.push({ type: 'gifts', key: 'ProfileTabGifts' });\n    }\n\n    if (hasMembersTab) {\n      arr.push({ type: 'members', key: isChannel ? 'ProfileTabSubscribers' : 'ProfileTabMembers' });\n    }\n\n    if (hasPreviewMediaTab) {\n      arr.push({ type: 'previewMedia', key: 'ProfileTabBotPreview' });\n    }\n\n    arr.push(...TABS);\n\n    // Voice messages filter currently does not work in forum topics. Return it when it's fixed on the server side.\n    if (!isTopicInfo) {\n      arr.push({ type: 'voice', key: 'ProfileTabVoice' });\n    }\n\n    if (hasCommonChatsTab) {\n      arr.push({ type: 'commonChats', key: 'ProfileTabSharedGroups' });\n    }\n\n    if (isChannel && similarChannels?.length) {\n      arr.push({ type: 'similarChannels', key: 'ProfileTabSimilarChannels' });\n    }\n\n    if (isBot && similarBots?.length) {\n      arr.push({ type: 'similarBots', key: 'ProfileTabSimilarBots' });\n    }\n\n    return arr.map((tab) => ({\n      type: tab.type,\n      title: lang(tab.key),\n    }));\n  }, [\n    isSavedMessages, isSavedDialog, hasStoriesTab, hasGiftsTab, hasMembersTab, hasPreviewMediaTab, isTopicInfo,\n    hasCommonChatsTab, isChannel, isBot, similarChannels?.length, similarBots?.length, lang,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  useEffect(() => {\n    if (isBot && !similarBots && isSynced) {\n      loadBotRecommendations({ userId: chatId });\n    }\n  }, [chatId, isBot, similarBots, isSynced]);\n\n  const [renderingGifts, setRenderingGifts] = useState(gifts);\n  const { startViewTransition, shouldApplyVtn } = useViewTransition();\n\n  const getGiftId = useLastCallback((gift: ApiSavedStarGift) => (\n    `${gift.date}-${gift.fromId}-${gift.gift.id}`\n  ));\n  const giftIds = useMemo(() => renderingGifts?.map(getGiftId), [renderingGifts]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadGifts = useCallback(() => {\n    loadPeerSavedGifts({ peerId: chatId });\n  }, [chatId]);\n\n  useEffectWithPrevDeps(([prevGifts]) => {\n    if (!gifts || !prevGifts) {\n      setRenderingGifts(gifts);\n      return;\n    }\n\n    const prevGiftIds = prevGifts.map(getGiftId);\n    const newGiftIds = gifts.map(getGiftId);\n    const hasOrderChanged = prevGiftIds.some((id, index) => id !== newGiftIds[index]);\n\n    if (hasOrderChanged) {\n      startViewTransition(() => {\n        setRenderingGifts(gifts);\n      });\n    } else {\n      setRenderingGifts(gifts);\n    }\n  }, [gifts, startViewTransition]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds({\n    loadMoreMembers,\n    searchMessages: searchSharedMediaMessages,\n    loadStories: handleLoadPeerStories,\n    loadStoriesArchive: handleLoadStoriesArchive,\n    loadMoreGifts: handleLoadGifts,\n    loadCommonChats: handleLoadCommonChats,\n    tabType,\n    mediaSearchType,\n    groupChatMembers: members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages: messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    giftIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n    similarBots,\n  });\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    handleStopAutoScrollToTabs,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n        || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  const handleResetGiftsFilter = useLastCallback(() => {\n    resetGiftProfileFilter({ peerId: chatId });\n  });\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds && !botPreviewMedia) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: oldLang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderNothingFoundGiftsWithFilter() {\n    return (\n      <div className=\"nothing-found-gifts\">\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.SearchingDuck}\n          nonInteractive\n          noLoop\n        />\n        <div className=\"description\">\n          {lang('GiftSearchEmpty')}\n        </div>\n        <Link\n          className=\"date\"\n          onClick={handleResetGiftsFilter}\n        >\n          {lang('GiftSearchReset')}\n        </Link>\n      </div>\n    );\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if ((!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div\n          className=\"content empty-list\"\n        >\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    const isViewportIdsEmpty = viewportIds && !viewportIds?.length;\n\n    if (isViewportIdsEmpty && resultType === 'gifts') {\n      return renderNothingFoundGiftsWithFilter();\n    }\n\n    if (isViewportIdsEmpty) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = oldLang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = oldLang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = oldLang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = oldLang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = oldLang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = oldLang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = oldLang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = oldLang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={oldLang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[]).map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[]).map((id) => {\n            const message = messagesById[id];\n            if (!message) return undefined;\n            const media = messagesById[id] && getMessageDownloadableMedia(message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={messagesById[id]}\n                senderTitle={getSenderName(oldLang, messagesById[id], chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={messagesById[id].date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !messagesById[id].isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[]).map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[]).map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[]).map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {oldLang('UnlockSimilar')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(oldLang('MoreSimilarText', limitSimilarPeers), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'similarBots' ? (\n          <div key={resultType}>\n            {(viewportIds as string[]).map((userId, i) => (\n              <ListItem\n                key={userId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarBots!.length - 1 && 'blured',\n                )}\n\n                onClick={() => openChat({ id: userId })}\n              >\n                {isUserId(userId) ? (\n                  <PrivateChatInfo\n                    userId={userId}\n                    avatarSize=\"medium\"\n                  />\n                ) : (\n                  <GroupChatInfo\n                    chatId={userId}\n                    avatarSize=\"medium\"\n                  />\n                )}\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {}\n                <Button className=\"show-more-bots\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockMoreSimilarBots')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarBotsDescription', { count: limitSimilarPeers }, {\n                    withNodes: true,\n                    withMarkdown: true,\n                    pluralValue: limitSimilarPeers,\n                  }))}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'gifts' ? (\n          (renderingGifts?.map((gift) => {\n            return (\n              <SavedGift\n                peerId={chatId}\n                key={getGiftId(gift)}\n                style={shouldApplyVtn ? `view-transition-name: vt${getGiftId(gift)}` : undefined}\n                gift={gift}\n                observeIntersection={observeIntersectionForMedia}\n              />\n            );\n          }))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const activeListSelector = `.shared-media-transition > .Transition_slide-active.${resultType}-list`;\n  const itemSelector = `${activeListSelector} > .scroll-item`;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={itemSelector}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(profileId, isRightColumnShown && canRenderContent, isSavedDialog)\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={oldLang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          className={buildClassName(!isActive && 'hidden')}\n          isShown={canRenderContent}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={oldLang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const { shouldWarnAboutSvg } = selectSharedSettings(global);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const isBot = user && isUserBot(user);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && (isGroup || (isChannel && isChatAdmin(chat)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const { similarBotsIds } = selectSimilarBotsIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    const hasGiftsTab = Boolean(peerFullInfo?.starGiftCount) && !isSavedDialog;\n    const peerGifts = selectTabState(global).savedGifts.giftsByPeerId[chatId];\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      isBot,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      hasGiftsTab,\n      gifts: peerGifts?.gifts,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      similarBots: similarBotsIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      limitSimilarPeers: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\n// Sometimes px values are rounded\nconst ROUNDING_COMPENSATION_PX = 1;\n\nexport default function useTransitionFixes(\n  containerRef: ElementRef<HTMLDivElement>,\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight + ROUNDING_COMPENSATION_PX;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport type { GiftProfileFilterOptions, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectCanUseGiftProfileAdminFilter,\n  selectCanUseGiftProfileFilter,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  giftProfileFilter: GiftProfileFilterOptions;\n  canUseGiftFilter?: boolean;\n  canUseGiftAdminFilter?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  GiftList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n  NewDiscussionGroup,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  onClose,\n  onScreenSelect,\n  canEditBot,\n  giftProfileFilter,\n  canUseGiftFilter,\n  canUseGiftAdminFilter,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n    updateGiftProfileFilter,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const {\n    sortType: giftsSortType,\n    shouldIncludeUnlimited: shouldIncludeUnlimitedGifts,\n    shouldIncludeLimited: shouldIncludeLimitedGifts,\n    shouldIncludeUnique: shouldIncludeUniqueGifts,\n    shouldIncludeDisplayed: shouldIncludeDisplayedGifts,\n    shouldIncludeHidden: shouldIncludeHiddenGifts,\n  } = giftProfileFilter;\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.GiftList ? (\n      HeaderContent.GiftList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : managementScreen === ManagementScreens.NewDiscussionGroup ? (\n      HeaderContent.NewDiscussionGroup\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return oldLang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return oldLang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return oldLang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return oldLang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return oldLang('GroupInfo.Title');\n  }\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, lang]);\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{oldLang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{oldLang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{oldLang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{oldLang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{oldLang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{oldLang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{oldLang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{oldLang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{oldLang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{oldLang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{oldLang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{oldLang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{oldLang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? oldLang('EditLink') : oldLang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{oldLang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={oldLang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <Icon name=\"delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={oldLang('DeleteLink')}\n                    text={oldLang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={oldLang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{oldLang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={oldLang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={oldLang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{oldLang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{oldLang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{oldLang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{oldLang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{oldLang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{oldLang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{oldLang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{oldLang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{oldLang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{oldLang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{oldLang('EditTopic')}</h3>;\n      case HeaderContent.GiftList:\n        return (\n          <>\n            <h3 className=\"title\">{lang('ProfileTabGifts')}</h3>\n            {canUseGiftFilter && chatId && (\n              <section className=\"tools\">\n                <DropdownMenu\n                  trigger={PrimaryLinkMenuButton}\n                  positionX=\"right\"\n                  autoClose={false}\n                >\n                  <MenuItem\n                    icon={giftsSortType === 'byDate' ? 'cash-circle' : 'calendar-filter'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { sortType: giftsSortType === 'byDate' ? 'byValue' : 'byDate' } },\n                    )}\n                  >\n                    {lang(giftsSortType === 'byDate' ? 'GiftSortByValue' : 'GiftSortByDate')}\n                  </MenuItem>\n\n                  <MenuSeparator />\n\n                  <MenuItem\n                    icon={shouldIncludeUnlimitedGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnlimited: !shouldIncludeUnlimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnlimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeLimitedGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeLimited: !shouldIncludeLimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterLimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeUniqueGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnique: !shouldIncludeUniqueGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnique')}\n                  </MenuItem>\n\n                  {canUseGiftAdminFilter && (\n                    <>\n                      <MenuSeparator />\n                      <MenuItem\n                        icon={shouldIncludeDisplayedGifts ? 'check' : 'placeholder'}\n\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeDisplayed: !shouldIncludeDisplayedGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterDisplayed')}\n                      </MenuItem>\n\n                      <MenuItem\n                        icon={shouldIncludeHiddenGifts ? 'check' : 'placeholder'}\n\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeHidden: !shouldIncludeHiddenGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterHidden')}\n                      </MenuItem>\n                    </>\n                  )}\n                </DropdownMenu>\n              </section>\n            )}\n          </>\n        );\n      case HeaderContent.NewDiscussionGroup:\n        return <h3 className=\"title\">{oldLang('NewGroup')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <Icon name=\"add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <Icon name=\"stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.GiftList\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  const headerRef = useRef<HTMLDivElement>();\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    const giftProfileFilter = tabState.savedGifts.filter;\n    const canUseGiftFilter = chatId ? selectCanUseGiftProfileFilter(global, chatId) : false;\n    const canUseGiftAdminFilter = chatId ? selectCanUseGiftProfileAdminFilter(global, chatId) : false;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n      giftProfileFilter,\n      canUseGiftFilter,\n      canUseGiftAdminFilter,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\",\"primaryLink\":\"GXmXwIbx\",\"copy\":\"rB0gc1GX\"};","import {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n} from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n};\n\nconst GIVEAWAY_IMG_LIST: Partial<Record<number, string>> = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst CUSTOM_PEER_STAR_TEMPLATE: Omit<CustomPeer, 'title' | 'titleKey'> = {\n  isCustomPeer: true,\n  avatarIcon: 'star',\n  peerColorId: 1,\n};\n\nconst CUSTOM_PEER_TO_BE_DISTRIBUTED: CustomPeer = {\n  isCustomPeer: true,\n  titleKey: 'BoostingToBeDistributed',\n  avatarIcon: 'user',\n  withPremiumGradient: true,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>\n            {lang(boost.isFromGiveaway\n              ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    let customPeer: CustomPeer | undefined;\n    if (hasStars) {\n      customPeer = {\n        ...CUSTOM_PEER_STAR_TEMPLATE,\n        title: lang('Stars', boost.stars),\n      };\n    }\n\n    if (!boost.userId) {\n      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;\n    }\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable\"\n\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={customPeer}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months] || GIVEAWAY_IMG_LIST[3]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>\n                          {\n                            isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                              : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                          }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>\n                    {lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">\n                {lang(\n                  isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n                )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics, StatisticsGraph } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, openMonetizationVerificationModal, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ peerId: chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (containerRef.current) {\n        Array.from(containerRef.current.children).forEach((child) => {\n          child.innerHTML = '';\n          child.classList.add(styles.hidden);\n        });\n      }\n\n      loadedCharts.current = [];\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index] as HTMLElement, {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph as StatisticsGraph,\n        });\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n      && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? (\n              <span className={styles.decimalPart}>\n                .\n                {decimalTonPart}\n              </span>\n            ) : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ $\n          {integerUsdPart}\n          {decimalUsdPart ? (\n            <span className={styles.decimalUsdPart}>\n              .\n              {decimalUsdPart}\n            </span>\n          ) : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openMonetizationVerificationModal({\n        chatId,\n      });\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          size=\"smaller\"\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n    } = global;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig?.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useMarkScrolled from '../../hooks/useMarkScrolled/useMarkScrolled';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  useMarkScrolled({\n    containerRef,\n    selector: ':scope .custom-scroll, :scope .panel-content',\n  }, [contentKey, managementScreen, chatId, threadId]);\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.NewDiscussionGroup:\n            setManagementScreen(ManagementScreens.Discussion);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            isActive={isOpen && isActive}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          ref={containerRef}\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/browser/windowEnvironment';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (!chatId || !messageId) return;\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);\n\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import { type FC, memo, type TeactNode } from '@teact';\n\nimport Accordion from '../../ui/accordion/Accordion';\nimport AccordionSavedState from '../../ui/accordion/AccordionSavedState';\n\nimport styles from './MainSidebar.module.scss';\n\ntype OwnProps = {\n  title: string;\n  children: TeactNode;\n};\n\nconst MainSidebarSection: FC<OwnProps> = ({\n  title,\n  children,\n}) => {\n  return (\n    <AccordionSavedState id={`main-sidebar-section-${title}`}>\n      {({ isExpandedByDefault, onChange }) => (\n        <Accordion\n          title={title}\n          key={`main-sidebar-section-${title}`}\n          isExpandedByDefault={isExpandedByDefault}\n          onChange={onChange}\n          className={styles.SidebarAccordionSection}\n        >\n          {children}\n        </Accordion>\n      )}\n    </AccordionSavedState>\n  );\n};\n\nexport default memo(MainSidebarSection);\n","// extracted by mini-css-extract-plugin\nexport default {\"Container\":\"oBRH_i6v\",\"container\":\"oBRH_i6v\",\"Tabs\":\"tXfha3M0\",\"tabs\":\"tXfha3M0\",\"ProfileContainer\":\"os2ZnEf0\",\"profileContainer\":\"os2ZnEf0\",\"ProfileAvatar\":\"Eml5WngR\",\"profileAvatar\":\"Eml5WngR\",\"SidebarAccordionSection\":\"QDKdf4Dj\",\"sidebarAccordionSection\":\"QDKdf4Dj\",\"NewWorkspaceInput\":\"O5F71FTy\",\"newWorkspaceInput\":\"O5F71FTy\",\"WorkspacesLoading\":\"yX_zJ91K\",\"workspacesLoading\":\"yX_zJ91K\"};","// extracted by mini-css-extract-plugin\nexport default {\"Selector\":\"eWTqlWl4\",\"selector\":\"eWTqlWl4\",\"selected\":\"iasB3KJO\",\"ProfileSelectorContainer\":\"NYTuiole\",\"profileSelectorContainer\":\"NYTuiole\",\"ListItem\":\"CS2yo8vn\",\"listItem\":\"CS2yo8vn\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { LeftColumnContent } from '../../../types';\nimport type { IconName } from '../../../types/icons';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\n\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './MainSidebarTab.module.scss';\n\ntype OwnProps = {\n  title: string;\n  leftColumnContent?: LeftColumnContent;\n  iconName?: IconName;\n  onClick?: NoneToVoidFunction;\n  isSelected?: boolean;\n  contextActions?: MenuItemContextAction[];\n};\n\ntype StateProps = {\n  currentLeftColumnContent: LeftColumnContent;\n};\n\nconst MainSidebarTab: FC<OwnProps & StateProps> = ({\n  iconName,\n  title,\n  onClick,\n  leftColumnContent,\n  currentLeftColumnContent,\n  isSelected: propsIsSelected,\n  contextActions,\n}) => {\n  const {\n    openLeftColumnContent,\n  } = getActions();\n\n  const isSelected = propsIsSelected || currentLeftColumnContent === leftColumnContent;\n\n  const handleOnClick = useCallback(() => {\n    if (onClick) {\n      onClick();\n    } else {\n      openLeftColumnContent({ contentKey: leftColumnContent });\n    }\n  }, [leftColumnContent, onClick]);\n\n  const selectorClassName = buildClassName(\n    styles.selector,\n    isSelected && styles.selected,\n  );\n\n  return (\n    <ListItem\n      isStatic\n      withPortalForMenu\n      className={styles.listItem}\n      contextActions={contextActions}\n      onClick={() => {}}\n    >\n      <div className={selectorClassName} onClick={handleOnClick}>\n        {iconName && <Icon name={iconName} />}\n        {title}\n      </div>\n    </ListItem>\n\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const leftColumnContentKey = tabState.leftColumn.contentKey;\n\n    return {\n      currentLeftColumnContent: leftColumnContentKey,\n    };\n  },\n)(MainSidebarTab));\n","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { getCurrentMaxAccountCount, getCurrentProdAccountCount } from '../../../global/helpers';\nimport { getAccountSlotUrl } from '../../../util/multiaccount';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMultiaccountInfo from '../../../hooks/useMultiaccountInfo';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n  totalLimit: number;\n  onSelectCurrent?: VoidFunction;\n};\n\nconst NOTIFICATION_DURATION = 7000;\n\nconst AccountMenuItems = ({\n  currentUser,\n  totalLimit,\n  onSelectCurrent,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const accounts = useMultiaccountInfo(currentUser);\n\n  const currentCount = getCurrentProdAccountCount();\n  const maxCount = getCurrentMaxAccountCount();\n\n  const currentAccountInfo = useMemo(() => {\n    return Object.values(accounts).find((account) => account.userId === currentUser.id);\n  }, [accounts, currentUser.id]);\n\n  const shouldShowLimit = currentCount >= maxCount;\n\n  const handleLimitClick = useLastCallback(() => {\n    showNotification({\n      title: lang('PremiumLimitAccountsTitle'),\n      message: currentUser.isPremium ? lang('PremiumLimitAccounts') : lang('PremiumLimitAccountsNoPremium'),\n      duration: NOTIFICATION_DURATION,\n    });\n  });\n\n  const newAccountUrl = useMemo(() => {\n    if (!Object.values(accounts).length) {\n      return undefined;\n    }\n\n    if (currentCount === totalLimit) {\n      return undefined;\n    }\n\n    let freeIndex = 1;\n    while (accounts[freeIndex]) {\n      freeIndex += 1;\n    }\n\n    return getAccountSlotUrl(freeIndex, true);\n  }, [accounts, currentCount, totalLimit]);\n\n  return (\n    <>\n      {Object.entries(accounts || {})\n        .sort(([, account]) => (account.userId === currentUser.id ? -1 : 1))\n        .map(([slot, account], index, arr) => {\n          const isSameServer = account.isTest === currentAccountInfo?.isTest;\n          const mockUser: CustomPeer = {\n            title: [account.firstName, account.lastName].filter(Boolean).join(' '),\n            isCustomPeer: true,\n            peerColorId: account.color,\n            emojiStatusId: isSameServer ? account.emojiStatusId : undefined,\n            isPremium: account.isPremium,\n          };\n\n          const hasSeparator = account.userId === currentUser.id && (newAccountUrl || arr.length > 1);\n\n          return (\n            <>\n              <MenuItem\n                className=\"account-menu-item\"\n                customIcon={(\n                  <Avatar\n                    size=\"mini\"\n                    className=\"account-avatar\"\n                    peer={mockUser}\n                    previewUrl={account.avatarUri}\n                  />\n                )}\n                onClick={account.userId === currentUser.id ? onSelectCurrent : undefined}\n                href={account.userId !== currentUser.id ? getAccountSlotUrl(Number(slot)) : undefined}\n              >\n                {account.isTest && <span className=\"account-menu-item-test\">T</span>}\n                <FullNameTitle peer={mockUser} withEmojiStatus emojiStatusSize={REM} />\n              </MenuItem>\n              {hasSeparator && <MenuSeparator />}\n            </>\n          );\n        })}\n      {newAccountUrl && (\n        <MenuItem\n          icon=\"add\"\n          rel=\"noopener\" // Allow referrer to be passed\n          href={!shouldShowLimit ? newAccountUrl : undefined}\n          onClick={shouldShowLimit ? handleLimitClick : undefined}\n        >\n          {lang('MenuAddAccount')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(AccountMenuItems);\n","import type React from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme, selectUser } from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_MULTIACCOUNT_SUPPORTED } from '../../../util/browser/globalEnvironment';\nimport { IS_ELECTRON } from '../../../util/browser/windowEnvironment';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\nimport AccountMenuItems from './AccountMenuItems';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  currentUser?: ApiUser;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  accountsTotalLimit: number;\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  currentUser,\n  accountsTotalLimit,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSharedSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: oldLang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      {IS_MULTIACCOUNT_SUPPORTED && currentUser && (\n        <>\n          <AccountMenuItems\n            currentUser={currentUser}\n            totalLimit={accountsTotalLimit}\n            onSelectCurrent={onSelectSettings}\n          />\n          <MenuSeparator />\n        </>\n      )}\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {oldLang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{oldLang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {oldLang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {oldLang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {oldLang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{oldLang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={oldLang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {oldLang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = selectSharedSettings(global);\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      currentUser: selectUser(global, currentUserId!),\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n      accountsTotalLimit: selectPremiumLimit(global, 'moreAccounts'),\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\n\nimport Avatar from '../../common/Avatar';\nimport LeftSideMenuItems from '../../left/main/LeftSideMenuItems';\nimport DropdownMenu from '../../ui/DropdownMenu';\n\nimport styles from './MainSidebarTab.module.scss';\n\ntype StateProps = {\n  peer?: ApiPeer;\n};\n\nconst MainSidebarTabProfile: FC<StateProps> = ({\n  peer,\n}) => {\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const profileSelectorClassName = buildClassName(\n    styles.selector,\n  );\n\n  const TabProfile: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger }) => (\n      <div className={profileSelectorClassName} onClick={onTrigger}>\n        <Avatar className={styles.profileAvatar} peer={peer} size=\"tiny\" forceRoundedRect />\n        <div style=\"color: var(--color-text-secondary); font-size: 13px;\">\n          {peer?.usernames && peer.usernames[0] && peer.usernames[0].username}\n        </div>\n      </div>\n    );\n  }, [peer, profileSelectorClassName]);\n\n  return (\n    <div className={styles.profileSelectorContainer}>\n      <DropdownMenu\n        trigger={TabProfile}\n        footer=\"Footer\"\n        forceOpen={isBotMenuOpen}\n        positionX=\"left\"\n        transformOriginX={300}\n        positionY=\"bottom\"\n      >\n        <LeftSideMenuItems\n        /* onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings} */\n\n          onSelectArchived={() => {}}\n\n          onSelectContacts={() => {}}\n\n          onSelectSettings={() => {}}\n          onBotMenuOpened={markBotMenuOpen}\n          onBotMenuClosed={unmarkBotMenuOpen}\n        />\n      </DropdownMenu>\n    </div>\n\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const peer = selectPeer(global, global.currentUserId || '');\n    return {\n      peer,\n    };\n  },\n)(MainSidebarTabProfile));\n","// extracted by mini-css-extract-plugin\nexport default {\"Container\":\"XotuvL0_\",\"container\":\"XotuvL0_\",\"IconContainer\":\"wXOqykD_\",\"iconContainer\":\"wXOqykD_\",\"Title\":\"HCcEQ3hf\",\"title\":\"HCcEQ3hf\",\"RightBox\":\"iditXjQy\",\"rightBox\":\"iditXjQy\",\"onActiveIndicator\":\"PwIonz7j\",\"closeButton\":\"bJQnOd7r\"};","import type { FC } from '@teact';\nimport { memo, useState } from '@teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiWorkspace } from '../../../api/notlost/types';\nimport type { WebContentsTabInfo } from '../../../types/electron';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './MainSidebarWebContentsTab.module.scss';\n\ntype OwnProps = {\n  webContentsTab: WebContentsTabInfo;\n  workspaces: ApiWorkspace[];\n  isActive: boolean;\n};\n\nconst MainSidebarWebContentsTab: FC<OwnProps> = ({\n  webContentsTab,\n  workspaces,\n  isActive,\n}) => {\n  const { loadWebContentsViewUrl, closeWebContentsTab } = getActions();\n\n  const [isHovered, setIsHovered] = useState(false);\n\n  const handleClick = () => {\n    loadWebContentsViewUrl({\n      url: webContentsTab.url,\n    });\n  };\n\n  const handleCloseTab = (e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    e.stopPropagation();\n    closeWebContentsTab({\n      tabId: webContentsTab.id,\n    });\n  };\n\n  const getWorkspaceLinkRelatedToTab = () => {\n    return workspaces\n      .map((w) => w.links.find((l) => l.url === webContentsTab.url))\n      .find((link) => link !== undefined);\n  };\n\n  const getTitle = () => {\n    return getWorkspaceLinkRelatedToTab()?.title ?? webContentsTab.title;\n  };\n\n  const renderRightBox = () => {\n    if (isHovered) {\n      return (\n        <Icon\n          name=\"close\"\n          className={styles.closeButton}\n          onClick={handleCloseTab}\n        />\n      );\n    } else if (isActive) {\n      return (\n        <div className={styles.onActiveIndicator} />\n      );\n    }\n\n    return undefined;\n  };\n\n  const containerClassName = buildClassName(\n    styles.container,\n    isActive && styles.isActive,\n  );\n\n  const linkIconContainerClassName = buildClassName(\n    styles.iconContainer,\n  );\n\n  return (\n    <div\n      onClick={handleClick}\n      className={containerClassName}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n    >\n      <div className={linkIconContainerClassName}>\n        <Icon name=\"link\" />\n      </div>\n      <div className={styles.title}>{getTitle()}</div>\n      <div className={styles.rightBox}>\n        {renderRightBox()}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MainSidebarWebContentsTab);\n","import type { FC } from '@teact';\nimport { memo, useCallback, useEffect, useMemo, useState } from '@teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport { type ApiWorkspace, MAX_WORKSPACES } from '../../../api/notlost/types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\n\nimport Accordion from '../../ui/accordion/Accordion';\nimport AccordionSavedState from '../../ui/accordion/AccordionSavedState';\nimport MainSidebarTab from './MainSidebarTab';\n\nimport styles from './MainSidebar.module.scss';\n\ntype OwnProps = {\n  workspaces: ApiWorkspace[];\n};\n\ntype StateProps = {\n  workspaces: ApiWorkspace[];\n  areWorkspacesLoaded: boolean;\n  activeWorkspaceId?: string;\n  leftColumnContentKey: LeftColumnContent;\n};\n\nconst MainSidebarWorkspaces: FC<OwnProps & StateProps> = ({\n  workspaces,\n  areWorkspacesLoaded,\n  activeWorkspaceId,\n  leftColumnContentKey,\n}) => {\n  const {\n    loadAllWorkspaces,\n    addNewWorkspace,\n    openLeftColumnContent,\n    setActiveWorkspaceId,\n    deleteWorkspace,\n  } = getActions();\n\n  const [isAddingNewSpace, setIsAddingNewSpace] = useState(false);\n\n  const handleStartAddingNewSpace = useCallback(() => {\n    if (workspaces.length >= MAX_WORKSPACES) return undefined;\n    if (workspaces.length === 0) return undefined; // temporaly lock before initial workspaces created, yeah very dump\n\n    setIsAddingNewSpace(true);\n  }, [workspaces.length]);\n\n  const handleCancelAddingNewSpace = useCallback(() => {\n    setIsAddingNewSpace(false);\n  }, []);\n\n  const handleSetActiveWorkspace = useCallback(\n    (id: string) => () => {\n      if (leftColumnContentKey !== LeftColumnContent.Workspace) {\n        openLeftColumnContent({ contentKey: LeftColumnContent.Workspace });\n      }\n      setActiveWorkspaceId(id);\n    },\n    [leftColumnContentKey, openLeftColumnContent, setActiveWorkspaceId],\n  );\n\n  const handleDeleteWorkspace = useCallback(\n    (workspaceId: string) => () => {\n      deleteWorkspace({ workspaceId });\n    },\n    [deleteWorkspace],\n  );\n\n  const handleAddNewWorkspace = useCallback(\n    (title: string) => {\n      if (title.length === 0) return;\n\n      addNewWorkspace({\n        title,\n        iconName: 'lamp',\n      });\n      setIsAddingNewSpace(false);\n    },\n    [addNewWorkspace],\n  );\n\n  const createWorkspaceContextActions = useCallback(\n    (workspace: ApiWorkspace): MenuItemContextAction[] => {\n      return [\n        {\n          title: 'Delete',\n          handler: handleDeleteWorkspace(workspace.id),\n          icon: 'delete',\n          destructive: true,\n        },\n      ];\n    },\n    [handleDeleteWorkspace],\n  );\n\n  useEffect(() => {\n    if (!areWorkspacesLoaded) {\n      loadAllWorkspaces();\n    } else if (activeWorkspaceId === undefined && workspaces[0]) {\n      handleSetActiveWorkspace(workspaces[0].id)();\n    }\n  }, [activeWorkspaceId, areWorkspacesLoaded, handleSetActiveWorkspace, workspaces]);\n\n  const workspaceTabs = useMemo(() => {\n    return workspaces.map((workspace) => (\n      <MainSidebarTab\n        key={workspace.id}\n        iconName={workspace.iconName}\n        title={workspace.title}\n        onClick={handleSetActiveWorkspace(workspace.id)}\n        isSelected={\n          leftColumnContentKey === LeftColumnContent.Workspace\n          && activeWorkspaceId === workspace.id\n        }\n        contextActions={createWorkspaceContextActions(workspace)}\n      />\n    ));\n  }, [\n    workspaces,\n    leftColumnContentKey,\n    activeWorkspaceId,\n    handleSetActiveWorkspace,\n    createWorkspaceContextActions,\n  ]);\n\n  return (\n    <AccordionSavedState id=\"main-sidebar-section-Space\">\n      {({ isExpandedByDefault, onChange }) => (\n        <Accordion\n          title=\"Spaces\"\n          isExpandedByDefault={isExpandedByDefault}\n          onChange={onChange}\n          onAddClick={handleStartAddingNewSpace}\n          className={styles.sidebarAccordionSection}\n        >\n          {workspaces.length === 0 && <div className={styles.workspacesLoading}>Loading...</div>}\n          {workspaceTabs}\n          {isAddingNewSpace && (\n            <Accordion\n              isRenaming\n              leftIconName=\"lamp\"\n              onRenameCancel={handleCancelAddingNewSpace}\n              onRenameFinish={handleAddNewWorkspace}\n              className={styles.newWorkspaceInput}\n            />\n          )}\n        </Accordion>\n      )}\n    </AccordionSavedState>\n\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { workspaces } = global;\n    const tabState = selectTabState(global);\n    const leftColumnContentKey = tabState.leftColumn.contentKey;\n\n    return {\n      workspaces: workspaces.byOrder || [],\n      areWorkspacesLoaded: workspaces.areLoaded || false,\n      activeWorkspaceId: workspaces.activeId,\n      leftColumnContentKey,\n    };\n  },\n)(MainSidebarWorkspaces));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiWorkspace } from '../../../api/notlost/types';\nimport type { WebContentsTabInfo } from '../../../types/electron';\nimport { LeftColumnContent } from '../../../types';\nimport { ElectronEvent } from '../../../types/electron';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport MainSidebarSection from './MainSidebarSection';\nimport MainSidebarTab from './MainSidebarTab';\nimport MainSidebarTabProfile from './MainSidebarTabProfile';\nimport MainSidebarWebContentsTab from './MainSidebarWebContentsTab';\nimport MainSidebarWorkspaces from './MainSidebarWorkspaces';\n\nimport styles from './MainSidebar.module.scss';\n\ntype StateProps = {\n  workspaces: ApiWorkspace[];\n};\n\nconst MainSidebar: FC<StateProps> = ({\n  workspaces,\n}) => {\n  const [webContentsTabs, setWebContentsTabs] = useState<WebContentsTabInfo[]>([]);\n  const [activeTabId, setActiveTabId] = useState<string | undefined>(undefined);\n\n  window.electron!.on(ElectronEvent.ON_WEB_CONTENTS_TABS_CHANGE, (tabsUpdate: {\n    tabs: WebContentsTabInfo[];\n    activeTabId: string;\n  }) => {\n    setWebContentsTabs(tabsUpdate.tabs);\n    setActiveTabId(tabsUpdate.activeTabId);\n  });\n\n  useEffect(() => {\n    window.electron!.getWebContentsTabs().then((tabs) => {\n      setWebContentsTabs(tabs);\n    });\n  }, []);\n\n  const containerClassName = buildClassName(\n    styles.container,\n    'custom-scroll',\n  );\n\n  return (\n    <div className={containerClassName}>\n      <div className={styles.tabs}>\n        <MainSidebarWorkspaces />\n        <MainSidebarSection title=\"Chats\">\n          <MainSidebarTab\n            title=\"Unreads\"\n            iconName=\"check\"\n            leftColumnContent={LeftColumnContent.AllUnread}\n          />\n          <MainSidebarTab\n            title=\"All\"\n            iconName=\"message-read\"\n            leftColumnContent={LeftColumnContent.ChatList}\n          />\n          <MainSidebarTab\n            title=\"Groups\"\n            iconName=\"group\"\n            leftColumnContent={LeftColumnContent.Groups}\n          />\n          <MainSidebarTab\n            title=\"Channels\"\n            iconName=\"channel\"\n            leftColumnContent={LeftColumnContent.Channels}\n          />\n          <MainSidebarTab\n            title=\"Bots\"\n            iconName=\"bots\"\n            leftColumnContent={LeftColumnContent.Bots}\n          />\n          <MainSidebarTab\n            title=\"Archive\"\n            iconName=\"archive\"\n            leftColumnContent={LeftColumnContent.Archived}\n          />\n        </MainSidebarSection>\n        <MainSidebarSection title=\"Saved\">\n          <MainSidebarTab\n            title=\"All\"\n            iconName=\"tag\"\n            leftColumnContent={LeftColumnContent.Saved}\n          />\n        </MainSidebarSection>\n        {webContentsTabs.length > 0 && (\n          <MainSidebarSection title=\"Active links\">\n            {webContentsTabs.reverse().map((t) => (\n              <MainSidebarWebContentsTab\n                webContentsTab={t}\n                workspaces={workspaces}\n                isActive={activeTabId === t.id}\n              />\n            ))}\n          </MainSidebarSection>\n        )}\n      </div>\n      <MainSidebarTabProfile />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      workspaces: global.workspaces.byOrder,\n    };\n  },\n)(MainSidebar));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YUAfqWPN\"};","import { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ConfettiStyle } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { pick } from '../../../util/iteratees';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line @stylistic/max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>();\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"RMsQzedH\",\"wave\":\"YLR2Oh2f\",\"waveGrow\":\"rqfv5Mai\"};","import {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { SVG_NAMESPACE } from '../../../config';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../util/svgController';\nimport windowSize from '../../../util/windowSize';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport styles from './WaveContainer.module.scss';\n\nimport waveRipple from '../../../assets/wave_ripple.jpg';\n\ntype StateProps = {\n  waveInfo?: TabState['wave'];\n};\n\ntype Wave = {\n  startTime: number;\n  waveWidth: number;\n  top: number;\n  left: number;\n};\n\nconst BASE_SIZE_MULTIPLIER = 1.73;\nconst FILTER_ID = 'wave-filter';\nconst FILTER_SCALE = '20';\nconst WAVE_COUNT_LIMIT = 7;\n\nconst WaveContainer = ({ waveInfo }: StateProps) => {\n  const [waves, setWaves] = useState<Wave[]>([]);\n\n  const addWave = useLastCallback((newWave: Wave) => {\n    if (waves.length >= WAVE_COUNT_LIMIT) return;\n\n    setWaves((prevWaves) => [...prevWaves, newWave]);\n  });\n\n  useEffect(() => {\n    if (!waveInfo) return;\n\n    const { startX, startY } = waveInfo;\n    const { width, height } = windowSize.get();\n\n    const maxSize = Math.max(width - startX, height - startY, startX, startY);\n    const overlaySize = maxSize * BASE_SIZE_MULTIPLIER;\n    const top = startY - overlaySize / 2;\n    const left = startX - overlaySize / 2;\n\n    addWave({\n      startTime: waveInfo.lastWaveTime,\n      waveWidth: overlaySize,\n      top,\n      left,\n    });\n  }, [waveInfo]);\n\n  useEffect(() => {\n    addSvgDefinition(\n      <filter x=\"0\" y=\"0\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feImage href={waveRipple} result=\"waveImage\" />\n        <feDisplacementMap\n          in=\"SourceGraphic\"\n          in2=\"waveImage\"\n          scale={FILTER_SCALE}\n          xChannelSelector=\"R\"\n          yChannelSelector=\"B\"\n        />\n      </filter>,\n      FILTER_ID,\n    );\n\n    return () => {\n      removeSvgDefinition(FILTER_ID);\n    };\n  }, []);\n\n  return (\n    <div className={buildClassName(styles.root)} teactFastList>\n      {waves.map((wave) => (\n        <div\n          className={styles.wave}\n          style={buildStyle(\n            `--wave-width: ${wave.waveWidth}px`,\n            `--wave-pos-top: ${wave.top}px`,\n            `--wave-pos-left: ${wave.left}px`,\n          )}\n          key={wave.startTime}\n          onAnimationEnd={() => setWaves((prevWaves) => prevWaves.filter((w) => w !== wave))}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    return {\n      waveInfo: tabState.wave,\n    };\n  },\n)(WaveContainer));\n","import '../../global/actions/all';\n\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiWorkspace } from '../../api/notlost/types';\nimport type { ApiChatFolder, ApiLimitTypeWithModal, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_ANDROID, IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AudioPlayer from '../middle/panes/AudioPlayer';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport MainSidebar from './sidebar/MainSidebar';\nimport ConfettiContainer from './visualEffects/ConfettiContainer';\nimport SnapEffectContainer from './visualEffects/SnapEffectContainer';\nimport WaveContainer from './visualEffects/WaveContainer';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n  isAccountFrozen?: boolean;\n  isAppConfigLoaded?: boolean;\n  workspaces?: ApiWorkspace[];\n  chatsAreLoaded?: boolean;\n  chatFoldersAreLoaded?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n  isAccountFrozen,\n  isAppConfigLoaded,\n  workspaces,\n  chatsAreLoaded,\n  chatFoldersAreLoaded,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadRestrictedEmojiStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadStarGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    loadUserCollectibleStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    loadPaidReactionPrivacy,\n    loadPasswordInfo,\n    loadBotFreezeAppeal,\n    loadAllChats,\n    loadAllStories,\n    loadChatFolders,\n    loadAllHiddenStories,\n    createInitialWorkspace,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  const lang = useLang();\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const containerRef = useRef<HTMLDivElement>();\n  const leftColumnRef = useRef<HTMLDivElement>();\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable({ isAvailable: true });\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable({ isAvailable: false });\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline({ isOnline: true });\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadContactList();\n      checkAppVersion();\n      loadAuthorizations();\n      loadPasswordInfo();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      loadAllChats({ listType: 'saved' });\n      loadAllStories();\n      loadAllHiddenStories();\n      loadChatFolders();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadAttachBots();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadTopReactions();\n      loadStarStatus();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadFeaturedEmojiStickers();\n      loadSavedReactionTags();\n      loadTopBotApps();\n      loadPaidReactionPrivacy();\n      loadDefaultTopicIcons();\n      loadAnimatedEmojis();\n      loadAvailableReactions();\n      loadUserCollectibleStatuses();\n      loadGenericEmojiEffects();\n      loadPremiumGifts();\n      loadStarGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadRestrictedEmojiStickers();\n      loadQuickReplies();\n      loadTimezones();\n    }\n  }, [isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium && isAppConfigLoaded && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab, isAppConfigLoaded, isAccountFrozen]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (lang.code !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: lang.code });\n      }\n\n      loadCountryList({ langCode: lang.code });\n    }\n  }, [lang, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  useEffect(() => {\n    loadBotFreezeAppeal();\n  }, [isAppConfigLoaded]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    updatePageTitle();\n\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // NotLost initial workspace creation\n  useEffect(() => {\n    if (workspaces?.length === 0 && chatFoldersAreLoaded && chatsAreLoaded) {\n      createInitialWorkspace();\n    }\n  }, [chatFoldersAreLoaded, chatsAreLoaded, workspaces]);\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, Boolean(IS_ELECTRON));\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div id=\"MainWrapper\">\n      <MainSidebar />\n      <div ref={containerRef} id=\"Main\" className={className}>\n        <LeftColumn ref={leftColumnRef} />\n        <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n        <RightColumn isMobile={isMobile} />\n        <MediaViewer isOpen={isMediaViewerOpen} />\n        <StoryViewer isOpen={isStoryViewerOpen} />\n        <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n        <DraftRecipientPicker requestedDraft={requestedDraft} />\n        <Notifications isOpen={hasNotifications} />\n        <Dialogs isOpen={hasDialogs} />\n        <AudioPlayer noUi />\n        <ModalContainer />\n        <SafeLinkModal url={safeLinkModalUrl} />\n        <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n        <StickerSetModal\n          isOpen={Boolean(openedStickerSetShortName)}\n          onClose={handleStickerSetModalClose}\n          stickerSetShortName={openedStickerSetShortName}\n        />\n        <CustomEmojiSetsModal\n          customEmojiSetIds={openedCustomEmojiSetIds}\n          onClose={handleCustomEmojiSetsModalClose}\n        />\n        {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n        <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n        <NewContactModal\n          isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n          userId={newContactUserId}\n          isByPhoneNumber={newContactByPhoneNumber}\n        />\n        <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n        <DownloadManager />\n        <ConfettiContainer />\n        {IS_WAVE_TRANSFORM_SUPPORTED && <WaveContainer />}\n        <SnapEffectContainer />\n        <PhoneCall isActive={isPhoneCallActive} />\n        <UnreadCount isForAppBadge />\n        <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n        <BotTrustModal\n          bot={botTrustRequestBot}\n          type={botTrustRequest?.type}\n          shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n        />\n        <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n        <MessageListHistoryHandler />\n        <PremiumMainModal isOpen={isPremiumModalOpen} />\n        <GiveawayModal isOpen={isGiveawayModalOpen} />\n        <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n        <PremiumLimitReachedModal limit={limitReached} />\n        <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n        <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n        <DeleteFolderDialog folder={deleteFolderDialog} />\n        <ReactionPicker isOpen={isReactionPickerOpen} />\n        <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n      </div>\n    </div>\n\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      starsGiftingPickerModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { wasTimeFormatSetManually } = selectSharedSettings(global);\n\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n      || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isStarsGiftingPickerModal: starsGiftingPickerModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n      isAccountFrozen,\n      isAppConfigLoaded: global.isAppConfigLoaded,\n      workspaces: global.workspaces.byOrder,\n      chatsAreLoaded: global.chats.isFullyLoaded.active,\n      chatFoldersAreLoaded: global.chatFolders.areLoaded,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>\n          {' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n","import captureKeyboardListener from './captureKeyboardListeners';\n\ntype IHandlerFunction = () => void;\n\nexport default function captureEnterKeyListener(handler: IHandlerFunction) {\n  return captureKeyboardListener({ onEnter: handler });\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","isOwn","peerId","currentUserId","forEach","reaction","type","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","SNAP_ANIMATION_DELAY","lastVideoProcessingNotificationTime","updateReactions","actions","chat","isOutgoing","areDeepEqual","localPaidReaction","find","r","localAmount","localIsPrivate","isPrivate","localPeerId","addPaidReaction","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","undefined","updateTopic","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","selectTopic","deleteTopic","action","deletePeerPhoto","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","loadTopicById","topicId","setGlobal","isAnimatingAsSnap","selectCanAnimateSnapEffect","setTimeout","getGlobal","stillDeletedIds","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","poll","storyReplyInfo","getStoryReplyInfo","isForumTopic","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","updatePoll","reportDeliveryUntilDate","getServerTime","reportMessageDelivery","isNotJoined","selectIsChatListed","loadTopChats","lastMessage","addMessages","currentChatId","getMessageText","text","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","updatePeerFullInfo","hasScheduledMessages","isFromNew","apiUpdate","keys","selectChatScheduledMessages","map","clearMessageTranslation","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","newScheduledMessageId","showNotification","key","title","messageListType","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","pinnedIds","selectPinnedIds","newPinnedIds","concat","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","newIds","hadVideoProcessing","some","isVideoProcessingPending","processedVideoId","actionText","payload","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","senderId","deleteParticipantHistory","channelId","pollId","pollUpdate","options","updatePollVote","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","executeForwardMessages","sendParams","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","messagePriceInStars","isSilent","scheduledAt","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","Boolean","sendAs","selectDraft","localMessages","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","forwardableRealMessages","selectCanForwardMessage","messageSlices","config","maxForwardedCount","splitMessagesForForwarding","slice","forwardParams","forwardedLocalMessagesSlice","entities","params","sendMessageOrReduceLocal","isShareMessageModalShown","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","result","limit","count","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findIndex","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","getPeerStarsForMessage","peer","selectPeer","isApiPeerChat","paidMessagesStars","fullInfo","selectUserFullInfo","localMessage","sendMessage","currentMessageKey","IS_IOS","rafPromise","progressCallback","attachment","progress","set","updateUploadByMessageKey","delete","fetchUnreadMentions","addUnreadMentions","shouldForceRender","onError","isRestricted","viewportIds","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","contentToBeScheduled","isForwarding","draftReplyInfo","messageReplyInfo","noWebPage","selectNoWebPage","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","groupIndex","group","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","localForwards","starsForOneMessage","getActions","sendMessages","messageIdsForUndo","forwardedIds","forwardedMessage","firstMessage","firstSendParam","storySendMessage","gif","variables","pluralValue","titleKey","amount","formatStarsAsText","getTranslationFn","icon","shouldUseCustomIcon","sendMessagesWithNotification","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","oldTranslate","join","selectEditingMessage","setEditingId","cancelApiProgress","currentDraft","effectId","shouldKeepReply","currentReplyInfo","updatedReplyInfo","insertingPeerIdMention","isUnpin","isOneSide","shouldDeleteForAll","payloadMessageList","messageIdsToDelete","isChatChannel","isChatSuperGroup","editingId","selectEditingId","notifications","dismissAction","Array","isArray","dismissNotification","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","description","option","response","MESSAGE_ID_REQUIRED_ERROR","closeReportModal","oldSections","reportModal","sections","selectedOption","o","newSection","subtitle","subject","isOptional","connectionState","isUserBot","participantId","selectIsCurrentUserFrozen","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","selectCurrentChat","then","fetchUnreadReactions","webPagePreview","selectPollFromMessage","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","loadStarStatus","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","isForPaidReactions","sendPaidReactionsAsPeerIds","isApiPeerUser","selectIsChatBotNotStarted","updateSponsoredMessage","randomId","isMedia","isFullscreen","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","updateGlobalSearch","sponsoredPeer","reportAdModal","enabled","updateUserFullInfo","areAdsEnabled","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","urlWithProtocol","ensureProtocol","parsedUrl","URL","isMixedScript","isMixedScriptUrl","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","appConfig","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","toString","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","quoteOffset","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","clearDraft","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","shouldIncrement","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","MESSAGES_TO_REPORT_DELIVERY","reportDeliveryTimeout","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","voice","currentIds","cId","clear","botId","webAppKey","bot","preparedMessageModal","sendWebAppEvent","event","eventType","eventData","supportedFilters","peerTypes","sharePreparedMessageModal","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","collectibleEmojiStatuses","statuses","documentIds","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","RESTRICTED_EMOJI_SET","restrictedEmoji","genericEmojiEffects","saved","savedGifs","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","shouldIgnoreCache","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","globalSearch","searchResult","sponsoredResult","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","context","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","nextOffsetPeerId","nextOffsetRate","offsetRate","offsetPeer","messageLink","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","topics","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","popularBotApps","botApps","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","shouldReuseParams","offsetPeerId","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","initFolderManager","listType","whenFirstBatchDone","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","selectTopics","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","otherChatId","otherThreadId","updateChats","updateUsers","users","loadTopics","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","reason","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","accountDaysTtl","closeDeleteAccountModal","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","statusesById","topPeers","lastRequestedAt","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","selectUserCommonChats","isFullyLoaded","chatIds","updateUserCommonChats","shouldRefundCharged","starsAmount","chatRefundModal","starsToRefund","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadPeerSettings","loadPeerStories","closeNewContactDialog","isPreload","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatus","referrerWebAppKey","customEmojiIconId","isCloseFriend","customEmojiId","duration","suggestedStatusModal","loadFullUser","currentPeerIds","botVerificationShownPeerIds","newPeerIds","BOT_VERIFICATION_PEERS_LIMIT","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","updateWebApp","webAppUpdate","currentTabState","openedWebApps","webApps","originalWebApp","updatedValue","updatedWebAppKey","getWebAppKey","addWebAppToOpenList","webApp","makeActive","openModalIfNotOpen","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","activeWebAppKey","isMoreAppsTabActive","isModalOpen","modalState","removeWebAppFromOpenList","skipClosingConfirmation","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","k","isRemovedAppActive","openedWebAppsKeys","openedWebAppsCount","hasOpenedWebApps","replaceIsWebAppModalOpen","value","runDebouncedForSearch","botFatherId","gameePopups","checkIfOpenOrActivate","requestUrl","webAppName","webAppForCheck","isWepAppOpened","activateWebAppIfOpen","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","copyTextToClipboard","copyText","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","newResults","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","getMainUsername","queryId","allowPaidStars","resultId","scheduleDate","sendInlineBotApiResult","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","appName","isFromBotMenu","isFullScreen","getIsWebAppsFullscreenSupported","changeWebAppModalState","state","mode","shouldMarkBotTrusted","openFrozenAccountModal","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","isWebAppsCloseConfirmationModalOpen","shouldSkipInFuture","updateSharedSettings","shouldSkipWebAppCloseConfirmation","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","name","about","langCode","selectSharedSettings","bio","isBotAccessEmojiGranted","isBotCanManageEmojiStatus","isAccessGranted","updateBotAppPermissions","geolocation","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","botUrl","freezeAppealUrl","botAppealUsername","getUsernameFromDeepLink","botFreezeAppealId","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","errorKey","isSuccess","password","email","recoveryEmail","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","payInputStarInvoice","inputInvoice","price","balance","stars","openStarsBalanceModal","requestInputInvoice","getRequestInputInvoice","isPaymentFormLoading","form","handlePaymentFormError","sendStarPaymentForm","directInfo","formId","hasErrorKey","requestInfo","saveInfo","selectPaymentInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","updatePayment","isPaymentModalOpen","isExtendedMedia","status","starsPayment","gift","shouldHideName","shouldUpgrade","giftId","slug","months","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","descriptionKey","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","requestInfoId","selectPaymentRequestId","paymentState","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","starPayment","selectStarsPayment","subscriptionInfo","subscriptionFormId","updateStarsPayment","closeStarsPaymentModal","closeGiftModal","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","giveawayModal","gifts","forUserId","giftModal","forPeerId","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","giftCodeModal","info","requestConfetti","withStars","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","currency","openBoostStatistics","shouldKeepOriginalDetails","upgradeStars","requestSavedGift","getRequestInputSavedStarGift","isWaitingForStarGiftUpgrade","closeGiftUpgradeModal","closeGiftInfoModal","inputSavedGift","recipientId","transferStars","isWaitingForStarGiftTransfer","closeGiftTransferModal","toPeer","openGiftInfoModal","giftWithdrawModal","inputGift","closeGiftWithdrawModal","currentStatus","needsTopupOptions","topupOptions","history","inbound","outbound","subscriptions","appendStarsTransactions","nextHistoryOffset","appendStarsSubscriptions","nextSubscriptionOffset","isInbound","isOutbound","updateStarsBalance","idsByCategoryName","stock","limited","resale","allStarGiftIds","allStarGifts","limitedStarGiftIds","isLimited","stockedStarGiftIds","availabilityRemains","availabilityTotal","resaleStarGiftIds","availabilityResale","starsCategory","starGifts","idsByCategory","resaleGifts","loadResaleGifts","shouldRefresh","isAllLoaded","attributesHash","RESALE_GIFTS_LIMIT","currentGifts","newGifts","currentUpdateIteration","updateIteration","attributes","counters","DEFAULT_RESALE_GIFTS_FILTER_OPTIONS","selectPeerSavedGifts","localNextOffset","fetchingFilter","selectGiftProfileFilter","currentFilter","replacePeerSavedGifts","loadPeerSavedGifts","updateStarsSubscriptionLoading","isCancelled","subscriptionId","requestInputGift","oldGifts","savedGifts","giftsByPeerId","g","areInputSavedGiftsEqual","isUnsaved","samples","giftUpgradeModal","sampleAttributes","pinLimit","savedGiftPinLimit","currentPinnedGifts","newPinnedGifts","inputSavedGifts","reloadPeerSavedGifts","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","paidReactions","regularReactions","trimmedRegularReactions","localReactions","stopActiveReaction","loadSavedReactionTags","shouldIgnoreDefaultPrivacy","defaultPrivacy","paidReactionPrivacy","newReactions","forcedAmount","paidReaction","resetLocalPaidReactions","originReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","byKey","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","updateVerifyMonetizationModal","closeMonetizationVerificationModal","stories","hasNext","stateHash","isFirstRequest","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","storyIds","lastReadStoryId","profileIds","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","archiveIds","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","botsPrivacy","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","shouldReplaceHistory","shouldReplaceLast","hideEffectInComposer","closeStarsBalanceModal","closeStarsTransactionModal","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","chatInviteModal","chatFilters","shouldShowLastMessage","removeActiveWebAppFromOpenList","shouldSkipConfirmation","shouldShowConfirmation","hasOpenedMoreThanOneWebApps","openWebAppsCloseConfirmationModal","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","selectActiveWebApp","newActiveWebApp","newActiveWebAppKey","clearOpenedWebApps","replaceWebAppModalState","miniAppsCachedPosition","size","miniAppsCachedSize","activeWebApp","trustedBotIds","newTrustedBotIds","callbackPayload","selectWebApp","newPlannedEvents","plannedEvents","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","emojiStatusAccessModal","locationAccessModal","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getPeerTitle","forwardInfo","hiddenUserName","statefulContent","getMessageStatefulContent","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","addTabStateResetterAction","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","noForumTopicPanel","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","onMessageReady","openMediaFromTimestamp","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","groupedMessageIds","selectedMessages","forwardableMessageIds","openForwardMenu","getMediaHash","cancelMessageMediaDownload","mediaHashes","metadata","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","getMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","paidReactionModal","isSchedule","deleteMessageModal","additionalInfo","canReport","sponsorInfo","aboutAdsModal","args","pendingSendArgs","starsForSendMessage","currentContent","fetchingStatus","GlobalSearchContent","BotApps","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","isFrozenAccountModalOpen","deleteAccountModal","selfDestructAccountDays","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","hasLocalId","generateUniqueId","newNotifications","existingNotificationIndex","n","selectPeerPaidMessagesStars","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","startX","startY","IS_WAVE_TRANSFORM_SUPPORTED","currentLastTime","wave","lastWaveTime","ANIMATION_WAVE_MIN_INTERVAL","shouldCompress","shouldSendGrouped","isInvertedMedia","webPageMediaSize","attachmentSettings","shouldPlayEffectInComposer","shouldPaidMessageAutoApprove","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","isAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","isTestServer","prefix","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","isOnline","getAllMultitabTokens","isExpanded","expandedState","starsBalanceModal","processOriginStarsPayment","originData","clearPayment","prevFilter","updatedFilter","shouldIncludeUnlimited","shouldIncludeLimited","shouldIncludeUnique","shouldIncludeDisplayed","shouldIncludeHidden","DEFAULT_GIFT_PROFILE_FILTER_OPTIONS","isPaymentMessageConfirmDialogOpen","mediaIndex","isAvatarView","isSponsoredMessage","withDynamicLoading","standaloneMedia","mediaViewer","selectReplyMessage","messageMedia","getTimestampableMedia","maxMessageDuration","openMediaViewer","MediaViewerOrigin","Inline","openAudioPlayer","AudioOrigin","replyMessageMedia","maxReplyMessageDuration","currentChatPlaybacks","playbackByChatId","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","openSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","localStorage","removeItem","IS_SCREEN_LOCKED_CACHE_KEY","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","originStarsPayment","originGift","topup","sendPaidReaction","sendStarGift","isGiftRecipientPickerOpen","starsGiftingPickerModal","transaction","getPrizeStarsTransactionFromGiveaway","openStarsTransactionModal","shouldIgnoreBalance","starBalance","balanceNeeded","clearStarPayment","getStarsTransactionFromGift","subscription","starsSubscriptionModal","starGift","uniqueGift","giftReceiverId","savedId","fromId","starsToConvert","isNameHidden","isSaved","isConverted","upgradeMsgId","canUpgrade","alreadyPaidUpgradeStars","canExportAt","giftInfoModal","giftResalePriceComposerModal","giftStatusInfoModal","giftTransferModal","reactionPicker","sendAsMessage","isForEffects","updatedResults","localPreviousChosenOrder","chosenOrder","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerId","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","monetizationVerificationModal","workspaces","activeId","selectedItemId","sidebarIsOpen","webContentsViewIsLoading","webContentsViewError","setWebContentsViewVisible","setWebContentsViewUrl","webContentsViewIsVisible","closeWebContentsTab","INVALIDATE_FULL_CHAT_FIELDS","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","updatedChat","noTopChatsRequest","closeMessageNotifications","chatUpdate","closeForumPanel","invalidateFullInfo","selectChatListType","addChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","loadPinnedDialogs","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","replacePinnedTopicIds","isForumAsMessages","photoId","replacePeerPhotos","updateStatusesOnFullyIdle","throttleWithFullyIdle","pendingStatusUpdates","deleteContact","localUser","targetUserFullInfo","botInfo","menuButton","commands","threadInfos","polls","addUsers","addChats","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","closeWebApp","processPremiumFloodWait","private","requestLangPackDifference","applyLangPackDifference","strings","keysToRemove","actionStarGift","openUniqueGiftBySlug","receiver","updateNotifyDefaults","peerType","addNotifyException","notifySettings","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","selectPhoneCallUser","notifyAboutCall","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","totalAmount","giftModalState","formatCurrencyAsString","subscriptionPricing","subscriptionPeriod","starsModalState","isCompleted","starGiftModalState","NotLostLocalStorageKeys","store","MAIN_IDB_STORE","findChatFolderIndex","workspace","chatFolderId","f","findLinkFolderIndex","linkFolderId","linkFolders","findLinkIndex","linkId","links","getWorkspaces","addWorkspace","old","newWorkspace","deleteWorkspace","w","workspaceId","renameWorkspace","newTitle","updateWorkspaceChats","addLinkIntoWorkspace","newLink","deleteLink","addChatFolder","newChatFolder","deleteChatFolder","renameChatFolder","folderIndex","idx","updateChatFolderChats","updatedChats","addLinkFolder","newLinkFolder","deleteLinkFolder","renameLinkFolder","updateLinkFolderLinks","findWorkspaceByChatFolderId","findWorkspaceByLinkFolderId","ApiWorkspaceLayer","areLoaded","byOrder","tgChatFolder","crypto","randomUUID","iconName","updatedChatIds","c","updatedWorkspace","findWorkspaceByLinkId","chatFolder","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","_jsx","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","memo","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useLang","useEffect","updateAppBadge","children","formatIntegerCompact","ArchivedChats","Loading","selectActiveWorkspace","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","isAccountFrozen","isMenuOpen","setIsMenuOpen","useState","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","_jsxs","_Fragment","MenuItem","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Icon","Menu","positionX","positionY","autoClose","onClose","LeftSearch","ContactList","withGlobal","FilteredChatList","folderType","category","toggleShowLastMessage","isFilterMenuOpen","setIsFilterMenuOpen","SearchInput","onChange","onCloseAnimationEnd","ariaLabelledBy","style","Switcher","label","checked","noAnimation","ChatList","topicsInfo","selectTopicsInfo","topicsById","WorkspaceChat","deleteChatFromWorkspace","deleteChatFromChatsFolder","markChatMessagesRead","handleDelete","contextActions","actionDelete","destructive","handler","actionMaskAsRead","hasUnreadMark","Chat","orderDiff","animationType","ChatAnimationTypes","Opacity","isStatic","avatarSize","WorkspaceChatFolder","isHighlighted","selectForAddingChats","renameChatFolderInWorkspace","deleteChatFolderFromWorkspace","isRenaming","setIsRenaming","leftIcon","setLeftIcon","handleRename","actionRename","styles","AccordionSavedState","isInitiallyExpanded","isExpandedByDefault","Accordion","leftIconName","withInnerPadding","onAddClick","onRenameFinish","onRenameCancel","WorkspaceChatFolderNew","onCreationFinishOrCancel","addChatFolderIntoWorkspace","handleRenameFinish","getFavicon","favicons","faviconUrl","addFavicon","newFavicon","WorkspaceLink","selected","setWorkspaceSelectedItemId","deleteLinkFromWorkspace","loadWebContentsViewUrl","setFaviconUrl","getDomain","isSameDomain","url1","url2","listenForMetaDataUpdate","on","ElectronEvent","ON_WEB_CONTENTS_TAB_META_DATA","WebContentsFaviconsStorage","cachedFavicon","metaData","listItemClassName","linkIconContainerClassName","ListItem","ripple","withPortalForMenu","handleClick","src","alt","WorkspaceLinkNew","newLinkState","setNewLinkState","setStep","handleStep","prevState","finalLinkData","placeholder","WorkspaceRightSidebar","activeEntity","activeEntityType","handleStartAddingNewSection","searchValue","setSearchValue","folderAllOrderedIds","useFolderManagerForOrderedIds","ALL_FOLDER_ID","displayedIds","filterPeersByQuery","isAnimating","setIsAnimating","timeout","handleSelectedIdsChange","newSelectedIds","containerClassName","Portal","containerSelector","Transition","activeKey","PeerPicker","itemIds","selectedIds","filterValue","categoryPlaceholderKey","searchInputId","withDefaultPadding","withPeerTypes","allowMultiple","itemInputType","onSelectedIdsChange","WorkspaceSection","sectionTitle","Workspace","setWorkspaceSidebarOpen","setActiveEntity","setActiveEntityType","isAddingNewChatFolder","setIsAddingNewChatFolder","isAddingNewLink","setIsAddingNewLink","handleUnselectEntityForChatsAdd","handleSetActiveEntity","entity","entityType","updatedSection","headerClassName","TRANSITION_RENDER_COUNT","LeftColumnContent","closeTimeout","activeWorkspace","LeftMain","searchQuery","searchDate","contactsFilter","shouldSkipTransition","isForumPanelOpen","onReset","onTopicSearch","openLeftColumnContent","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","useForumPanelRender","isForumPanelRendered","shouldRender","shouldRenderUpdateButton","transitionClassNames","updateButtonClassNames","useShowTransitionDeprecated","isMouseInside","useRef","handleMouseEnter","useLastCallback","handleMouseLeave","handleSelectContacts","contentKey","Contacts","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","renderCount","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","Saved","AllUnread","Groups","Channels","Bots","GlobalSearch","fluid","badge","ForumPanel","onOpenAnimationStart","NewChat","Settings","ContentType","RENDER_COUNT","shouldSkipHistoryAnimations","leftColumn","nextFoldersAction","isChatOpen","selectIsForumPanelOpen","forumPanelChatId","isFirstChatFolderActive","isClosingSearch","isArchivedStoryRibbonShown","settingsScreen","ref","setGlobalSearchQuery","setGlobalSearchClosing","setGlobalSearchChatId","resetChatCreation","setGlobalSearchDate","loadPasswordInfo","clearTwoFaError","setContactsFilter","foldersState","foldersDispatch","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsAllowedContacts","PrivacyGiftsDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","CustomEmoji","DoNotTranslate","PrivacyNoPaidMessages","handleSearchQuery","handleTopicSearch","isChatList","noChatOrForumOpen","captureEscKeyListener","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","useHotkeys","IS_FIREFOX","IS_APP","IS_MAC_OS","useSyncEffect","prevSettingsScreenRef","useStateRef","usePrevious","captureControlledSwipe","excludedClosestSelector","selectorToPreventScroll","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","isStoryRibbonShown","currentScreen","isChannel","onSearchQuery","MediaViewerAsync","MediaViewer","ReactionPicker","MessageListHistoryHandler","closeChat","forceSyncOnIOs","MessageHistoryRecord","useHistoryBack","createLocationHash","onBack","viewportPinnedIds","lastFocusedId","clampIndex","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","ChatLanguageModal","EmojiInteractionAnimation","ScrollDownButton","ariaLabelLang","onReadAll","oldLang","isContextMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","onContextMenu","hasActiveMiddleSearch","shouldShowCount","mentionsCount","FloatingActionButtons","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleReadAllReactions","handleReadAllMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","container","element","margin","Intro","welcomeBanner","bannerWelcome","paragraph","accent","Features","featuresBanner","banner","GreetingsBlock","steps","stepIndex","nextStep","prevStep","isFirstStep","isLastStep","block","navigationButtons","leftButton","handlePrev","noForcedUpperCase","pill","rightButton","handleNext","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","withUsers","currentAlbum","dateGroups","originalDate","datetime","getDayStartAt","senderGroups","currentDateGroup","currentSenderGroup","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","isPaidMedia","nextMessage","lastMessageInSenderGroup","nextMessageDayStartsAt","newDateGroup","paidMessageStars","postAuthorTitle","inlineButtons","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","ContactGreeting","loadGreetingStickers","containerRef","randomIndex","handleStickerSelect","StickerView","shouldLoop","countryList","phoneCodes","phoneCodeList","isLoadingFullUser","MessageListAccountInfo","loadCommonChats","phoneCountry","registrationMonth","nameChangeDate","photoChangeDate","getCountryCodeByIso","botInfoPhotoUrl","useMedia","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","isChatInfoEmpty","isVerifyCodes","isChatWithVerificationCodesBot","height","stopEvent","securityNameInfo","time","formatPastDatetime","withNodes","withMarkdown","securityPhotoInfo","tableData","renderText","isoToEmoji","iso2","defaultName","formatRegistrationMonth","commonChatsCount","Link","AvatarList","buildStyle","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","Skeleton","forceAspectRatio","MiniTable","keyClassName","isVerified","INTERSECTION_THROTTLE_FOR_MEDIA","ownProps","withAvatar","isSystemBotChat","isSystemBot","isAnonymousForwards","isAnonymousForwardsChat","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","selectForwardedSender","isRepliesChat","SenderGroupContainer","appearanceOrder","updateInsertingPeerIdMention","messageSender","noAppearanceAnimation","markShown","useFlag","MESSAGE_APPEARANCE_DELAY","avatarPeer","isAvatarPeerUser","handleOpenChat","handleMention","EDITABLE_INPUT_CSS_SELECTOR","handleAvatarClick","avatarRef","useShowTransition","withShouldRender","contextMenuAnchor","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","canMention","shouldRenderContextMenu","hiddenName","Avatar","renderAvatar","anchor","SponsoredContextMenuContainer","selectSponsoredMessage","activeDownloads","selectActiveDownloads","downloadableMedia","isDownloading","getIsDownloading","selectTheme","canAutoLoadMedia","selectCanAutoLoadMedia","canAutoPlayMedia","selectCanAutoPlayMedia","SponsoredMessage","observeIntersectionForLoading","observeIntersectionForPlaying","viewSponsored","hideSponsored","clickSponsored","openAboutAdsModal","contentRef","shouldObserve","isMobile","useAppLayout","observe","observeIntersection","useIntersectionObserver","rootRef","debounceMs","threshold","handleBeforeContextMenu","target","isIntersecting","handleHideSponsoredMessage","isGif","hasMedia","handleOpenMedia","handleOpenAboutAdsModal","sizeCalculations","calculatedWidth","contentWidth","calculateMediaDimensions","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","noMediaCorners","onMouseDown","preventMessageInputBlur","PeerColorWrapper","peerColor","Photo","canAutoLoad","noAvatars","forcedWidth","Video","canAutoPlay","renderMediaContent","isRecommended","BadgeButton","renderTextWithEntities","isRectangular","renderContent","MessageAppendix","triggerRef","MessageListContent","canShowAds","messageGroups","getContainerHeight","isViewportNewest","isComments","isEmptyThread","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isReady","hasLinkedChat","shouldRenderAccountInfo","onScrollDownToggle","onNotchToggle","onIntersectPinnedMessage","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","getIsReady","useDerivedSignal","areDatesClickable","observeIntersectionForReading","markMentionsRead","animateUnreadReaction","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","viewportPinnedIdsToRemove","scheduledToUpdateViews","entry","dataset","shouldUpdateViews","albumMainId","hasUnreadReaction","useBackgroundMode","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","fabTrigger","offsetHeight","scrollHeight","scrollTop","fabOffsetTop","offsetTop","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","useOnIntersect","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","requestMeasure","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","renderPaidMessageAction","album","messagesLength","userTitle","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","usePreviousDeprecated","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","isLastInList","ActionMessage","observeIntersectionForBottom","isJustAdded","getIsMessageListReady","currentDocumentGroupId","senderGroupElements","messageIndex","isOwnMessage","isMessageAlbum","getMessageHtmlId","documentGroupId","nextDocumentGroupId","isTopicTopMessage","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","originalId","getMessageOriginalId","noComments","Message","withSenderName","noReplies","lastMessageOrAlbum","lastAppearanceOrder","firstMessageOrAlbum","calculateSenderGroups","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","TopicIcon","renderTopic","patternColor","selectThemeValues","userName","handleOpenPremiumModal","handleGetMoreStars","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","Unlock","formatStarsAsIcon","asFont","Sparkles","preset","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isNonContact","canAddContact","hasCustomGreeting","isAppConfigLoaded","isChatLoaded","isGroupChat","isChannelWithAvatars","areProfilesShown","isCreator","isBot","isSelectModeActive","selectIsInSelectMode","linkedChatId","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","isChatProtected","selectIsChatProtected","MessageList","withBottomShift","withDefaultBg","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","loadFactChecks","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","inviterId","isViaRequest","orderRule","orderBy","useInterval","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","classList","contains","requestMutation","stuckDateEl","allElements","containerTop","computedStyle","getComputedStyle","headerActionsHeight","parseInt","getPropertyValue","top","findStuckDate","currentStuck","remove","useStickyDates","handleScroll","focusedMessage","shouldCancelWaiting","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","handleResize","contentRect","useResizeObserver","currentNormalHeight","normalHeight","containerHeight","prevContainerHeight","useContainerHeight","firstElementChild","clientHeight","rememberScrollPositionRef","preservedItemElements","getBoundingClientRect","forceMeasure","useLayoutEffectWithPrevDeps","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","forceDuration","isResized","newScrollTop","newAnchorTop","getOffsetToContainer","resetScroll","ceil","restartCurrentScrollAnimation","useEffectWithPrevDeps","prevIsSelectModeActive","beginHeavyAnimation","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","RequirementToContactMessage","backgroundColor","MessageSelectToolbar","ConnectionStatus","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","renderAudio","audio","performer","fileName","renderVoice","senderName","AudioPlayer","noUi","isFullWidth","onPaneStateChange","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","renderingMessage","useCurrentOrPrev","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","mediaHash","getMessageMediaHash","mediaData","mediaMetadata","useMessageMediaMetadata","artist","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","setCurrentTime","useAudioPlayer","makeTrackId","getMediaDuration","transitionRef","shouldForceOpen","useHeaderPane","isDisabled","onStateChange","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","volumeIcon","RippleEffect","disabled","RangeSlider","bold","DropdownMenu","forceOpen","trigger","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","audioMessage","emojiStatusSticker","emojiStatusSlug","isRightColumnShown","currentTransitionKey","MiddleHeader","getCurrentPinnedIndex","getLoadingPinnedId","onFocusPinnedMessage","openThreadWithInfo","openPreviousChat","toggleLeftColumn","openStickerSet","isBackButtonActive","isTablet","useWindowSize","isDesktop","isLeftColumnHideable","shouldShowCloseButton","componentRef","handleOpenSearch","closest","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","stopPropagation","prevTransitionKey","isAudioPlayerActive","isAudioPlayerRendering","connectionStatusText","hasMiddleHeader","setIsOnline","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","useConnectionStatus","renderBackButton","asClose","withUnreadCounter","savedMessagesStatus","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","renderChatInfo","HeaderActions","canExpandActions","sponsoredMessage","BotAdPane","renderingSponsoredMessage","withResizeObserver","handleAboutClick","getApiPeerColorClass","SponsoredMessageContextMenuContainer","selectPeerFullInfo","botVerification","wasShown","BotVerificationPane","markBotVerificationInfoShown","markAsShowed","useTimeout","iconId","ChatReportPane","isAutoArchived","canReportSpam","canBlockContact","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hidePeerSettingsBar","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","renderingPeer","isBasicGroup","isChatBasicGroup","renderingCanAddContact","renderingCanBlockContact","renderingCanReportSpam","renderingIsAutoArchived","handleAddContact","handleConfirmBlock","handleCloseReportPane","handleChatReportSpam","isRendering","isText","ConfirmDialog","confirmIsDestructive","confirmLabel","confirmHandler","Checkbox","onCheck","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","useLayoutEffect","firstChild","currentElement","transform","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","HeaderPinnedMessage","shouldHide","clickBotInlineButton","pinMessage","loadPinnedMessages","currentPinnedIndex","useDerivedState","pinnedMessage","pinnedMessagesCount","pinnedMessageNumber","topMessageTitle","getMessageVideo","isVideoThumbnail","previewPhotoSizes","mediaThumbnail","useThumbnail","mediaBlobUrl","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","renderingPinnedMessage","useEnsureMessage","noOpenTransition","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","handleAllPinnedClick","handleMessageClick","nextMessageId","shiftKey","cycleRestrict","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleMouseDown","useFastClick","Spinner","thumbDataUri","isFullVideo","asSpoiler","getPictogramDimensions","srcUrl","shouldRenderVideo","draggable","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","MessageSummary","truncateLength","noEmoji","emojiSize","shouldStopPropagation","renderKeyboardButtonText","chargedPaidMessageStars","PaidMessageChargePane","openChatRefundModal","handleRefund","messageStarIcon","messageStars","root","FALLBACK_PANE_STATE","isMiddleSearchOpen","isAudioPlayerRendered","MiddleHeaderPanes","getAudioPlayerState","setAudioPlayerState","getPinnedState","setPinnedState","getGroupCallState","setGroupCallState","getChatReportState","setChatReportState","getBotAdState","setBotAdState","getBotVerificationState","setBotVerificationState","getPaidMessageChargeState","setPaidMessageChargeState","isFirstRenderRef","noMountTransition","useEffectOnce","audioPlayerState","botVerificationState","pinnedState","stateArray","isFirstRender","totalHeight","middleColumn","applyAnimationState","setExtraStyles","GroupCallTopPane","isPrimary","ReactorListModal","MiddleSearch","WebContentsError","errorMessage","SearchingDuck","nonInteractive","noLoop","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","workspaceSidebarIsOpen","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isMainThread","canSubscribe","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","selectIsUserBlocked","canRestartBot","canStartBot","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","GENERAL_TOPIC_ID","isClosed","canShowOpenChatButton","isUserRightBanned","getHasAdminRight","userFull","freezeAppealChat","arePeerSettingsLoaded","currentUserBannedRights","defaultBannedRights","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","dropAreaState","setDropAreaState","DropAreaState","None","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","handleIntersectPinnedMessage","handleFocusPinnedMessage","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","pinnedLength","loadingPinnedId","newPinnedIndex","focusedMessageId","pinnedIndexAboveFocused","maxViewportPinnedId","isMessageLoaded","currentIndex","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","forceUpdate","useForceUpdate","willSwitchMessageList","propertyName","currentTarget","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","handleMouseMove","newWidth","clientX","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","IS_SAFARI","item","every","kind","isImage","QuickFile","Document","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","FrozenAccountPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","useFluidBackgroundFilter","isMessagingDisabled","withMessageListBottomShift","updateWebContentsViewBounds","rect","calcX","left","calcWidth","setWebContentsViewBounds","innerHeight","onTransitionEnd","onDoubleClick","onDragEnter","isBlockingAnimation","onStop","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","inputId","IS_TRANSLATION_SUPPORTED","onUnpin","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","ReportModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","Stars","StarsBalanceModal","starsTransactionModal","StarsTransactionModal","ChatInviteModal","PaidReactionModal","StarsSubscriptionModal","StarsGiftModal","GiftModal","GiftRecipientPicker","WebAppsCloseConfirmationModal","GiftInfoModal","GiftResalePriceComposerModal","SuggestedStatusModal","EmojiStatusAccessModal","LocationAccessModal","AboutAdsModal","GiftUpgradeModal","VerificationMonetizationModal","GiftWithdrawModal","GiftStatusInfoModal","PreparedMessageModal","SharePreparedMessageModal","GiftTransferModal","ChatRefundModal","FrozenAccountModal","DeleteAccountModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","usersById","sortChatIds","canBeInvitedToGroup","handleNextStep","filterPlaceholder","onFilterChange","isSearchable","noScrollRestore","withStatus","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","GiftList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","fromPeer","hasAdminRights","currentUserEmojiStatus","SavedGift","stickerRef","canManage","totalIssued","getTotalGiftAvailability","starGiftUnique","ribbonText","resellPriceInStars","total","ribbonColor","CUSTOM_PEER_HIDDEN","getStickerFromGift","radialPatternBackdrop","backdrop","pattern","getGiftAttributes","backdropColors","centerColor","edgeColor","RadialPatternBackground","backgroundColors","patternIcon","shouldPreloadPreview","GiftRibbon","GiftMenuItems","PreviewMedia","idPrefix","isProtected","useIsIntersecting","getMessageMediaThumbDataUri","useMediaTransitionDeprecated","decoding","formatMediaDuration","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","isDense","imageHash","getStoryMediaHash","thumbUrl","dataUri","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","TABS","renderProfileInfo","profileId","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","shouldWarnAboutSvg","mediaSearchType","isTopicInfo","chatsById","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","similarBotsIds","selectSimilarBotsIds","hasCommonChatsTab","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","pinnedStoryIds","storyByIds","archiveStoryIds","hasGiftsTab","starGiftCount","peerGifts","similarChannels","similarBots","limitSimilarPeers","commonChatIds","Profile","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","searchSharedMediaMessages","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","loadChannelRecommendations","loadBotRecommendations","loadPreviewMedias","resetGiftProfileFilter","deletingUserId","setDeletingUserId","isSavedMessages","tabs","tab","initialTab","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","activeTab","setActiveTab","handleSwitchTab","renderingGifts","setRenderingGifts","startViewTransition","shouldApplyVtn","useViewTransition","getGiftId","giftIds","renderingActiveTab","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","handleLoadGifts","prevGifts","prevGiftIds","newGiftIds","resultType","noProfileInfo","searchMessages","loadStories","loadMoreGifts","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","handleStopAutoScrollToTabs","prevTabType","tabsEl","prevProfileState","tabListEl","maxDistance","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","newHeight","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handleSelectPreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","prevHasMemberTabs","newActiveTab","handleResetGiftsFilter","renderingDelay","captureEvents","onSwipe","SwipeDirection","Left","Right","SLIDE_TRANSITION_DURATION","canRenderContent","itemSelector","InfiniteScroll","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","shouldRestoreHeight","noSpinner","forceRenderHiddenMembers","NothingFound","isViewportIdsEmpty","Media","MediaStory","getMessageDocument","withDate","smaller","onDateClick","WebLink","onMessageClick","Audio","onPlay","getSenderName","memberId","adminMember","forceShowSelf","TabList","onSwitchTab","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","isInsideTopic","canEditTopic","getCanManageTopic","canEditBot","getCanAddContact","selectCanManage","isEditingInvite","canViewStatistics","giftProfileFilter","canUseGiftFilter","selectCanUseGiftProfileFilter","canUseGiftAdminFilter","selectCanUseGiftProfileAdminFilter","RightHeader","isColumnOpen","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","onScreenSelect","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","updateGiftProfileFilter","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","sortType","giftsSortType","shouldIncludeUnlimitedGifts","shouldIncludeLimitedGifts","shouldIncludeUniqueGifts","shouldIncludeDisplayedGifts","shouldIncludeHiddenGifts","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","Reactions","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","NewDiscussionGroup","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","renderingContentKey","PrimaryLinkMenuButton","onTrigger","isBackButton","buttonClassName","headerRef","autoFocusSearch","SAVED_FOLDER_ID","MenuSeparator","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","CUSTOM_PEER_STAR_TEMPLATE","isCustomPeer","avatarIcon","peerColorId","CUSTOM_PEER_TO_BE_DISTRIBUTED","withPremiumGradient","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","isLoaded","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","quantity","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","customPeer","formatDateAtTime","expires","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","monetization","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","openMonetizationVerificationModal","loadedCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","ensureLovelyChart","child","hidden","graph","create","topText","linkText","rewardsText","SafeLink","verificationMonetizationHandler","ready","isToncoin","textBottom","integerTonPart","decimalTonPart","toFixed","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","isOnlyConfirm","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","useMarkScrolled","selector","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","prevChatId","prevThreadId","onChatMemberSelect","StoryViewerAsync","StoryViewer","AttachBotRecipientPicker","BotTrustModal","DeleteFolderDialog","DialogsAsync","Dialogs","processedHashes","downloadedHashes","DownloadManager","cancelMediaHashDownloads","handleMediaDownloaded","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","GameModal","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","NotificationsAsync","PremiumLimitReachedModal","GiveawayModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","MainSidebarSection","currentLeftColumnContent","MainSidebarTab","leftColumnContent","propsIsSelected","handleOnClick","selectorClassName","listItem","AccountMenuItems","totalLimit","onSelectCurrent","accounts","useMultiaccountInfo","currentCount","getCurrentProdAccountCount","maxCount","getCurrentMaxAccountCount","currentAccountInfo","account","shouldShowLimit","handleLimitClick","newAccountUrl","freeIndex","getAccountSlotUrl","isSameServer","isTest","mockUser","emojiStatusId","hasSeparator","previewUrl","avatarUri","FullNameTitle","withEmojiStatus","rel","animationLevel","attachBots","canInstall","accountsTotalLimit","LeftSideMenuItems","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSharedSettingOption","updatePerformanceSettings","openChatByUsername","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","chatsCount","handleSelectSaved","handleDarkModeToggle","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","IS_MULTIACCOUNT_SUPPORTED","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","MainSidebarTabProfile","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","profileSelectorClassName","TabProfile","profileAvatar","forceRoundedRect","usernames","profileSelectorContainer","footer","transformOriginX","MainSidebarWebContentsTab","webContentsTab","isHovered","setIsHovered","iconContainer","rightBox","closeButton","onActiveIndicator","leftColumnContentKey","areWorkspacesLoaded","activeWorkspaceId","MainSidebarWorkspaces","loadAllWorkspaces","addNewWorkspace","setActiveWorkspaceId","isAddingNewSpace","setIsAddingNewSpace","handleStartAddingNewSpace","handleCancelAddingNewSpace","handleSetActiveWorkspace","handleDeleteWorkspace","handleAddNewWorkspace","createWorkspaceContextActions","workspaceTabs","MainSidebar","webContentsTabs","setWebContentsTabs","activeTabId","setActiveTabId","ON_WEB_CONTENTS_TABS_CHANGE","tabsUpdate","getWebContentsTabs","reverse","t","CONFETTI_COLORS","STAR_PATH","Path2D","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","h","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","diff","newPos","newVelocity","newFlicker","abs","sin","newRotation","PI","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","scale","rotate","fill","restore","beginPath","ellipse","prevConfettiTime","hideTimeout","containerStyle","containerWidth","leftSide","randomX","FILTER_ID","waveInfo","WaveContainer","waves","setWaves","addWave","newWave","prevWaves","overlaySize","startTime","waveWidth","addSvgDefinition","xmlns","SVG_NAMESPACE","waveRipple","in","in2","xChannelSelector","yChannelSelector","removeSvgDefinition","onAnimationEnd","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","game","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","chatsAreLoaded","chatFoldersAreLoaded","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadRestrictedEmojiStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadStarGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadUserCollectibleStatuses","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadPaidReactionPrivacy","loadBotFreezeAppeal","loadAllStories","loadChatFolders","loadAllHiddenStories","createInitialWorkspace","loadBundle","removeUpdateAvailableListener","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","noCloseTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","endHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","useFullscreenStatus","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleFocus","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","setAttribute","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","ModalContainer","stickerSetShortName","SnapEffectContainer","UnreadCount","passcodeSettings","LockScreen","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","captureEnterKeyListener","captureKeyboardListener","onEnter"],"sourceRoot":""}