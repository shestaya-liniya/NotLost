{"version":3,"file":"9451.b040d15fd5aa1d4a2f58.js","mappings":"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","sources":["webpack://telegram-t/./src/components/modals/stars/StarTopupOptionList.module.scss?22c9","webpack://telegram-t/./src/components/modals/stars/StarTopupOptionList.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/modals/common/TableAboutModal.tsx","webpack://telegram-t/./src/components/modals/common/TableAboutModal.module.scss?0459","webpack://telegram-t/./src/util/events/getPointerPosition.ts","webpack://telegram-t/./src/components/common/pickers/PickerModal.tsx","webpack://telegram-t/./src/components/common/pickers/PickerModal.module.scss?7af2","webpack://telegram-t/./src/components/mediaViewer/helpers/getViewableMedia.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/common/ReportAvatarModal.tsx","webpack://telegram-t/./src/components/mediaViewer/hooks/useZoomChangeSignal.ts","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useSignalRef.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useControlsSignal.ts","webpack://telegram-t/./src/hooks/useCurrentTimeSignal.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/components/mediaViewer/hooks/useVideoWaitingSignal.ts","webpack://telegram-t/./src/lib/video-preview/VideoPreview.ts","webpack://telegram-t/./src/components/mediaViewer/SeekLine.module.scss?dc47","webpack://telegram-t/./src/components/mediaViewer/SeekLine.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/story/StoryRibbon.module.scss?8966","webpack://telegram-t/./src/components/story/StoryViewer.module.scss?5f32","webpack://telegram-t/./src/components/story/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/story/helpers/dimensions.ts","webpack://telegram-t/./src/components/story/hooks/useSlideSizes.ts","webpack://telegram-t/./src/components/story/hooks/useStoryProps.ts","webpack://telegram-t/./src/components/story/StealthModeModal.module.scss?40cf","webpack://telegram-t/./src/components/story/StealthModeModal.tsx","webpack://telegram-t/./src/components/story/StoryDeleteConfirmModal.tsx","webpack://telegram-t/./src/components/story/privacy/AllowDenyList.tsx","webpack://telegram-t/./src/components/story/privacy/CloseFriends.module.scss?5d02","webpack://telegram-t/./src/components/story/privacy/CloseFriends.tsx","webpack://telegram-t/./src/components/story/StorySettings.module.scss?b887","webpack://telegram-t/./src/components/story/StorySettings.tsx","webpack://telegram-t/./src/components/story/helpers/videoFormats.ts","webpack://telegram-t/./src/util/progressiveLoader.ts","webpack://telegram-t/./src/hooks/useStreaming.ts","webpack://telegram-t/./src/components/story/hooks/useStoryPreloader.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStoryForward.tsx","webpack://telegram-t/./src/components/story/StoryCaption.tsx","webpack://telegram-t/./src/components/story/StoryFooter.module.scss?19b1","webpack://telegram-t/./src/components/story/StoryFooter.tsx","webpack://telegram-t/./src/components/story/StoryProgress.tsx","webpack://telegram-t/./src/components/story/StoryProgress.module.scss?59b4","webpack://telegram-t/./src/components/story/Story.tsx","webpack://telegram-t/./src/components/story/StoryPreview.tsx","webpack://telegram-t/./src/components/story/StorySlides.tsx","webpack://telegram-t/./src/hooks/useScrolledState.ts","webpack://telegram-t/./src/components/story/StoryViewModal.module.scss?06b1","webpack://telegram-t/./src/components/story/StoryView.tsx","webpack://telegram-t/./src/components/story/StoryViewModal.tsx","webpack://telegram-t/./src/components/story/StoryViewer.tsx","webpack://telegram-t/./src/components/common/pickers/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.module.scss?0842","webpack://telegram-t/./src/components/modals/map/MapModal.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/hooks/useDraggable.ts","webpack://telegram-t/./src/components/modals/webApp/MinimizedWebAppModal.module.scss?a30f","webpack://telegram-t/./src/components/modals/webApp/MinimizedWebAppModal.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppGridItem.module.scss?b350","webpack://telegram-t/./src/components/modals/webApp/WebAppGridItem.tsx","webpack://telegram-t/./src/components/modals/webApp/MoreAppsTabContent.module.scss?8058","webpack://telegram-t/./src/components/modals/webApp/MoreAppsTabContent.tsx","webpack://telegram-t/./src/components/modals/webApp/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/modals/webApp/WebAppModalTabContent.module.scss?c843","webpack://telegram-t/./src/components/modals/webApp/WebAppModalTabContent.tsx","webpack://telegram-t/./src/components/modals/webApp/hooks/usePopupLimit.ts","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.module.scss?615e","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.module.scss?e925","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumSubscriptionOption.tsx","webpack://telegram-t/./src/components/main/premium/PremiumSubscriptionOption.module.scss?b798","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/common/pickers/ItemPicker.tsx","webpack://telegram-t/./src/components/common/CountryPickerModal.module.scss?d5e6","webpack://telegram-t/./src/components/common/CountryPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayChannelPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayTypeOption.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayTypeOption.module.scss?6d7c","webpack://telegram-t/./src/components/main/premium/GiveawayUserPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.module.scss?ac86","webpack://telegram-t/./src/components/main/premium/GiveawayModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/hooks/useStickerPickerObservers.ts","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/common/StickerButton.tsx","webpack://telegram-t/./src/components/common/reactions/ReactionEmoji.module.scss?9dc8","webpack://telegram-t/./src/components/common/reactions/ReactionEmoji.tsx","webpack://telegram-t/./src/components/common/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.module.scss?0978","webpack://telegram-t/./src/components/common/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/common/CustomEmojiPicker.module.scss?b9fd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.module.scss?77cd","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.module.scss?aeb4","webpack://telegram-t/./src/components/modals/boost/BoostModal.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.module.scss?1c77","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.tsx","webpack://telegram-t/./src/util/getClosestEntry.ts","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.module.scss?3c02","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.module.scss?f731","webpack://telegram-t/./src/components/modals/chatlist/ChatlistAlready.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistDelete.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistNew.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.module.scss?5f0b","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.module.scss?b66d","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.module.scss?2ca6","webpack://telegram-t/./src/components/common/AboutMonetizationModal.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.module.scss?bb6b","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.module.scss?4803","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.module.scss?843e","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.module.scss?b26e","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.module.scss?3c2e","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.tsx","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.module.scss?94bc","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.tsx","webpack://telegram-t/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.tsx","webpack://telegram-t/./src/components/right/hooks/useManagePermissions.ts","webpack://telegram-t/./src/components/main/PermissionCheckboxList.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.module.scss?fbca","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/common/SeenByModal.module.scss?1d45","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.module.scss?a8aa","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.module.scss?68c3","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.module.scss?497f","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/BotAppResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultSponsored.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsShareChatlist.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/common/paidMessage/PaidMessageSlider.tsx","webpack://telegram-t/./src/components/common/paidMessage/PaidMessagePrice.tsx","webpack://telegram-t/./src/components/left/settings/PremiumStatusItem.tsx","webpack://telegram-t/./src/components/left/settings/PrivacyLockedOption.tsx","webpack://telegram-t/./src/components/left/settings/PrivacyLockedOption.module.scss?16a3","webpack://telegram-t/./src/components/left/settings/PrivacyMessages.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPerformance.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsAcceptedGift.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyLastSeen.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/story/StoryToggler.module.scss?58fa","webpack://telegram-t/./src/components/story/helpers/ribbonAnimation.ts","webpack://telegram-t/./src/components/story/StoryRibbonButton.tsx","webpack://telegram-t/./src/components/story/StoryRibbon.tsx","webpack://telegram-t/./src/components/story/StoryToggler.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/main/hooks/useLeftHeaderButtonRtlForumTransition.ts","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.module.scss?6993","webpack://telegram-t/./src/components/left/MuteChatModal.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearchResult.module.scss?f0ab","webpack://telegram-t/./src/components/middle/search/MiddleSearchResult.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.module.scss?725f","webpack://telegram-t/./src/components/middle/search/MiddleSearch.tsx","webpack://telegram-t/./src/hooks/events/useOutsideClick.ts","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPickerLimited.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPickerLimited.module.scss?0536","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.module.scss?695a","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://telegram-t/./src/util/visibility/isFullyVisible.ts","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommand.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommandTooltip.module.scss?f347","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/TextFormatter.tsx","webpack://telegram-t/./src/util/getKeyFromEvent.ts","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentPost.module.scss?fea0","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentPostMeta.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentStory.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.module.scss?96a0","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.module.scss?bbd6","webpack://telegram-t/./src/components/right/statistics/StatisticsMessagePublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsStoryPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/ManageTopic.module.scss?04dd","webpack://telegram-t/./src/components/right/CreateTopic.tsx","webpack://telegram-t/./src/components/right/EditTopic.tsx","webpack://telegram-t/./src/components/right/management/ManageBot.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/NewDiscussionGroup.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.module.scss?717b","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.module.scss?de6c","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.module.scss?86e3","webpack://telegram-t/./src/components/modals/common/TableInfoModal.module.scss?4f33","webpack://telegram-t/./src/components/modals/common/TableInfoModal.tsx","webpack://telegram-t/./src/components/common/PeerBadge.module.scss?732c","webpack://telegram-t/./src/components/common/PeerBadge.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"options\":\"OnCj9kef\",\"option\":\"tpTHQAUF\",\"active\":\"U_9MXPG5\",\"wideOption\":\"dJcJl33b\",\"optionTop\":\"x9G4lqMf\",\"stackedStars\":\"etXLebjM\",\"stackedStar\":\"swttXv9P\",\"optionBottom\":\"tK7La7L2\",\"moreOptions\":\"AWXBaWLW\",\"iconDown\":\"zWYHZJmd\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\n\nimport type { ApiStarGiveawayOption, ApiStarTopupOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\n\nimport styles from './StarTopupOptionList.module.scss';\n\nconst MAX_STARS_COUNT = 6;\n\ntype OwnProps = {\n  isActive?: boolean;\n  options?: ApiStarTopupOption[] | ApiStarGiveawayOption[];\n  selectedStarOption?: ApiStarTopupOption | ApiStarGiveawayOption;\n  selectedStarCount?: number;\n  starsNeeded?: number;\n  className?: string;\n  onClick: (option: ApiStarTopupOption | ApiStarGiveawayOption) => void;\n};\n\nconst StarTopupOptionList: FC<OwnProps> = ({\n  isActive,\n  className,\n  options,\n  selectedStarOption,\n  selectedStarCount,\n  starsNeeded,\n  onClick,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [areOptionsExtended, markOptionsExtended, unmarkOptionsExtended] = useFlag();\n\n  useEffect(() => {\n    if (!isActive) {\n      unmarkOptionsExtended();\n    }\n  }, [isActive]);\n\n  const [renderingOptions, canExtend] = useMemo(() => {\n    if (!options) return [undefined, false];\n\n    const maxOption = options.reduce((max, option) => (\n      max.stars > option.stars ? max : option\n    ));\n    const forceShowAll = starsNeeded && maxOption.stars < starsNeeded;\n\n    const result: { option: ApiStarTopupOption | ApiStarGiveawayOption; starsCount: number; isWide: boolean }[] = [];\n    let currentStackedStarsCount = 0;\n    let canExtendOptions = false;\n    options.forEach((option, index) => {\n      if (!option.isExtended) currentStackedStarsCount++;\n\n      if (starsNeeded && !forceShowAll && option.stars < starsNeeded) return;\n      if (!areOptionsExtended && option.isExtended) {\n        canExtendOptions = true;\n        return;\n      }\n      result.push({\n        option,\n        starsCount: Math.min(currentStackedStarsCount, MAX_STARS_COUNT),\n        isWide: index === options.length - 1,\n      });\n    });\n\n    return [result, canExtendOptions];\n  }, [areOptionsExtended, options, starsNeeded]);\n\n  return (\n    <div className={buildClassName(styles.options, className)}>\n      {renderingOptions?.map(({ option, starsCount, isWide }) => {\n        const length = renderingOptions?.length;\n        const isOdd = length % 2 === 0;\n        const isActiveOption = option === selectedStarOption;\n\n        let perUserStarCount;\n        if (option && 'winners' in option) {\n          const winner = option.winners.find((opt) => opt.users === selectedStarCount)\n            || option.winners.reduce((max, opt) => (opt.users > max.users ? opt : max), option.winners[0]);\n          perUserStarCount = winner?.perUserStars;\n        }\n\n        return (\n          <div\n            className={buildClassName(\n              styles.option, (!isOdd && isWide) && styles.wideOption, isActiveOption && styles.active,\n            )}\n            key={option.stars}\n            onClick={() => onClick?.(option)}\n          >\n            <div className={styles.optionTop}>\n              +\n              {formatInteger(option.stars)}\n              <div className={styles.stackedStars} dir={lang.isRtl ? 'ltr' : 'rtl'}>\n                {Array.from({ length: starsCount }).map(() => (\n                  <StarIcon className={styles.stackedStar} type=\"gold\" size=\"big\" />\n                ))}\n              </div>\n            </div>\n            <div className={styles.optionBottom}>\n              {formatCurrency(lang, option.amount, option.currency)}\n            </div>\n            {(isActiveOption || (selectedStarOption && 'winners' in selectedStarOption))\n              && Boolean(perUserStarCount) && (\n              <div className={styles.optionBottom}>\n                <div className={styles.perUserStars}>\n                  {renderText(oldLang('BoostGift.Stars.PerUser', formatInteger(perUserStarCount)))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      })}\n      {!areOptionsExtended && canExtend && (\n        <Button className={styles.moreOptions} isText noForcedUpperCase onClick={markOptionsExtended}>\n          {oldLang('Stars.Purchase.ShowMore')}\n          <Icon className={styles.iconDown} name=\"down\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StarTopupOptionList);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const stikerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import { memo, type TeactNode } from '../../../lib/teact/teact';\n\nimport type { IconName } from '../../../types/icons';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\n\nimport styles from './TableAboutModal.module.scss';\n\nexport type TableAboutData = [IconName | undefined, TeactNode, TeactNode][];\n\ntype OwnProps = {\n  contentClassName?: string;\n  isOpen?: boolean;\n  listItemData?: TableAboutData;\n  headerIconName?: IconName;\n  header?: TeactNode;\n  footer?: TeactNode;\n  buttonText?: string;\n  hasBackdrop?: boolean;\n  withSeparator?: boolean;\n  onClose: NoneToVoidFunction;\n  onButtonClick?: NoneToVoidFunction;\n};\n\nconst TableAboutModal = ({\n  isOpen,\n  listItemData,\n  headerIconName,\n  header,\n  footer,\n  buttonText,\n  hasBackdrop,\n  withSeparator,\n  onClose,\n  onButtonClick,\n  contentClassName,\n}: OwnProps) => {\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={buildClassName(styles.root, contentClassName)}\n      contentClassName={styles.content}\n      hasAbsoluteCloseButton\n      absoluteCloseButtonColor={hasBackdrop ? 'translucent-white' : undefined}\n      onClose={onClose}\n    >\n      {headerIconName && <div className={styles.topIcon}><Icon name={headerIconName} /></div>}\n      {header}\n      <div>\n        {listItemData?.map(([icon, title, subtitle]) => {\n          return (\n            <ListItem\n              isStatic\n              multiline\n              icon={icon}\n              iconClassName={styles.listItemIcon}\n            >\n              <span className=\"title\">{title}</span>\n              <span className=\"subtitle\">{subtitle}</span>\n            </ListItem>\n          );\n        })}\n      </div>\n      {withSeparator && <Separator className={styles.separator} />}\n      {footer}\n      {buttonText && (\n        <Button size=\"smaller\" onClick={onButtonClick || onClose}>{buttonText}</Button>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(TableAboutModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LAh8evux\",\"title\":\"yfODVQ1M\",\"description\":\"QaQn08BX\",\"secondary\":\"sQZslvAr\",\"topIcon\":\"jySLtQNG\",\"listItemIcon\":\"hQbEPsTU\",\"content\":\"hrizpMDe\",\"separator\":\"En1zD2cT\"};","export default function getPointerPosition(e: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent) {\n  if ('touches' in e) {\n    return {\n      x: e.touches[0].clientX,\n      y: e.touches[0].clientY,\n    };\n  }\n\n  return {\n    x: e.clientX,\n    y: e.clientY,\n  };\n}\n","import { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport Modal, { type OwnProps as ModalProps } from '../../ui/Modal';\n\nimport styles from './PickerModal.module.scss';\n\ntype OwnProps = {\n  confirmButtonText?: string;\n  isConfirmDisabled?: boolean;\n  shouldAdaptToSearch?: boolean;\n  withFixedHeight?: boolean;\n  withPremiumGradient?: boolean;\n  onConfirm?: NoneToVoidFunction;\n} & ModalProps;\n\nconst PickerModal = ({\n  confirmButtonText,\n  isConfirmDisabled,\n  shouldAdaptToSearch,\n  withFixedHeight,\n  onConfirm,\n  withPremiumGradient,\n  ...modalProps\n}: OwnProps) => {\n  const lang = useOldLang();\n  const hasButton = Boolean(confirmButtonText || onConfirm);\n\n  return (\n    <Modal\n\n      {...modalProps}\n      isSlim\n      className={buildClassName(\n        shouldAdaptToSearch && styles.withSearch,\n        withFixedHeight && styles.fixedHeight,\n        modalProps.className,\n      )}\n      contentClassName={buildClassName(styles.content, modalProps.contentClassName)}\n      headerClassName={buildClassName(styles.header, modalProps.headerClassName)}\n    >\n      {modalProps.children}\n      {hasButton && (\n        <div className={styles.buttonWrapper}>\n          <Button\n            withPremiumGradient={withPremiumGradient}\n            onClick={onConfirm || modalProps.onClose}\n            color=\"primary\"\n            size=\"smaller\"\n            disabled={isConfirmDisabled}\n          >\n            {confirmButtonText || lang('Confirm')}\n          </Button>\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(PickerModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"FuFYE0AA\",\"fixedHeight\":\"CrEsDylb\",\"withSearch\":\"WGSZ8u75\",\"header\":\"iEptOmIp\",\"buttonWrapper\":\"HqeDTaSr\"};","import type {\n  ApiMessage, ApiPeer, ApiPeerPhotos, ApiSponsoredMessage,\n} from '../../../api/types';\nimport type { MediaViewerMedia } from '../../../types';\n\nimport { getMessageContent, isDocumentPhoto, isDocumentVideo } from '../../../global/helpers';\n\nexport type MediaViewerItem = {\n  type: 'message';\n  message: ApiMessage;\n  mediaIndex?: number;\n} | {\n  type: 'avatar';\n  avatarOwner: ApiPeer;\n  profilePhotos: ApiPeerPhotos;\n  mediaIndex: number;\n} | {\n  type: 'standalone';\n  media: MediaViewerMedia[];\n  mediaIndex: number;\n} | {\n  type: 'sponsoredMessage';\n  message: ApiSponsoredMessage;\n  mediaIndex?: number;\n};\n\ntype ViewableMedia = {\n  media: MediaViewerMedia;\n  isSingle?: boolean;\n};\n\nexport function getMediaViewerItem({\n  message, avatarOwner, profilePhotos, standaloneMedia, mediaIndex, sponsoredMessage,\n}: {\n  message?: ApiMessage;\n  avatarOwner?: ApiPeer;\n  profilePhotos?: ApiPeerPhotos;\n  standaloneMedia?: MediaViewerMedia[];\n  sponsoredMessage?: ApiSponsoredMessage;\n  mediaIndex?: number;\n}): MediaViewerItem | undefined {\n  if (avatarOwner && profilePhotos) {\n    return {\n      type: 'avatar',\n      avatarOwner,\n      profilePhotos,\n      mediaIndex: mediaIndex!,\n    };\n  }\n\n  if (standaloneMedia) {\n    return {\n      type: 'standalone',\n      media: standaloneMedia,\n      mediaIndex: mediaIndex!,\n    };\n  }\n\n  if (message) {\n    return {\n      type: 'message',\n      message,\n      mediaIndex,\n    };\n  }\n\n  if (sponsoredMessage) {\n    return {\n      type: 'sponsoredMessage',\n      message: sponsoredMessage,\n      mediaIndex,\n    };\n  }\n\n  return undefined;\n}\n\nexport default function getViewableMedia(params?: MediaViewerItem): ViewableMedia | undefined {\n  if (!params) return undefined;\n\n  if (params.type === 'standalone') {\n    return {\n      media: params.media[params.mediaIndex],\n      isSingle: params.media.length === 1,\n    };\n  }\n\n  if (params.type === 'avatar') {\n    const avatar = params.profilePhotos?.photos[params.mediaIndex];\n    if (avatar) {\n      return {\n        media: avatar,\n      };\n    }\n    return undefined;\n  }\n\n  const {\n    action, document, photo, video, webPage, paidMedia,\n  } = getMessageContent(params.message);\n\n  if (action?.type === 'chatEditPhoto' || action?.type === 'suggestProfilePhoto') {\n    return {\n      media: action.photo!,\n      isSingle: true,\n    };\n  }\n\n  if (document && (isDocumentPhoto(document) || isDocumentVideo(document))) {\n    return {\n      media: document,\n    };\n  }\n\n  if (webPage) {\n    const { photo: webPagePhoto, video: webPageVideo, document: webPageDocument } = webPage;\n    const isDocumentMedia = webPageDocument && (isDocumentPhoto(webPageDocument) || isDocumentVideo(webPageDocument));\n    const mediaDocument = isDocumentMedia ? webPageDocument : undefined;\n    const media = webPageVideo || mediaDocument || webPagePhoto;\n    if (media) {\n      return {\n        media,\n        isSingle: true,\n      };\n    }\n  }\n\n  if (paidMedia) {\n    const extendedMedia = paidMedia.extendedMedia[params.mediaIndex || 0];\n    if (!('mediaType' in extendedMedia)) {\n      const { photo: extendedPhoto, video: extendedVideo } = extendedMedia;\n      return {\n        media: (extendedPhoto || extendedVideo)!,\n      };\n    }\n  }\n\n  const media = video || photo;\n\n  if (media) {\n    return {\n      media,\n      isSingle: video?.isGif,\n    };\n  }\n\n  return undefined;\n}\n","import type { ApiDimensions, ApiMessage } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport stopEvent from '../../../util/stopEvent';\nimport getOffsetToContainer from '../../../util/visibility/getOffsetToContainer';\nimport { isElementInViewport } from '../../../util/visibility/isElementInViewport';\nimport windowSize from '../../../util/windowSize';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n  mediaIndex?: number,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message, mediaIndex);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || fromImage);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n    applyShape(ghost, origin);\n\n    document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage, mediaIndex?: number,\n) {\n  const { container, mediaEl: toImage } = getNodes(origin, message, mediaIndex);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [\n      MediaViewerOrigin.Inline,\n      MediaViewerOrigin.ScheduledInline,\n      MediaViewerOrigin.Album,\n      MediaViewerOrigin.ScheduledAlbum,\n    ].includes(origin)\n    && !isMessageImageFullyVisible(toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n\n  let styles: Record<string, string>;\n  if (existingGhost) {\n    const {\n      top, left, width, height,\n    } = existingGhost.getBoundingClientRect();\n    const scaleX = width / toWidth;\n    const scaleY = height / toHeight;\n\n    styles = {\n      transition: 'none',\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      transformOrigin: 'top left',\n      transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n    };\n  } else {\n    styles = {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    };\n  }\n\n  requestMutation(() => {\n    applyStyles(ghost, styles);\n    if (!existingGhost) document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition_slide-active > .MessageList')!;\n\n  const { top } = getOffsetToContainer(imageEl, messageListElement);\n\n  return top > messageListElement.scrollTop\n    && top + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage, index?: number) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      // eslint-disable-next-line @stylistic/max-len\n      containerSelector = `.Transition_slide-active > .MessageList #album-media-${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.PreviewMedia:\n      containerSelector = `#preview-media${index}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ChannelAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.StarsTransaction:\n      containerSelector = '.transaction-media-preview';\n      mediaSelector = index === 0 ? `.stars-transaction-media-${index} :is(img, video)` : undefined;\n      break;\n\n    case MediaViewerOrigin.SponsoredMessage:\n      containerSelector = '.Transition_slide-active > .MessageList .sponsored-media-preview';\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = mediaSelector\n    ? container?.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector) : undefined;\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.StarsTransaction:\n    case MediaViewerOrigin.PreviewMedia:\n    case MediaViewerOrigin.ChannelAvatar:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      ghost.classList.add('circle');\n      if (origin === MediaViewerOrigin.SuggestedAvatar) {\n        ghost.classList.add('transition-circle');\n      }\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useCallback, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/browser/windowEnvironment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\nimport { createSignal } from '../util/signals';\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nconst signal = createSignal(false);\nconst setIsPictureInPicture = signal[1];\n\nexport function usePictureInPictureSignal() {\n  return signal;\n}\n\nexport default function usePictureInPicture(\n  elRef: ElementRef<HTMLVideoElement>,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsActive(true);\n      setIsPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      setIsPictureInPicture(false);\n      setIsActive(false);\n      onLeave();\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isActive];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport type { MediaViewerMedia } from '../../../types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getMediaFileSize,\n  getMediaFormat,\n  getMediaHash,\n  getMediaThumbUri,\n  getPhotoFullDimensions,\n  getProfilePhotoMediaHash,\n  getVideoDimensions,\n  getVideoProfilePhotoMediaHash,\n  isDocumentPhoto,\n  isDocumentVideo,\n} from '../../../global/helpers';\nimport { AVATAR_FULL_DIMENSIONS, VIDEO_AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\n\nconst FALLBACK_DIMENSIONS = AVATAR_FULL_DIMENSIONS;\n\ntype UseMediaProps = {\n  media?: MediaViewerMedia;\n  isAvatar?: boolean;\n  origin?: MediaViewerOrigin;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  media,\n  isAvatar,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const isPhotoAvatar = isAvatar && media?.mediaType === 'photo' && !media.isVideo;\n  const isVideoAvatar = isAvatar && media?.mediaType === 'photo' && media.isVideo;\n  const isDocument = media?.mediaType === 'document';\n  const isVideo = (media?.mediaType === 'video' && !media.isRound) || (isDocument && isDocumentVideo(media));\n  const isPhoto = media?.mediaType === 'photo' || (isDocument && isDocumentPhoto(media));\n  const isGif = media?.mediaType === 'video' && media.isGif;\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaOrAvatarHash = useMemo(() => (isFull?: boolean) => {\n    if (!media) return undefined;\n\n    if ((isPhotoAvatar || isVideoAvatar) && !isFull) {\n      return getProfilePhotoMediaHash(media);\n    }\n\n    if (isVideoAvatar && isFull) {\n      return getVideoProfilePhotoMediaHash(media);\n    }\n\n    return getMediaHash(media, isFull ? 'full' : 'preview');\n  }, [isVideoAvatar, isPhotoAvatar, media]);\n\n  const pictogramBlobUrl = useMedia(\n    media\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocument)\n    && getMediaHash(media, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const previewMediaHash = getMediaOrAvatarHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaOrAvatarHash(true),\n    undefined,\n    media && getMediaFormat(media, 'full'),\n    delay,\n  );\n\n  const localBlobUrl = media && 'blobUrl' in media ? media.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && media && getMediaThumbUri(media));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    (!isVideoAvatar && !isVideo) ? (previewBlobUrl || pictogramBlobUrl || bestImageData) : undefined\n  );\n\n  const mediaSize = media && getMediaFileSize(media);\n\n  const isLocal = Boolean(localBlobUrl);\n\n  const dimensions = useMemo(() => {\n    if (isAvatar) {\n      return isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n    }\n\n    if (isDocument) {\n      return media.mediaSize!;\n    }\n\n    if (isPhoto) {\n      return getPhotoFullDimensions(media);\n    }\n\n    if (isVideo) {\n      return getVideoDimensions(media);\n    }\n\n    return FALLBACK_DIMENSIONS;\n  }, [isAvatar, isDocument, isPhoto, isVideo, isVideoAvatar, media]);\n\n  return {\n    getMediaHash: getMediaOrAvatarHash,\n    media,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocument,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    isVideoAvatar,\n    isLocal,\n    loadProgress,\n    mediaSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useBlur from './useBlur';\nimport useSyncEffect from './useSyncEffect';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto, ApiReportReason } from '../../api/types';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport InputText from '../ui/InputText';\nimport Modal from '../ui/Modal';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  peerId?: string;\n  photo?: ApiPhoto;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nconst ReportAvatarModal: FC<OwnProps> = ({\n  isOpen,\n  peerId,\n  photo,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { reportProfilePhoto } = getActions();\n\n  const [selectedReason, setSelectedReason] = useState<ApiReportReason>('spam');\n  const [description, setDescription] = useState('');\n\n  const handleReport = useLastCallback(() => {\n    reportProfilePhoto({\n      chatId: peerId, photo, reason: selectedReason, description,\n    });\n    onClose();\n  });\n\n  const handleSelectReason = useLastCallback((value: string) => {\n    setSelectedReason(value as ApiReportReason);\n  });\n\n  const handleDescriptionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setDescription(e.target.value);\n  });\n\n  const lang = useOldLang();\n\n  const REPORT_OPTIONS: { value: ApiReportReason; label: string }[] = useMemo(() => [\n    { value: 'spam', label: lang('lng_report_reason_spam') },\n    { value: 'violence', label: lang('lng_report_reason_violence') },\n    { value: 'pornography', label: lang('lng_report_reason_pornography') },\n    { value: 'childAbuse', label: lang('lng_report_reason_child_abuse') },\n    { value: 'copyright', label: lang('ReportPeer.ReasonCopyright') },\n    { value: 'illegalDrugs', label: 'Illegal Drugs' },\n    { value: 'personalDetails', label: 'Personal Details' },\n    { value: 'other', label: lang('lng_report_reason_other') },\n  ], [lang]);\n\n  if (!peerId || !photo) {\n    return undefined;\n  }\n\n  const title = lang('ReportPeer.Report');\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen ? handleReport : undefined}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      className=\"narrow\"\n      title={title}\n    >\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"report-message\"\n        options={REPORT_OPTIONS}\n        onChange={handleSelectReason}\n        selected={selectedReason}\n      />\n      <InputText\n        label={lang('lng_report_reason_description')}\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleReport}>\n          {lang('lng_report_button')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(ReportAvatarModal);\n","import { useUnmountCleanup } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nconst [getZoomChange, setZoomChange] = createSignal(1);\n\nexport default function useZoomChange() {\n  useUnmountCleanup(() => {\n    setZoomChange(1);\n  });\n\n  return [getZoomChange, setZoomChange] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\n\nimport { isUserId } from '../../util/entities/ids';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useOldLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\nimport type { ActiveDownloads, MediaViewerOrigin, MessageListType } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport type { MenuItemProps } from '../ui/MenuItem';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport {\n  getIsDownloading,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectAllowedMessageActionsSlow, selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n  selectIsMessageProtected,\n  selectTabState,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport getViewableMedia from './helpers/getViewableMedia';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useOldLang from '../../hooks/useOldLang';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  activeDownloads: ActiveDownloads;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  chat?: ApiChat;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  origin?: MediaViewerOrigin;\n};\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n  mediaData?: string;\n  isVideo: boolean;\n  canUpdateMedia?: boolean;\n  canReportAvatar?: boolean;\n  activeDownloads?: ActiveDownloads;\n  onReportAvatar: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  item,\n  mediaData,\n  isVideo,\n  chat,\n  isChatProtected,\n  isProtected,\n  canReportAvatar,\n  canDelete,\n  canUpdate,\n  messageListType,\n  activeDownloads,\n  origin,\n  onReportAvatar: onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [getZoomChange, setZoomChange] = useZoomChange();\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMedia,\n    cancelMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n    openMediaViewer,\n    openDeleteMessageModal,\n  } = getActions();\n\n  const isMessage = item?.type === 'message';\n\n  const { media } = getViewableMedia(item) || {};\n  const fileName = media && getMediaFilename(media);\n  const isDownloading = media && getIsDownloading(activeDownloads, media);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    media && getMediaHash(media, 'download'),\n    !isDownloading,\n    media && getMediaFormat(media, 'download'),\n  );\n\n  const handleDownloadClick = useLastCallback(() => {\n    if (!media) return;\n\n    if (isDownloading) {\n      cancelMediaDownload({ media });\n    } else {\n      const message = item?.type === 'message' ? item.message : undefined;\n      downloadMedia({ media, originMessage: message });\n    }\n  });\n\n  const handleZoomOut = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange < 0 ? zoomChange : 0;\n    setZoomChange(change - 1);\n  });\n\n  const handleZoomIn = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange > 0 ? zoomChange : 0;\n    setZoomChange(change + 1);\n  });\n\n  const handleUpdate = useLastCallback(() => {\n    if (item?.type !== 'avatar') return;\n    const { avatarOwner, profilePhotos, mediaIndex } = item;\n    const avatarPhoto = profilePhotos?.photos[mediaIndex];\n    if (isUserId(avatarOwner.id)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwner.id, photo: avatarPhoto });\n    }\n\n    openMediaViewer({\n      origin: origin!,\n      chatId: avatarOwner.id,\n      mediaIndex: 0,\n      isAvatarView: true,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  const lang = useOldLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModal() {\n    return (item?.type === 'avatar') ? (\n      <DeleteProfilePhotoModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        onConfirm={onBeforeDelete}\n        profileId={item.avatarOwner.id}\n        photo={item.profilePhotos.photos[item.mediaIndex]}\n      />\n    ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected || item?.type === 'standalone') {\n      return undefined;\n    }\n\n    return item?.type !== 'sponsoredMessage' && (isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <Icon name=\"download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <Icon name=\"download\" />\n      </Button>\n    ));\n  }\n\n  const openDeleteModalHandler = useLastCallback(() => {\n    if (item?.type === 'message' && chat) {\n      openDeleteMessageModal({\n        chatId: chat?.id,\n        messageIds: [item.message.id],\n        isSchedule: messageListType === 'scheduled',\n        onConfirm: onBeforeDelete,\n      });\n    } else {\n      openDeleteModal();\n    }\n  });\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (isMessage && item.message.isForwardingAllowed && !item.message.content.action && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'close' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReportAvatar) {\n      menuItems.push({\n        icon: 'flag',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModalHandler,\n        children: lang('Delete'),\n        destructive: true,\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children, destructive,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon as IconName}\n              href={href}\n              download={download}\n              onClick={onClick}\n              destructive={destructive}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModal()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {isMessage && item.message.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <Icon name=\"forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <Icon name=\"zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <Icon name=\"zoom-in\" />\n      </Button>\n      {canReportAvatar && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <Icon name=\"flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <Icon name=\"copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModalHandler}\n        >\n          <Icon name=\"delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      {canDelete && renderDeleteModal()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    item, canUpdateMedia,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { origin } = tabState.mediaViewer;\n\n    const message = item?.type === 'message' ? item.message : undefined;\n    const avatarOwner = item?.type === 'avatar' ? item.avatarOwner : undefined;\n    const avatarPhoto = item?.type === 'avatar' && item.profilePhotos.photos[item.mediaIndex];\n\n    const chat = selectCurrentChat(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isProtected = selectIsMessageProtected(global, message);\n    const activeDownloads = selectActiveDownloads(global);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActionsSlow(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarPhotoId);\n    const canDeleteAvatar = canUpdateMedia && Boolean(avatarPhoto);\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && Boolean(avatarPhoto) && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n\n    return {\n      activeDownloads,\n      isProtected,\n      chat,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      origin,\n    };\n  },\n)(MediaViewerActions));\n","import { useRef } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport useEffectOnce from './useEffectOnce';\n\n// Allows to use signal value as \"silent\" dependency in hooks (not causing updates)\nexport function useSignalRef<T>(getValue: Signal<T>) {\n  const ref = useRef<T>(getValue());\n\n  useEffectOnce(() => {\n    return getValue.subscribe(() => {\n      ref.current = getValue();\n    });\n  });\n\n  return ref;\n}\n","import { createSignal } from '../../../util/signals';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\n\nconst [getControlsVisible, setControlsVisible] = createSignal(false);\nconst [getIsLocked, setIsLocked] = createSignal(false);\n\nexport default function useControlsSignal() {\n  const getVisible = useDerivedSignal(\n    () => getControlsVisible() && !getIsLocked(),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [getControlsVisible, getIsLocked],\n  );\n\n  return [getVisible, setControlsVisible, setIsLocked] as const;\n}\n","import { useUnmountCleanup } from '../lib/teact/teact';\n\nimport { createSignal } from '../util/signals';\n\nexport const [getCurrentTime, setCurrentTime] = createSignal(0);\n\nexport default function useCurrentTimeSignal() {\n  useUnmountCleanup(() => {\n    setCurrentTime(0);\n  });\n\n  return [getCurrentTime, setCurrentTime] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { throttle } from '../../util/schedulers';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Button from '../ui/Button';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  buttonText?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: (isFromMedia?: boolean) => void;\n  isForVideo: boolean;\n  isForceMobileVersion?: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', buttonText, isForVideo, onClick, handleSponsoredClick, isProtected, isForceMobileVersion,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n  const [getIsVisible] = useControlsSignal();\n  const isHidden = useDerivedState(() => (IS_TOUCH_ENV ? !getIsVisible() : false), [getIsVisible]);\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text');\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const onButtonClick = useLastCallback(() => {\n    handleSponsoredClick();\n  });\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n    isForceMobileVersion && 'mobile',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll allow-selection ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">\n            {text}\n          </p>\n        </div>\n      )}\n      {Boolean(buttonText) && (\n        <Button\n          className={buildClassName('media-viewer-footer-content', 'media-viewer-button')}\n          size=\"default\"\n          color=\"primary\"\n          isRectangular\n          onClick={onButtonClick}\n        >\n          {buttonText}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useUnmountCleanup } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nexport const [getIsVideoWaiting, setIsVideoWaiting] = createSignal(false);\n\nexport default function useVideoWaitingSignal() {\n  useUnmountCleanup(() => {\n    setIsVideoWaiting(false);\n  });\n\n  return [getIsVideoWaiting, setIsVideoWaiting] as const;\n}\n","import { ApiMediaFormat } from '../../api/types';\n\nimport { IS_ANDROID, IS_IOS } from '../../util/browser/windowEnvironment';\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\nimport { callApi } from '../../api/gramjs';\nimport { requestMutation } from '../fasterdom/fasterdom';\n\nconst IS_MOBILE = IS_ANDROID || IS_IOS;\nconst PREVIEW_SIZE_RATIO = (IS_ANDROID || IS_IOS) ? 0.3 : 0.25;\nconst MAX_FRAMES = IS_MOBILE ? 40 : 80;\nconst PREVIEW_MAX_SIDE = 200;\n\nconst connections = launchMediaWorkers();\n\nlet videoPreview: VideoPreview | undefined;\n\nexport class VideoPreview {\n  frames = new Map<number, ImageBitmap>();\n\n  currentTime = 0;\n\n  canvas: HTMLCanvasElement;\n\n  constructor(url: string, canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    connections.forEach(({ connector }, index) => {\n      void connector.request({\n        name: 'video-preview:init',\n        args: [\n          url,\n          MAX_FRAMES,\n          index,\n          MAX_WORKERS,\n          this.onFrame.bind(this),\n        ],\n      });\n    });\n  }\n\n  private onFrame(time: number, frame: ImageBitmap) {\n    this.frames.set(time, frame);\n    if (time === this.currentTime) {\n      this.render(time);\n    }\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      frame.close();\n    });\n    this.frames.clear();\n  }\n\n  render(time: number) {\n    this.currentTime = time;\n    const frame = this.frames.get(time);\n    if (!frame) return false;\n    requestMutation(() => {\n      this.canvas.width = frame.width;\n      this.canvas.height = frame.height;\n      const ctx = this.canvas.getContext('2d')!;\n      ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height);\n    });\n    return true;\n  }\n\n  destroy() {\n    this.clearCache();\n    connections.forEach(({ connector }) => {\n      void connector.request({\n        name: 'video-preview:destroy',\n        args: [],\n      });\n    });\n  }\n}\n\nexport function getPreviewDimensions(width: number, height: number) {\n  width = Math.round(width * PREVIEW_SIZE_RATIO);\n  height = Math.round(height * PREVIEW_SIZE_RATIO);\n  const ratio = width / height;\n  if (width > PREVIEW_MAX_SIDE) {\n    width = PREVIEW_MAX_SIDE;\n    height = Math.round(width / ratio);\n  }\n  if (height > PREVIEW_MAX_SIDE) {\n    height = PREVIEW_MAX_SIDE;\n    width = Math.round(height * ratio);\n  }\n  return { width, height };\n}\n\nconnections.forEach(({ worker }) => {\n  worker.addEventListener('message', async (e) => {\n    const { type, messageId, params } = e.data as {\n      type: string;\n      messageId: string;\n      params: { url: string; start: number; end: number };\n    };\n\n    if (type !== 'requestPart') {\n      return;\n    }\n\n    const result = await callApi('downloadMedia', { mediaFormat: ApiMediaFormat.Progressive, ...params });\n    if (!result) {\n      return;\n    }\n\n    const { arrayBuffer } = result;\n\n    worker.postMessage({\n      type: 'partResponse',\n      messageId,\n      result: arrayBuffer,\n    }, [arrayBuffer!]);\n  });\n});\n\nexport function createVideoPreviews(url: string, canvas: HTMLCanvasElement) {\n  if (videoPreview) {\n    videoPreview.destroy();\n  }\n  videoPreview = new VideoPreview(url, canvas);\n  return () => {\n    videoPreview?.destroy();\n    videoPreview = undefined;\n  };\n}\n\nexport function renderVideoPreview(time: number) {\n  if (!videoPreview) return false;\n  return videoPreview.render(time);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ingarEvU\",\"preview\":\"TqpEWfl3\",\"previewCanvas\":\"fKVz2lln\",\"previewTime\":\"bGiNvx5D\",\"previewTimeText\":\"mnkqvOMR\",\"track\":\"Od9ZSc1U\",\"buffered\":\"ANe2DKfp\",\"played\":\"igaGLblf\",\"seeking\":\"beUP6SqY\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\n\nimport { createVideoPreviews, getPreviewDimensions, renderVideoPreview } from '../../lib/video-preview/VideoPreview';\nimport { animateNumber } from '../../util/animation';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents } from '../../util/captureEvents';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport getPointerPosition from '../../util/events/getPointerPosition';\nimport { clamp, round } from '../../util/math';\n\nimport { useThrottledSignal } from '../../hooks/useAsyncResolvers';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport ShowTransition from '../ui/ShowTransition';\n\nimport styles from './SeekLine.module.scss';\n\ntype OwnProps = {\n  url?: string;\n  duration: number;\n  bufferedRanges: BufferedRange[];\n  playbackRate: number;\n  isActive?: boolean;\n  isPlaying?: boolean;\n  isPreviewDisabled?: boolean;\n  isReady: boolean;\n  posterSize?: ApiDimensions;\n  onSeek: (position: number) => void;\n  onSeekStart: () => void;\n};\n\nconst LOCK_TIMEOUT = 250;\nlet cancelAnimation: ReturnType<typeof animateNumber> | undefined;\n\nconst SeekLine: FC<OwnProps> = ({\n  duration,\n  bufferedRanges,\n  isReady,\n  posterSize,\n  playbackRate,\n  url,\n  isActive,\n  isPlaying,\n  isPreviewDisabled,\n  onSeek,\n  onSeekStart,\n}) => {\n  const seekerRef = useRef<HTMLDivElement>();\n  const [getCurrentTimeSignal] = useCurrentTimeSignal();\n  const [getIsWaiting] = useVideoWaitingSignal();\n  const getCurrentTime = useThrottledSignal(getCurrentTimeSignal, LOCK_TIMEOUT);\n  const [getSelectedTime, setSelectedTime] = useSignal(getCurrentTime());\n  const [getPreviewOffset, setPreviewOffset] = useSignal(0);\n  const [getPreviewTime, setPreviewTime] = useSignal(0);\n  const isLockedRef = useRef<boolean>(false);\n  const [isPreviewVisible, setPreviewVisible] = useState(false);\n  const [isSeeking, setIsSeeking] = useState(false);\n  const previewCanvasRef = useRef<HTMLCanvasElement>();\n  const previewRef = useRef<HTMLDivElement>();\n  const progressRef = useRef<HTMLDivElement>();\n  const previewTimeRef = useRef<HTMLDivElement>();\n\n  const previewSize = useMemo(() => {\n    return getPreviewDimensions(posterSize?.width || 0, posterSize?.height || 0);\n  }, [posterSize]);\n\n  const setPreview = useLastCallback((time: number) => {\n    time = Math.floor(time);\n    setPreviewTime(time);\n    renderVideoPreview(time);\n  });\n\n  useEffect(() => {\n    if (isPreviewDisabled || !url || !isReady) return undefined;\n    return createVideoPreviews(url, previewCanvasRef.current!);\n  }, [url, isReady, isPreviewDisabled]);\n\n  useEffect(() => {\n    setPreviewVisible(false);\n  }, [isActive]);\n\n  useEffect(() => {\n    if (cancelAnimation) cancelAnimation();\n    cancelAnimation = undefined;\n    if (!isLockedRef.current && !isSeeking) {\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n  }, [getCurrentTime, isSeeking, setSelectedTime, playbackRate, duration]);\n\n  useEffect(() => {\n    if (!isPlaying || getIsWaiting()) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    }\n  }, [isPlaying, getSelectedTime, getIsWaiting]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n    // eslint-disable-next-line\n  }, [isPlaying, playbackRate, duration]);\n\n  useLayoutEffect(() => {\n    if (!progressRef.current) return;\n    const progress = round((getSelectedTime() / duration) * 100, 2);\n    progressRef.current.style.width = `${progress}%`;\n  }, [getSelectedTime, duration]);\n\n  useLayoutEffect(() => {\n    if (!previewRef.current) return;\n    previewRef.current.style.left = `${getPreviewOffset()}px`;\n  }, [getPreviewOffset]);\n\n  useLayoutEffect(() => {\n    if (!previewTimeRef.current) return;\n    previewTimeRef.current.innerText = formatMediaDuration(getPreviewTime());\n  }, [getPreviewTime]);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isActive) return undefined;\n    const seeker = seekerRef.current;\n    let seekerSize = seeker.getBoundingClientRect();\n\n    let time = 0;\n    let offset = 0;\n\n    const getPreviewProps = (e: MouseEvent | TouchEvent) => {\n      const pageX = getPointerPosition(e).x;\n      const t = clamp(duration * ((pageX - seekerSize.left) / seekerSize.width), 0, duration);\n      if (isPreviewDisabled) return [t, 0];\n      if (!seekerSize.width) seekerSize = seeker.getBoundingClientRect();\n      const preview = previewRef.current!;\n      const o = clamp(\n        pageX - seekerSize.left - preview.clientWidth / 2, -4, seekerSize.width - preview.clientWidth + 4,\n      );\n      return [t, o];\n    };\n\n    const stopAnimation = () => {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    };\n\n    const handleSeek = (e: MouseEvent | TouchEvent) => {\n      stopAnimation();\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      void setPreview(time);\n      setPreviewOffset(offset);\n      setSelectedTime(time);\n    };\n\n    const handleStartSeek = () => {\n      stopAnimation();\n      setPreviewVisible(true);\n      setIsSeeking(true);\n      onSeekStart();\n    };\n\n    const handleStopSeek = () => {\n      stopAnimation();\n      isLockedRef.current = true;\n      setPreviewVisible(false);\n      setIsSeeking(false);\n      setSelectedTime(time);\n      onSeek(time);\n      // Prevent current time updates from overriding the selected time\n      setTimeout(() => {\n        isLockedRef.current = false;\n      }, LOCK_TIMEOUT);\n    };\n\n    const cleanup = captureEvents(seeker, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n\n    if (IS_TOUCH_ENV || isPreviewDisabled) {\n      return cleanup;\n    }\n\n    const handleSeekMouseMove = (e: MouseEvent) => {\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      setPreviewOffset(offset);\n      void setPreview(time);\n    };\n\n    const handleSeekMouseLeave = () => {\n      setPreviewVisible(false);\n    };\n\n    seeker.addEventListener('mousemove', handleSeekMouseMove);\n    seeker.addEventListener('mouseenter', handleSeekMouseMove);\n    seeker.addEventListener('mouseleave', handleSeekMouseLeave);\n\n    return () => {\n      cleanup();\n      seeker.removeEventListener('mousemove', handleSeekMouseMove);\n      seeker.removeEventListener('mouseenter', handleSeekMouseMove);\n      seeker.removeEventListener('mouseleave', handleSeekMouseLeave);\n    };\n  }, [\n    duration,\n    setPreview,\n    isActive,\n    onSeek,\n    onSeekStart,\n    setPreviewOffset,\n    setSelectedTime,\n    setIsSeeking,\n    isPreviewDisabled,\n    playbackRate,\n  ]);\n\n  return (\n    <div className={styles.container} ref={seekerRef}>\n      {!isPreviewDisabled && (\n        <ShowTransition\n          isOpen\n          isHidden={!isPreviewVisible}\n          className={styles.preview}\n          style={`width: ${previewSize.width}px; height: ${previewSize.height}px`}\n          ref={previewRef}\n        >\n          <canvas className={styles.previewCanvas} ref={previewCanvasRef} />\n          <div className={styles.previewTime}>\n            <span className={styles.previewTimeText} ref={previewTimeRef} />\n          </div>\n        </ShowTransition>\n      )}\n      <div className={styles.track}>\n        {bufferedRanges.map(({\n          start,\n          end,\n        }) => (\n          <div\n            key={`${start}-${end}`}\n            className={styles.buffered}\n            // @ts-ignore\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n      </div>\n      <div className={styles.track}>\n        <div\n          ref={progressRef}\n          className={buildClassName(styles.played, isSeeking && styles.seeking)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SeekLine);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n  useRef,\n  useSignal,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { IconName } from '../../types/icons';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport SeekLine from './SeekLine';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  url?: string;\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  duration: number;\n  isReady: boolean;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isPreviewDisabled?: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  posterSize?: ApiDimensions;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n  onSeekingChange: (isSeeking: boolean) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  url,\n  bufferedRanges,\n  bufferedProgress,\n  duration,\n  isReady,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isBuffered,\n  isPreviewDisabled,\n  volume,\n  isMuted,\n  playbackRate,\n  posterSize,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  onSeek,\n  onSeekingChange,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  const [getCurrentTime] = useCurrentTimeSignal();\n  const currentTime = useDerivedState(() => Math.trunc(getCurrentTime()), [getCurrentTime]);\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n\n  const closeTimeoutRef = useRef<number | undefined>();\n\n  const { isMobile } = useAppLayout();\n  const [getIsVisible, setVisibility] = useControlsSignal();\n  const isVisible = useDerivedState(getIsVisible);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && !isForceMobileVersion) return undefined;\n    if (!isVisible || !isPlaying || isPlaybackMenuOpen || getIsSeeking()) {\n      if (closeTimeoutRef.current) window.clearTimeout(closeTimeoutRef.current);\n      return undefined;\n    }\n    closeTimeoutRef.current = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (closeTimeoutRef.current) window.clearTimeout(closeTimeoutRef.current);\n    };\n  }, [isPlaying, isVisible, setVisibility, isPlaybackMenuOpen, getIsSeeking, isForceMobileVersion]);\n\n  useLayoutEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useOldLang();\n\n  const handleSeek = useLastCallback((position: number) => {\n    setIsSeeking(false);\n    onSeek(position);\n    onSeekingChange(false);\n  });\n\n  const handleSeekStart = useLastCallback(() => {\n    setIsSeeking(true);\n    onSeekingChange(true);\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      <SeekLine\n        url={url}\n        duration={duration}\n        isReady={isReady}\n        isPlaying={isPlaying}\n        isPreviewDisabled={isPreviewDisabled}\n        posterSize={posterSize}\n        bufferedRanges={bufferedRanges}\n        playbackRate={playbackRate}\n        onSeek={handleSeek}\n        onSeekStart={handleSeekStart}\n        isActive={isVisible}\n      />\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <Icon name={isPlaying ? 'pause' : 'play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <Icon name=\"pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <Icon name={isFullscreen ? 'smallscreen' : 'fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nexport default memo(VideoPlayerControls);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/browser/windowEnvironment';\nimport getPointerPosition from '../../util/events/getPointerPosition';\nimport { clamp } from '../../util/math';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useFullscreen from '../../hooks/window/useFullscreen';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isPreviewDisabled?: boolean;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  shouldCloseOnClick?: boolean;\n  isForceMobileVersion?: boolean;\n  isClickDisabled?: boolean;\n  isSponsoredMessage?: boolean;\n  timestamp?: number;\n  handleSponsoredClick?: (isFromMedia?: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MAX_LOOP_DURATION = 30; // Seconds\nconst MIN_READY_STATE = 4;\nconst REWIND_STEP = 5; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  isForceMobileVersion,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n  isPreviewDisabled,\n  isSponsoredMessage,\n  timestamp,\n  handleSponsoredClick,\n  onClose,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  const videoRef = useRef<HTMLVideoElement>();\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n  const duration = videoRef.current?.duration || 0;\n  const isLooped = isGif || duration <= MAX_LOOP_DURATION;\n\n  const handleEnterFullscreen = useLastCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  });\n\n  const handleLeaveFullscreen = useLastCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  });\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const [, toggleControls, lockControls] = useControlsSignal();\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n  const lastMousePosition = useRef({ x: 0, y: 0 });\n\n  useEffect(() => {\n    const updateMousePosition = (e: MouseEvent | TouchEvent) => {\n      lastMousePosition.current = getPointerPosition(e);\n    };\n\n    window.addEventListener('mousemove', updateMousePosition);\n    window.addEventListener('touchmove', updateMousePosition);\n\n    return () => {\n      window.removeEventListener('mousemove', updateMousePosition);\n      window.removeEventListener('touchmove', updateMousePosition);\n    };\n  }, []);\n\n  const checkMousePositionAndToggleControls = useLastCallback((clientX: number, clientY: number) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (clientX <= bounds.left || clientX >= bounds.right\n      || clientY <= bounds.top || clientY >= bounds.bottom) {\n      if (!getIsSeeking()) {\n        toggleControls(false);\n      }\n    }\n  });\n\n  const handleVideoMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const handleVideoLeave = useLastCallback((e) => {\n    checkMousePositionAndToggleControls(e.clientX, e.clientY);\n  });\n\n  const handleSeekingChange = useLastCallback((isSeeking: boolean) => {\n    setIsSeeking(isSeeking);\n    if (!isSeeking) {\n      const { x, y } = lastMousePosition.current;\n      checkMousePositionAndToggleControls(x, y);\n    }\n  });\n\n  const {\n    isReady, isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const isUnsupported = useUnsupportedMedia(videoRef, undefined, !url);\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransitionDeprecated(\n    !isBuffered && !isUnsupported, undefined, undefined, 'slow',\n  );\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransitionDeprecated(\n    IS_IOS && !isPlaying && !shouldRenderSpinner && !isUnsupported, undefined, undefined, 'slow',\n  );\n\n  const [, setCurrentTime] = useCurrentTimeSignal();\n  const [, setIsVideoWaiting] = useVideoWaitingSignal();\n\n  useEffect(() => {\n    lockControls(shouldRenderSpinner);\n  }, [lockControls, shouldRenderSpinner]);\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen || isUnsupported) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted, isUnsupported]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  useEffect(() => {\n    if (!timestamp) return;\n    videoRef.current!.currentTime = timestamp;\n    setCurrentTime(timestamp);\n  }, [setCurrentTime, timestamp]);\n\n  const togglePlayState = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isSponsoredMessage) {\n      handleSponsoredClick?.(true);\n      onClose(e);\n    }\n    if (isClickDisabled) {\n      return;\n    }\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  });\n\n  useVideoCleanup(videoRef, bufferingHandlers);\n\n  const handleTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= MIN_READY_STATE) {\n      setIsVideoWaiting(false);\n      setCurrentTime(video.currentTime);\n    }\n    if (!isLooped && video.currentTime === video.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    }\n  });\n\n  const handleEnded = useLastCallback(() => {\n    if (isLooped) return;\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  });\n\n  const handleFullscreenChange = useLastCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  });\n\n  const handleSeek = useLastCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  });\n\n  const handleVolumeChange = useLastCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handlePlaybackRateChange = useLastCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  });\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const rewind = (dir: number) => {\n      if (!isFullscreen) return;\n      const video = videoRef.current!;\n      const newTime = clamp(video.currentTime + dir * REWIND_STEP, 0, video.duration);\n      if (Number.isFinite(newTime)) {\n        video.currentTime = newTime;\n      }\n    };\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isInPictureInPicture) return;\n      switch (e.key) {\n        case ' ':\n        case 'Enter':\n          e.preventDefault();\n          togglePlayState(e);\n          break;\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          e.preventDefault();\n          rewind(-1);\n          break;\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          e.preventDefault();\n          rewind(1);\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isFullscreen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const shouldToggleControls = !IS_TOUCH_ENV && !isForceMobileVersion;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={shouldToggleControls ? handleVideoMove : undefined}\n      onMouseLeave={shouldToggleControls ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isLooped}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onWaiting={() => setIsVideoWaiting(true)}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n          src={url}\n        />\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <Icon name=\"play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !isSponsoredMessage && !isUnsupported && (\n        <VideoPlayerControls\n          url={url}\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          isPreviewDisabled={isPreviewDisabled}\n          fileSize={fileSize}\n          duration={duration}\n          isReady={isReady}\n          posterSize={posterSize}\n          isForceMobileVersion={isForceMobileVersion}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n          onSeekingChange={handleSeekingChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type React from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiDimensions, ApiMessage, ApiSponsoredMessage,\n} from '../../api/types';\nimport type { MediaViewerOrigin, ThreadId } from '../../types';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport { MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION } from '../../config';\nimport {\n  selectIsMessageProtected, selectMessageTimestampableDuration, selectTabState,\n} from '../../global/selectors';\nimport { ARE_WEBCODECS_SUPPORTED } from '../../util/browser/globalEnvironment';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport getViewableMedia from './helpers/getViewableMedia';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport useThrottledCallback from '../../hooks/useThrottledCallback';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  item: MediaViewerItem;\n  isActive?: boolean;\n  withAnimation?: boolean;\n  isMoving?: boolean;\n  onClose: () => void;\n  onFooterClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: () => void;\n};\n\ntype StateProps = {\n  textMessage?: ApiMessage | ApiSponsoredMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  threadId?: ThreadId;\n  timestamp?: number;\n  maxTimestamp?: number;\n};\n\nconst ANIMATION_DURATION = 350;\nconst MOBILE_VERSION_CONTROL_WIDTH = 350;\nconst PLAYBACK_SAVE_INTERVAL = 1000;\n\nconst MediaViewerContent = ({\n  item,\n  isActive,\n  textMessage,\n  origin,\n  withAnimation,\n  isProtected,\n  volume,\n  playbackRate,\n  isMuted,\n  isHidden,\n  isMoving,\n  threadId,\n  timestamp,\n  maxTimestamp,\n  onClose,\n  onFooterClick,\n  handleSponsoredClick,\n}: OwnProps & StateProps) => {\n  const { updateLastPlaybackTimestamp } = getActions();\n\n  const lang = useOldLang();\n\n  const isAvatar = item.type === 'avatar';\n  const isSponsoredMessage = item.type === 'sponsoredMessage';\n  const { media } = getViewableMedia(item) || {};\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isLocal,\n    isVideoAvatar,\n    mediaSize,\n    loadProgress,\n  } = useMediaProps({\n    media, isAvatar, origin, delay: withAnimation ? ANIMATION_DURATION : false,\n  });\n\n  const [, toggleControls] = useControlsSignal();\n  const [getCurrentTime] = useCurrentTimeSignal();\n\n  const isOpen = Boolean(media);\n  const { isMobile } = useAppLayout();\n\n  const toggleControlsOnMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const updatePlaybackTimestamp = useThrottledCallback(() => {\n    if (!isActive || !textMessage || media?.mediaType !== 'video') return;\n    if (media.duration < MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION) return;\n\n    const message = 'id' in textMessage ? textMessage : undefined;\n    const currentTime = getCurrentTime();\n    if (!currentTime || !message || message.isInAlbum) return;\n\n    // Reset timestamp if we are close to the end of the video\n    const newTimestamp = media.duration - currentTime > PLAYBACK_SAVE_INTERVAL / 1000 ? currentTime : undefined;\n    updateLastPlaybackTimestamp({ chatId: message.chatId, messageId: message.id, timestamp: newTimestamp });\n  }, [getCurrentTime, isActive, media, textMessage], PLAYBACK_SAVE_INTERVAL);\n\n  useSignalEffect(updatePlaybackTimestamp, [getCurrentTime]);\n\n  if (!media) return undefined;\n\n  if (item.type === 'avatar') {\n    if (!isVideoAvatar) {\n      return (\n        <div key={media.id} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions!, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={media.id} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={media.id}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={mediaSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            isProtected={isProtected}\n            isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n            isSponsoredMessage={isSponsoredMessage}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        </div>\n      );\n    }\n  }\n\n  const textParts = textMessage && (textMessage.content.action?.type === 'suggestProfilePhoto'\n    ? lang('Conversation.SuggestedPhotoTitle')\n    : renderMessageText({\n      message: textMessage, maxTimestamp, threadId, forcePlayback: true, isForMediaViewer: true,\n    }));\n  const buttonText = textMessage && 'buttonText' in textMessage ? textMessage.buttonText : undefined;\n  const hasFooter = Boolean(textParts);\n  const posterSize = calculateMediaViewerDimensions(dimensions!, hasFooter, isVideo);\n  const isForceMobileVersion = isMobile || shouldForceMobileVersion(posterSize);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n      onMouseMove={isForceMobileVersion && !IS_TOUCH_ENV ? toggleControlsOnMove : undefined}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={media.id}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={posterSize}\n          loadProgress={loadProgress}\n          fileSize={mediaSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          noPlay={!isActive}\n          isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isForceMobileVersion={isForceMobileVersion}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n          isSponsoredMessage={isSponsoredMessage}\n          handleSponsoredClick={handleSponsoredClick}\n          timestamp={timestamp}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          buttonText={buttonText}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isForceMobileVersion={isForceMobileVersion}\n          isForVideo={isVideo && !isGif}\n          handleSponsoredClick={handleSponsoredClick}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { item }): StateProps => {\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n      origin,\n      timestamp,\n      threadId,\n    } = selectTabState(global).mediaViewer;\n    const message = item.type === 'message' ? item.message : undefined;\n    const sponsoredMessage = item.type === 'sponsoredMessage' ? item.message : undefined;\n    const textMessage = message || sponsoredMessage;\n\n    const maxTimestamp = message && selectMessageTimestampableDuration(global, message, true);\n\n    return {\n      origin,\n      textMessage,\n      isProtected: message && selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n      threadId,\n      timestamp,\n      maxTimestamp,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction shouldForceMobileVersion(posterSize?: { width: number; height: number }) {\n  if (!posterSize) return false;\n  return posterSize.width < MOBILE_VERSION_CONTROL_WIDTH;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\n\nimport type { MediaViewerOrigin, ThreadId } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { useSignalRef } from '../../hooks/useSignalRef';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n  isLoadingMoreMedia?: boolean;\n  isSynced?: boolean;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  chatId?: string;\n  threadId?: ThreadId;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  withAnimation?: boolean;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  getNextItem: (from: MediaViewerItem, direction: number) => MediaViewerItem | undefined;\n  selectItem: (item: MediaViewerItem) => void;\n  loadMoreItemsIfNeeded: (item: MediaViewerItem) => void;\n  onFooterClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: (isFromMedia?: boolean) => void;\n  onClose: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_SELECT_MEDIA = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: ReturnType<typeof animateNumber> | undefined;\nlet cancelZoomAnimation: ReturnType<typeof animateNumber> | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  item,\n  isVideo,\n  isGif,\n  isOpen,\n  withAnimation,\n  isHidden,\n  isLoadingMoreMedia,\n  isSynced,\n  loadMoreItemsIfNeeded,\n  getNextItem,\n  selectItem,\n  onClose,\n  onFooterClick,\n  handleSponsoredClick,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const activeSlideRef = useRef<HTMLDivElement>();\n  const leftSlideRef = useRef<HTMLDivElement>();\n  const rightSlideRef = useRef<HTMLDivElement>();\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const initialContentRectRef = useRef<DOMRect | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const [isActive, setIsActive] = useState(true);\n  const [getZoomChange] = useZoomChange();\n  const prevZoomChangeRef = useRef(getZoomChange());\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [getTransform, setTransform] = useSignal<Transform>({ x: 0, y: 0, scale: 1 });\n  const transformRef = useSignalRef(getTransform);\n  const [getActiveItem, setActiveItem] = useSignal<MediaViewerItem | undefined>(item);\n  const activeItemRef = useSignalRef(getActiveItem);\n  const isScaled = useDerivedState(() => getTransform().scale !== 1, [getTransform]);\n  const activeItem = useDerivedState(getActiveItem);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const [getControlsVisible, setControlsVisible, lockControls] = useControlsSignal();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const selectItemDebounced = useDebouncedCallback(selectItem, [selectItem], DEBOUNCE_SELECT_MEDIA, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n\n  const setIsActiveDebounced = useDebouncedCallback((value) => setIsActive(value), [], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = Boolean(isGif && !IS_IOS);\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!getControlsVisible());\n  });\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION);\n\n  useEffect(() => {\n    const { scale, x, y } = transformRef.current;\n    // Only update active media if slide is in default position\n    if (x === 0 && y === 0 && scale === 1) {\n      setActiveItem(item);\n    }\n  }, [item, setActiveItem, transformRef]);\n\n  useEffect(() => {\n    if (!isSynced || !activeItem || isLoadingMoreMedia) return;\n    loadMoreItemsIfNeeded(activeItem);\n  }, [activeItem, loadMoreItemsIfNeeded, isSynced, isLoadingMoreMedia]);\n\n  useLayoutEffect(() => {\n    const { x, y, scale } = getTransform();\n    lockControls(scale !== 1);\n    if (leftSlideRef.current) {\n      leftSlideRef.current.style.transform = getTransformStyle(-windowWidth + x - SLIDES_GAP);\n    }\n    if (activeSlideRef.current) {\n      activeSlideRef.current.style.transform = getTransformStyle(x, y, scale);\n    }\n    if (rightSlideRef.current) {\n      rightSlideRef.current.style.transform = getTransformStyle(windowWidth + x + SLIDES_GAP);\n    }\n  }, [getTransform, lockControls, windowWidth]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeItemRef.current === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const cActiveItem = activeItemRef.current;\n      if (cActiveItem === undefined) return false;\n      const nextItem = getNextItem(cActiveItem, direction);\n      if (nextItem !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        const transform = transformRef.current;\n        const x = transform.x + offset;\n        setIsActive(false);\n        setActiveItem(nextItem);\n        selectItemDebounced(nextItem);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (!withAnimation) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ): [Transform, boolean, boolean] => {\n      const initialContentRect = initialContentRectRef.current;\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const transform = transformRef.current;\n      const { y, scale } = transform;\n      let x = transform.x;\n      const absX = Math.abs(x);\n      const absY = Math.abs(y);\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const cActiveItem = activeItemRef.current;\n      const nextItem = cActiveItem && getNextItem(cActiveItem, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (nextItem !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        x += offset;\n        setActiveItem(nextItem);\n        selectItemDebounced(nextItem);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls, .VideoPlayerControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      withWheelDrag: true,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        const { x, y, scale } = transformRef.current;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRectRef.current = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const { x, y, scale } = transformRef.current;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > SWIPE_DIRECTION_THRESHOLD || absOffsetX / absOffsetY > SWIPE_DIRECTION_TOLERANCE) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            setIsActive(false);\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  },\n  [\n    activeItemRef,\n    clearSwipeDirectionDebounced,\n    clickXThreshold,\n    getNextItem,\n    isFullscreen,\n    isHidden,\n    onClose,\n    selectItemDebounced,\n    setActiveItem,\n    setIsActiveDebounced,\n    setTransform,\n    shouldCloseOnVideo,\n    transformRef,\n    windowHeight,\n    windowWidth,\n    withAnimation,\n  ]);\n\n  useEffect(() => {\n    const zoomChange = getZoomChange();\n    const hasZoomChanged = prevZoomChangeRef.current !== undefined\n      && prevZoomChangeRef.current !== zoomChange;\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    prevZoomChangeRef.current = zoomChange;\n    const { scale } = transformRef.current;\n    const dir = zoomChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [getZoomChange, isHidden, isFullscreen, transformRef]);\n\n  const [prevItem, nextItem] = useMemo(() => {\n    if (activeItem === undefined) return [undefined, undefined];\n    return [getNextItem(activeItem, -1), getNextItem(activeItem, 1)];\n  }, [activeItem, getNextItem]);\n\n  if (activeItem === undefined) return undefined;\n\n  const hasPrev = prevItem !== undefined;\n  const hasNext = nextItem !== undefined;\n  const isMoving = isMouseDown && isScaled;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      <div className=\"MediaViewerSlide\" ref={leftSlideRef}>\n        {hasPrev && !isScaled && !isResizing && (\n          <MediaViewerContent\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            item={prevItem}\n            onClose={onClose}\n            onFooterClick={onFooterClick}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n      >\n        <MediaViewerContent\n          item={activeItem}\n          withAnimation={withAnimation}\n          isActive={isActive}\n          isMoving={isMoving}\n          onClose={onClose}\n          onFooterClick={onFooterClick}\n          handleSponsoredClick={handleSponsoredClick}\n        />\n      </div>\n      <div className=\"MediaViewerSlide\" ref={rightSlideRef}>\n        {hasNext && !isScaled && !isResizing && (\n          <MediaViewerContent\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            item={nextItem}\n            onClose={onClose}\n            onFooterClick={onFooterClick}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        )}\n      </div>\n      {hasPrev && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getTransformStyle(x = 0, y = 0, scale = 1) {\n  return `translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)})`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu, .SeekLine',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiPeer } from '../../api/types';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport {\n  isChatChannel, isChatGroup,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  selectSender,\n} from '../../global/selectors';\nimport { formatMediaDateTime } from '../../util/dates/dateFormat';\nimport { isUserId } from '../../util/entities/ids';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n};\n\ntype StateProps = {\n  owner?: ApiPeer;\n};\n\nconst BULLET = '\\u2022';\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  owner,\n  item,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useLastCallback(() => {\n    closeMediaViewer();\n\n    if (item?.type !== 'message') return;\n\n    const message = item.message;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId: message.chatId, messageId: message.id });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId: message.chatId, messageId: message.id });\n    }\n  });\n\n  const lang = useOldLang();\n\n  const subtitle = useMemo(() => {\n    if (!item || item.type === 'standalone') return undefined;\n\n    const avatarOwner = item.type === 'avatar' ? item.avatarOwner : undefined;\n    const profilePhotos = item.type === 'avatar' ? item.profilePhotos : undefined;\n    const avatar = profilePhotos?.photos[item.mediaIndex!];\n    const isFallbackAvatar = avatar?.id === profilePhotos?.fallbackPhoto?.id;\n    const isPersonalAvatar = avatar?.id === profilePhotos?.personalPhoto?.id;\n    const date = item.type === 'message' ? item.message.date : avatar?.date;\n    if (!date) return undefined;\n\n    const formattedDate = formatMediaDateTime(lang, date * 1000, true);\n    const count = profilePhotos?.count\n      && (profilePhotos.count + (profilePhotos?.fallbackPhoto ? 1 : 0));\n    const currentIndex = item.mediaIndex! + 1 + (profilePhotos?.personalPhoto ? -1 : 0);\n    const countText = count && lang('Of', [currentIndex, count]);\n\n    const parts: string[] = [];\n    if (avatar) {\n      const chat = !isUserId(avatarOwner!.id) ? avatarOwner as ApiChat : undefined;\n      const isChannel = chat && isChatChannel(chat);\n      const isGroup = chat && isChatGroup(chat);\n      parts.push(lang(\n        isPersonalAvatar ? 'lng_mediaview_profile_photo_by_you'\n          : isFallbackAvatar ? 'lng_mediaview_profile_public_photo'\n            : isChannel ? 'lng_mediaview_channel_photo'\n              : isGroup ? 'lng_mediaview_group_photo' : 'lng_mediaview_profile_photo',\n      ));\n    }\n\n    if (countText && !isPersonalAvatar && !isFallbackAvatar) {\n      parts.push(countText);\n    }\n\n    parts.push(formattedDate);\n\n    return parts.join(` ${BULLET} `);\n  }, [item, lang]);\n\n  if (!owner) {\n    return undefined;\n  }\n\n  const senderTitle = getPeerTitle(lang, owner);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      <Avatar key={owner.id} size=\"medium\" peer={owner} />\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {subtitle}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { item }): StateProps => {\n    const message = item?.type === 'message' ? item.message : undefined;\n    const messageSender = message && selectSender(global, message);\n\n    const owner = item?.type === 'avatar' ? item.avatarOwner : messageSender;\n\n    return {\n      owner,\n    };\n  },\n)(SenderInfo);\n","import type React from '../../lib/teact/teact';\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPeer,\n  ApiPeerPhotos,\n  ApiPhoto,\n  ApiSponsoredMessage,\n} from '../../api/types';\nimport { type MediaViewerMedia, MediaViewerOrigin, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatMediaMessageIds, getMessagePaidMedia, isChatAdmin,\n} from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChatMediaSearch,\n  selectCurrentSharedMediaSearch,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerPhotos,\n  selectPerformanceSettingsValue,\n  selectScheduledMessage, selectSponsoredMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { isUserId } from '../../util/entities/ids';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport getViewableMedia, { getMediaViewerItem, type MediaViewerItem } from './helpers/getViewableMedia';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { exitPictureInPictureIfNeeded, usePictureInPictureSignal } from '../../hooks/usePictureInPicture';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Icon from '../common/icons/Icon';\nimport ReportAvatarModal from '../common/ReportAvatarModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  messageId?: number;\n  message?: ApiMessage;\n  collectedMessageIds?: number[];\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatar?: ApiPhoto;\n  avatarOwner?: ApiPeer;\n  profilePhotos?: ApiPeerPhotos;\n  chatMessages?: Record<number, ApiMessage>;\n  sponsoredMessage?: ApiSponsoredMessage;\n  standaloneMedia?: MediaViewerMedia[];\n  mediaIndex?: number;\n  isHidden?: boolean;\n  withAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  withDynamicLoading?: boolean;\n  isLoadingMoreMedia?: boolean;\n  isSynced?: boolean;\n};\n\nconst ANIMATION_DURATION = 250;\nconst AVATAR_LOAD_TRIGGER = 4;\n\nconst MediaViewer = ({\n  chatId,\n  threadId,\n  messageId,\n  message,\n  collectedMessageIds,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatar,\n  avatarOwner,\n  profilePhotos,\n  chatMessages,\n  sponsoredMessage,\n  standaloneMedia,\n  mediaIndex,\n  withAnimation,\n  isHidden,\n  shouldSkipHistoryAnimations,\n  withDynamicLoading,\n  isLoadingMoreMedia,\n  isSynced,\n}: StateProps) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n    searchChatMediaMessages,\n    loadMoreProfilePhotos,\n    clickSponsored,\n    openUrl,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || message || standaloneMedia || sponsoredMessage);\n  const { isMobile } = useAppLayout();\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const senderId = message?.senderId || avatarOwner?.id || message?.chatId;\n  const prevSenderId = usePreviousDeprecated<string | undefined>(senderId);\n  const headerAnimation = withAnimation ? 'slideFade' : 'none';\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  /* Controls */\n  const [isReportAvatarModalOpen, openReportAvatarModal, closeReportAvatarModal] = useFlag();\n\n  const currentItem = getMediaViewerItem({\n    message, avatarOwner, standaloneMedia, profilePhotos, mediaIndex, sponsoredMessage,\n  });\n  const { media, isSingle } = getViewableMedia(currentItem) || {};\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n  } = useMediaProps({\n    media, isAvatar: Boolean(avatarOwner), origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReportAvatar = (() => {\n    if (isChatWithSelf) return false;\n    if (currentItem?.type !== 'avatar' || !avatarOwner) return false;\n    const info = currentItem.profilePhotos;\n    if (media === info.personalPhoto) return false;\n    return true;\n  })();\n  const isVisible = !isHidden && isOpen;\n\n  const messageMediaIds = useMemo(() => {\n    return withDynamicLoading\n      ? collectedMessageIds\n      : getChatMediaMessageIds(chatMessages || {}, collectedMessageIds || [], isFromSharedMedia);\n  }, [chatMessages, collectedMessageIds, isFromSharedMedia, withDynamicLoading]);\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || animationKey.current === undefined)) {\n    animationKey.current = isSingle ? 0 : (messageId || mediaIndex);\n  }\n\n  const [getIsPictureInPicture] = usePictureInPictureSignal();\n\n  useEffect(() => {\n    if (!isOpen || getIsPictureInPicture()) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      stopPriorityPlayback();\n      enableDirectTextInput();\n    };\n  }, [isOpen, getIsPictureInPicture]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      requestMutation(() => {\n        document.body.classList.toggle('is-media-viewer-open', isOpen);\n      });\n    }\n  }, [isMobile, isOpen]);\n\n  const headerRef = useRef<HTMLDivElement>();\n  useElectronDrag(headerRef);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    mql.addEventListener('change', forceUpdate);\n\n    return () => {\n      mql.removeEventListener('change', forceUpdate);\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePreviousDeprecated<ApiMessage | undefined>(message);\n  const prevIsHidden = usePreviousDeprecated<boolean | undefined>(isHidden);\n  const prevOrigin = usePreviousDeprecated(origin);\n  const prevItem = usePreviousDeprecated(currentItem);\n  const prevBestImageData = usePreviousDeprecated(bestImageData);\n  const textParts = message ? renderMessageText({ message, forcePlayback: true, isForMediaViewer: true }) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevItem !== currentItem;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (shouldAnimateOpening || !prevItem)) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions!, isVideo, message, mediaIndex);\n    }\n\n    if (isGhostAnimation && !isOpen && prevItem) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage, prevItem?.mediaIndex);\n    }\n  }, [\n    bestImageData, dimensions, hasFooter, isGhostAnimation, isOpen, isVideo, message, origin,\n    prevBestImageData, prevItem, prevMessage, prevOrigin, shouldAnimateOpening, mediaIndex,\n  ]);\n\n  const handleClose = useLastCallback(() => closeMediaViewer());\n\n  const handleFooterClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (e.target instanceof HTMLElement && e.target.closest('a')) return; // Prevent closing on timestamp click\n\n    handleClose();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId });\n    }\n  });\n\n  const handleSponsoredClick = useLastCallback((isFromMedia?: boolean) => {\n    if (!sponsoredMessage || !chatId) return;\n\n    clickSponsored({ isMedia: isFromMedia, isFullscreen: true, randomId: sponsoredMessage.randomId });\n    openUrl({ url: sponsoredMessage.url });\n    closeMediaViewer();\n  });\n\n  const handleForward = useLastCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [messageId!],\n    });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const loadMoreItemsIfNeeded = useLastCallback((item?: MediaViewerItem) => {\n    if (!item || isLoadingMoreMedia) return;\n\n    if (item.type === 'avatar') {\n      const isNearEnd = item.mediaIndex >= item.profilePhotos.photos.length - AVATAR_LOAD_TRIGGER;\n      if (!isNearEnd) return;\n      loadMoreProfilePhotos({ peerId: item.avatarOwner.id });\n    }\n\n    if (item.type === 'message' && withDynamicLoading) {\n      searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: item.message.id });\n    }\n  });\n\n  const getNextItem = useLastCallback((from: MediaViewerItem, direction: number): MediaViewerItem | undefined => {\n    if (direction === 0 || isSingle) return undefined;\n\n    if (from.type === 'standalone') {\n      const { media: fromMedia, mediaIndex: fromMediaIndex } = from;\n      const nextIndex = fromMediaIndex + direction;\n      if (nextIndex >= 0 && nextIndex < fromMedia.length) {\n        return { type: 'standalone', media: fromMedia, mediaIndex: nextIndex };\n      }\n\n      return undefined;\n    }\n\n    if (from.type === 'avatar') {\n      const { avatarOwner: fromAvatarOwner, profilePhotos: fromProfilePhotos, mediaIndex: fromMediaIndex } = from;\n      const nextIndex = fromMediaIndex + direction;\n      if (nextIndex >= 0 && fromProfilePhotos && nextIndex < fromProfilePhotos.photos.length) {\n        return {\n          type: 'avatar',\n          avatarOwner: fromAvatarOwner,\n          profilePhotos: fromProfilePhotos,\n          mediaIndex: nextIndex,\n        };\n      }\n\n      return undefined;\n    }\n\n    if (from.type === 'sponsoredMessage') {\n      const { message: fromSponsoredMessage, mediaIndex: fromSponsoredMessageIndex } = from;\n      const nextIndex = fromSponsoredMessageIndex! + direction;\n      if (nextIndex >= 0 && fromSponsoredMessage) {\n        return { type: 'sponsoredMessage', message: fromSponsoredMessage, mediaIndex: nextIndex };\n      }\n\n      return undefined;\n    }\n\n    const { message: fromMessage, mediaIndex: fromMediaIndex } = from;\n\n    const paidMedia = getMessagePaidMedia(fromMessage);\n    if (paidMedia) {\n      const nextIndex = fromMediaIndex! + direction;\n\n      if (nextIndex >= 0 && nextIndex < paidMedia.extendedMedia.length) {\n        return { type: 'message', message: fromMessage, mediaIndex: nextIndex };\n      }\n    }\n\n    const index = messageMediaIds?.indexOf(fromMessage.id);\n    if (index === undefined) return undefined;\n    const nextIndex = index + direction;\n    const nextMessageId = messageMediaIds![nextIndex];\n    const nextMessage = chatMessages?.[nextMessageId];\n    if (nextMessage) {\n      return { type: 'message', message: nextMessage };\n    }\n\n    return undefined;\n  });\n\n  const openMediaViewerItem = useLastCallback((item?: MediaViewerItem) => {\n    if (!item) {\n      handleClose();\n      return;\n    }\n\n    const itemChatId = item.type === 'avatar'\n      ? item.avatarOwner.id : item.type === 'message'\n        ? item.message.chatId : undefined;\n    const itemMessageId = item.type === 'message' ? item.message.id : undefined;\n    const itemStandaloneMedia = item.type === 'standalone' ? item.media : undefined;\n\n    openMediaViewer({\n      origin: origin!,\n      chatId: itemChatId,\n      messageId: itemMessageId,\n      standaloneMedia: itemStandaloneMedia,\n      mediaIndex: item.mediaIndex,\n      isAvatarView: item.type === 'avatar',\n      withDynamicLoading,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  const handleBeforeDelete = useLastCallback(() => {\n    const mediaCount = profilePhotos?.photos.length\n      || standaloneMedia?.length || messageMediaIds?.length || 0;\n    if (mediaCount <= 1 || !currentItem) {\n      handleClose();\n      return;\n    }\n    // Before deleting, select previous media\n    const prevMedia = getNextItem(currentItem, -1);\n    if (prevMedia) {\n      openMediaViewerItem(prevMedia);\n      return;\n    }\n\n    if ((currentItem.type === 'avatar' && isUserId(currentItem.avatarOwner.id)) || currentItem.type === 'standalone') {\n      // Keep current item, it'll update when indexes shift\n      return;\n    }\n\n    handleClose();\n  });\n\n  const lang = useOldLang();\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined} ref={headerRef}>\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          <SenderInfo\n            key={media?.id}\n            item={currentItem}\n          />\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          item={currentItem}\n          canUpdateMedia={canUpdateMedia}\n          canReportAvatar={canReportAvatar}\n          onBeforeDelete={handleBeforeDelete}\n          onReportAvatar={openReportAvatarModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n        />\n        <ReportAvatarModal\n          isOpen={isReportAvatarModalOpen}\n          onClose={closeReportAvatarModal}\n          photo={avatar}\n          peerId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        item={currentItem}\n        loadMoreItemsIfNeeded={loadMoreItemsIfNeeded}\n        isLoadingMoreMedia={isLoadingMoreMedia}\n        isSynced={isSynced}\n        getNextItem={getNextItem}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        isVideo={isVideo}\n        withAnimation={withAnimation}\n        onClose={handleClose}\n        selectItem={openMediaViewerItem}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n        handleSponsoredClick={handleSponsoredClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      messageId,\n      origin,\n      isHidden,\n      withDynamicLoading,\n      standaloneMedia,\n      mediaIndex,\n      isAvatarView,\n      isSponsoredMessage,\n    } = mediaViewer;\n    const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n    const { currentUserId, isSynced } = global;\n    const isChatWithSelf = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    if (isAvatarView) {\n      const peer = selectPeer(global, chatId!);\n      let canUpdateMedia = false;\n      if (peer) {\n        canUpdateMedia = isUserId(peer.id) ? peer.id === currentUserId : isChatAdmin(peer as ApiChat);\n      }\n\n      const profilePhotos = selectPeerPhotos(global, chatId!);\n\n      return {\n        profilePhotos,\n        avatar: profilePhotos?.photos[mediaIndex!],\n        avatarOwner: peer,\n        isLoadingMoreMedia: profilePhotos?.isLoading,\n        isChatWithSelf,\n        canUpdateMedia,\n        withAnimation,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n        standaloneMedia,\n        mediaIndex,\n        isSynced,\n      };\n    }\n\n    let message: ApiMessage | undefined;\n    if (chatId && messageId) {\n      if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n        message = selectScheduledMessage(global, chatId, messageId);\n      } else {\n        message = selectChatMessage(global, chatId, messageId);\n      }\n    }\n\n    let sponsoredMessage: ApiSponsoredMessage | undefined;\n    if (isSponsoredMessage && chatId) {\n      if (origin === MediaViewerOrigin.SponsoredMessage) {\n        sponsoredMessage = selectSponsoredMessage(global, chatId);\n      }\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (chatId) {\n      if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n        chatMessages = selectChatScheduledMessages(global, chatId);\n      } else {\n        chatMessages = selectChatMessages(global, chatId);\n      }\n    }\n\n    let isLoadingMoreMedia = false;\n    const isOriginInline = origin === MediaViewerOrigin.Inline;\n    const isOriginAlbum = origin === MediaViewerOrigin.Album;\n    let collectedMessageIds: number[] | undefined;\n\n    if (chatId && threadId && messageId) {\n      if (withDynamicLoading && (isOriginInline || isOriginAlbum)) {\n        const currentSearch = selectCurrentChatMediaSearch(global);\n        isLoadingMoreMedia = Boolean(currentSearch?.isLoading);\n        const { foundIds } = (currentSearch?.currentSegment) || {};\n        collectedMessageIds = foundIds;\n      } else if (origin === MediaViewerOrigin.SharedMedia) {\n        const currentSearch = selectCurrentSharedMediaSearch(global);\n        const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n        collectedMessageIds = foundIds;\n      } else if (isOriginInline || isOriginAlbum) {\n        const outlyingList = selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n        collectedMessageIds = outlyingList || selectListedIds(global, chatId, threadId);\n      }\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      sponsoredMessage,\n      collectedMessageIds,\n      withAnimation,\n      isHidden,\n      shouldSkipHistoryAnimations,\n      withDynamicLoading,\n      standaloneMedia,\n      mediaIndex,\n      isLoadingMoreMedia,\n      isSynced,\n    };\n  },\n)(MediaViewer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CdTfL4f7\",\"fadeIn\":\"MyeHARy0\",\"closing\":\"EZbKn_M3\",\"peer\":\"kW0xpExG\",\"name\":\"BDZrSTO_\",\"name_hasUnreadStory\":\"OoUm5AUZ\",\"nameHasUnreadStory\":\"OoUm5AUZ\",\"hidden\":\"lnVtxMZI\",\"contextMenu\":\"N1sagA0s\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"bu_hGbaa\",\"fullSize\":\"W9A8SEMl\",\"backdrop\":\"OFh6u50Q\",\"captionBackdrop\":\"Jd1DYS6Y\",\"backdropNonInteractive\":\"xe67dhtF\",\"close\":\"Mye8Dwxa\",\"wrapper\":\"gLHHo5k8\",\"slideAnimation\":\"GJVwqV9e\",\"slideAnimationToActive\":\"_Yn4SWUB\",\"content\":\"hGCH03qc\",\"slideAnimationFromActive\":\"ZecqXqKy\",\"storyHeader\":\"e7HHuS1g\",\"composer\":\"FXineBYO\",\"caption\":\"RKedwa0I\",\"captionGradient\":\"sHNAfxzf\",\"media\":\"PVZ8TOWS\",\"mediaPreview\":\"lQfkulvp\",\"contentInner\":\"Wi0DXPH2\",\"name\":\"Ka1CGfzq\",\"slide\":\"urTtSsk9\",\"mobileSlide\":\"AjXOHOgE\",\"slidePreview\":\"Sef28wEh\",\"activeSlide\":\"uAlXNXJN\",\"slideInner\":\"g8ypsnnC\",\"mediaWrapper\":\"YiuvOPgT\",\"forward\":\"pGKsAszF\",\"storyIndicators\":\"jGDd2sza\",\"sender\":\"eMYhXF_X\",\"senderInfoTransition\":\"PXnfXZur\",\"senderInfo\":\"WpyVfrsc\",\"senderMeta\":\"jmKI_lhC\",\"senderName\":\"H1uod43o\",\"storyMetaRow\":\"zimpR8Hz\",\"storyMeta\":\"hGTnZuar\",\"closeButton\":\"WlLsjJ2Z\",\"actions\":\"GrsJNw3y\",\"active\":\"q756IpZB\",\"visibilityButton\":\"prxptFFf\",\"visibilityButtonSelf\":\"_MVsZpgB\",\"button\":\"TkphaPyQ\",\"buttonMenu\":\"K0_xAdzf\",\"captionInner\":\"D_5mWNmi\",\"captionContent\":\"ilyTRZtw\",\"captionText\":\"hmFA5qb1\",\"hasOverflow\":\"e1gyTmKe\",\"expanded\":\"HIMnUViv\",\"animate\":\"CvnxnCxN\",\"withShowMore\":\"Vq8pl_kQ\",\"captionShowMore\":\"bM5rlQtM\",\"navigate\":\"nZ30pf4g\",\"prev\":\"SXpRZiax\",\"next\":\"twOBFwUE\",\"modal\":\"nLPOogqS\",\"thumbnail\":\"MnNC7VHS\",\"ghost\":\"fME2l_yv\",\"ghost2\":\"TYicp2_K\",\"ghostImage\":\"HjoURJRK\",\"forwardHeader\":\"JJFtefb9\",\"clickable\":\"BsqMBS2I\",\"headerTitle\":\"G8OgmMDJ\",\"forwardInfo\":\"_M8CgT7s\",\"fromPeer\":\"nJr8QgYX\"};","import type { IDimensions } from '../../../types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport fastBlur from '../../../lib/fastBlur';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getPeerStoryHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport stopEvent from '../../../util/stopEvent';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport storyRibbonStyles from '../StoryRibbon.module.scss';\nimport styles from '../StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 200;\nconst OFFSET_BOTTOM = 3.5 * REM;\nconst MOBILE_OFFSET = 0.5 * REM;\nconst MOBILE_WIDTH = 600;\n\nexport function animateOpening(\n  userId: string,\n  origin: StoryViewerOrigin,\n  thumb: string,\n  bestImageData: string | undefined,\n  dimensions: IDimensions,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, userId);\n  if (!fromImage) {\n    return;\n  }\n  const { width: windowWidth, height: windowHeight } = windowSize.get();\n  let { width: toWidth, height: toHeight } = dimensions;\n\n  const isMobile = windowWidth <= MOBILE_WIDTH;\n\n  if (isMobile) {\n    toWidth = windowWidth - 2 * MOBILE_OFFSET;\n    toHeight = windowHeight - OFFSET_BOTTOM - 2 * MOBILE_OFFSET;\n\n    const safeAreaBottom = getComputedStyle(document.documentElement).getPropertyValue('--safe-area-bottom');\n    if (safeAreaBottom) {\n      toHeight -= parseFloat(safeAreaBottom);\n    }\n  }\n\n  const toLeft = isMobile ? MOBILE_OFFSET : (windowWidth - toWidth) / 2;\n  const toTop = isMobile ? MOBILE_OFFSET : (windowHeight - (toHeight + OFFSET_BOTTOM)) / 2;\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || thumb, !bestImageData);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: '',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  userId: string,\n  origin: StoryViewerOrigin,\n  bestImageData: string,\n) {\n  const { mediaEl: toImage } = getNodes(origin, userId);\n\n  const fromImage = document.getElementById('StoryViewer')!.querySelector<HTMLImageElement>(\n    `.${styles.mobileSlide} .${styles.media}, .${styles.activeSlide} .${styles.media}`,\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: toTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  const toTranslateX = (toLeft + toWidth / 2) - (fromLeft + fromWidth / 2);\n  const toTranslateY = (toTop + toHeight / 2) - (fromTop + fromHeight / 2);\n  const toScaleX = toWidth / fromWidth;\n  const toScaleY = toHeight / fromHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData);\n    applyStyles(ghost, {\n      top: `${fromTop}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromHeight}px`,\n    });\n\n    const ghost2 = createGhost(toImage.src, undefined, true);\n    const ghost2Top = (fromTop + fromHeight / 2) - fromWidth / 2;\n    applyStyles(ghost2, {\n      top: `${ghost2Top}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromWidth}px`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.appendChild(ghost2);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX}, ${toScaleY})`,\n      });\n\n      applyStyles(ghost2, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX})`,\n        opacity: '1',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n\n          if (document.body.contains(ghost2)) {\n            document.body.removeChild(ghost2);\n          }\n\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nfunction createGhost(source: string, hasBlur = false, isGhost2 = false) {\n  const ghost = document.createElement('div');\n  ghost.classList.add(!isGhost2 ? styles.ghost : styles.ghost2);\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n  img.classList.add(styles.ghostImage);\n\n  if (hasBlur) {\n    const canvas = document.createElement('canvas');\n    canvas.classList.add(styles.thumbnail);\n    img.onload = () => {\n      const ctx = canvas.getContext('2d', { alpha: false })!;\n      const {\n        width,\n        height,\n      } = img;\n\n      requestMutation(() => {\n        canvas.width = width;\n        canvas.height = height;\n\n        if (IS_CANVAS_FILTER_SUPPORTED) {\n          ctx.filter = `blur(${RADIUS}px)`;\n        }\n\n        ctx.drawImage(img, -RADIUS * 2, -RADIUS * 2, width + RADIUS * 4, height + RADIUS * 4);\n\n        if (!IS_CANVAS_FILTER_SUPPORTED) {\n          fastBlur(ctx, 0, 0, width, height, RADIUS, ITERATIONS);\n        }\n      });\n    };\n    img.src = source;\n    ghost.appendChild(canvas);\n  } else {\n    img.src = source;\n    ghost.appendChild(img);\n  }\n\n  return ghost;\n}\n\nfunction getNodes(origin: StoryViewerOrigin, userId: string) {\n  let containerSelector;\n  const mediaSelector = `#${getPeerStoryHtmlId(userId)}`;\n\n  switch (origin) {\n    case StoryViewerOrigin.StoryRibbon:\n      containerSelector = `#LeftColumn .${storyRibbonStyles.root}`;\n      break;\n    case StoryViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo';\n      break;\n    case StoryViewerOrigin.ChatList:\n      containerSelector = '#LeftColumn .chat-list';\n      break;\n    case StoryViewerOrigin.SearchResult:\n      containerSelector = '#LeftColumn .LeftSearch--container';\n      break;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement>(`${mediaSelector} img`);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n","import type { IDimensions } from '../../../types';\n\nimport { roundToNearestEven } from '../../../util/math';\n\nexport const BASE_STORY_WIDTH = 720;\nexport const BASE_STORY_HEIGHT = 1280;\nconst BASE_SCREEN_WIDTH = 1200;\nconst BASE_SCREEN_HEIGHT = 800;\nconst BASE_ACTIVE_SLIDE_WIDTH = 405;\nconst BASE_ACTIVE_SLIDE_HEIGHT = 720;\nconst BASE_SLIDE_WIDTH = 135;\nconst BASE_SLIDE_HEIGHT = 240;\nconst BASE_GAP_WIDTH = 40;\n\nexport function calculateSlideSizes(windowWidth: number, windowHeight: number): {\n  activeSlide: IDimensions;\n  slide: IDimensions;\n  scale: number;\n  toActiveScale: number;\n  fromActiveScale: number;\n} {\n  const scale = calculateScale(BASE_SCREEN_WIDTH, BASE_SCREEN_HEIGHT, windowWidth, windowHeight);\n\n  const activeSlideWidth = roundToNearestEven(BASE_ACTIVE_SLIDE_WIDTH * scale);\n  const slideWidth = roundToNearestEven(BASE_SLIDE_WIDTH * scale);\n  // Avoid fractional values to prevent blurry text\n  return {\n    activeSlide: {\n      width: activeSlideWidth,\n      height: roundToNearestEven(BASE_ACTIVE_SLIDE_HEIGHT * scale),\n    },\n    slide: {\n      width: slideWidth,\n      height: roundToNearestEven(BASE_SLIDE_HEIGHT * scale),\n    },\n    scale,\n    toActiveScale: activeSlideWidth / slideWidth,\n    fromActiveScale: slideWidth / activeSlideWidth,\n  };\n}\n\nexport function calculateOffsetX({\n  scale,\n  slideAmount,\n  isActiveSlideSize,\n  isMoveThroughActiveSlide,\n  isBackward,\n}: {\n  scale: number;\n  slideAmount: number;\n  isActiveSlideSize: boolean;\n  isMoveThroughActiveSlide?: boolean;\n  isBackward: boolean;\n}) {\n  const mainOffset = BASE_GAP_WIDTH + (isActiveSlideSize ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH);\n  const additionalOffset = (Math.abs(slideAmount) - 1)\n    * ((isMoveThroughActiveSlide ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH) + BASE_GAP_WIDTH);\n  const totalOffset = roundToNearestEven((mainOffset + additionalOffset) * scale);\n\n  return isBackward ? -totalOffset : totalOffset;\n}\n\nfunction calculateScale(baseWidth: number, baseHeight: number, newWidth: number, newHeight: number) {\n  const widthScale = newWidth / baseWidth;\n  const heightScale = newHeight / baseHeight;\n\n  return Math.min(widthScale, heightScale);\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport { calculateSlideSizes } from '../helpers/dimensions';\n\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nexport default function useSlideSizes() {\n  const { width: windowWidth, height: windowHeight } = useWindowSize();\n  return useMemo(() => calculateSlideSizes(windowWidth, windowHeight), [windowWidth, windowHeight]);\n}\n","import type { ApiTypeStory } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStoryMediaHash, hasMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nexport default function useStoryProps(\n  story?: ApiTypeStory, isCurrentUserPremium = false, isDropdownMenuOpen = false,\n) {\n  const isLoadedStory = story && 'content' in story;\n  const isDeletedStory = story && 'isDeleted' in story;\n  const hasText = isLoadedStory ? hasMessageText(story) : false;\n  const hasForwardInfo = isLoadedStory && Boolean(story.forwardInfo);\n\n  let thumbnail: string | undefined;\n  if (isLoadedStory) {\n    if (story.content.photo?.thumbnail) {\n      thumbnail = story.content.photo.thumbnail.dataUri;\n    }\n    if (story.content.video?.thumbnail?.dataUri) {\n      thumbnail = story.content.video.thumbnail.dataUri;\n    }\n  }\n\n  const previewHash = isLoadedStory ? getStoryMediaHash(story) : undefined;\n  const previewBlobUrl = useMedia(previewHash);\n  const isVideo = Boolean(isLoadedStory && story.content.video);\n  const noSound = isLoadedStory && story.content.video?.noSound;\n  const fullMediaHash = isLoadedStory ? getStoryMediaHash(story, 'full') : undefined;\n  const fullMediaData = useMedia(fullMediaHash, !story, isVideo ? ApiMediaFormat.Progressive : ApiMediaFormat.BlobUrl);\n  const altMediaHash = isVideo && isLoadedStory ? getStoryMediaHash(story, 'full', true) : undefined;\n  const altMediaData = useMedia(altMediaHash, !story, ApiMediaFormat.Progressive);\n\n  const hasFullData = Boolean(fullMediaData || altMediaData);\n  const bestImageData = isVideo ? previewBlobUrl : fullMediaData || previewBlobUrl;\n  const hasThumb = !previewBlobUrl && !hasFullData;\n\n  const canDownload = isCurrentUserPremium && isLoadedStory && !story.noForwards;\n  const downloadHash = isLoadedStory ? getStoryMediaHash(story, 'download') : undefined;\n  const downloadMediaData = useMedia(downloadHash, !canDownload && !isDropdownMenuOpen);\n\n  return {\n    isLoadedStory,\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewHash,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaHash,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    bestImageData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GrE47IXS\",\"closeButton\":\"NlWSF1pA\",\"stealthIcon\":\"qKi5jsGM\",\"title\":\"BFctFGoT\",\"description\":\"fZIJH4IG\",\"listItem\":\"RGD70uBt\",\"icon\":\"HCYfPccW\",\"button\":\"AM_sxoXP\",\"subtitle\":\"L8oRQyKb\"};","import { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStealthMode } from '../../api/types';\n\nimport { selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport TextTimer from '../ui/TextTimer';\n\nimport styles from './StealthModeModal.module.scss';\n\ntype StateProps = {\n  isOpen?: boolean;\n  stealthMode?: ApiStealthMode;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StealthModeModal = ({ isOpen, stealthMode, isCurrentUserPremium }: StateProps) => {\n  const {\n    toggleStealthModal,\n    activateStealthMode,\n    showNotification,\n    openPremiumModal,\n  } = getActions();\n  const [isOnCooldown, setIsOnCooldown] = useState(false);\n\n  useEffect(() => {\n    if (!stealthMode) return;\n    const serverTime = getServerTime();\n    if (stealthMode.cooldownUntil && stealthMode.cooldownUntil > serverTime) {\n      setIsOnCooldown(true);\n    }\n  }, [stealthMode, isOpen]);\n\n  const lang = useOldLang();\n\n  const handleTimerEnds = useLastCallback(() => {\n    setIsOnCooldown(false);\n  });\n\n  const handleClose = useLastCallback(() => {\n    toggleStealthModal({ isOpen: false });\n  });\n\n  const handleActivate = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({ initialSection: 'stories' });\n      return;\n    }\n\n    activateStealthMode();\n    showNotification({\n      title: lang('StealthModeOn'),\n      message: lang('StealthModeOnHint'),\n    });\n    toggleStealthModal({ isOpen: false });\n  });\n\n  return (\n    <Modal\n      className=\"component-theme-dark\"\n      contentClassName={styles.root}\n      isOpen={isOpen}\n      isSlim\n      onClose={handleClose}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className={styles.stealthIcon}>\n        <Icon name=\"eye-crossed-outline\" />\n      </div>\n      <div className={styles.title}>{lang('StealthMode')}</div>\n      <div className={styles.description}>\n        {lang(isCurrentUserPremium ? 'StealthModeHint' : 'StealthModePremiumHint')}\n      </div>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<Icon name=\"stealth-past\" className={styles.icon} />}\n      >\n        <span className=\"title\">{lang('HideRecentViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideRecentViewsDescription')}</span>\n      </ListItem>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<Icon name=\"stealth-future\" className={styles.icon} aria-hidden />}\n      >\n        <span className=\"title\">{lang('HideNextViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideNextViewsDescription')}</span>\n      </ListItem>\n      <Button\n        className={styles.button}\n        size=\"smaller\"\n        disabled={isOnCooldown}\n        isShiny={!isCurrentUserPremium}\n        withPremiumGradient={!isCurrentUserPremium}\n        onClick={handleActivate}\n      >\n        {!isCurrentUserPremium ? lang('UnlockStealthMode')\n          : isOnCooldown\n            ? (<TextTimer langKey=\"AvailableIn\" endsAt={stealthMode!.cooldownUntil!} onEnd={handleTimerEnds} />)\n            : lang('EnableStealthMode')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const tabState = selectTabState(global);\n\n  return {\n    isOpen: tabState.storyViewer?.isStealthModalOpen,\n    stealthMode: global.stories.stealthMode,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StealthModeModal));\n","import { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ninterface OwnProps {\n  isOpen: boolean;\n  story?: ApiTypeStory;\n  onClose: NoneToVoidFunction;\n}\n\nfunction StoryDeleteConfirmModal({\n  isOpen, story, onClose,\n}: OwnProps) {\n  const { deleteStory, openNextStory } = getActions();\n\n  const lang = useOldLang();\n\n  const handleDeleteStoryClick = useCallback(() => {\n    if (!story) {\n      return;\n    }\n\n    openNextStory();\n    deleteStory({ peerId: story.peerId, storyId: story.id });\n    onClose();\n  }, [onClose, story]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('DeleteStoryTitle')}\n      text={lang('DeleteStorySubtitle')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteStoryClick}\n      confirmIsDestructive\n      className=\"component-theme-dark\"\n    />\n  );\n}\n\nexport default memo(StoryDeleteConfirmModal);\n","import { memo, useMemo, useState } from '../../../lib/teact/teact';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\n\ninterface OwnProps {\n  id: string;\n  contactListIds?: string[];\n  currentUserId: string;\n  selectedIds?: string[];\n  lockedIds?: string[];\n  onSelect: (selectedIds: string[]) => void;\n}\n\nfunction AllowDenyList({\n  id,\n  contactListIds,\n  currentUserId,\n  selectedIds,\n  lockedIds,\n  onSelect,\n}: OwnProps) {\n  const lang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((userId) => userId !== currentUserId);\n    return unique(filterPeersByQuery({ ids: [...selectedIds || [], ...contactIds], query: searchQuery, type: 'user' }));\n  }, [contactListIds, currentUserId, searchQuery, selectedIds]);\n\n  return (\n    <PeerPicker\n      key={id}\n      itemIds={displayedIds}\n      selectedIds={selectedIds ?? MEMO_EMPTY_ARRAY}\n      lockedSelectedIds={lockedIds}\n      filterValue={searchQuery}\n      filterPlaceholder={lang('Search')}\n      searchInputId={`${id}-picker-search`}\n      isSearchable\n      withDefaultPadding\n      forceShowSelf\n      onSelectedIdsChange={onSelect}\n      onFilterChange={setSearchQuery}\n      allowMultiple\n      withStatus\n      itemInputType=\"checkbox\"\n    />\n  );\n}\n\nexport default memo(AllowDenyList);\n","// extracted by mini-css-extract-plugin\nexport default {\"buttonHolder\":\"BDK_pgpt\",\"active\":\"N8ujSwlC\"};","import {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nimport styles from './CloseFriends.module.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  currentUserId: string;\n  usersById: Record<string, ApiUser>;\n  contactListIds?: string[];\n  onClose: NoneToVoidFunction;\n};\n\nfunction CloseFriends({\n  isActive, contactListIds, usersById, currentUserId, onClose,\n}: OwnProps) {\n  const { saveCloseFriends } = getActions();\n\n  const lang = useOldLang();\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>([]);\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((id) => id !== currentUserId);\n    return unique(filterPeersByQuery({ ids: [...closeFriendIds, ...contactIds], query: searchQuery, type: 'user' }));\n  }, [closeFriendIds, contactListIds, currentUserId, searchQuery]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (!prevIsActive && isActive) {\n      setIsSubmitShown(false);\n      setNewSelectedContactIds(closeFriendIds);\n    }\n  }, [isActive, closeFriendIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useLastCallback(() => {\n    saveCloseFriends({ userIds: newSelectedContactIds });\n    onClose();\n  });\n\n  return (\n    <>\n      <PeerPicker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        searchInputId=\"close-friends-picker-search\"\n        isSearchable\n        withDefaultPadding\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n        allowMultiple\n        withStatus\n        itemInputType=\"checkbox\"\n      />\n\n      <div className={buildClassName(styles.buttonHolder, isSubmitShown && styles.active)}>\n        <FloatingActionButton\n          isShown={isSubmitShown}\n          onClick={handleSubmit}\n          ariaLabel={lang('Save')}\n        >\n          <Icon name=\"check\" />\n        </FloatingActionButton>\n      </div>\n    </>\n  );\n}\n\nexport default memo(CloseFriends);\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"hz7SomkK\",\"header\":\"NV6Rt2g9\",\"closeButton\":\"SN1GFS6L\",\"headerTitle\":\"gi0Y6Ns6\",\"content\":\"sTaVDkiD\",\"section\":\"eUiuPoEC\",\"title\":\"iPPiw9DI\",\"list\":\"OUP1Ss0W\",\"option\":\"JL33Sa3b\",\"checked\":\"qVPo_cVL\",\"input\":\"zsDaUk0i\",\"icon\":\"AfYCVlys\",\"action\":\"njMeBBwY\",\"optionContent\":\"TUAAnG2w\",\"footer\":\"r24Qz2bf\",\"info\":\"ljeRVBOm\",\"submit\":\"RwNLN_rH\"};","import type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiPrivacySettings, ApiStory, ApiUser, PrivacyVisibility,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectPeerStory, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getHours } from '../../util/dates/units';\nimport stopEvent from '../../util/stopEvent';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Switcher from '../ui/Switcher';\nimport Transition from '../ui/Transition';\nimport AllowDenyList from './privacy/AllowDenyList';\nimport CloseFriends from './privacy/CloseFriends';\n\nimport styles from './StorySettings.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  onClose?: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  story?: ApiStory;\n  visibility?: ApiPrivacySettings;\n  contactListIds?: string[];\n  usersById: Record<string, ApiUser>;\n  currentUserId: string;\n}\n\ntype PrivacyAction = 'blockUserIds' | 'closeFriends' | 'blockContactUserIds' | 'allowUserIds';\n\ninterface PrivacyOption {\n  name: string;\n  value: PrivacyVisibility;\n  color: [string, string];\n  icon: IconName;\n  actions?: PrivacyAction;\n}\n\nconst OPTIONS: PrivacyOption[] = [{\n  name: 'StoryPrivacyOptionEveryone',\n  value: 'everybody',\n  color: ['#50ABFF', '#007AFF'],\n  icon: 'channel-filled',\n  actions: 'blockUserIds',\n}, {\n  name: 'StoryPrivacyOptionContacts',\n  value: 'contacts',\n  color: ['#C36EFF', '#8B60FA'],\n  icon: 'user-filled',\n  actions: 'blockContactUserIds',\n}, {\n  name: 'StoryPrivacyOptionCloseFriends',\n  value: 'closeFriends',\n  color: ['#88D93A', '#30B73B'],\n  icon: 'favorite-filled',\n  actions: 'closeFriends',\n}, {\n  name: 'StoryPrivacyOptionSelectedContacts',\n  value: 'nobody',\n  color: ['#FFB743', '#F69A36'],\n  icon: 'group-filled',\n  actions: 'allowUserIds',\n}];\n\nenum Screens {\n  privacy,\n  allowList,\n  closeFriends,\n  denyList,\n}\n\nfunction StorySettings({\n  isOpen,\n  story,\n  visibility,\n  contactListIds,\n  usersById,\n  currentUserId,\n  onClose,\n}: OwnProps & StateProps) {\n  const { editStoryPrivacy, toggleStoryInProfile } = getActions();\n\n  const lang = useOldLang();\n  const [isOpenModal, openModal, closeModal] = useFlag(false);\n  const [privacy, setPrivacy] = useState<ApiPrivacySettings | undefined>(visibility);\n  const [isPinned, setIsPinned] = useState(story?.isInProfile);\n  const [activeKey, setActiveKey] = useState<Screens>(Screens.privacy);\n  const [editingBlockingCategory, setEditingBlockingCategory] = useState<PrivacyVisibility>('everybody');\n  const isBackButton = activeKey !== Screens.privacy;\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const lockedIds = useMemo(() => {\n    if (activeKey === Screens.allowList\n      && (!privacy?.allowUserIds?.length || privacy.allowUserIds[0] === currentUserId)\n    ) {\n      return [currentUserId];\n    }\n\n    return undefined;\n  }, [activeKey, currentUserId, privacy?.allowUserIds]);\n\n  const selectedBlockedIds = useMemo(() => {\n    if (editingBlockingCategory !== privacy?.visibility) return [];\n    return privacy?.blockUserIds || [];\n  }, [editingBlockingCategory, privacy?.blockUserIds, privacy?.visibility]);\n\n  const handleAllowUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      allowUserIds: newIds?.length ? newIds?.filter((id) => id !== currentUserId) : [currentUserId],\n    });\n  });\n\n  const handleDenyUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      blockUserIds: newIds,\n      visibility: editingBlockingCategory,\n    });\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      setActiveKey(Screens.privacy);\n      openModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    setPrivacy(visibility);\n  }, [visibility]);\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (activeKey === Screens.privacy) {\n      closeModal();\n      return;\n    }\n\n    setActiveKey(Screens.privacy);\n  });\n\n  function handleVisibilityChange(newVisibility: PrivacyVisibility) {\n    setPrivacy({\n      ...privacy!,\n      visibility: newVisibility,\n    });\n  }\n\n  function handleActionClick(e: React.MouseEvent<HTMLDivElement>, action: PrivacyAction) {\n    stopEvent(e);\n\n    switch (action) {\n      case 'closeFriends':\n        setActiveKey(Screens.closeFriends);\n        break;\n      case 'allowUserIds':\n        setActiveKey(Screens.allowList);\n        break;\n      case 'blockUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('everybody');\n        break;\n      case 'blockContactUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('contacts');\n        break;\n    }\n  }\n\n  const handleIsPinnedToggle = useLastCallback(() => {\n    setIsPinned(!isPinned);\n  });\n\n  // console.warn(privacy?.visibility, story?.visibility, OPTIONS);\n\n  const handleSubmit = useLastCallback(() => {\n    editStoryPrivacy({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      privacy: privacy!,\n    });\n    if (story!.isInProfile !== isPinned) {\n      toggleStoryInProfile({ peerId: story!.peerId, storyId: story!.id, isInProfile: isPinned });\n    }\n    closeModal();\n  });\n\n  function renderActionName(action: PrivacyAction) {\n    if (action === 'closeFriends') {\n      if (closeFriendIds.length === 0) {\n        return lang('StoryPrivacyOptionCloseFriendsDetail');\n      }\n\n      if (closeFriendIds.length === 1) {\n        return getPeerTitle(lang, usersById[closeFriendIds[0]]);\n      }\n\n      return lang('StoryPrivacyOptionPeople', closeFriendIds.length, 'i');\n    }\n\n    if ((action === 'blockUserIds' && privacy?.visibility === 'everybody')\n      || (action === 'blockContactUserIds' && privacy?.visibility === 'contacts')) {\n      if (!privacy?.blockUserIds?.length) {\n        return lang('StoryPrivacyOptionContactsDetail');\n      }\n\n      if (privacy.blockUserIds.length === 1) {\n        return lang('StoryPrivacyOptionExcludePerson', getUserFullName(usersById[privacy.blockUserIds[0]]));\n      }\n\n      return lang('StoryPrivacyOptionExcludePeople', privacy.blockUserIds.length, 'i');\n    }\n\n    if (!privacy?.allowUserIds || privacy.allowUserIds.length === 0) {\n      return lang('StoryPrivacyOptionSelectedContactsDetail');\n    }\n\n    if (privacy.allowUserIds.length === 1) {\n      return getUserFullName(usersById[privacy.allowUserIds[0]]);\n    }\n\n    return lang('StoryPrivacyOptionPeople', privacy.allowUserIds.length, 'i');\n  }\n\n  function renderHeaderContent() {\n    switch (activeKey) {\n      case Screens.privacy:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertEditTitle')}</h3>;\n      case Screens.allowList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertSelectContactsTitle')}</h3>;\n      case Screens.closeFriends:\n        return <h3 className={styles.headerTitle}>{lang('CloseFriends')}</h3>;\n      case Screens.denyList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertExcludedContactsTitle')}</h3>;\n    }\n  }\n\n  function renderContent(isActive: boolean) {\n    switch (activeKey) {\n      case Screens.privacy:\n        return renderPrivacyList();\n      case Screens.closeFriends:\n        return (\n          <CloseFriends\n            key=\"close-friends\"\n            isActive={isActive}\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            usersById={usersById}\n            onClose={handleCloseButtonClick}\n          />\n        );\n      case Screens.denyList:\n        return (\n          <AllowDenyList\n            key=\"deny-list\"\n            id=\"deny-list\"\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            selectedIds={selectedBlockedIds}\n            onSelect={handleDenyUserIdsChange}\n          />\n        );\n      case Screens.allowList:\n        return (\n          <AllowDenyList\n            key=\"allow-list\"\n            id=\"allow-list\"\n            contactListIds={contactListIds}\n            lockedIds={lockedIds}\n            currentUserId={currentUserId}\n            selectedIds={privacy?.allowUserIds}\n            onSelect={handleAllowUserIdsChange}\n          />\n        );\n    }\n  }\n\n  function renderPrivacyList() {\n    const storyLifeTime = story ? getHours(story.expireDate - story.date) : 0;\n\n    return (\n      <>\n        <div className={styles.section}>\n          <h3 className={styles.title}>{lang('StoryPrivacyAlertSubtitleProfile')}</h3>\n          <div className={styles.list}>\n            {OPTIONS.map((option) => (\n              <label\n                key={option.value}\n                className={buildClassName(styles.option, option.value === privacy?.visibility && styles.checked)}\n              >\n                <input\n                  type=\"radio\"\n                  name=\"story_privacy\"\n                  className={styles.input}\n                  value={option.value}\n                  checked={option.value === privacy?.visibility}\n                  onChange={() => handleVisibilityChange(option.value)}\n                  teactExperimentControlled\n                />\n                <span\n                  className={styles.icon}\n                  style={`--color-from: ${option.color[0]}; --color-to: ${option.color[1]}`}\n                >\n                  <Icon name={option.icon} />\n                </span>\n                <div className={styles.optionContent}>\n                  <span className={buildClassName(styles.option_name)}>{lang(option.name)}</span>\n                  {option.actions && (\n                    <div\n                      tabIndex={0}\n                      role=\"button\"\n                      className={styles.action}\n                      aria-label={lang('Edit')}\n                      onClick={(e) => { handleActionClick(e, option.actions!); }}\n                    >\n                      <span className={styles.actionInner}>{renderActionName(option.actions)}</span>\n                      <Icon name=\"next\" />\n                    </div>\n                  )}\n                </div>\n              </label>\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <ListItem ripple onClick={handleIsPinnedToggle}>\n            <span>{lang('StoryKeep')}</span>\n            <Switcher\n              id=\"group-notifications\"\n              label={lang('StoryKeep')}\n              checked={isPinned}\n              inactive\n            />\n          </ListItem>\n        </div>\n        <div className={styles.footer}>\n          <div className={styles.info}>{lang('StoryKeepInfo', storyLifeTime)}</div>\n          <div className={styles.submit}>\n            <Button onClick={handleSubmit}>{lang('StoryPrivacyButtonSave')}</Button>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpenModal}\n      className={buildClassName(styles.modal, 'component-theme-dark')}\n      onClose={closeModal}\n      noBackdrop\n      onCloseAnimationEnd={onClose}\n    >\n      <div className={styles.header}>\n        <Button\n          className={buildClassName(styles.closeButton, 'close-button')}\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleCloseButtonClick}\n          ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n        >\n          <div className={buildClassName('animated-close-icon', isBackButton && 'state-back')} />\n        </Button>\n        <Transition name=\"slideFade\" activeKey={activeKey}>\n          {renderHeaderContent()}\n        </Transition>\n      </div>\n      <Transition\n        activeKey={activeKey}\n        name=\"slideFade\"\n        slideClassName=\"ChatOrUserPicker_slide\"\n        className={styles.content}\n      >\n        {renderContent}\n      </Transition>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    storyViewer: {\n      storyId, peerId,\n    },\n  } = selectTabState(global);\n  const story = (peerId && storyId)\n    ? selectPeerStory(global, peerId, storyId)\n    : undefined;\n\n  return {\n    story: story && 'content' in story ? story : undefined,\n    visibility: story && 'visibility' in story ? story.visibility : undefined,\n    contactListIds: global.contactList?.userIds,\n    usersById: global.users.byId,\n    currentUserId: global.currentUserId!,\n  };\n})(StorySettings));\n","export const PRIMARY_VIDEO_MIME = 'video/mp4; codecs=hvc1.1.6.L63.00';\nexport const SECONDARY_VIDEO_MIME = 'video/mp4; codecs=avc1.64001E';\n","import { ApiMediaFormat } from '../api/types';\n\nimport { callApi } from '../api/gramjs';\n\nconst MB = 1024 * 1024;\nconst DEFAULT_PART_SIZE = 0.25 * MB;\nconst MAX_END_TO_CACHE = 5 * MB - 1; // We only cache the first 2 MB of each file\n\nconst bufferCache = new Map<string, ArrayBuffer>();\nconst sizeCache = new Map<string, number>();\nconst pendingRequests = new Map<string, Promise<{ arrayBuffer?: ArrayBuffer; fullSize?: number } | undefined>>();\n\nexport async function* makeProgressiveLoader(\n  url: string,\n  start = 0,\n  chunkSize = DEFAULT_PART_SIZE,\n): AsyncGenerator<ArrayBuffer, void, undefined> {\n  const match = url.match(/fileSize=(\\d+)/);\n  let fileSize;\n  if (match) {\n    fileSize = match && Number(match[1]);\n  } else {\n    fileSize = sizeCache.get(url);\n  }\n\n  while (true) {\n    if (fileSize && start >= fileSize) return;\n\n    let end = start + chunkSize - 1;\n    if (fileSize && end > fileSize) {\n      end = fileSize - 1;\n    }\n\n    // Check if we have the chunk in memory\n    const cacheKey = `${url}:${start}-${end}`;\n    let arrayBuffer = bufferCache.get(cacheKey);\n\n    if (!arrayBuffer) {\n      let request = pendingRequests.get(cacheKey);\n      if (!request) {\n        request = callApi('downloadMedia', {\n          mediaFormat: ApiMediaFormat.Progressive,\n          url,\n          start,\n          end,\n        });\n\n        pendingRequests.set(cacheKey, request);\n      }\n\n      const result = await request.finally(() => {\n        pendingRequests.delete(cacheKey);\n      });\n\n      if (!result?.arrayBuffer) return;\n\n      // If fileSize is not yet defined, retrieve it from the first chunk's response\n      if (result.fullSize && !fileSize) {\n        fileSize = result.fullSize;\n        sizeCache.set(url, result.fullSize);\n      }\n\n      // Store the chunk in memory\n      arrayBuffer = result.arrayBuffer;\n\n      // Cache the first 2 MB of each file\n      if (end <= MAX_END_TO_CACHE) {\n        bufferCache.set(cacheKey, result.arrayBuffer);\n      }\n    }\n\n    // Yield the chunk data\n    yield arrayBuffer;\n\n    start = end + 1;\n  }\n}\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect } from '../lib/teact/teact';\n\nimport { DEBUG } from '../config';\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport { applyStyles } from '../util/animation';\nimport unloadVideo from '../util/browser/unloadVideo';\nimport { IS_SAFARI } from '../util/browser/windowEnvironment';\nimport { makeProgressiveLoader } from '../util/progressiveLoader';\n\nconst VIDEO_REVEAL_DELAY = 100;\n\nexport function useStreaming(videoRef: ElementRef<HTMLVideoElement>, url?: string, mimeType?: string) {\n  useEffect(() => {\n    if (!url || !videoRef.current) return undefined;\n    const MediaSourceClass = getMediaSource();\n    const video = videoRef.current;\n\n    if (!IS_SAFARI || !mimeType || !MediaSourceClass?.isTypeSupported(mimeType)) {\n      return undefined;\n    }\n    const mediaSource = new MediaSourceClass();\n\n    function revealVideo() {\n      requestMutation(() => {\n        video.style.display = 'block';\n        setTimeout(() => {\n          requestMutation(() => {\n            applyStyles(video, { opacity: '1' });\n          });\n        }, VIDEO_REVEAL_DELAY);\n      });\n    }\n\n    function onSourceOpen() {\n      if (!url || !mimeType) return;\n\n      const sourceBuffer = mediaSource.addSourceBuffer(mimeType);\n      const loader = makeProgressiveLoader(url);\n\n      function onUpdateEnded() {\n        loader.next()\n          .then(({\n            value,\n            done,\n          }) => {\n            if (mediaSource.readyState !== 'open') return;\n            if (done) {\n              endOfStream(mediaSource);\n              return;\n            }\n            appendBuffer(sourceBuffer, value);\n          });\n      }\n\n      sourceBuffer.addEventListener('updateend', onUpdateEnded);\n\n      loader.next()\n        .then(({\n          value,\n          done,\n        }) => {\n          if (done || mediaSource.readyState !== 'open') return;\n          revealVideo();\n          appendBuffer(sourceBuffer, value);\n        });\n    }\n\n    mediaSource.addEventListener('sourceopen', onSourceOpen, { once: true });\n\n    requestMutation(() => {\n      applyStyles(video, {\n        display: 'none',\n        opacity: '0',\n      });\n      video.src = URL.createObjectURL(mediaSource);\n    });\n\n    return () => {\n      requestMutation(() => {\n        const src = video.src;\n        unloadVideo(video);\n        mediaSource.removeEventListener('sourceopen', onSourceOpen);\n        if (mediaSource.readyState === 'open') {\n          endOfStream(mediaSource);\n        }\n        URL.revokeObjectURL(src);\n      });\n    };\n  }, [mimeType, url, videoRef]);\n\n  return checkIfStreamingSupported(mimeType);\n}\n\nexport function checkIfStreamingSupported(mimeType?: string) {\n  if (!IS_SAFARI || !mimeType) return false;\n  return Boolean(getMediaSource()?.isTypeSupported(mimeType));\n}\n\nfunction appendBuffer(sourceBuffer: SourceBuffer, buffer: ArrayBuffer) {\n  try {\n    sourceBuffer.appendBuffer(buffer);\n  } catch (error) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.warn('[Stream] failed to append buffer', error);\n    }\n  }\n}\n\nfunction endOfStream(mediaSource: MediaSource) {\n  try {\n    mediaSource.endOfStream();\n  } catch (error) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.warn('[Stream] failed to end stream', error);\n    }\n  }\n}\n\nfunction getMediaSource(): typeof MediaSource | undefined {\n  if ('ManagedMediaSource' in window) {\n    // @ts-ignore\n    return ManagedMediaSource;\n  }\n  if ('MediaSource' in window) {\n    return MediaSource;\n  }\n  return undefined;\n}\n","import { useEffect } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStoryMediaHash } from '../../../global/helpers';\nimport { selectPeerStories } from '../../../global/selectors';\nimport unloadVideo from '../../../util/browser/unloadVideo';\nimport { preloadImage } from '../../../util/files';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { getProgressiveUrl } from '../../../util/mediaLoader';\nimport { makeProgressiveLoader } from '../../../util/progressiveLoader';\nimport { pause } from '../../../util/schedulers';\nimport { PRIMARY_VIDEO_MIME } from '../helpers/videoFormats';\n\nimport { checkIfStreamingSupported } from '../../../hooks/useStreaming';\n\nconst preloadedStories: Record<string, Set<number>> = {};\nconst PEER_STORIES_FOR_PRELOAD = 5;\nconst PROGRESSIVE_PRELOAD_DURATION = 1000;\nconst STREAM_PRELOAD_SIZE = 1024 * 1024 * 2; // 2 MB\n\nconst FIRST_PRELOAD_DELAY = 1000;\nconst canPreload = pause(FIRST_PRELOAD_DELAY);\n\ntype MediaHash = { hash: string; format: ApiMediaFormat; isStream?: boolean };\n\nfunction useStoryPreloader(peerIds: string[]): void;\nfunction useStoryPreloader(peerId?: string, aroundStoryId?: number): void;\nfunction useStoryPreloader(peerId?: string | string[], aroundStoryId?: number) {\n  useEffect(() => {\n    if (peerId === undefined) return;\n\n    const preloadHashes = async (mediaHashes: Array<MediaHash>) => {\n      await canPreload;\n      mediaHashes.forEach(({ hash, format, isStream }) => {\n        if (isStream) {\n          preloadStream(hash);\n          return;\n        }\n        mediaLoader.fetch(\n          hash,\n          format,\n        )\n          .then((result) => {\n            if (!result) return;\n\n            if (format === ApiMediaFormat.Progressive) {\n              preloadProgressive(result);\n            }\n            if (format === ApiMediaFormat.BlobUrl) {\n              preloadImage(result);\n            }\n          });\n      });\n    };\n\n    const peerIds = Array.isArray(peerId) ? peerId : [peerId];\n\n    peerIds.forEach((id) => {\n      const storyId = aroundStoryId || getGlobal().stories.byPeerId[id]?.orderedIds?.[0];\n      if (!storyId) return;\n      preloadHashes(getPreloadMediaHashes(id, storyId));\n    });\n  }, [aroundStoryId, peerId]);\n}\n\nfunction findIdsAroundCurrentId<T>(ids: T[], currentId: T, aroundAmount: number): T[] {\n  const currentIndex = ids.indexOf(currentId);\n  const start = Math.max(currentIndex - aroundAmount, 0);\n  const end = Math.min(currentIndex + aroundAmount, ids.length);\n  return ids.slice(start, end);\n}\n\nfunction getPreloadMediaHashes(peerId: string, storyId: number) {\n  const peerStories = selectPeerStories(getGlobal(), peerId);\n  if (!peerStories || !peerStories.orderedIds?.length) {\n    return [];\n  }\n\n  const preloadIds = findIdsAroundCurrentId(peerStories.orderedIds, storyId, PEER_STORIES_FOR_PRELOAD);\n\n  const mediaHashes: Array<MediaHash> = [];\n  preloadIds.forEach((currentStoryId) => {\n    if (preloadedStories[peerId]?.has(currentStoryId)) {\n      return;\n    }\n\n    const story = peerStories.byId[currentStoryId];\n    if (!story || !('content' in story)) {\n      return;\n    }\n\n    const isVideo = Boolean(story.content.video);\n\n    // Media\n    mediaHashes.push({\n      hash: getStoryMediaHash(story, 'full'),\n      format: isVideo ? ApiMediaFormat.Progressive : ApiMediaFormat.BlobUrl,\n      isStream: isVideo && checkIfStreamingSupported(PRIMARY_VIDEO_MIME),\n    });\n    // Thumbnail\n    mediaHashes.push({ hash: getStoryMediaHash(story), format: ApiMediaFormat.BlobUrl });\n    if (story.content.altVideos) {\n      mediaHashes.push({\n        hash: getStoryMediaHash(story, 'full', true)!,\n        format: ApiMediaFormat.Progressive,\n      });\n    }\n\n    preloadedStories[peerId] = (preloadedStories[peerId] || new Set()).add(currentStoryId);\n  });\n\n  return mediaHashes;\n}\n\nfunction preloadProgressive(url: string) {\n  const head = document.head;\n  const video = document.createElement('video');\n  video.preload = 'auto';\n  video.src = url;\n  video.muted = true;\n  video.autoplay = true;\n  video.disableRemotePlayback = true;\n  video.style.display = 'none';\n  head.appendChild(video);\n  video.load();\n  setTimeout(() => {\n    unloadVideo(video);\n    head.removeChild(video);\n  }, PROGRESSIVE_PRELOAD_DURATION);\n}\n\nasync function preloadStream(hash: string) {\n  const loader = makeProgressiveLoader(getProgressiveUrl(hash));\n  let cachedSize = 0;\n  for await (const chunk of loader) {\n    cachedSize += chunk.byteLength;\n    if (cachedSize >= STREAM_PRELOAD_SIZE) {\n      break;\n    }\n  }\n}\n\nexport default useStoryPreloader;\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStoryForwardInfo,\n  ApiTypeStory,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport { selectPeer, selectPeerStory } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\nimport { renderTextWithEntities } from '../helpers/renderTextWithEntities';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../icons/Icon';\nimport PeerColorWrapper from '../PeerColorWrapper';\nimport EmojiIconBackground from './EmojiIconBackground';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  forwardInfo: ApiStoryForwardInfo;\n  className?: string;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  story?: ApiTypeStory;\n};\n\nconst EmbeddedStoryForward: FC<OwnProps & StateProps> = ({\n  className,\n  forwardInfo,\n  sender,\n  story,\n}) => {\n  const { openStoryViewer, loadPeerStoriesByIds, openChat } = getActions();\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (!story && forwardInfo.fromPeerId && forwardInfo.storyId) {\n      loadPeerStoriesByIds({\n        peerId: forwardInfo.fromPeerId,\n        storyIds: [forwardInfo.storyId],\n      });\n    }\n  }, [forwardInfo, story]);\n\n  const senderTitle = sender ? getPeerTitle(lang, sender) : forwardInfo.fromName;\n\n  const openOriginalStory = useLastCallback(() => {\n    const { fromPeerId, storyId } = forwardInfo;\n    if (!fromPeerId) return;\n\n    const isStoryReady = story && !('isDeleted' in story && story.isDeleted);\n\n    if (isStoryReady) {\n      openStoryViewer({\n        peerId: fromPeerId,\n        storyId,\n        isSingleStory: true,\n      });\n    } else {\n      openChat({ id: fromPeerId });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(openOriginalStory);\n\n  function renderTextContent() {\n    if (story && 'content' in story && story.content.text) {\n      return (\n        <p className=\"embedded-text-wrapper\">\n          {renderTextWithEntities(story.content.text)}\n        </p>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSender() {\n    if (!sender || !senderTitle) {\n      return undefined;\n    }\n\n    const icon: IconName | undefined = !isUserId(sender.id) ? 'channel-filled' : 'user-filled';\n\n    return (\n      <>\n        {icon && <Icon name={icon} className=\"embedded-chat-icon\" />}\n        {senderTitle && renderText(senderTitle)}\n      </>\n    );\n  }\n\n  return (\n    <PeerColorWrapper\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        getPeerColorClass(sender, true, true),\n      )}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {sender?.color?.backgroundEmojiId && (\n        <EmojiIconBackground\n          emojiDocumentId={sender.color.backgroundEmojiId}\n          className=\"EmbeddedMessage--background-icons\"\n        />\n      )}\n      <div className=\"message-text\">\n        {renderTextContent()}\n        <div className=\"message-title\">\n          {renderSender()}\n        </div>\n      </div>\n    </PeerColorWrapper>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { forwardInfo }): StateProps => {\n    const sender = forwardInfo.fromPeerId ? selectPeer(global, forwardInfo.fromPeerId) : undefined;\n    const story = forwardInfo.storyId && forwardInfo.fromPeerId\n      ? selectPeerStory(global, forwardInfo.fromPeerId, forwardInfo.storyId) : undefined;\n    return {\n      sender,\n      story,\n    };\n  },\n)(EmbeddedStoryForward));\n","import {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { requestForcedReflow, requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../util/buildClassName';\nimport calcTextLineHeightAndCount from '../../util/element/calcTextLineHeightAndCount';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport EmbeddedStoryForward from '../common/embedded/EmbeddedStoryForward';\nimport MessageText from '../common/MessageText';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  story: ApiStory;\n  isExpanded: boolean;\n  className?: string;\n  onExpand: NoneToVoidFunction;\n  onFold?: NoneToVoidFunction;\n}\n\nconst EXPAND_ANIMATION_DURATION_MS = 400;\nconst LINES_TO_SHOW = 3;\n\nfunction StoryCaption({\n  story, isExpanded, className, onExpand, onFold,\n}: OwnProps) {\n  const lang = useOldLang();\n  const ref = useRef<HTMLDivElement>();\n  const contentRef = useRef<HTMLDivElement>();\n  const textRef = useRef<HTMLDivElement>();\n  const showMoreButtonRef = useRef<HTMLDivElement>();\n  const renderingStory = useCurrentOrPrev(story, true);\n\n  const caption = renderingStory?.content.text;\n\n  const [hasOverflow, setHasOverflow] = useState(false);\n  const prevIsExpanded = usePrevDuringAnimation(isExpanded || undefined, EXPAND_ANIMATION_DURATION_MS);\n  const isInExpandedState = isExpanded || prevIsExpanded;\n\n  useEffect(() => {\n    requestMutation(() => {\n      if (!contentRef.current) {\n        return;\n      }\n\n      if (isExpanded) {\n        addExtraClass(contentRef.current, styles.animate);\n      } else {\n        removeExtraClass(contentRef.current, styles.animate);\n      }\n    });\n  }, [isExpanded]);\n\n  const canExpand = hasOverflow && !isInExpandedState;\n  const { shouldRender: shouldRenderShowMore, transitionClassNames } = useShowTransitionDeprecated(\n    canExpand, undefined, true, 'slow', true,\n  );\n\n  // Setup gradient to clip caption before button\n  useLayoutEffect(() => {\n    requestMeasure(() => {\n      const container = contentRef.current;\n      const button = showMoreButtonRef.current;\n      if (!container || !button) {\n        return;\n      }\n\n      const { offsetWidth } = button;\n\n      requestMutation(() => {\n        container.style.setProperty('--expand-button-width', `${offsetWidth}px`);\n      });\n    });\n  }, [shouldRenderShowMore, lang]);\n\n  useLayoutEffect(() => {\n    requestForcedReflow(() => {\n      if (!contentRef.current || !textRef.current) {\n        return undefined;\n      }\n\n      const container = contentRef.current;\n      const textContainer = textRef.current;\n\n      const textOffsetTop = textContainer.offsetTop;\n      const { lineHeight, totalLines } = calcTextLineHeightAndCount(textContainer);\n      const isOverflowing = totalLines > LINES_TO_SHOW;\n      const overflowShift = textOffsetTop + lineHeight * LINES_TO_SHOW;\n\n      return () => {\n        if (isOverflowing) {\n          addExtraClass(container, styles.hasOverflow);\n          setHasOverflow(true);\n        }\n\n        container.style.setProperty('--_overflow-shift', `${overflowShift}px`);\n      };\n    });\n  }, [caption]);\n\n  useEffect(() => {\n    if (!isExpanded) {\n      ref.current?.scrollTo({ top: 0 });\n    }\n  }, [isExpanded]);\n\n  const fullClassName = buildClassName(\n    styles.captionContent,\n    isInExpandedState && styles.expanded,\n    shouldRenderShowMore && styles.withShowMore,\n  );\n\n  return (\n    <div className={buildClassName(styles.caption, className)}>\n      <div\n        ref={contentRef}\n        className={fullClassName}\n        role={canExpand ? 'button' : undefined}\n        onClick={canExpand ? onExpand : onFold}\n      >\n        <div\n          ref={ref}\n          className={buildClassName(styles.captionInner, 'allow-selection', 'custom-scroll')}\n        >\n          {renderingStory?.forwardInfo && (\n            <EmbeddedStoryForward\n              forwardInfo={renderingStory.forwardInfo}\n              className={styles.forwardInfo}\n            />\n          )}\n          {renderingStory && (\n            <div ref={textRef} className={styles.captionText}>\n              <MessageText\n                messageOrStory={renderingStory}\n                withTranslucentThumbs\n                forcePlayback\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      {shouldRenderShowMore && (\n        <div\n          ref={showMoreButtonRef}\n          className={buildClassName(styles.captionShowMore, transitionClassNames)}\n          onClick={onExpand}\n        >\n          {lang('Story.CaptionShowMore')}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(StoryCaption);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YVD19vOP\",\"viewInfo\":\"cknL5COh\",\"interactive\":\"pJAyeGkG\",\"avatars\":\"Vz_VtJ16\",\"spacer\":\"kKoeDk3Z\",\"reactionCount\":\"sf3u_6Vh\",\"reactionCountHeart\":\"Er2XKRqi\",\"footerItem\":\"vJRk_UUk\",\"views\":\"nIv3YAnZ\",\"viewIcon\":\"WyBiNM6e\",\"reactionButton\":\"lpDXVIuf\",\"reactionHeart\":\"twgMDT1y\"};","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { HEART_REACTION } from '../../config';\nimport {\n  getReactionKey, getStoryKey, isSameReaction,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport ReactionAnimatedEmoji from '../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../ui/Button';\n\nimport styles from './StoryFooter.module.scss';\n\ntype OwnProps = {\n  story: ApiStory;\n  className?: string;\n};\n\nconst StoryFooter = ({\n  story,\n  className,\n}: OwnProps) => {\n  const { openStoryViewModal, openForwardMenu, sendStoryReaction } = getActions();\n  const lang = useOldLang();\n\n  const {\n    views, isOut, peerId, id: storyId, sentReaction,\n  } = story;\n  const { viewsCount, forwardsCount, reactionsCount } = views || {};\n  const isChannel = !isUserId(peerId);\n\n  const isSentStoryReactionHeart = sentReaction && isSameReaction(sentReaction, HEART_REACTION);\n\n  const canForward = Boolean(\n    (isOut || isChannel)\n    && story.isPublic\n    && !story.noForwards,\n  );\n\n  const containerId = getStoryKey(peerId, storyId);\n\n  const recentViewers = useMemo(() => {\n    const { users: { byId: usersById } } = getGlobal();\n\n    const recentViewerIds = views && 'recentViewerIds' in views ? views.recentViewerIds : undefined;\n    if (!recentViewerIds) return undefined;\n\n    return recentViewerIds.map((id) => usersById[id]).filter(Boolean);\n  }, [views]);\n\n  const handleOpenStoryViewModal = useLastCallback(() => {\n    openStoryViewModal({ storyId });\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleLikeStory = useLastCallback(() => {\n    const reaction = sentReaction ? undefined : HEART_REACTION;\n    sendStoryReaction({\n      peerId,\n      storyId,\n      containerId,\n      reaction,\n    });\n  });\n\n  if (!viewsCount) {\n    return (\n      <div className={buildClassName(styles.root, className)}>\n        {lang('NobodyViewed')}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        className,\n      )}\n    >\n      <div\n        className={buildClassName(styles.viewInfo, !isChannel && styles.interactive)}\n        onClick={!isChannel ? handleOpenStoryViewModal : undefined}\n      >\n        {Boolean(recentViewers?.length) && (\n          <AvatarList\n            size=\"small\"\n            peers={recentViewers}\n            className={styles.avatars}\n          />\n        )}\n\n        {isChannel ? (\n          <span className={styles.views}>\n            <Icon name=\"channelviews\" className={styles.viewIcon} />\n            {viewsCount}\n          </span>\n        ) : (\n          <span className={styles.views}>{lang('Views', viewsCount, 'i')}</span>\n        )}\n        {Boolean(reactionsCount) && !isChannel && (\n          <span className={styles.reactionCount}>\n            <Icon name=\"heart\" className={styles.reactionCountHeart} />\n            {reactionsCount}\n          </span>\n        )}\n      </div>\n      <div className={styles.spacer} />\n      {canForward && (\n        <Button\n          color=\"translucent\"\n          size=\"smaller\"\n          round\n          onClick={handleForwardClick}\n          ariaLabel={lang('Forward')}\n          className={styles.footerItem}\n        >\n          <Icon name=\"forward\" />\n        </Button>\n      )}\n      {isChannel && (\n        <>\n          {Boolean(forwardsCount) && (\n            <div className={styles.footerItem}>\n              <Button\n                round\n                color=\"translucent\"\n                size=\"smaller\"\n                nonInteractive\n                ariaLabel={lang('PublicShares')}\n              >\n                <Icon name=\"loop\" />\n              </Button>\n              <span>{forwardsCount}</span>\n            </div>\n          )}\n          <div className={styles.footerItem}>\n            <Button\n              round\n              className={styles.reactionButton}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleLikeStory}\n              ariaLabel={lang('AccDescrLike')}\n            >\n              {sentReaction && (\n                <ReactionAnimatedEmoji\n                  key={getReactionKey(sentReaction)}\n                  containerId={containerId}\n                  reaction={sentReaction}\n                  withEffectOnly={isSentStoryReactionHeart}\n                />\n              )}\n              {(!sentReaction || isSentStoryReactionHeart) && (\n                <Icon\n                  name={isSentStoryReactionHeart ? 'heart' : 'heart-outline'}\n                  className={buildClassName(isSentStoryReactionHeart && styles.reactionHeart)}\n                />\n              )}\n            </Button>\n            {Boolean(reactionsCount) && (<span>{reactionsCount}</span>)}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StoryFooter);\n","import type React from '../../lib/teact/teact';\nimport {\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './StoryProgress.module.scss';\n\ninterface OwnProps {\n  isActive: boolean;\n  isViewed: boolean;\n  isVideo?: boolean;\n  duration?: number;\n  isPaused?: boolean;\n  onImageComplete: NoneToVoidFunction;\n}\n\nconst DEFAULT_STORY_DURATION_S = 6;\n\nfunction StoryProgress({\n  isActive, isViewed, isVideo, duration = DEFAULT_STORY_DURATION_S, isPaused, onImageComplete,\n}: OwnProps) {\n  const handleAnimationEnd = useLastCallback((event: React.AnimationEvent<HTMLElement>) => {\n    if (!isVideo && event.animationName === styles.progress) {\n      onImageComplete();\n    }\n  });\n\n  const classNames = buildClassName(\n    styles.root,\n    isViewed && styles.viewed,\n    isActive && styles.active,\n    isPaused && styles.paused,\n  );\n\n  return (\n    <span\n      className={classNames}\n      aria-hidden\n    >\n      {isActive && (\n        <i style={`--progress-duration: ${duration}s`} className={styles.inner} onAnimationEnd={handleAnimationEnd} />\n      )}\n    </span>\n  );\n}\n\nexport default memo(StoryProgress);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c1fbGgcx\",\"viewed\":\"xwOKghO2\",\"active\":\"ZuByYcIx\",\"inner\":\"qyBCpJct\",\"progress\":\"XY98E7VM\",\"paused\":\"n9V6B7hP\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMediaAreaChannelPost,\n  ApiPeer, ApiStealthMode, ApiStory, ApiTypeStory,\n} from '../../api/types';\nimport type { IDimensions } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { EDITABLE_STORY_INPUT_CSS_SELECTOR, EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { isChatChannel } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  selectChat,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPaidMessagesStars,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { IS_SAFARI } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatMediaDuration, formatRelativePastTime } from '../../util/dates/dateFormat';\nimport download from '../../util/download';\nimport { isUserId } from '../../util/entities/ids';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { round } from '../../util/math';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\nimport { BASE_STORY_HEIGHT, BASE_STORY_WIDTH } from './helpers/dimensions';\nimport { PRIMARY_VIDEO_MIME, SECONDARY_VIDEO_MIME } from './helpers/videoFormats';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout, { getIsMobile } from '../../hooks/useAppLayout';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport { useStreaming } from '../../hooks/useStreaming';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useStoryPreloader from './hooks/useStoryPreloader';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Avatar from '../common/Avatar';\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\nimport Transition from '../ui/Transition';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\nimport StoryCaption from './StoryCaption';\nimport StoryFooter from './StoryFooter';\nimport StoryProgress from './StoryProgress';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peerId: string;\n  storyId: number;\n  dimensions: IDimensions;\n\n  isDeleteModalOpen?: boolean;\n  isPrivateStories?: boolean;\n  isArchivedStories?: boolean;\n  isSingleStory?: boolean;\n  getIsAnimating: Signal<boolean>;\n  onDelete: (story: ApiTypeStory) => void;\n  onClose: NoneToVoidFunction;\n  onReport: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peer: ApiPeer;\n  forwardSender?: ApiPeer;\n  fromPeer?: ApiPeer;\n  story?: ApiTypeStory;\n  isMuted: boolean;\n  orderedIds?: number[];\n  shouldForcePause?: boolean;\n  storyChangelogUserId?: string;\n  viewersExpirePeriod: number;\n  isChatExist?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  isCurrentUserPremium?: boolean;\n  stealthMode: ApiStealthMode;\n  withHeaderAnimation?: boolean;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n}\n\nconst VIDEO_MIN_READY_STATE = IS_SAFARI ? 4 : 3;\nconst SPACEBAR_CODE = 32;\n\nconst STEALTH_MODE_NOTIFICATION_DURATION = 4000;\n\nfunction Story({\n  peerId,\n  storyId,\n  peer,\n  forwardSender,\n  fromPeer,\n  isMuted,\n  isArchivedStories,\n  isPrivateStories,\n  story,\n  orderedIds,\n  isSingleStory,\n  dimensions,\n  shouldForcePause,\n  storyChangelogUserId,\n  viewersExpirePeriod,\n  isChatExist,\n  arePeerSettingsLoaded,\n  getIsAnimating,\n  isCurrentUserPremium,\n  stealthMode,\n  withHeaderAnimation,\n  onDelete,\n  onClose,\n  onReport,\n  paidMessagesStars,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    viewStory,\n    setStoryViewerMuted,\n    openPreviousStory,\n    openNextStory,\n    loadPeerSkippedStories,\n    openForwardMenu,\n    copyStoryLink,\n    toggleStoryInProfile,\n    openChat,\n    showNotification,\n    openStoryPrivacyEditor,\n    loadPeerSettings,\n    fetchChat,\n    loadStoryViews,\n    toggleStealthModal,\n  } = getActions();\n  const serverTime = getServerTime();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const [isComposerHasFocus, markComposerHasFocus, unmarkComposerHasFocus] = useFlag(false);\n  const [isStoryPlaybackRequested, playStory, pauseStory] = useFlag(false);\n  const [isStoryPlaying, markStoryPlaying, unmarkStoryPlaying] = useFlag(false);\n  const [isAppFocused, markAppFocused, unmarkAppFocused] = useFlag(true);\n  const [isCaptionExpanded, expandCaption, foldCaption] = useFlag(false);\n  const [isPausedBySpacebar, setIsPausedBySpacebar] = useState(false);\n  const [isPausedByLongPress, markIsPausedByLongPress, unmarkIsPausedByLongPress] = useFlag(false);\n  const [isDropdownMenuOpen, markDropdownMenuOpen, unmarkDropdownMenuOpen] = useFlag(false);\n  const videoRef = useRef<HTMLVideoElement>();\n  const {\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  } = useStoryProps(story, isCurrentUserPremium, isDropdownMenuOpen);\n\n  const isLoadedStory = story && 'content' in story;\n  const isChangelog = peerId === storyChangelogUserId;\n  const isUserStory = isUserId(peerId);\n  const isChatStory = !isUserStory;\n  const isChannelStory = isChatStory && isChatChannel(peer as ApiChat);\n  const isOut = isLoadedStory && story.isOut;\n\n  const canPinToProfile = useCurrentOrPrev(\n    isOut ? !story.isInProfile : undefined,\n    true,\n  );\n  const canUnpinFromProfile = useCurrentOrPrev(\n    isOut ? story.isInProfile : undefined,\n    true,\n  );\n  const areViewsExpired = Boolean(\n    isOut && (story.date + viewersExpirePeriod) < getServerTime(),\n  );\n\n  const forwardSenderTitle = forwardSender ? getPeerTitle(oldLang, forwardSender)\n    : (isLoadedStory && story.forwardInfo?.fromName);\n\n  const canCopyLink = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !isChangelog\n    && peer?.hasUsername,\n  );\n\n  const canShare = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !story.noForwards\n    && !isChangelog\n    && !isCaptionExpanded,\n  );\n\n  const canPlayStory = Boolean(\n    hasFullData && !shouldForcePause && isAppFocused && !isComposerHasFocus && !isCaptionExpanded\n    && !isPausedBySpacebar && !isPausedByLongPress,\n  );\n\n  const duration = isLoadedStory && story.content.video?.duration\n    ? story.content.video.duration\n    : undefined;\n\n  const shouldShowComposer = !(isOut && isUserStory) && !isChangelog && !isChannelStory && !isAccountFrozen;\n  const shouldShowFooter = isLoadedStory && !shouldShowComposer && (isOut || isChannelStory);\n  const headerAnimation = isMobile && withHeaderAnimation ? 'slideFade' : 'none';\n\n  const {\n    shouldRender: shouldRenderSkeleton,\n    transitionClassNames: skeletonTransitionClassNames,\n  } = useShowTransitionDeprecated(!hasFullData);\n\n  const {\n    transitionClassNames: mediaTransitionClassNames,\n  } = useShowTransitionDeprecated(Boolean(fullMediaData));\n\n  const thumbRef = useCanvasBlur(thumbnail, !hasThumb);\n  const previewTransitionClassNames = useMediaTransitionDeprecated(previewBlobUrl);\n\n  const {\n    shouldRender: shouldRenderComposer,\n    transitionClassNames: composerAppearanceAnimationClassNames,\n  } = useShowTransitionDeprecated(shouldShowComposer);\n\n  const {\n    shouldRender: shouldRenderCaptionBackdrop,\n    transitionClassNames: captionBackdropTransitionClassNames,\n  } = useShowTransitionDeprecated(hasText && isCaptionExpanded);\n\n  const { transitionClassNames: appearanceAnimationClassNames } = useShowTransitionDeprecated(true);\n  const {\n    shouldRender: shouldRenderCaption,\n    transitionClassNames: captionAppearanceAnimationClassNames,\n  } = useShowTransitionDeprecated(hasText || hasForwardInfo);\n\n  const isStreamingSupported = useStreaming(videoRef, fullMediaData, PRIMARY_VIDEO_MIME);\n\n  useStoryPreloader(peerId, storyId);\n\n  useEffect(() => {\n    if (storyId) {\n      viewStory({ peerId, storyId });\n    }\n  }, [storyId, peerId]);\n\n  useEffect(() => {\n    loadPeerSkippedStories({ peerId });\n  }, [peerId]);\n\n  // Fetching user privacy settings for use in Composer\n  useEffect(() => {\n    const canWrite = isUserId(peerId);\n    if (!isChatExist && canWrite) {\n      fetchChat({ chatId: peerId });\n    }\n  }, [isChatExist, peerId]);\n  useEffect(() => {\n    if (isChatExist && !arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId });\n    }\n  }, [arePeerSettingsLoaded, isChatExist, peerId]);\n\n  const handlePauseStory = useLastCallback(() => {\n    if (isVideo) {\n      videoRef.current?.pause();\n    }\n\n    unmarkStoryPlaying();\n    pauseStory();\n  });\n\n  const handlePlayStory = useLastCallback(() => {\n    if (!canPlayStory) return;\n\n    playStory();\n    if (!isVideo) markStoryPlaying();\n  });\n\n  const handleLongPressStart = useLastCallback(() => {\n    markIsPausedByLongPress();\n  });\n  const handleLongPressEnd = useLastCallback(() => {\n    unmarkIsPausedByLongPress();\n  });\n\n  const handleDropdownMenuOpen = useLastCallback(() => {\n    markDropdownMenuOpen();\n    handlePauseStory();\n  });\n\n  const handleDropdownMenuClose = useLastCallback(() => {\n    unmarkDropdownMenuOpen();\n    handlePlayStory();\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleLongPressStart,\n    onEnd: handleLongPressEnd,\n  });\n\n  const isUnsupported = useUnsupportedMedia(\n    videoRef,\n    undefined,\n    !isVideo || !fullMediaData || isStreamingSupported,\n  );\n\n  const hasAllData = fullMediaData && (!altMediaHash || altMediaData);\n  // Play story after media has been downloaded\n  useEffect(() => {\n    if (hasAllData && !isUnsupported) handlePlayStory();\n  }, [hasAllData, isUnsupported]);\n\n  useBackgroundMode(unmarkAppFocused, markAppFocused);\n\n  useEffect(() => {\n    if (!hasAllData) return;\n    videoRef.current?.load();\n  }, [hasAllData]);\n\n  useEffect(() => {\n    if (!isLoadedStory || isDeletedStory || areViewsExpired) return;\n\n    if (!isOut && !isChannelStory) return;\n\n    // Refresh counters each time\n    loadStoryViews({ peerId, storyId });\n  }, [isDeletedStory, areViewsExpired, isLoadedStory, peerId, storyId, isOut, isChannelStory]);\n\n  useEffect(() => {\n    if (\n      shouldForcePause || !isAppFocused || isComposerHasFocus\n      || isCaptionExpanded || isPausedBySpacebar || isPausedByLongPress\n    ) {\n      handlePauseStory();\n    } else {\n      handlePlayStory();\n    }\n  }, [\n    handlePlayStory, isAppFocused, isCaptionExpanded, isComposerHasFocus,\n    shouldForcePause, isPausedBySpacebar, isPausedByLongPress,\n  ]);\n\n  useEffect(() => {\n    if (isComposerHasFocus || shouldForcePause || isCaptionExpanded) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (e.keyCode === SPACEBAR_CODE) {\n        e.preventDefault();\n        setIsPausedBySpacebar(!isPausedBySpacebar);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isCaptionExpanded, isComposerHasFocus, isPausedBySpacebar, shouldForcePause]);\n\n  // Reset the state of `isPausedBySpacebar` when closing the caption, losing focus by composer or disable forced pause\n  useEffectWithPrevDeps(([\n    prevIsComposerHasFocus,\n    prevIsCaptionExpanded,\n    prevShouldForcePause,\n    prevIsAppFocused,\n    prevIsPausedByLongPress,\n  ]) => {\n    if (\n      !isPausedBySpacebar || isCaptionExpanded || isComposerHasFocus\n      || shouldForcePause || !isAppFocused || isPausedByLongPress\n    ) {\n      return;\n    }\n\n    if (\n      prevIsCaptionExpanded !== isCaptionExpanded\n      || prevIsComposerHasFocus !== isComposerHasFocus\n      || prevShouldForcePause !== shouldForcePause\n      || prevIsAppFocused !== isAppFocused\n      || prevIsPausedByLongPress !== isPausedByLongPress\n    ) {\n      setIsPausedBySpacebar(false);\n    }\n  }, [isComposerHasFocus, isCaptionExpanded, shouldForcePause, isAppFocused, isPausedByLongPress, isPausedBySpacebar]);\n\n  const handleOpenChat = useLastCallback(() => {\n    onClose();\n    openChat({ id: peerId });\n  });\n\n  const handleForwardPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: forwardSender!.id });\n  });\n\n  const handleFromPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: fromPeer!.id });\n  });\n\n  const handleOpenPrevStory = useLastCallback(() => {\n    openPreviousStory();\n  });\n\n  const handleOpenNextStory = useLastCallback(() => {\n    openNextStory();\n  });\n\n  const handleVideoStoryTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= VIDEO_MIN_READY_STATE) {\n      markStoryPlaying();\n    } else {\n      unmarkStoryPlaying();\n    }\n    if (duration && round(video.currentTime, 2) >= round(duration, 2)) {\n      handleOpenNextStory();\n    }\n  });\n\n  useEffect(() => {\n    return !getIsAnimating() && !isComposerHasFocus ? captureKeyboardListeners({\n      onRight: handleOpenNextStory,\n      onLeft: handleOpenPrevStory,\n    }) : undefined;\n  }, [getIsAnimating, isComposerHasFocus]);\n\n  const handleCopyStoryLink = useLastCallback(() => {\n    copyStoryLink({ peerId, storyId });\n  });\n\n  const handlePinClick = useLastCallback(() => {\n    toggleStoryInProfile({ peerId, storyId, isInProfile: true });\n  });\n\n  const handleUnpinClick = useLastCallback(() => {\n    toggleStoryInProfile({ peerId, storyId, isInProfile: false });\n  });\n\n  const handleDeleteStoryClick = useLastCallback(() => {\n    onDelete(story!);\n  });\n\n  const handleReportStoryClick = useLastCallback(() => {\n    onReport();\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleInfoPrivacyEdit = useLastCallback(() => {\n    openStoryPrivacyEditor();\n  });\n\n  const handleInfoPrivacyClick = useLastCallback(() => {\n    const visibility = !isLoadedStory || story.isPublic\n      ? undefined\n      : story.isForContacts ? 'contacts' : (story.isForCloseFriends ? 'closeFriends' : 'nobody');\n\n    let message;\n    const myName = getPeerTitle(oldLang, peer);\n    switch (visibility) {\n      case 'nobody':\n        message = oldLang('StorySelectedContactsHint', myName);\n        break;\n      case 'contacts':\n        message = oldLang('StoryContactsHint', myName);\n        break;\n      case 'closeFriends':\n        message = oldLang('StoryCloseFriendsHint', myName);\n        break;\n      default:\n        return;\n    }\n    showNotification({ message });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    if (noSound) {\n      showNotification({\n        message: oldLang('Story.TooltipVideoHasNoSound'),\n      });\n      return;\n    }\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setStoryViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handleOpenStealthModal = useLastCallback(() => {\n    if (stealthMode.activeUntil && getServerTime() < stealthMode.activeUntil) {\n      const diff = stealthMode.activeUntil - getServerTime();\n      showNotification({\n        title: oldLang('StealthModeOn'),\n        message: oldLang('Story.ToastStealthModeActiveText', formatMediaDuration(diff)),\n        duration: STEALTH_MODE_NOTIFICATION_DURATION,\n      });\n      return;\n    }\n\n    toggleStealthModal({ isOpen: true });\n  });\n\n  const handleDownload = useLastCallback(() => {\n    if (!downloadMediaData) return;\n    download(downloadMediaData, `story-${peerId}-${storyId}.${isVideo ? 'mp4' : 'jpg'}`);\n  });\n\n  useEffect(() => {\n    if (!isDeletedStory) return;\n\n    showNotification({\n      message: oldLang('StoryNotFound'),\n    });\n  }, [oldLang, isDeletedStory]);\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => {\n      return (\n        <Button\n          round\n          ripple={!isMobile}\n          size=\"tiny\"\n          color=\"translucent-white\"\n          onClick={onTrigger}\n          className={buildClassName(styles.button, isOpen && 'active')}\n          ariaLabel={oldLang('AccDescrOpenMenu2')}\n        >\n          <Icon name=\"more\" />\n        </Button>\n      );\n    };\n  }, [isMobile, oldLang]);\n\n  function renderStoriesTabs() {\n    return (\n      <div className={styles.storyIndicators}>\n        {(isSingleStory ? [storyId] : orderedIds ?? []).map((id) => (\n          <StoryProgress\n            key={`progress-${id}`}\n            isActive={id === story?.id}\n            isVideo={isVideo}\n            isViewed={Boolean(story?.id && ((isPrivateStories || isArchivedStories) ? id > story?.id : id < story?.id))}\n            isPaused={!isStoryPlaying}\n            duration={duration}\n            onImageComplete={handleOpenNextStory}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderStoryPrivacyButton() {\n    if (!isUserStory) return undefined;\n\n    let privacyIcon: IconName = 'channel-filled';\n    const gradient: Record<string, [string, string]> = {\n      'channel-filled': ['#50ABFF', '#007AFF'],\n      'user-filled': ['#C36EFF', '#8B60FA'],\n      'favorite-filled': ['#88D93A', '#30B73B'],\n      'group-filled': ['#FFB743', '#F69A36'],\n    };\n\n    if (isOut) {\n      const { visibility } = (story && 'visibility' in story && story.visibility) || {};\n\n      switch (visibility) {\n        case 'everybody':\n          privacyIcon = 'channel-filled';\n          break;\n        case 'contacts':\n          privacyIcon = 'user-filled';\n          break;\n        case 'closeFriends':\n          privacyIcon = 'favorite-filled';\n          break;\n        case 'nobody':\n          privacyIcon = 'group-filled';\n      }\n    } else {\n      if (!story || !('content' in story) || story.isPublic) {\n        return undefined;\n      }\n\n      privacyIcon = story.isForCloseFriends\n        ? 'favorite-filled'\n        : (story.isForContacts ? 'user-filled' : 'group-filled');\n    }\n\n    return (\n      <div\n        className={buildClassName(styles.visibilityButton, isOut && styles.visibilityButtonSelf)}\n        onClick={isOut ? handleInfoPrivacyEdit : handleInfoPrivacyClick}\n        style={`--color-from: ${gradient[privacyIcon][0]}; --color-to: ${gradient[privacyIcon][1]}`}\n      >\n        <Icon name={privacyIcon} />\n        {isOut && <Icon name=\"next\" />}\n      </div>\n    );\n  }\n\n  function renderSenderInfo() {\n    return (\n      <div className={styles.senderInfo}>\n        <Avatar\n          peer={peer}\n          size=\"tiny\"\n          onClick={handleOpenChat}\n        />\n        <div className={styles.senderMeta}>\n          <span onClick={handleOpenChat} className={styles.senderName}>\n            {renderText(getPeerTitle(oldLang, peer) || '')}\n          </span>\n          <div className={styles.storyMetaRow}>\n            {forwardSenderTitle && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.forwardHeader, forwardSender && styles.clickable,\n                )}\n                onClick={forwardSender ? handleForwardPeerClick : undefined}\n              >\n                <Icon name=\"loop\" />\n                <span className={styles.headerTitle}>\n                  {renderText(forwardSenderTitle)}\n                </span>\n              </span>\n            )}\n            {fromPeer && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.fromPeer,\n                )}\n                onClick={handleFromPeerClick}\n              >\n                <Avatar peer={fromPeer} size=\"micro\" />\n                <span className={styles.headerTitle}>\n                  {renderText(getPeerTitle(oldLang, fromPeer) || '')}\n                </span>\n              </span>\n            )}\n            {story && 'date' in story && (\n              <span className={styles.storyMeta}>{formatRelativePastTime(oldLang, serverTime, story.date)}</span>\n            )}\n            {isLoadedStory && story.isEdited && (\n              <span className={styles.storyMeta}>{oldLang('Story.HeaderEdited')}</span>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderSender() {\n    return (\n      <div className={styles.sender}>\n        <Transition activeKey={Number(peerId)} name={headerAnimation} className={styles.senderInfoTransition}>\n          {renderSenderInfo()}\n        </Transition>\n\n        <div className={styles.actions}>\n          {renderStoryPrivacyButton()}\n          {isVideo && (\n            <Button\n              className={styles.button}\n              round\n              ripple={!isMobile}\n              size=\"tiny\"\n              color=\"translucent-white\"\n              disabled={!hasFullData}\n              onClick={handleVolumeMuted}\n              ariaLabel={oldLang('Volume')}\n            >\n              <Icon name={(isMuted || noSound) ? 'speaker-muted-story' : 'speaker-story'} />\n            </Button>\n          )}\n          <DropdownMenu\n            className={styles.buttonMenu}\n            trigger={MenuButton}\n            positionX=\"right\"\n            onOpen={handleDropdownMenuOpen}\n            onClose={handleDropdownMenuClose}\n          >\n            {canCopyLink && <MenuItem icon=\"copy\" onClick={handleCopyStoryLink}>{oldLang('CopyLink')}</MenuItem>}\n            {canPinToProfile && (\n              <MenuItem icon=\"save-story\" onClick={handlePinClick}>\n                {oldLang(isUserStory ? 'StorySave' : 'SaveToPosts')}\n              </MenuItem>\n            )}\n            {canUnpinFromProfile && (\n              <MenuItem icon=\"delete\" onClick={handleUnpinClick}>\n                {oldLang(isUserStory ? 'ArchiveStory' : 'RemoveFromPosts')}\n              </MenuItem>\n            )}\n            {canDownload && (\n              <MenuItem icon=\"download\" disabled={!downloadMediaData} onClick={handleDownload}>\n                {oldLang('lng_media_download')}\n              </MenuItem>\n            )}\n            {!isOut && isUserStory && (\n              <MenuItem icon=\"eye-crossed-outline\" onClick={handleOpenStealthModal}>\n                {oldLang('StealthMode')}\n              </MenuItem>\n            )}\n            {!isOut && <MenuItem icon=\"flag\" onClick={handleReportStoryClick}>{oldLang('lng_report_story')}</MenuItem>}\n            {isOut && (\n              <MenuItem\n                icon=\"delete\"\n                destructive\n                onClick={handleDeleteStoryClick}\n              >\n                {oldLang('Delete')}\n              </MenuItem>\n            )}\n          </DropdownMenu>\n          <Button\n            className={buildClassName(styles.button, styles.closeButton)}\n            round\n            size=\"tiny\"\n            color=\"translucent-white\"\n            ariaLabel={oldLang('Close')}\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const inputPlaceholder = paidMessagesStars\n    ? lang('ComposerPlaceholderPaidReply', {\n      amount: formatStarsAsIcon(lang, paidMessagesStars, { asFont: true, className: 'placeholder-star-icon' }),\n    }, {\n      withNodes: true,\n    })\n    : oldLang(isChatStory ? 'ReplyToGroupStory' : 'ReplyPrivately');\n\n  return (\n    <div\n      className={buildClassName(styles.slideInner, 'component-theme-dark')}\n      onMouseDown={handleLongPressMouseDown}\n      onMouseUp={handleLongPressMouseUp}\n      onMouseLeave={handleLongPressMouseLeave}\n      onTouchStart={handleLongPressTouchStart}\n      onTouchEnd={handleLongPressTouchEnd}\n    >\n      <div className={buildClassName(styles.storyHeader, appearanceAnimationClassNames)}>\n        {renderStoriesTabs()}\n        {renderSender()}\n      </div>\n\n      <div\n        className={styles.mediaWrapper}\n        style={`width: ${dimensions.width}px; height: ${dimensions.height}px`}\n      >\n        <canvas ref={thumbRef} className={styles.thumbnail} />\n        {previewBlobUrl && (\n          <img\n            key={`preview-${storyId}`}\n            src={previewBlobUrl}\n            draggable={false}\n            alt=\"\"\n            className={buildClassName(styles.media, styles.mediaPreview, previewTransitionClassNames)}\n          />\n        )}\n        {shouldRenderSkeleton && (\n          <Skeleton className={buildClassName(skeletonTransitionClassNames, styles.fullSize)} />\n        )}\n        {!isVideo && fullMediaData && (\n          <img\n            src={fullMediaData}\n            alt=\"\"\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            draggable={false}\n          />\n        )}\n        {isVideo && fullMediaData && (\n          <OptimizedVideo\n            ref={videoRef}\n            key={`video-${storyId}`}\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            canPlay={isStoryPlaybackRequested}\n            muted={isMuted}\n            width={BASE_STORY_WIDTH}\n            height={BASE_STORY_HEIGHT}\n            draggable={false}\n            playsInline\n            disablePictureInPicture\n            isPriority\n            onPause={unmarkStoryPlaying}\n            onWaiting={unmarkStoryPlaying}\n            disableRemotePlayback\n            onTimeUpdate={handleVideoStoryTimeUpdate}\n          >\n            <source src={fullMediaData} type={PRIMARY_VIDEO_MIME} width=\"720\" />\n            {altMediaData && <source src={altMediaData} type={SECONDARY_VIDEO_MIME} width=\"480\" />}\n          </OptimizedVideo>\n        )}\n\n        {!isPausedByLongPress && !isComposerHasFocus && (\n          <>\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.prev)}\n              onClick={handleOpenPrevStory}\n              aria-label={oldLang('Previous')}\n            />\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.next)}\n              onClick={handleOpenNextStory}\n              aria-label={oldLang('Next')}\n            />\n          </>\n        )}\n        {isLoadedStory && fullMediaData && (\n          <MediaAreaOverlay\n            key={`area-overlay-${storyId}-${peerId}`}\n            story={story}\n            isActive\n            isStoryPlaying={isDropdownMenuOpen}\n          />\n        )}\n        {!isMobile && (\n          <div className={styles.content}>\n            <div className={styles.contentInner}>\n              <Avatar\n                peer={peer}\n                withStory\n                storyViewerMode=\"disabled\"\n              />\n              <div className={styles.name}>{renderText(getPeerTitle(oldLang, peer) || '')}</div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldShowFooter && (\n        <StoryFooter story={story} className={appearanceAnimationClassNames} />\n      )}\n      {shouldRenderCaptionBackdrop && (\n        <div\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.captionBackdrop, captionBackdropTransitionClassNames)}\n          onClick={() => foldCaption()}\n          aria-label={oldLang('Close')}\n        />\n      )}\n      {hasText && <div className={buildClassName(styles.captionGradient, captionAppearanceAnimationClassNames)} />}\n      {shouldRenderCaption && (\n        <StoryCaption\n          key={`caption-${storyId}-${peerId}`}\n          story={story as ApiStory}\n          isExpanded={isCaptionExpanded}\n          onExpand={expandCaption}\n          onFold={foldCaption}\n          className={captionAppearanceAnimationClassNames}\n        />\n      )}\n      {shouldRenderComposer && (\n        <Composer\n          type=\"story\"\n          chatId={peerId}\n          threadId={MAIN_THREAD_ID}\n          storyId={storyId}\n          isReady={!isOut}\n          messageListType=\"thread\"\n          isMobile={getIsMobile()}\n          editableInputCssSelector={EDITABLE_STORY_INPUT_CSS_SELECTOR}\n          editableInputId={EDITABLE_STORY_INPUT_ID}\n          inputId=\"story-input-text\"\n          className={buildClassName(styles.composer, composerAppearanceAnimationClassNames)}\n          inputPlaceholder={inputPlaceholder}\n          onForward={canShare ? handleForwardClick : undefined}\n          onFocus={markComposerHasFocus}\n          onBlur={unmarkComposerHasFocus}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, {\n  peerId,\n  storyId,\n  isDeleteModalOpen,\n}): StateProps => {\n  const { appConfig } = global;\n  const user = selectUser(global, peerId);\n  const chat = selectChat(global, peerId);\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  const tabState = selectTabState(global);\n  const {\n    storyViewer: {\n      isMuted,\n      viewModal,\n      isPrivacyModalOpen,\n      isStealthModalOpen,\n      storyList,\n    },\n    forwardMessages: { storyId: forwardedStoryId },\n    premiumModal,\n    safeLinkModalUrl,\n    mapModal,\n    reportModal,\n    giftInfoModal,\n    isPaymentMessageConfirmDialogOpen,\n  } = tabState;\n  const { isOpen: isPremiumModalOpen } = premiumModal || {};\n  const story = selectPeerStory(global, peerId, storyId);\n  const isLoadedStory = story && 'content' in story;\n  const shouldForcePause = Boolean(\n    isPaymentMessageConfirmDialogOpen\n    || viewModal || forwardedStoryId || tabState.reactionPicker?.storyId || reportModal || isPrivacyModalOpen\n    || isPremiumModalOpen || isDeleteModalOpen || safeLinkModalUrl || isStealthModalOpen || mapModal || giftInfoModal,\n  );\n\n  const forwardInfo = isLoadedStory ? story.forwardInfo : undefined;\n  const mediaAreas = isLoadedStory ? story.mediaAreas : undefined;\n  const forwardSenderId = forwardInfo?.fromPeerId\n    || mediaAreas?.find((area): area is ApiMediaAreaChannelPost => area.type === 'channelPost')?.channelId;\n  const forwardSender = forwardSenderId ? selectPeer(global, forwardSenderId) : undefined;\n  const withHeaderAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  const fromPeer = isLoadedStory && story.fromId ? selectPeer(global, story.fromId) : undefined;\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, peerId);\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    peer: (user || chat)!,\n    forwardSender,\n    fromPeer,\n    story,\n    orderedIds: storyList?.storyIdsByPeerId[peerId],\n    isMuted,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    shouldForcePause,\n    storyChangelogUserId: appConfig!.storyChangelogUserId,\n    viewersExpirePeriod: appConfig!.storyExpirePeriod + appConfig!.storyViewersExpirePeriod,\n    isChatExist: Boolean(chat),\n    arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n    stealthMode: global.stories.stealthMode,\n    withHeaderAnimation,\n    paidMessagesStars,\n    isAccountFrozen,\n  };\n})(Story));\n","import { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiPeer, ApiPeerStories, ApiTypeStory,\n} from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectTabState } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peer?: ApiPeer;\n  peerStories?: ApiPeerStories;\n}\n\ninterface StateProps {\n  lastViewedId?: number;\n  origin?: StoryViewerOrigin;\n  storyIdsForViewer?: number[];\n}\n\nfunction StoryPreview({\n  peer, peerStories, lastViewedId, storyIdsForViewer, origin,\n}: OwnProps & StateProps) {\n  const { openStoryViewer, loadPeerSkippedStories } = getActions();\n  const lang = useOldLang();\n\n  const story = useMemo<ApiTypeStory | undefined>(() => {\n    if (!peerStories) {\n      return undefined;\n    }\n\n    const {\n      orderedIds, lastReadId, byId,\n    } = peerStories;\n    const hasUnreadStories = orderedIds[orderedIds.length - 1] !== lastReadId;\n    const previewIndexId = lastViewedId && storyIdsForViewer?.includes(lastViewedId)\n      ? lastViewedId ?? (hasUnreadStories ? (lastReadId ?? -1) : -1)\n      : -1;\n    const resultId = byId[previewIndexId]?.id || storyIdsForViewer?.[0] || orderedIds[0];\n\n    return byId[resultId];\n  }, [lastViewedId, peerStories, storyIdsForViewer]);\n\n  const isLoaded = story && 'content' in story;\n\n  useEffect(() => {\n    if (story && !isLoaded) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [story, isLoaded]);\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  if (!peer || !story || 'isDeleted' in story) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={styles.slideInner}\n      onClick={() => { openStoryViewer({ peerId: story.peerId, storyId: story.id, origin }); }}\n    >\n      {thumbUrl && (\n        <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n      )}\n      {isLoaded && <MediaAreaOverlay story={story} />}\n\n      <div className={styles.content}>\n        <div className={styles.contentInner}>\n          <Avatar\n            peer={peer}\n            withStory\n            storyViewerMode=\"disabled\"\n          />\n          <div className={styles.name}>{renderText(getPeerTitle(lang, peer) || '')}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { peer }): StateProps => {\n  const {\n    storyViewer: {\n      lastViewedByPeerId: lastViewedByPeerIds,\n      origin,\n      storyList,\n    },\n  } = selectTabState(global);\n\n  return {\n    lastViewedId: peer?.id ? lastViewedByPeerIds?.[peer.id] : undefined,\n    origin,\n    storyIdsForViewer: peer?.id ? storyList?.storyIdsByPeerId[peer.id] : undefined,\n  };\n})(StoryPreview));\n","import type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiPeerStories, ApiTypeStory } from '../../api/types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getStoryKey } from '../../global/helpers';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeer,\n  selectTabState,\n} from '../../global/selectors';\nimport { IS_IOS } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport focusEditableElement from '../../util/focusEditableElement';\nimport { clamp } from '../../util/math';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport { calculateOffsetX } from './helpers/dimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useSlideSizes from './hooks/useSlideSizes';\n\nimport Story from './Story';\nimport StoryPreview from './StoryPreview';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  isDeleteModalOpen?: boolean;\n  onDelete: (story: ApiTypeStory) => void;\n  onReport: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peerIds: string[];\n  currentPeerId?: string;\n  currentStoryId?: number;\n  byPeerId?: Record<string, ApiPeerStories>;\n  isSinglePeer?: boolean;\n  isSingleStory?: boolean;\n  isPrivate?: boolean;\n  isArchive?: boolean;\n}\n\nconst ACTIVE_SLIDE_VERTICAL_CORRECTION_REM = 1.75;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SCROLL_RELEASE_DELAY = 1500;\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nfunction StorySlides({\n  peerIds,\n  currentPeerId,\n  currentStoryId,\n  isOpen,\n  isSinglePeer,\n  isSingleStory,\n  isPrivate,\n  isArchive,\n  byPeerId,\n  isDeleteModalOpen,\n  onDelete,\n  onClose,\n  onReport,\n}: OwnProps & StateProps) {\n  const { stopActiveReaction } = getActions();\n  const containerRef = useRef<HTMLDivElement>();\n  const [renderingPeerId, setRenderingPeerId] = useState(currentPeerId);\n  const [renderingStoryId, setRenderingStoryId] = useState(currentStoryId);\n  const prevPeerId = usePreviousDeprecated(currentPeerId);\n  const renderingIsArchive = useCurrentOrPrev(isArchive, true);\n  const renderingIsPrivate = useCurrentOrPrev(isPrivate, true);\n  const renderingIsSinglePeer = useCurrentOrPrev(isSinglePeer, true);\n  const renderingIsSingleStory = useCurrentOrPrev(isSingleStory, true);\n  const slideSizes = useSlideSizes();\n  const { height: windowHeight, width: windowWidth } = useWindowSize();\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const { isMobile } = useAppLayout();\n\n  const rendersRef = useRef<Record<string, { current: HTMLDivElement }>>({});\n  const [getIsAnimating, setIsAnimating] = useSignal(false);\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  function setRef(ref: HTMLDivElement | undefined, peerId: string) {\n    if (!ref) {\n      return;\n    }\n    if (!rendersRef.current[peerId]) {\n      rendersRef.current[peerId] = { current: ref };\n    } else {\n      rendersRef.current[peerId].current = ref;\n    }\n  }\n\n  const renderingPeerIds = useMemo(() => {\n    if (renderingPeerId && (renderingIsSinglePeer || renderingIsSingleStory)) {\n      return [renderingPeerId];\n    }\n\n    const index = renderingPeerId ? peerIds.indexOf(renderingPeerId) : -1;\n    if (!renderingPeerId || index === -1) {\n      return [];\n    }\n\n    const start = Math.max(index - 4, 0);\n    const end = Math.min(index + 5, peerIds.length);\n\n    return peerIds.slice(start, end);\n  }, [renderingIsSingleStory, renderingIsSinglePeer, renderingPeerId, peerIds]);\n\n  const renderingPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !renderingPeerId) {\n      return -1;\n    }\n\n    return renderingPeerIds.indexOf(renderingPeerId);\n  }, [renderingPeerId, renderingPeerIds]);\n\n  const currentPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !currentPeerId) {\n      return -1;\n    }\n    return renderingPeerIds.indexOf(currentPeerId);\n  }, [currentPeerId, renderingPeerIds]);\n\n  useEffect(() => {\n    if (!isMobile) return;\n\n    // If animation disabled, set rendering peer id to current peer\n    setRenderingPeerId(currentPeerId);\n  }, [currentPeerId, isMobile]);\n\n  // Handling the flipping of stories from a current user\n  useEffect(() => {\n    if (renderingPeerId === currentPeerId && currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n  }, [currentPeerId, currentStoryId, renderingPeerId, renderingStoryId]);\n\n  useEffect(() => {\n    if (isMobile) return undefined;\n    if (prevPeerId && prevPeerId !== currentPeerId) {\n      setIsAnimating(true);\n    }\n\n    return () => {\n      setIsAnimating(false);\n    };\n  }, [prevPeerId, currentPeerId, setIsAnimating, isMobile]);\n\n  useEffect(() => {\n    return () => {\n      if (!currentStoryId || !currentPeerId) return;\n      stopActiveReaction({\n        containerId: getStoryKey(currentPeerId, currentStoryId),\n      });\n    };\n  }, [currentStoryId, currentPeerId]);\n\n  const slideAmount = currentPeerPosition - renderingPeerPosition;\n  const isBackward = renderingPeerPosition > currentPeerPosition;\n\n  const calculateTransformX = useLastCallback(() => {\n    return peerIds.reduce<Record<string, number>>((transformX, peerId, index) => {\n      if (peerId === renderingPeerId) {\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: isBackward,\n        });\n      } else {\n        let isMoveThroughActiveSlide = false;\n        if (!isBackward && index > 0 && peerIds[index - 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n        if (isBackward && index < peerIds.length - 1 && peerIds[index + 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: currentPeerId === peerId && !isBackward,\n          isMoveThroughActiveSlide,\n        });\n      }\n\n      return transformX;\n    }, {});\n  });\n\n  useEffect(() => {\n    if (!containerRef.current || !isOpen) {\n      return undefined;\n    }\n\n    let offsetY = 0;\n\n    const getCurrentStoryRef = () => {\n      return renderingPeerId ? rendersRef.current[renderingPeerId]?.current : undefined;\n    };\n\n    const onRelease = (event: MouseEvent | TouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      const current = getCurrentStoryRef();\n      if (!current) return;\n\n      if (offsetY < -SWIPE_Y_THRESHOLD) {\n        const composer = document.getElementById(EDITABLE_STORY_INPUT_ID);\n        if (composer) {\n          requestMutation(() => {\n            focusEditableElement(composer);\n          });\n        }\n        return;\n      }\n\n      if (offsetY > SWIPE_Y_THRESHOLD) {\n        onClose();\n        if (event.type === 'wheel') {\n          disableScrolling();\n          setTimeout(enableScrolling, SCROLL_RELEASE_DELAY);\n        }\n      } else {\n        requestMutation(() => {\n          current.style.setProperty('--slide-translate-y', '0px');\n        });\n      }\n    };\n\n    return captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      withWheelDrag: true,\n      excludedClosestSelector: '.Composer',\n      onDrag: (event, captureEvent, {\n        dragOffsetX, dragOffsetY,\n      }) => {\n        if (isReleasedRef.current) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (event.type === 'mousemove') return;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const current = getCurrentStoryRef();\n        if (!current) return;\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(absOffsetY) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          offsetY = clamp(dragOffsetY, -limit, limit);\n          if (offsetY > 0) {\n            requestMutation(() => {\n              current.style.setProperty('--slide-translate-y', `${offsetY * (isMobile ? 1 : -1)}px`);\n            });\n          }\n          if (event.type === 'wheel' && Math.abs(offsetY) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onRelease,\n    });\n  }, [isOpen, onClose, windowWidth, windowHeight, isMobile, renderingPeerId]);\n\n  useLayoutEffect(() => {\n    if (isMobile) return;\n    const transformX = calculateTransformX();\n\n    Object.entries(rendersRef.current).forEach(([peerId, { current }]) => {\n      if (!current) return;\n\n      if (!getIsAnimating()) {\n        current.classList.remove(styles.slideAnimation, styles.slideAnimationToActive, styles.slideAnimationFromActive);\n        current.style.setProperty('--slide-translate-x', '0px');\n        current.style.setProperty('--slide-translate-y', '0px');\n        current.style.setProperty('--slide-translate-scale', '1');\n        current.style.setProperty('--slide-content-scale', String(slideSizes.toActiveScale));\n\n        return;\n      }\n\n      const getScale = () => {\n        if (currentPeerId === peerId) {\n          return String(slideSizes.toActiveScale);\n        }\n        if (peerId === renderingPeerId) {\n          return String(slideSizes.fromActiveScale);\n        }\n        return '1';\n      };\n\n      let offsetY = 0;\n      if (peerId === renderingPeerId) {\n        offsetY = -ACTIVE_SLIDE_VERTICAL_CORRECTION_REM * slideSizes.fromActiveScale;\n        current.classList.add(styles.slideAnimationFromActive);\n      }\n      if (peerId === currentPeerId) {\n        offsetY = ACTIVE_SLIDE_VERTICAL_CORRECTION_REM;\n        current.classList.add(styles.slideAnimationToActive);\n      }\n\n      current.classList.add(styles.slideAnimation);\n      current.style.setProperty('--slide-translate-x', `${transformX[peerId] || 0}px`);\n      current.style.setProperty('--slide-translate-y', `${offsetY}rem`);\n      current.style.setProperty('--slide-translate-scale', getScale());\n    });\n  }, [currentPeerId, getIsAnimating, renderingPeerId, slideSizes, isMobile]);\n\n  const handleTransitionEnd = useLastCallback((event: React.TransitionEvent<HTMLDivElement>) => {\n    // It is `target` that is needed here, not `currentTarget`\n    const target = event.target as HTMLDivElement | null;\n\n    if (!target || !target.classList.contains(styles.activeSlide)) return;\n\n    if (renderingPeerId !== currentPeerId) {\n      setRenderingPeerId(currentPeerId);\n      setRenderingStoryId(currentStoryId);\n    } else if (currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n    setIsAnimating(false);\n  });\n\n  if (isMobile) {\n    return (\n      <div className={styles.wrapper} ref={containerRef}>\n        <div\n          className={styles.mobileSlide}\n          ref={(ref) => setRef(ref, renderingPeerId!)}\n        >\n          <Story\n            peerId={renderingPeerId!}\n            storyId={renderingStoryId!}\n            onDelete={onDelete}\n            dimensions={slideSizes.activeSlide}\n            isPrivateStories={renderingIsPrivate}\n            isArchivedStories={renderingIsArchive}\n            isDeleteModalOpen={isDeleteModalOpen}\n            isSingleStory={isSingleStory}\n            getIsAnimating={getIsAnimating}\n            onClose={onClose}\n            onReport={onReport}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  function renderStoryPreview(peerId: string, index: number, position: number) {\n    const style = buildStyle(\n      `width: ${slideSizes.slide.width}px`,\n      `height: ${slideSizes.slide.height}px`,\n    );\n    const className = buildClassName(\n      styles.slide,\n      styles.slidePreview,\n      `slide-${position}`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={className}\n        style={style}\n      >\n        <StoryPreview\n          peer={selectPeer(getGlobal(), peerId)}\n          peerStories={byPeerId?.[peerId]}\n        />\n      </div>\n    );\n  }\n\n  function renderStory(peerId: string) {\n    const style = isMobile ? undefined : buildStyle(\n      `width: ${slideSizes.activeSlide.width}px`,\n      `--slide-media-height: ${slideSizes.activeSlide.height}px`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={buildClassName(styles.slide, styles.activeSlide)}\n        style={style}\n      >\n        <Story\n          peerId={peerId}\n          storyId={renderingStoryId!}\n          onDelete={onDelete}\n          dimensions={slideSizes.activeSlide}\n          isPrivateStories={renderingIsPrivate}\n          isArchivedStories={renderingIsArchive}\n          isDeleteModalOpen={isDeleteModalOpen}\n          isSingleStory={isSingleStory}\n          getIsAnimating={getIsAnimating}\n          onClose={onClose}\n          onReport={onReport}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={styles.wrapper}\n      ref={containerRef}\n      style={`--story-viewer-scale: ${slideSizes.scale}`}\n      onTransitionEnd={handleTransitionEnd}\n    >\n      <div className={styles.fullSize} onClick={onClose} />\n      {renderingPeerIds.length > 1 && (\n        <div className={styles.backdropNonInteractive} style={`height: ${slideSizes.slide.height}px`} />\n      )}\n      {renderingPeerIds.map((peerId, index) => {\n        if (peerId === renderingPeerId) {\n          return renderStory(renderingPeerId);\n        }\n\n        return renderStoryPreview(peerId, index, index - renderingPeerPosition);\n      })}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    storyViewer: {\n      peerId: currentPeerId, storyId: currentStoryId, isSinglePeer, isSingleStory, isPrivate, isArchive, storyList,\n    },\n  } = selectTabState(global);\n  const { byPeerId, orderedPeerIds: { active } } = global.stories;\n\n  return {\n    byPeerId,\n    peerIds: storyList?.peerIds ?? active,\n    currentPeerId,\n    currentStoryId,\n    isSinglePeer,\n    isSingleStory,\n    isPrivate,\n    isArchive,\n  };\n}, (global) => selectIsStoryViewerOpen(global))(StorySlides));\n","import { useState } from '../lib/teact/teact';\n\nimport useLastCallback from './useLastCallback';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  });\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"views-list\":\"gpDY8bos\",\"viewsList\":\"gpDY8bos\",\"views-list-loading\":\"vuRAfQ5v\",\"viewsListLoading\":\"vuRAfQ5v\",\"info\":\"AOSUIChK\",\"centeredInfo\":\"oGLhkkS7\",\"view-reaction\":\"MLaabS6n\",\"viewReaction\":\"MLaabS6n\",\"header\":\"d3N2bktu\",\"content\":\"QmRA3HZK\",\"top-button\":\"Dkv8GAxf\",\"topButton\":\"Dkv8GAxf\",\"contact-filter\":\"YpB_9VxE\",\"contactFilter\":\"YpB_9VxE\",\"selected\":\"DoUlpdZJ\",\"sort\":\"axDpgq9G\",\"sort-button\":\"Bm5VA66f\",\"sortButton\":\"Bm5VA66f\",\"icon-sort\":\"YVQiH93R\",\"iconSort\":\"YVQiH93R\",\"icon-down\":\"NXP9aMD0\",\"iconDown\":\"NXP9aMD0\",\"search\":\"QQQqBLK6\",\"bottom-info\":\"_CSv6suH\",\"bottomInfo\":\"_CSv6suH\",\"scrolled\":\"RYQ0liYe\",\"footer\":\"dUK7rP37\",\"closeButton\":\"abPzLiCH\",\"opacity-fade-in\":\"cX8oY3zb\",\"opacityFadeIn\":\"cX8oY3zb\",\"fadeIn\":\"Sx_aeh1o\",\"blocked\":\"L82sciL8\",\"check\":\"UqGBKwjg\",\"menuBubble\":\"dRqemuTA\",\"with-colored-status\":\"GQ96fta9\",\"withColoredStatus\":\"GQ96fta9\"};","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiPeer, ApiTypeStoryView, ApiUser,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { selectPeer } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\nimport { isUserId } from '../../util/entities/ids';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/reactions/ReactionStaticEmoji';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\n\nimport styles from './StoryViewModal.module.scss';\n\ntype OwnProps = {\n  storyView: ApiTypeStoryView;\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\nconst BULLET = '\\u2022';\n\nconst StoryView = ({\n  storyView,\n  peer,\n  availableReactions,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    closeStoryViewer,\n    unblockUser,\n    blockUser,\n    deleteContact,\n    updateStoryView,\n    focusMessage,\n    openStoryViewer,\n    closeStoryViewModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    const { type } = storyView;\n\n    if (type === 'repost') {\n      closeStoryViewModal();\n      openStoryViewer({\n        peerId: storyView.peerId,\n        storyId: storyView.storyId,\n      });\n      return;\n    }\n\n    closeStoryViewer();\n\n    setTimeout(() => {\n      if (type === 'user') {\n        openChat({ id: storyView.peerId });\n      } else if (type === 'forward') {\n        focusMessage({ chatId: storyView.peerId, messageId: storyView.messageId });\n      }\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const contextActions = useMemo(() => {\n    if (!isUserId(storyView.peerId)) return undefined;\n    const { peerId, areStoriesBlocked, isUserBlocked } = storyView;\n    const user = peer as ApiUser;\n    const { isContact } = user || {};\n    const fullName = getUserFullName(user);\n\n    const actions: MenuItemContextAction[] = [];\n\n    if (!isUserBlocked) {\n      if (!areStoriesBlocked) {\n        actions.push({\n          handler: () => {\n            blockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: true });\n          },\n          title: lang('StoryHideFrom', fullName),\n          icon: 'hand-stop',\n        });\n      } else {\n        actions.push({\n          handler: () => {\n            unblockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: false });\n          },\n          title: lang('StoryShowBackTo', fullName),\n          icon: 'play-story',\n        });\n      }\n    }\n\n    if (isContact) {\n      actions.push({\n        handler: () => {\n          deleteContact({ userId: peerId });\n        },\n        title: lang('DeleteContact'),\n        icon: 'delete-user',\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        handler: () => {\n          if (isUserBlocked) {\n            unblockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: false });\n          } else {\n            blockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: true });\n          }\n        },\n        title: lang(isUserBlocked ? 'Unblock' : 'BlockUser'),\n        icon: isUserBlocked ? 'user' : 'delete-user',\n        destructive: !isUserBlocked,\n      });\n    }\n\n    return actions;\n  }, [lang, storyView, peer]);\n\n  const statusIcon: IconName = storyView.type === 'user' ? 'message-read'\n    : storyView.type === 'forward' ? 'forward' : 'loop';\n  const shouldColorStatus = storyView.type === 'forward' || storyView.type === 'repost';\n\n  const status = useMemo(() => {\n    const isModified = storyView.type === 'repost' && storyView.story.forwardInfo?.isModified;\n    const parts = [formatDateAtTime(lang, storyView.date * 1000)];\n    if (isModified) {\n      parts.push(lang('lng_edited'));\n    }\n\n    return parts.join(` ${BULLET} `);\n  }, [lang, storyView]);\n\n  return (\n    <ListItem\n      key={storyView.peerId}\n      className={buildClassName(\n        'chat-item-clickable small-icon',\n        styles.opacityFadeIn,\n        (storyView.isUserBlocked || storyView.areStoriesBlocked) && styles.blocked,\n      )}\n      onClick={handleClick}\n      rightElement={storyView.type === 'user' && storyView.reaction ? (\n        <ReactionStaticEmoji\n          reaction={storyView.reaction}\n          className={styles.viewReaction}\n          size={DEFAULT_REACTION_SIZE}\n          availableReactions={availableReactions}\n          withIconHeart\n        />\n      ) : undefined}\n      contextActions={contextActions}\n      withPortalForMenu\n      menuBubbleClassName={styles.menuBubble}\n    >\n      {isUserId(storyView.peerId) ? (\n        <PrivateChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          userId={storyView.peerId}\n          noStatusOrTyping\n          status={status}\n          statusIcon={statusIcon}\n          withStory\n          forceShowSelf\n        />\n      ) : (\n        <GroupChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          chatId={storyView.peerId}\n          status={status}\n          statusIcon={statusIcon}\n          withStory\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { storyView }) => {\n  const peer = selectPeer(global, storyView.peerId);\n\n  return {\n    peer,\n    availableReactions: global.reactions.availableReactions,\n  };\n})(StoryView));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStoryView } from '../../api/types';\n\nimport {\n  STORY_MIN_REACTIONS_SORT,\n  STORY_VIEWS_MIN_CONTACTS_FILTER,\n  STORY_VIEWS_MIN_SEARCH,\n} from '../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectPeerStory,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport PlaceholderChatInfo from '../ui/placeholder/PlaceholderChatInfo';\nimport SearchInput from '../ui/SearchInput';\nimport StoryView from './StoryView';\n\nimport styles from './StoryViewModal.module.scss';\n\ninterface StateProps {\n  story?: ApiStory;\n  isLoading?: boolean;\n  views?: ApiTypeStoryView[];\n  nextOffset?: string;\n  viewersExpirePeriod: number;\n  isCurrentUserPremium?: boolean;\n}\n\nconst REFETCH_DEBOUNCE = 250;\n\nfunction StoryViewModal({\n  story,\n  viewersExpirePeriod,\n  views,\n  nextOffset,\n  isLoading,\n  isCurrentUserPremium,\n}: StateProps) {\n  const {\n    loadStoryViewList, closeStoryViewModal, clearStoryViews,\n  } = getActions();\n\n  const [areJustContacts, markJustContacts, unmarkJustContacts] = useFlag(false);\n  const [areReactionsFirst, markReactionsFirst, unmarkReactionsFirst] = useFlag(true);\n  const [query, setQuery] = useState('');\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(story);\n  const isExpired = Boolean(story?.date) && (story.date + viewersExpirePeriod) < getServerTime();\n  const { viewsCount = 0, reactionsCount = 0 } = story?.views || {};\n\n  const shouldShowJustContacts = story?.isPublic && viewsCount > STORY_VIEWS_MIN_CONTACTS_FILTER;\n  const shouldShowSortByReactions = reactionsCount > STORY_MIN_REACTIONS_SORT;\n  const shouldShowSearch = viewsCount > STORY_VIEWS_MIN_SEARCH;\n  const hasHeader = shouldShowJustContacts || shouldShowSortByReactions || shouldShowSearch;\n\n  useEffect(() => {\n    if (!isOpen) {\n      setQuery('');\n      unmarkJustContacts();\n      markReactionsFirst();\n    }\n  }, [isOpen]);\n\n  const refetchViews = useDebouncedCallback(() => {\n    clearStoryViews({ isLoading: true });\n  }, [], REFETCH_DEBOUNCE, true);\n\n  useEffect(() => {\n    refetchViews();\n  }, [areJustContacts, areReactionsFirst, query, refetchViews]);\n\n  const sortedViews = useMemo(() => {\n    return views?.sort(prepareComparator(areReactionsFirst));\n  }, [areReactionsFirst, views]);\n\n  const placeholderCount = !sortedViews?.length ? Math.min(viewsCount, 8) : 1;\n\n  const notAllAvailable = Boolean(sortedViews?.length) && sortedViews.length < viewsCount && isExpired;\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!story?.id || nextOffset === undefined) return;\n    loadStoryViewList({\n      peerId: story.peerId,\n      storyId: story.id,\n      offset: nextOffset,\n      areReactionsFirst: areReactionsFirst || undefined,\n      areJustContacts: areJustContacts || undefined,\n      query,\n    });\n  });\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const handleClose = useLastCallback(() => {\n    closeStoryViewModal();\n  });\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        fluid\n        size=\"tiny\"\n        color=\"translucent\"\n        className={buildClassName(!isMenuOpen && 'active', styles.sortButton, styles.topButton)}\n        faded={isMenuOpen}\n        onClick={onTrigger}\n        ariaLabel={lang('SortBy')}\n      >\n        <Icon name={areReactionsFirst ? 'heart-outline' : 'recent'} className={styles.iconSort} />\n        <Icon name=\"down\" className={styles.iconDown} />\n      </Button>\n    );\n  }, [areReactionsFirst, lang]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      className=\"component-theme-dark\"\n      contentClassName={styles.viewsList}\n      isSlim\n    >\n      {hasHeader && (\n        <div className={styles.header}>\n          {shouldShowJustContacts && (\n            <div className={styles.contactFilter}>\n              <Button\n                className={buildClassName(!areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={unmarkJustContacts}\n              >\n                {lang('AllViewers')}\n              </Button>\n              <Button\n                className={buildClassName(areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={markJustContacts}\n              >\n                {lang('Contacts')}\n              </Button>\n            </div>\n          )}\n          {shouldShowSortByReactions && (\n            <DropdownMenu\n              className={styles.sort}\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"heart-outline\" onClick={markReactionsFirst}>\n                {lang('SortByReactions')}\n                {areReactionsFirst && (\n                  <Icon name=\"check\" className={styles.check} />\n                )}\n              </MenuItem>\n              <MenuItem icon=\"recent\" onClick={unmarkReactionsFirst}>\n                {lang('SortByTime')}\n                {!areReactionsFirst && (\n                  <Icon name=\"check\" className={styles.check} />\n                )}\n              </MenuItem>\n            </DropdownMenu>\n          )}\n          {shouldShowSearch && (\n            <SearchInput className={styles.search} value={query} onChange={setQuery} />\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(styles.content, !isAtBeginning && styles.topScrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {isExpired && !isLoading && !query && Boolean(!sortedViews?.length) && (\n          <div className={buildClassName(styles.info, styles.centeredInfo)}>\n            {renderText(\n              lang(isCurrentUserPremium ? 'ServerErrorViewers' : 'ExpiredViewsStub'),\n              ['simple_markdown', 'emoji'],\n            )}\n          </div>\n        )}\n        {!isLoading && Boolean(query.length) && !sortedViews?.length && (\n          <div className={styles.info}>\n            {lang('Story.ViewList.EmptyTextSearch')}\n          </div>\n        )}\n        <InfiniteScroll\n          items={sortedViews}\n          onLoadMore={handleLoadMore}\n        >\n          {sortedViews?.map((view) => {\n            const additionalKeyId = view.type === 'forward' ? view.messageId\n              : view.type === 'repost' ? view.storyId : 'user';\n            return (\n              <StoryView key={`${view.peerId}-${view.date}-${additionalKeyId}`} storyView={view} />\n            );\n          })}\n          {isLoading && Array.from({ length: placeholderCount }).map((_, i) => (\n            <ListItem\n\n              key={`placeholder-${i}`}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              disabled\n            >\n              <PlaceholderChatInfo />\n            </ListItem>\n          ))}\n          {notAllAvailable && (\n            <div key=\"not-all-available\" className={buildClassName(styles.info, styles.bottomInfo)}>\n              {lang('Story.ViewList.NotFullyRecorded')}\n            </div>\n          )}\n        </InfiniteScroll>\n      </div>\n      <div className={buildClassName(styles.footer, 'dialog-buttons')}>\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.close)}\n          isText\n          onClick={handleClose}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nfunction prepareComparator(areReactionsFirst?: boolean) {\n  return (a: ApiTypeStoryView, b: ApiTypeStoryView) => {\n    if (areReactionsFirst) {\n      const reactionA = a.type === 'user' && a.reaction;\n      const reactionB = b.type === 'user' && b.reaction;\n      if (reactionA && !reactionB) {\n        return -1;\n      }\n      if (!reactionA && reactionB) {\n        return 1;\n      }\n    }\n\n    return b.date - a.date;\n  };\n}\n\nexport default memo(withGlobal((global) => {\n  const { appConfig } = global;\n  const { storyViewer: { viewModal } } = selectTabState(global);\n  const {\n    storyId, views, nextOffset, isLoading,\n  } = viewModal || {};\n  const story = storyId ? selectPeerStory(global, global.currentUserId!, storyId) : undefined;\n\n  return {\n    storyId,\n    views,\n    viewersExpirePeriod: appConfig!.storyExpirePeriod + appConfig!.storyViewersExpirePeriod,\n    story: story && 'content' in story ? story : undefined,\n    nextOffset,\n    isLoading,\n    availableReactions: global.reactions.availableReactions,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StoryViewModal));\n","import {\n  beginHeavyAnimation,\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport useSlideSizes from './hooks/useSlideSizes';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport StealthModeModal from './StealthModeModal';\nimport StoryDeleteConfirmModal from './StoryDeleteConfirmModal';\nimport StorySettings from './StorySettings';\nimport StorySlides from './StorySlides';\nimport StoryViewModal from './StoryViewModal';\n\nimport styles from './StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 250;\n\ninterface StateProps {\n  isOpen: boolean;\n  peerId: string;\n  storyId?: number;\n  story?: ApiTypeStory;\n  origin?: StoryViewerOrigin;\n  shouldSkipHistoryAnimations?: boolean;\n  withAnimation?: boolean;\n  isPrivacyModalOpen?: boolean;\n}\n\nfunction StoryViewer({\n  isOpen,\n  peerId,\n  storyId,\n  story,\n  origin,\n  shouldSkipHistoryAnimations,\n  withAnimation,\n  isPrivacyModalOpen,\n}: StateProps) {\n  const { closeStoryViewer, closeStoryPrivacyEditor, reportStory } = getActions();\n\n  const lang = useOldLang();\n  const [storyToDelete, setStoryToDelete] = useState<ApiTypeStory | undefined>(undefined);\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n\n  const { bestImageData, thumbnail } = useStoryProps(story);\n  const slideSizes = useSlideSizes();\n  const isPrevOpen = usePreviousDeprecated(isOpen);\n  const prevBestImageData = usePreviousDeprecated(bestImageData);\n  const prevPeerId = usePreviousDeprecated(peerId);\n  const prevOrigin = usePreviousDeprecated(origin);\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setStoryToDelete(undefined);\n      closeDeleteModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      enableDirectTextInput();\n      stopPriorityPlayback();\n    };\n  }, [isOpen]);\n\n  const handleClose = useCallback(() => {\n    closeStoryViewer();\n  }, [closeStoryViewer]);\n\n  const handleOpenDeleteModal = useLastCallback((s: ApiTypeStory) => {\n    setStoryToDelete(s);\n    openDeleteModal();\n  });\n\n  const handleCloseDeleteModal = useLastCallback(() => {\n    closeDeleteModal();\n    setStoryToDelete(undefined);\n  });\n\n  const openMessageReport = useLastCallback(() => {\n    if (!storyId) return;\n    reportStory({ storyId, peerId });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isGhostAnimation && !isPrevOpen && isOpen && peerId && thumbnail && origin !== undefined) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(peerId, origin, thumbnail, bestImageData, slideSizes.activeSlide);\n    }\n    if (isGhostAnimation && isPrevOpen && !isOpen && prevPeerId && prevBestImageData && prevOrigin !== undefined) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevPeerId, prevOrigin, prevBestImageData);\n    }\n  }, [\n    isGhostAnimation,\n    bestImageData,\n    prevBestImageData,\n    isOpen,\n    isPrevOpen,\n    slideSizes.activeSlide,\n    thumbnail,\n    peerId,\n    prevPeerId,\n    origin,\n    prevOrigin,\n  ]);\n\n  return (\n    <ShowTransition\n      id=\"StoryViewer\"\n      className={styles.root}\n      isOpen={isOpen}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className={styles.backdrop} onClick={handleClose} />\n      <Button\n        className={styles.close}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n\n      <StorySlides\n        isOpen={isOpen}\n        isDeleteModalOpen={isDeleteModalOpen}\n        onReport={openMessageReport}\n        onClose={handleClose}\n        onDelete={handleOpenDeleteModal}\n      />\n\n      <StoryDeleteConfirmModal\n        isOpen={isDeleteModalOpen}\n        story={storyToDelete}\n        onClose={handleCloseDeleteModal}\n      />\n      <StoryViewModal />\n      <StealthModeModal />\n      <StorySettings isOpen={isPrivacyModalOpen} onClose={closeStoryPrivacyEditor} />\n    </ShowTransition>\n  );\n}\n\nexport default memo(withGlobal((global): StateProps => {\n  const {\n    shouldSkipHistoryAnimations, storyViewer: {\n      storyId, peerId, isPrivacyModalOpen, origin,\n    },\n  } = selectTabState(global);\n  const story = peerId && storyId ? selectPeerStory(global, peerId, storyId) : undefined;\n  const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  return {\n    isOpen: selectIsStoryViewerOpen(global),\n    shouldSkipHistoryAnimations,\n    peerId: peerId!,\n    storyId,\n    story,\n    origin,\n    withAnimation,\n    isPrivacyModalOpen,\n  };\n})(StoryViewer));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\n\nimport { PEER_PICKER_ITEM_HEIGHT_PX } from '../../../config';\nimport {\n  getCanPostInChat, getGroupStatus, getUserStatus, isUserOnline,\n} from '../../../global/helpers';\nimport { isApiPeerChat } from '../../../global/helpers/peers';\nimport { selectPeer, selectTopics, selectUserStatus } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { REM } from '../helpers/mediaDimensions';\nimport renderText from '../helpers/renderText';\n\nimport useSelector from '../../../hooks/data/useSelector';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useInputFocusOnOpen from '../../../hooks/useInputFocusOnOpen';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport Loading from '../../ui/Loading';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport Avatar from '../Avatar';\nimport FullNameTitle from '../FullNameTitle';\nimport Icon from '../icons/Icon';\nimport TopicIcon from '../TopicIcon';\nimport PickerItem from './PickerItem';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  className?: string;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  isLowStackPriority?: boolean;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\nconst ITEM_CLASS_NAME = 'ChatOrUserPicker-item';\nconst TOPIC_ITEM_HEIGHT_PX = 56;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  search,\n  searchPlaceholder,\n  className,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n  isLowStackPriority,\n}) => {\n  const { loadTopics } = getActions();\n\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const topicContainerRef = useRef<HTMLDivElement>();\n  const searchRef = useRef<HTMLInputElement>();\n  const topicSearchRef = useRef<HTMLInputElement>();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds.indexOf(viewportIds![0]);\n\n  const resetSearch = useLastCallback(() => {\n    onSearchChange('');\n  });\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const selectTopicsById = useLastCallback((global: GlobalState) => {\n    if (!forumId) {\n      return undefined;\n    }\n\n    return selectTopics(global, forumId);\n  });\n\n  const forumTopicsById = useSelector(selectTopicsById);\n\n  const [topicIds, topics] = useMemo(() => {\n    const global = getGlobal();\n    const chatsById = global.chats.byId;\n    const chatFullInfoById = global.chats.fullInfoById;\n\n    const chat = chatsById[forumId!];\n\n    if (!chat || !forumTopicsById) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = forumTopicsById\n      ? Object.values(forumTopicsById).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chat, topic, undefined, chatFullInfoById[forumId!])\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : forumTopicsById;\n\n    return [Object.keys(result).map(Number), result];\n  }, [forumId, topicSearch, forumTopicsById]);\n\n  const handleHeaderBackClick = useLastCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  });\n\n  const handleSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  });\n\n  const handleTopicSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatsById = getGlobal().chats.byId;\n\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById[chatId];\n      if (chat?.isForum) {\n        if (!forumTopicsById) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, `.${ITEM_CLASS_NAME}`, true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, `.${ITEM_CLASS_NAME}`, true);\n\n  const handleClick = useLastCallback((chatId: string) => {\n    const chatsById = getGlobal().chats.byId;\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!forumTopicsById) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  });\n\n  const renderChatItem = useCallback((id: string, index: number) => {\n    const global = getGlobal();\n    const peer = selectPeer(global, id);\n    if (!peer) {\n      return undefined;\n    }\n\n    const isSelf = peer && !isApiPeerChat(peer) ? peer.isSelf : undefined;\n\n    function getSubtitle() {\n      if (!peer) return undefined;\n      if (peer.id === currentUserId) return [lang('SavedMessagesInfo')];\n      if (isApiPeerChat(peer)) {\n        return [getGroupStatus(lang, peer)];\n      }\n\n      const userStatus = selectUserStatus(global, peer.id);\n      return [\n        getUserStatus(lang, peer, userStatus),\n        buildClassName(isUserOnline(peer, userStatus, true) && 'online'),\n      ];\n    }\n\n    const [subtitle, subtitleClassName] = getSubtitle() || [];\n\n    return (\n      <PickerItem\n        key={id}\n        className={ITEM_CLASS_NAME}\n        title={<FullNameTitle peer={peer} isSavedMessages={isSelf} />}\n        avatarElement={(\n          <Avatar\n            peer={peer}\n            isSavedMessages={isSelf}\n            size=\"medium\"\n          />\n        )}\n        subtitle={subtitle}\n        subtitleClassName={subtitleClassName}\n        ripple\n        style={`top: ${(viewportOffset + index) * PEER_PICKER_ITEM_HEIGHT_PX}px;`}\n\n        onClick={() => handleClick(id)}\n      />\n    );\n  }, [currentUserId, lang, viewportOffset]);\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Back')} onClick={handleHeaderBackClick}>\n            <Icon name=\"arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={(topicIds?.length || 0) * TOPIC_ITEM_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {!topicIds && <Loading />}\n          {topicIds?.map((topicId, i) => (\n            <PickerItem\n              key={`${forumId}_${topicId}`}\n              className={ITEM_CLASS_NAME}\n\n              onClick={() => onSelectChatOrUser(forumId!, topicId)}\n              style={`top: ${(viewportOffset + i) * TOPIC_ITEM_HEIGHT_PX}px;`}\n              avatarElement={(\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n              )}\n              title={renderText(topics[topicId].title)}\n            />\n          ))}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            itemSelector={`.${ITEM_CLASS_NAME}`}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds.length * PEER_PICKER_ITEM_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map(renderChatItem)}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={buildClassName('ChatOrUserPicker', className)}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      isLowStackPriority={isLowStackPriority}\n    >\n      <Transition activeKey={activeKey} name=\"slideFade\" slideClassName=\"ChatOrUserPicker_slide\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatType } from '../../api/types';\nimport type { ThreadId } from '../../types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport {\n  getCanPostInChat,\n  isDeletedUser,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport {\n  filterChatIdsByType, selectChat, selectChatFullInfo, selectUser,\n} from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from './helpers/sortChatIds';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ChatOrUserPicker from './pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  className?: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  isLowStackPriority?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  className,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n  isLowStackPriority,\n}) => {\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n\n    const peerIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = selectChat(global, id);\n      const user = selectUser(global, id);\n      if (user && !isDeletedUser(user)) return true;\n\n      const chatFullInfo = selectChatFullInfo(global, id);\n\n      return chat && (!chatFullInfo || getCanPostInChat(chat, undefined, undefined, chatFullInfo));\n    });\n\n    const sorted = sortChatIds(\n      filterPeersByQuery({\n        ids: unique([\n          ...(currentUserId ? [currentUserId] : []),\n          ...peerIds,\n          ...(contactIds || []),\n        ]),\n        query: search,\n      }),\n      undefined,\n      priorityIds,\n      currentUserId,\n    );\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [pinnedIds, currentUserId, activeListIds, search, archivedListIds, contactIds, filter, isOpen]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      className={className}\n      chatOrUserIds={renderingIds}\n      currentUserId={currentUserId}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      isLowStackPriority={isLowStackPriority}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ThreadId } from '../../types';\n\nimport { getChatTitle, getUserFirstOrLastName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n  isStory?: boolean;\n  isForwarding?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n  isStory,\n  isForwarding,\n}) => {\n  const {\n    openChatOrTopicWithReplyInDraft,\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    forwardStory,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderingIsStory = usePreviousDeprecated(isStory, true);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    const isSelf = recipientId === currentUserId;\n    if (isStory) {\n      forwardStory({ toChatId: recipientId });\n      const global = getGlobal();\n      if (isUserId(recipientId)) {\n        showNotification({\n          message: isSelf\n            ? lang('Conversation.StoryForwardTooltip.SavedMessages.One')\n            : lang(\n              'StorySharedTo',\n              getUserFirstOrLastName(selectUser(global, recipientId)),\n            ),\n        });\n      } else {\n        const chat = selectChat(global, recipientId);\n        if (!chat) return;\n\n        showNotification({\n          message: lang('StorySharedTo', getChatTitle(lang, chat)),\n        });\n      }\n      return;\n    }\n\n    if (isSelf) {\n      const message = lang(\n        isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One',\n      );\n\n      forwardToSavedMessages();\n      showNotification({ message });\n    } else {\n      const chatId = recipientId;\n      const topicId = threadId ? Number(threadId) : undefined;\n      if (isForwarding) {\n        setForwardChatOrTopic({ chatId, topicId });\n      } else {\n        openChatOrTopicWithReplyInDraft({ chatId, topicId });\n      }\n    }\n  }, [currentUserId, isManyMessages, isStory, lang, isForwarding]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      className={renderingIsStory ? 'component-theme-dark' : undefined}\n      searchPlaceholder={lang(isForwarding ? 'ForwardTo' : 'ReplyToDialog')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { messageIds, storyId } = selectTabState(global).forwardMessages;\n  const isForwarding = (messageIds && messageIds.length > 0);\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (messageIds?.length || 0) > 1,\n    isStory: Boolean(storyId),\n    isForwarding,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ThreadId } from '../../types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      filter={requestedDraft?.filter}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useOldLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { selectCurrentMessageList, selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport renderText from '../common/helpers/renderText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  dialogs: (ApiError | ApiContact)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, currentMessageList }) => {\n  const {\n    dismissDialog,\n    sendMessage,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      if (!currentMessageList) {\n        return;\n      }\n\n      sendMessage({\n        contact: contactRequest,\n        messageList: currentMessageList,\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiContact) => {\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1]);\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map((notification) => (\n        <Notification key={notification.localId} notification={notification} />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/browser/url';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (!url) {\n      return;\n    }\n\n    window.open(ensureProtocol(url), '_blank', 'noopener noreferrer');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlText', { url: renderingUrl }, { withNodes: true, withMarkdown: true }))}\n      confirmLabel={lang('OpenUrlConfirm')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VJDwJpsF\",\"buttons\":\"aYO2C2Hx\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { IS_IOS, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport { prepareMapUrl } from '../../../util/map';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './MapModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['mapModal'];\n};\n\nconst OpenMapModal = ({ modal }: OwnProps) => {\n  const { closeMapModal } = getActions();\n\n  const { point: geoPoint, zoom } = modal || {};\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(geoPoint);\n\n  const handleClose = useLastCallback(() => {\n    closeMapModal();\n  });\n\n  const [googleUrl, bingUrl, appleUrl, osmUrl] = useMemo(() => {\n    if (!geoPoint) {\n      return [];\n    }\n\n    const google = prepareMapUrl('google', geoPoint, zoom);\n    const bing = prepareMapUrl('bing', geoPoint, zoom);\n    const osm = prepareMapUrl('osm', geoPoint, zoom);\n    const apple = prepareMapUrl('apple', geoPoint, zoom);\n\n    return [google, bing, apple, osm];\n  }, [geoPoint, zoom]);\n\n  const openUrl = useLastCallback((url: string) => {\n    closeMapModal();\n    window.open(url, '_blank', 'noopener');\n  });\n\n  const handleGoogleClick = useLastCallback(() => {\n    openUrl(googleUrl!);\n  });\n\n  const handleBingClick = useLastCallback(() => {\n    openUrl(bingUrl!);\n  });\n\n  const handleAppleClick = useLastCallback(() => {\n    openUrl(appleUrl!);\n  });\n\n  const handleOsmClick = useLastCallback(() => {\n    openUrl(osmUrl!);\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.root}\n      title={lang('OpenMapWith')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      isSlim\n    >\n      <div className={styles.buttons}>\n        {(IS_IOS || IS_MAC_OS) && (\n          <Button fluid size=\"smaller\" onClick={handleAppleClick}>\n            Apple Maps\n          </Button>\n        )}\n        <Button fluid size=\"smaller\" onClick={handleGoogleClick}>\n          Google Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleBingClick}>\n          Bing Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleOsmClick}>\n          OpenStreetMap\n        </Button>\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(OpenMapModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { ensureProtocol } from '../../../util/browser/url';\nimport renderText from '../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal?: TabState['urlAuth'];\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps & StateProps> = ({\n  modal, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(modal, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useOldLang();\n\n  const handleOpen = useCallback(() => {\n    if (modal?.url && isLoginChecked) {\n      const acceptAction = modal.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else if (currentAuth?.url) {\n      window.open(ensureProtocol(currentAuth.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    modal, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(modal?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    return {\n      currentUser,\n    };\n  },\n)(UrlAuthModal));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateToString, formatTime, getDayStart } from '../../util/dates/dateFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useOldLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePreviousDeprecated(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  const isDisabled = (isFutureMode && selectedDate.getTime() < minDate.getTime())\n    || (isPastMode && selectedDate.getTime() > maxDate.getTime());\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    if (isFutureMode && selectedDate < minDate) {\n      onSubmit(minDate);\n    } else if (isPastMode && selectedDate > maxDate) {\n      onSubmit(maxDate);\n    } else {\n      onSubmit(selectedDate);\n    }\n  }, [isFutureMode, isPastMode, minDate, maxDate, onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <Icon name=\"previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <Icon name=\"next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                'div-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : gridDate ? 'clickable' : '',\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <div className=\"footer\">\n          <Button\n            onClick={handleSubmit}\n            disabled={isDisabled}\n          >\n            {submitLabel}\n          </Button>\n          {secondButtonLabel && (\n            <Button onClick={onSecondButtonClick} isText>\n              {secondButtonLabel}\n            </Button>\n          )}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: OldLangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.getTime() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useOldLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Modal from '../ui/Modal';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useOldLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  const inputRef = useRef<HTMLInputElement>();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => {\n        inputRef.current?.focus();\n      }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar\n            size=\"jumbo\"\n            peer={renderingUser}\n            text={`${firstName} ${lastName}`}\n          />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text NewContactModal__help-text__negative\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = userId ? selectUser(global, userId) : undefined;\n    return {\n      user,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import type {\n  ElementRef } from '../lib/teact/teact';\nimport {\n  useEffect, useSignal, useState,\n} from '../lib/teact/teact';\n\nimport type { Point, Size } from '../types';\n\nimport { RESIZE_HANDLE_SELECTOR } from '../config';\nimport buildStyle from '../util/buildStyle';\nimport { captureEvents } from '../util/captureEvents';\nimport getPointerPosition from '../util/events/getPointerPosition';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport enum ResizeHandleType {\n  Top,\n  Bottom,\n  Left,\n  Right,\n  TopLeft,\n  TopRight,\n  BottomLeft,\n  BottomRight,\n}\n\ntype ResizeHandleSelectorType = 'top' | 'bottom' | 'left'\n  | 'right' | 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';\n\nconst resizeHandleSelectorsMap: Record<ResizeHandleSelectorType, ResizeHandleType> = {\n  top: ResizeHandleType.Top,\n  bottom: ResizeHandleType.Bottom,\n  left: ResizeHandleType.Left,\n  right: ResizeHandleType.Right,\n  topLeft: ResizeHandleType.TopLeft,\n  topRight: ResizeHandleType.TopRight,\n  bottomLeft: ResizeHandleType.BottomLeft,\n  bottomRight: ResizeHandleType.BottomRight,\n};\n\nconst resizeHandleSelectors = Object.keys(resizeHandleSelectorsMap) as ResizeHandleSelectorType[];\n\nlet resizeTimeout: number | undefined;\nconst FULLSCREEN_POSITION = { x: 0, y: 0 };\n\nexport default function useDraggable(\n  ref: ElementRef<HTMLElement>,\n  dragHandleElementRef: ElementRef<HTMLElement>,\n  isDragEnabled: boolean = true,\n  originalSize: Size,\n  isFullscreen: boolean = false,\n  minimumSize: Size = { width: 0, height: 0 },\n  cachedPosition?: Point,\n) {\n  const [elementCurrentPosition, setElementCurrentPosition] = useState<Point | undefined>(cachedPosition);\n  const [elementCurrentSize, setElementCurrentSize] = useState<Size | undefined>(undefined);\n\n  const [getElementPositionOnStartTransform, setElementPositionOnStartTransform] = useSignal({ x: 0, y: 0 });\n  const [getElementSizeOnStartTransform, setElementSizeOnStartTransform] = useSignal({ width: 0, height: 0 });\n  const [getTransformStartPoint, setTransformStartPoint] = useSignal({ x: 0, y: 0 });\n\n  const elementPositionOnStartTransform = getElementPositionOnStartTransform();\n  const transformStartPoint = getTransformStartPoint();\n\n  const element = ref.current;\n  const dragHandleElement = dragHandleElementRef.current;\n\n  const [isInitiated, setIsInitiated] = useFlag(false);\n  const [wasElementShown, setWasElementShown] = useFlag(false);\n  const [isDragging, startDragging, stopDragging] = useFlag(false);\n  const [isResizing, startResizing, stopResizing] = useFlag(false);\n  const [isWindowsResizing, startWindowResizing, stopWindowResizing] = useFlag(false);\n\n  const [hitResizeHandle, setHitResizeHandle] = useState<ResizeHandleType | undefined>(undefined);\n\n  function getVisibleArea() {\n    return {\n      width: window.innerWidth,\n      height: window.innerHeight,\n    };\n  }\n\n  const updateCurrentPosition = useLastCallback((position: Point) => {\n    if (!isFullscreen) setElementCurrentPosition({ x: position.x, y: position.y });\n  });\n\n  const getActualPosition = useLastCallback(() => {\n    return isFullscreen ? FULLSCREEN_POSITION : elementCurrentPosition;\n  });\n\n  const getCenteredPosition = useLastCallback(() => {\n    if (!elementCurrentSize) return undefined;\n    const { width, height } = elementCurrentSize;\n\n    const visibleArea = getVisibleArea();\n    const viewportWidth = visibleArea.width;\n    const viewportHeight = visibleArea.height;\n\n    const centeredX = (viewportWidth - width) / 2;\n    const centeredY = (viewportHeight - height) / 2;\n\n    return { x: centeredX, y: centeredY };\n  });\n\n  useEffect(() => {\n    if (element) setWasElementShown();\n  }, [element]);\n\n  useEffect(() => {\n    if (!isInitiated && elementCurrentSize) {\n      const centeredPosition = getCenteredPosition();\n      if (!centeredPosition) return;\n\n      updateCurrentPosition(centeredPosition);\n      setIsInitiated();\n    }\n  }, [elementCurrentSize, isInitiated, element]);\n\n  const handleStartDrag = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (event instanceof MouseEvent && event.button !== 0) {\n      return;\n    }\n\n    const targetElement = event.target as HTMLElement;\n    if (targetElement.closest('.no-drag') || !element) {\n      return;\n    }\n    const { x, y } = getPointerPosition(event);\n\n    const { left, top } = element.getBoundingClientRect();\n    setElementPositionOnStartTransform({ x: left, y: top });\n    setTransformStartPoint({ x, y });\n\n    startDragging();\n  });\n\n  function getResizeHandleFromTarget(targetElement: HTMLElement) {\n    const closest = (selector: string) => targetElement.closest(selector);\n\n    if (!closest(RESIZE_HANDLE_SELECTOR)) return undefined;\n    for (const selector of resizeHandleSelectors) {\n      if (closest(`.${selector}`)) {\n        return resizeHandleSelectorsMap[selector];\n      }\n    }\n    return undefined;\n  }\n\n  const handleStartResize = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (event instanceof MouseEvent && event.button !== 0) {\n      return;\n    }\n\n    const targetElement = event.target as HTMLElement;\n    if (!element || !targetElement) {\n      return;\n    }\n    const resizeHandle = getResizeHandleFromTarget(targetElement);\n\n    if (resizeHandle === undefined) return;\n    setHitResizeHandle(resizeHandle);\n\n    const { x, y } = getPointerPosition(event);\n\n    const {\n      left, right, top, bottom,\n    } = element.getBoundingClientRect();\n    setElementPositionOnStartTransform({ x: left, y: top });\n    setElementSizeOnStartTransform({ width: right - left, height: bottom - top });\n    setTransformStartPoint({ x, y });\n\n    startResizing();\n  });\n\n  const handleDragRelease = useLastCallback(() => {\n    stopDragging();\n  });\n\n  const handleResizeRelease = useLastCallback(() => {\n    stopResizing();\n  });\n\n  useEffect(() => {\n    if (!isDragEnabled) {\n      stopDragging();\n    }\n  }, [isDragEnabled]);\n\n  const ensurePositionInVisibleArea = (x: number, y: number) => {\n    const visibleArea = getVisibleArea();\n\n    const visibleAreaWidth = visibleArea.width;\n    const visibleAreaHeight = visibleArea.height;\n\n    const componentWidth = elementCurrentSize!.width;\n    const componentHeight = elementCurrentSize!.height;\n\n    let newX = x;\n    let newY = y;\n\n    if (newX < 0) newX = 0;\n    if (newY < 0) newY = 0;\n    if (newX + componentWidth > visibleAreaWidth) newX = visibleAreaWidth - componentWidth;\n    if (newY + componentHeight > visibleAreaHeight) newY = visibleAreaHeight - componentHeight;\n\n    return { x: newX, y: newY };\n  };\n\n  const adjustPositionWithinBounds = useLastCallback(() => {\n    if (isFullscreen) return;\n    const position = !wasElementShown && !cachedPosition ? getCenteredPosition() : elementCurrentPosition;\n    if (!elementCurrentSize || !position) return;\n    const newPosition = ensurePositionInVisibleArea(position.x, position.y);\n    updateCurrentPosition(newPosition);\n  });\n\n  const ensureSizeInVisibleArea = useLastCallback((sizeForCheck: Size) => {\n    const newSize = sizeForCheck;\n\n    const visibleArea = getVisibleArea();\n\n    const originalWidth = originalSize.width;\n    const originalHeight = originalSize.height;\n    newSize.width = Math.min(visibleArea.width, Math.max(originalWidth, newSize.width));\n    newSize.height = Math.min(visibleArea.height, Math.max(originalHeight, newSize.height));\n\n    return newSize;\n  });\n\n  useEffect(() => {\n    if (isResizing) return;\n    const newSize = ensureSizeInVisibleArea({ width: originalSize.width, height: originalSize.height });\n    if (newSize) setElementCurrentSize(newSize);\n  }, [originalSize, isResizing]);\n\n  const adjustSizeWithinBounds = useLastCallback(() => {\n    if (!elementCurrentSize || isResizing) return;\n    const newSize = ensureSizeInVisibleArea(elementCurrentSize);\n    if (newSize) setElementCurrentSize(newSize);\n  });\n\n  useEffect(() => {\n    if (isResizing) return;\n    adjustPositionWithinBounds();\n  }, [elementCurrentSize, isResizing]);\n\n  useEffect(() => {\n    const handleWindowResize = () => {\n      startWindowResizing();\n      adjustSizeWithinBounds();\n      adjustPositionWithinBounds();\n      if (resizeTimeout) {\n        clearTimeout(resizeTimeout);\n        resizeTimeout = undefined;\n      }\n      resizeTimeout = window.setTimeout(() => {\n        resizeTimeout = undefined;\n        stopWindowResizing();\n      }, 250);\n    };\n\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      clearTimeout(resizeTimeout);\n      resizeTimeout = undefined;\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, [adjustPositionWithinBounds]);\n\n  const handleDrag = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (!isDragging || !element) return;\n    const { x, y } = getPointerPosition(event);\n\n    const offsetX = x - transformStartPoint.x;\n    const offsetY = y - transformStartPoint.y;\n\n    const newX = elementPositionOnStartTransform.x + offsetX;\n    const newY = elementPositionOnStartTransform.y + offsetY;\n\n    if (elementCurrentSize) setElementCurrentPosition(ensurePositionInVisibleArea(newX, newY));\n  });\n\n  const handleResize = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (!isResizing || !element || hitResizeHandle === undefined) return;\n    const { x, y } = getPointerPosition(event);\n    const sizeOnStartTransform = getElementSizeOnStartTransform();\n\n    const pageVisibleX = Math.min(Math.max(0, x), getVisibleArea().width);\n    const pageVisibleY = Math.min(Math.max(0, y), getVisibleArea().height);\n\n    const offsetX = pageVisibleX - transformStartPoint.x;\n    const offsetY = pageVisibleY - transformStartPoint.y;\n\n    const maxX = elementPositionOnStartTransform.x + sizeOnStartTransform.width - minimumSize.width;\n    const maxY = elementPositionOnStartTransform.y + sizeOnStartTransform.height - minimumSize.height;\n\n    const originalBounds = {\n      x: elementPositionOnStartTransform.x,\n      y: elementPositionOnStartTransform.y,\n      width: sizeOnStartTransform.width,\n      height: sizeOnStartTransform.height,\n    };\n\n    const newBounds = { ...originalBounds };\n\n    if (hitResizeHandle === ResizeHandleType.Left\n      || hitResizeHandle === ResizeHandleType.TopLeft\n      || hitResizeHandle === ResizeHandleType.BottomLeft\n    ) {\n      newBounds.width = Math.max(sizeOnStartTransform.width - offsetX, minimumSize.width);\n      newBounds.x = Math.min(newBounds.x + offsetX, maxX);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Right\n      || hitResizeHandle === ResizeHandleType.TopRight\n      || hitResizeHandle === ResizeHandleType.BottomRight\n    ) {\n      newBounds.width = Math.max(sizeOnStartTransform.width + offsetX, minimumSize.width);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Top\n      || hitResizeHandle === ResizeHandleType.TopLeft\n      || hitResizeHandle === ResizeHandleType.TopRight\n    ) {\n      newBounds.height = Math.max(sizeOnStartTransform.height - offsetY, minimumSize.height);\n      newBounds.y = Math.min(newBounds.y + offsetY, maxY);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Bottom\n      || hitResizeHandle === ResizeHandleType.BottomLeft\n      || hitResizeHandle === ResizeHandleType.BottomRight\n    ) {\n      newBounds.height = Math.max(sizeOnStartTransform.height + offsetY, minimumSize.height);\n    }\n\n    setElementCurrentSize({ width: newBounds.width, height: newBounds.height });\n    setElementCurrentPosition({ x: newBounds.x, y: newBounds.y });\n  });\n\n  useEffect(() => {\n    let cleanup: NoneToVoidFunction | undefined;\n    if (dragHandleElement && isDragEnabled) {\n      cleanup = captureEvents(dragHandleElement, {\n        onCapture: handleStartDrag,\n        onDrag: handleDrag,\n        onRelease: handleDragRelease,\n        onClick: handleDragRelease,\n        onDoubleClick: handleDragRelease,\n      });\n    }\n    return cleanup;\n  }, [isDragEnabled, dragHandleElement]);\n\n  useEffect(() => {\n    const cleanups: NoneToVoidFunction[] = [];\n    if (element && isDragEnabled) {\n      for (const selector of resizeHandleSelectors) {\n        const resizeHandler = element.querySelector(`.resizeHandle.${selector}`) as HTMLElement;\n\n        if (resizeHandler) {\n          const cleanup = captureEvents(resizeHandler, {\n            onCapture: handleStartResize,\n            onDrag: handleResize,\n            onRelease: handleResizeRelease,\n            onClick: handleResizeRelease,\n            onDoubleClick: handleResizeRelease,\n          });\n\n          if (cleanup) {\n            cleanups.push(cleanup);\n          }\n        }\n      }\n    }\n\n    return () => {\n      cleanups.forEach((cleanup) => cleanup());\n    };\n  }, [isDragEnabled, element]);\n\n  const cursorStyle = isDragging ? 'cursor: grabbing !important; ' : '';\n\n  const actualPosition = getActualPosition();\n\n  if (!isInitiated || !elementCurrentSize || !actualPosition) {\n    return {\n      isDragging: false,\n      style: cursorStyle,\n    };\n  }\n\n  const style = buildStyle(\n    `left: ${actualPosition.x}px;`,\n    `top: ${actualPosition.y}px;`,\n    !isFullscreen && `max-width: ${elementCurrentSize.width}px;`,\n    !isFullscreen && `max-height: ${elementCurrentSize.height}px;`,\n    'position: fixed;',\n    (isDragging || isResizing || isWindowsResizing) && 'transition: none !important;',\n    cursorStyle,\n  );\n\n  return {\n    position: elementCurrentPosition,\n    size: elementCurrentSize,\n    isDragging,\n    isResizing,\n    style,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kUZmBlnN\",\"window-state-button\":\"Rax9j_TK\",\"windowStateButton\":\"Rax9j_TK\",\"button\":\"SMRJmUuE\",\"avatars\":\"GP17QhNN\",\"state-icon\":\"sdbTXCxq\",\"stateIcon\":\"sdbTXCxq\",\"icon\":\"P0P4gW6a\",\"title\":\"TZFjRaG4\"};","import {\n  memo, useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { WebApp } from '../../../types/webapp';\n\nimport { selectActiveWebApp, selectTabState, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport styles from './MinimizedWebAppModal.module.scss';\n\ntype StateProps = {\n  activeTabBot?: ApiUser;\n  isMinimizedState?: boolean;\n  openedWebApps?: Record<string, WebApp>;\n};\n\nconst MinimizedWebAppModal = ({\n  activeTabBot, isMinimizedState, openedWebApps,\n}: StateProps) => {\n  const {\n    changeWebAppModalState,\n    closeWebAppModal,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const ref = useRef<HTMLDivElement>();\n\n  const openedWebAppsValues = useMemo(() => {\n    return openedWebApps && Object.values(openedWebApps);\n  }, [openedWebApps]);\n\n  const openedTabsCount = openedWebAppsValues?.length;\n\n  const peers = useMemo(() => {\n    if (!openedTabsCount) return [];\n\n    const global = getGlobal();\n    const activeTabBotId = activeTabBot?.id;\n    const openedApps = unique([activeTabBotId, ...openedWebAppsValues.map((app) => app.botId)]);\n    const bots = openedApps.map((id) => id && selectUser(global, id)).filter(Boolean).slice(0, 3);\n    return bots;\n  }, [openedTabsCount, activeTabBot, openedWebAppsValues]);\n\n  const handleCloseClick = useLastCallback(() => {\n    closeWebAppModal();\n  });\n\n  const handleExpandClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'maximized' });\n  });\n\n  if (!isMinimizedState) return undefined;\n\n  function renderTitle() {\n    const activeTabName = peers.length > 0 && peers[0]?.firstName;\n    const title = openedTabsCount && activeTabName && openedTabsCount > 1\n      ? lang('MiniAppsMoreTabs',\n        {\n          botName: activeTabName,\n          count: openedTabsCount - 1,\n        },\n        {\n          pluralValue: openedTabsCount - 1,\n        })\n      : activeTabName;\n\n    return (\n      <div className={styles.title}>\n        {title}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        styles.root,\n      )}\n    >\n      <Button\n        className={styles.button}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        ariaLabel={oldLang('Close')}\n        onClick={handleCloseClick}\n      >\n        <Icon className={styles.icon} name=\"close\" />\n      </Button>\n      <AvatarList className={styles.avatars} size=\"mini\" peers={peers} />\n      {renderTitle()}\n      <Button\n        className={buildClassName(\n          styles.windowStateButton,\n          'no-drag',\n        )}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        onClick={handleExpandClick}\n      >\n        <Icon className={styles.stateIcon} name=\"expand-modal\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const webApps = tabState.webApps;\n\n    const { botId } = selectActiveWebApp(global) || {};\n    const { modalState, openedWebApps } = webApps || {};\n    const isMinimizedState = modalState === 'minimized';\n    const activeTabBot = botId ? selectUser(global, botId) : undefined;\n\n    return {\n      activeTabBot,\n      isMinimizedState,\n      openedWebApps,\n    };\n  },\n)(MinimizedWebAppModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"RFg0Ey2I\",\"user-count-badge\":\"UZtJ6ZXb\",\"userCountBadge\":\"UZtJ6ZXb\",\"user-badge-icon\":\"pTiZFhsG\",\"userBadgeIcon\":\"pTiZFhsG\",\"name\":\"TzA5nqCC\"};","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiUser,\n} from '../../../api/types';\n\nimport {\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PeerBadge from '../../common/PeerBadge';\n\nimport styles from './WebAppGridItem.module.scss';\n\nexport type OwnProps = {\n\n  chatId: string;\n  isPopularApp?: boolean;\n};\n\nexport type StateProps = {\n  user?: ApiUser;\n};\n\nfunction WebAppGridItem({ user, isPopularApp }: OwnProps & StateProps) {\n  const {\n    requestMainWebView,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useLastCallback(() => {\n    if (!user) {\n      return;\n    }\n    const botId = user?.id;\n    if (!botId) {\n      return;\n    }\n    const theme = extractCurrentThemeParams();\n    requestMainWebView({\n      botId,\n      peerId: botId,\n      theme,\n    });\n  });\n\n  if (!user) return undefined;\n\n  const title = user?.firstName;\n  const activeUserCount = user?.botActiveUsers;\n  const badgeText = activeUserCount && isPopularApp ? formatIntegerCompact(lang, activeUserCount) : undefined;\n\n  return (\n    <div\n      className={styles.container}\n      onClick={handleClick}\n    >\n      <PeerBadge\n        className={buildClassName(styles.avatarContainer, isPopularApp && 'PopularAppGridItem')}\n        textClassName={styles.name}\n        badgeClassName={styles.userCountBadge}\n        badgeIconClassName={styles.userBadgeIcon}\n        peer={user}\n        text={title}\n        badgeText={badgeText}\n        badgeIcon=\"user-filled\"\n      />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const user = selectUser(global, chatId);\n\n    return {\n      user,\n    };\n  },\n)(WebAppGridItem));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"BJV09FsC\",\"search\":\"bdi8G7GR\",\"section-title\":\"ex3kxgWX\",\"sectionTitle\":\"ex3kxgWX\",\"section-content\":\"uIZzLhEh\",\"sectionContent\":\"uIZzLhEh\",\"showMoreLink\":\"h_Zs9ypA\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback,\n  useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport SearchInput from '../../ui/SearchInput';\nimport WebAppGridItem from './WebAppGridItem';\n\nimport styles from './MoreAppsTabContent.module.scss';\n\nconst POPULAR_APPS_SLICE = 30;\n\ntype StateProps = {\n  isLoading?: boolean;\n  foundIds?: string[];\n  recentBotIds?: string[];\n};\nconst LESS_GRID_ITEMS_AMOUNT = 5;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MoreAppsTabContent: FC<StateProps> = ({\n  foundIds,\n  recentBotIds,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [shouldShowMoreMine, setShouldShowMoreMine] = useState<boolean>(false);\n  const {\n    searchPopularBotApps,\n  } = getActions();\n\n  const handleToggleShowMoreMine = useLastCallback(() => {\n    setShouldShowMoreMine((prev) => !prev);\n  });\n\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const filteredFoundIds = useMemo(() => {\n    if (!foundIds) return [];\n\n    return filterPeersByQuery({ ids: foundIds, query: searchQuery, type: 'user' });\n  }, [foundIds, searchQuery]);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchPopularBotApps();\n      });\n    }\n  }, []);\n\n  const handleSearchInputReset = useCallback(() => {\n    setSearchQuery('');\n  }, []);\n\n  return (\n    <InfiniteScroll\n      className={buildClassName(styles.root, 'custom-scroll')}\n      items={filteredFoundIds}\n      onLoadMore={handleLoadMore}\n      itemSelector=\".PopularAppGridItem\"\n      noFastList\n      preloadBackwards={POPULAR_APPS_SLICE}\n    >\n      <SearchInput\n        className={styles.search}\n        value={searchQuery}\n        onChange={setSearchQuery}\n        onReset={handleSearchInputReset}\n        placeholder={lang('SearchApps')}\n      />\n      {recentBotIds && !searchQuery && (\n        <div className={styles.section}>\n          <div className={styles.sectionTitle}>\n            <span>{oldLang('SearchAppsMine')}</span>\n            <span className={styles.showMoreLink} onClick={handleToggleShowMoreMine}>\n              {oldLang(shouldShowMoreMine ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n            </span>\n          </div>\n          <div className={styles.sectionContent}>\n            {recentBotIds.map((id, index) => {\n              if (!shouldShowMoreMine && index >= LESS_GRID_ITEMS_AMOUNT) {\n                return undefined;\n              }\n\n              return (\n                <WebAppGridItem\n                  chatId={id}\n                />\n              );\n            })}\n          </div>\n        </div>\n      )}\n      <div className={styles.section}>\n        <div className={styles.sectionTitle}>\n          {searchQuery ? lang('Apps') : lang('PopularApps')}\n        </div>\n        <div className={styles.sectionContent}>\n          {filteredFoundIds && filteredFoundIds.map((id) => {\n            return (\n              <WebAppGridItem\n                chatId={id}\n                isPopularApp={!searchQuery}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal((global) => {\n  const globalSearch = selectTabState(global).globalSearch;\n  const foundIds = globalSearch.popularBotApps?.peerIds;\n\n  return {\n    isLoading: !foundIds && globalSearch.fetchingStatus?.botApps,\n    foundIds,\n    recentBotIds: global.topBotApps.userIds,\n  };\n})(MoreAppsTabContent));\n","import type { ElementRef } from '../../../../lib/teact/teact';\nimport { useCallback, useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { WebApp, WebAppInboundEvent, WebAppOutboundEvent } from '../../../../types/webapp';\n\nimport { getWebAppKey } from '../../../../global/helpers';\nimport { extractCurrentThemeParams } from '../../../../util/themeStyle';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst RELOAD_TIMEOUT = 500;\nconst FULLSCREEN_BUTTONS_AREA_HEIGHT = 3.675 * REM;\n\nconst useWebAppFrame = (\n  ref: ElementRef<HTMLIFrameElement>,\n  isOpen: boolean,\n  isFullscreen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  webApp?: WebApp,\n  onLoad?: () => void,\n) => {\n  const {\n    showNotification,\n    setWebAppPaymentSlug,\n    openInvoice,\n    closeWebApp,\n    openSuggestedStatusModal,\n    updateWebApp,\n  } = getActions();\n\n  const isReloadSupported = useRef<boolean>(false);\n  const reloadTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendFullScreenChanged = useCallback((value: boolean) => {\n    sendEvent({\n      eventType: 'fullscreen_changed',\n      eventData: {\n        is_fullscreen: value,\n      },\n    });\n  }, [sendEvent]);\n\n  const forceReloadFrame = useLastCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  });\n\n  const reloadFrame = useCallback((url: string) => {\n    if (isReloadSupported.current) {\n      sendEvent({\n        eventType: 'reload_iframe',\n      });\n      reloadTimeout.current = setTimeout(() => {\n        forceReloadFrame(url);\n      }, RELOAD_TIMEOUT);\n      return;\n    }\n\n    forceReloadFrame(url);\n  }, [sendEvent]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendSafeArea = useCallback(() => {\n    if (!ref.current) {\n      return;\n    }\n    sendEvent({\n      eventType: 'safe_area_changed',\n      eventData: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n      },\n    });\n\n    sendEvent({\n      eventType: 'content_safe_area_changed',\n      eventData: {\n        left: 0,\n        right: 0,\n        top: isFullscreen ? FULLSCREEN_BUTTONS_AREA_HEIGHT : 0,\n        bottom: 0,\n      },\n    });\n  }, [sendEvent, isFullscreen, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n    const contentWindow = ref.current?.contentWindow;\n    const sourceWindow = event.source as Window;\n\n    if (contentWindow !== sourceWindow) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      const { eventType, eventData } = data;\n      // Handle some app requests here to simplify hook usage\n      if (eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (eventType === 'web_app_close') {\n        if (webApp) {\n          const key = getWebAppKey(webApp);\n          closeWebApp({ key, skipClosingConfirmation: true });\n        }\n      }\n\n      if (eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (eventType === 'web_app_request_safe_area') {\n        sendSafeArea();\n      }\n\n      if (eventType === 'web_app_request_content_safe_area') {\n        sendSafeArea();\n      }\n\n      if (eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n        isReloadSupported.current = Boolean(eventData.reload_supported);\n      }\n\n      if (eventType === 'iframe_will_reload') {\n        clearTimeout(reloadTimeout.current);\n      }\n\n      if (eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      // Clipboard access temporarily disabled to address security concerns\n      if (eventType === 'web_app_read_text_from_clipboard') {\n        sendEvent({\n          eventType: 'clipboard_text_received',\n          eventData: {\n            req_id: eventData.req_id,\n            // eslint-disable-next-line no-null/no-null\n            data: null,\n          },\n        });\n      }\n\n      if (eventType === 'web_app_open_scan_qr_popup') {\n        showNotification({\n          message: 'Scanning QR code is not supported in this client yet',\n        });\n      }\n\n      if (eventType === 'web_app_open_invoice') {\n        setWebAppPaymentSlug({\n          slug: eventData.slug,\n        });\n        openInvoice({\n          type: 'slug',\n          slug: eventData.slug,\n        });\n      }\n\n      if (eventType === 'web_app_open_link') {\n        const linkUrl = eventData.url;\n        window.open(linkUrl, '_blank', 'noreferrer');\n      }\n\n      if (eventType === 'web_app_biometry_get_info') {\n        sendEvent({\n          eventType: 'biometry_info_received',\n          eventData: {\n            available: false,\n          },\n        });\n      }\n\n      if (eventType === 'web_app_device_storage_clear'\n        || eventType === 'web_app_device_storage_get_key'\n        || eventType === 'web_app_device_storage_save_key') {\n        const { req_id } = eventData;\n        sendEvent({\n          eventType: 'device_storage_failed',\n          eventData: {\n            req_id,\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_secure_storage_clear'\n        || eventType === 'web_app_secure_storage_get_key'\n        || eventType === 'web_app_secure_storage_restore_key'\n        || eventType === 'web_app_secure_storage_save_key') {\n        const { req_id } = eventData;\n        sendEvent({\n          eventType: 'secure_storage_failed',\n          eventData: {\n            req_id,\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_accelerometer') {\n        sendEvent({\n          eventType: 'accelerometer_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_gyroscope') {\n        sendEvent({\n          eventType: 'gyroscope_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_device_orientation') {\n        sendEvent({\n          eventType: 'device_orientation_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_add_to_home_screen') {\n        sendEvent({\n          eventType: 'home_screen_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_check_home_screen') {\n        sendEvent({\n          eventType: 'home_screen_checked',\n          eventData: {\n            status: 'unsupported',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_set_emoji_status') {\n        const { custom_emoji_id, duration } = eventData;\n\n        if (!custom_emoji_id || typeof custom_emoji_id !== 'string') {\n          sendEvent({\n            eventType: 'emoji_status_failed',\n            eventData: {\n              error: 'SUGGESTED_EMOJI_INVALID',\n            },\n          });\n          return;\n        }\n\n        if (duration) {\n          try {\n            BigInt(duration);\n          } catch (e) {\n            sendEvent({\n              eventType: 'emoji_status_failed',\n              eventData: {\n                error: 'DURATION_INVALID',\n              },\n            });\n            return;\n          }\n        }\n\n        if (!webApp) {\n          sendEvent({\n            eventType: 'emoji_status_failed',\n            eventData: {\n              error: 'UNKNOWN_ERROR',\n            },\n          });\n          return;\n        }\n\n        openSuggestedStatusModal({\n          webAppKey: getWebAppKey(webApp),\n          customEmojiId: custom_emoji_id,\n          duration: Number(duration),\n          botId: webApp.botId,\n        });\n      }\n\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [\n    isSimpleView, sendEvent, onEvent, sendCustomStyle, webApp,\n    sendTheme, sendViewport, sendSafeArea, onLoad, windowSize.isResizing,\n    ref,\n  ]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, sendSafeArea, windowSize]);\n\n  useEffect(() => {\n    if (!webApp?.plannedEvents?.length) return;\n    const events = webApp.plannedEvents;\n    events.forEach((event) => {\n      sendEvent(event);\n    });\n\n    updateWebApp({\n      key: getWebAppKey(webApp),\n      update: {\n        plannedEvents: [],\n      },\n    });\n  }, [sendEvent, webApp]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage, ref]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      sendSafeArea();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, isFullscreen, sendViewport, sendSafeArea, ref]);\n\n  return {\n    sendEvent, sendFullScreenChanged, reloadFrame, sendViewport, sendSafeArea, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LeeJZdwH\",\"multi-tab\":\"ESsGT5OD\",\"multiTab\":\"ESsGT5OD\",\"loadingPlaceholder\":\"jEAibDyh\",\"placeholderPath\":\"Gx1BIECZ\",\"fadeOpacityBreath\":\"N5Blieah\",\"defaultPlaceholderGrid\":\"Ig_t1R7i\",\"placeholderSquare\":\"ablUg8HU\",\"hide\":\"Wrl63uWL\",\"frame\":\"OmY14FFl\",\"with-button\":\"liDRl1xT\",\"withButton\":\"liDRl1xT\",\"hidden\":\"vOFiAq3l\",\"secondary-button\":\"ypxiUCFQ\",\"secondaryButton\":\"ypxiUCFQ\",\"main-button\":\"U_ggDKn1\",\"mainButton\":\"U_ggDKn1\",\"visible\":\"KwI4XdkC\",\"buttons-container\":\"mR_hsBdT\",\"buttonsContainer\":\"mR_hsBdT\",\"one-row\":\"YfQO314y\",\"oneRow\":\"YfQO314y\",\"two-rows\":\"gUldkEoy\",\"twoRows\":\"gUldkEoy\",\"left-to-right\":\"ntESqwQ_\",\"leftToRight\":\"ntESqwQ_\",\"right-to-left\":\"q6IUFEL0\",\"rightToLeft\":\"q6IUFEL0\",\"top-to-bottom\":\"gb4iHJ9H\",\"topToBottom\":\"gb4iHJ9H\",\"bottom-to-top\":\"R_bh3GF8\",\"bottomToTop\":\"R_bh3GF8\",\"hide-horizontal\":\"oYaRA7u4\",\"hideHorizontal\":\"oYaRA7u4\",\"secondary-button-spinner\":\"NYV0yA2J\",\"secondaryButtonSpinner\":\"NYV0yA2J\",\"main-button-spinner\":\"oq6HKJur\",\"mainButtonSpinner\":\"oq6HKJur\",\"web-app-popup\":\"YEOURXza\",\"webAppPopup\":\"YEOURXza\",\"without-title\":\"gvljUzY9\",\"withoutTitle\":\"gvljUzY9\",\"closeIcon\":\"BvNtfigU\",\"state-back\":\"rC2wkMIk\",\"stateBack\":\"rC2wkMIk\",\"backIconContainer\":\"JXsuZ01s\",\"moreIcon\":\"T58ozRyW\",\"headerPanel\":\"eYrhewMy\",\"icon\":\"a0AI_he5\",\"headerSplitButton\":\"Tl4_05AQ\",\"headerButton\":\"MvCwTbk_\",\"left\":\"emOpAMBm\",\"right\":\"z4C5VD5o\",\"buttonCaptionContainer\":\"dpZR3YT7\",\"backButtonCaption\":\"dWDprnWa\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAttachBot, ApiBotAppSettings, ApiUser,\n} from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { BotAppPermissions, ThemeKey } from '../../../types';\nimport type {\n  PopupOptions,\n  WebApp,\n  WebAppInboundEvent,\n  WebAppModalStateType,\n  WebAppOutboundEvent,\n} from '../../../types/webapp';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { convertToApiChatType } from '../../../global/helpers';\nimport { getWebAppKey } from '../../../global/helpers/bots';\nimport {\n  selectBotAppPermissions,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserFullInfo,\n  selectWebApp,\n} from '../../../global/selectors';\nimport { getGeolocationStatus, IS_GEOLOCATION_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport download from '../../../util/download';\nimport { extractCurrentThemeParams, validateHexColor } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport renderText from '../../common/helpers/renderText';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useFullscreen, { checkIfFullscreen } from '../../../hooks/window/useFullscreen';\nimport usePopupLimit from './hooks/usePopupLimit';\nimport useWebAppFrame from './hooks/useWebAppFrame';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Modal from '../../ui/Modal';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\n\nimport styles from './WebAppModalTabContent.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n  position?: 'left' | 'right' | 'top' | 'bottom';\n};\n\nexport type OwnProps = {\n  modal?: TabState['webApps'];\n  webApp?: WebApp;\n  registerSendEventCallback: (callback: (event: WebAppOutboundEvent) => void) => void;\n  registerReloadFrameCallback: (callback: (url: string) => void) => void;\n  onContextMenuButtonClick: (e: React.MouseEvent) => void;\n  isTransforming?: boolean;\n  isMultiTabSupported?: boolean;\n  modalHeight: number;\n};\n\ntype StateProps = {\n  bot?: ApiUser;\n  currentUser?: ApiUser;\n  botAppSettings?: ApiBotAppSettings;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n  isPremium?: boolean;\n  modalState?: WebAppModalStateType;\n  botAppPermissions?: BotAppPermissions;\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst ANIMATION_WAIT = 400;\nconst COLLAPSING_WAIT = 350;\nconst POPUP_SEQUENTIAL_LIMIT = 3;\nconst POPUP_RESET_DELAY = 2000; // 2s\nconst APP_NAME_DISPLAY_DURATION = 3800;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModalTabContent: FC<OwnProps & StateProps> = ({\n  modal,\n  webApp,\n  bot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n  registerSendEventCallback,\n  registerReloadFrameCallback,\n  isTransforming,\n  modalState,\n  isMultiTabSupported,\n  onContextMenuButtonClick,\n  botAppPermissions,\n  botAppSettings,\n  modalHeight,\n}) => {\n  const {\n    closeActiveWebApp,\n    sendWebViewData,\n    toggleAttachBot,\n    openTelegramLink,\n    setWebAppPaymentSlug,\n    switchBotInline,\n    sharePhoneWithBot,\n    updateWebApp,\n    resetPaymentStatus,\n    openChatWithInfo,\n    showNotification,\n    openEmojiStatusAccessModal,\n    openLocationAccessModal,\n    changeWebAppModalState,\n    closeWebAppModal,\n    openPreparedInlineMessageModal,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [secondaryButton, setSecondaryButton] = useState<WebAppButton | undefined>();\n\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n\n  const [popupParameters, setPopupParameters] = useState<PopupOptions | undefined>();\n  const [isRequestingPhone, setIsRequestingPhone] = useState(false);\n  const [isRequestingWriteAccess, setIsRequestingWriteAccess] = useState(false);\n  const [requestedFileDownload, setRequestedFileDownload] = useState<{ url: string; fileName: string } | undefined>();\n  const [bottomBarColor, setBottomBarColor] = useState<string | undefined>();\n  const {\n    unlockPopupsAt, handlePopupOpened, handlePopupClosed,\n  } = usePopupLimit(POPUP_SEQUENTIAL_LIMIT, POPUP_RESET_DELAY);\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const headerButtonRef = useRef<HTMLDivElement>();\n\n  const headerButtonCaptionRef = useRef<HTMLDivElement>();\n\n  const isFullscreen = modalState === 'fullScreen';\n  const isMinimizedState = modalState === 'minimized';\n\n  const exitFullScreenCallback = useLastCallback(() => {\n    setTimeout(() => {\n      changeWebAppModalState({ state: 'maximized' });\n    }, COLLAPSING_WAIT);\n  });\n\n  const fullscreenElementRef = useRef<HTMLElement>();\n\n  useEffect(() => {\n    fullscreenElementRef.current = document.querySelector('#portals') as HTMLElement;\n  }, []);\n\n  const [, setFullscreen, exitFullscreen] = useFullscreen(fullscreenElementRef, exitFullScreenCallback);\n\n  const activeWebApp = modal?.activeWebAppKey ? modal.openedWebApps[modal.activeWebAppKey] : undefined;\n  const activeWebAppName = activeWebApp?.appName;\n  const {\n    url, buttonText, isBackButtonVisible,\n  } = webApp || {};\n\n  const {\n    placeholderPath,\n  } = botAppSettings || {};\n\n  const isCloseModalOpen = Boolean(webApp?.isCloseModalOpen);\n  const isRemoveModalOpen = Boolean(webApp?.isRemoveModalOpen);\n\n  const webAppKey = webApp && getWebAppKey(webApp);\n  const activeWebAppKey = activeWebApp && getWebAppKey(activeWebApp);\n\n  const isActive = (activeWebApp && webApp) && activeWebAppKey === webAppKey;\n\n  const isAvailable = IS_GEOLOCATION_SUPPORTED;\n  const isAccessRequested = botAppPermissions?.geolocation !== undefined;\n  const isAccessGranted = Boolean(botAppPermissions?.geolocation);\n\n  const updateCurrentWebApp = useLastCallback((updatedPartialWebApp: Partial<WebApp>) => {\n    if (!webAppKey) return;\n    updateWebApp({ key: webAppKey, update: updatedPartialWebApp });\n  });\n\n  const themeParams = useMemo(() => {\n    return extractCurrentThemeParams();\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [theme]);\n\n  useEffect(() => {\n    setBottomBarColor(themeParams.secondary_bg_color);\n  }, [themeParams]);\n\n  const themeBackgroundColor = themeParams.bg_color;\n  const [backgroundColorFromEvent, setBackgroundColorFromEvent] = useState<string | undefined>();\n  const backgroundColorFromSettings = theme === 'light' ? botAppSettings?.backgroundColor\n    : botAppSettings?.backgroundDarkColor;\n\n  useEffect(() => {\n    const color = backgroundColorFromEvent || backgroundColorFromSettings || themeBackgroundColor;\n\n    updateCurrentWebApp({ backgroundColor: color });\n  }, [themeBackgroundColor, backgroundColorFromEvent, backgroundColorFromSettings]);\n\n  const themeHeaderColor = themeParams.bg_color;\n  const [headerColorFromEvent, setHeaderColorFromEvent] = useState<string | undefined>();\n  const headerColorFromSettings = theme === 'light' ? botAppSettings?.headerColor\n    : botAppSettings?.headerDarkColor;\n\n  useEffect(() => {\n    const color = headerColorFromEvent || headerColorFromSettings || themeHeaderColor;\n\n    updateCurrentWebApp({ headerColor: color });\n  }, [themeHeaderColor, headerColorFromEvent, headerColorFromSettings]);\n\n  const frameRef = useRef<HTMLIFrameElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const isOpen = modal?.isModalOpen || false;\n  const isSimple = Boolean(buttonText);\n\n  const {\n    reloadFrame, sendEvent, sendFullScreenChanged, sendViewport, sendSafeArea, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isFullscreen, isSimple, handleEvent, webApp, markLoaded);\n\n  useEffect(() => {\n    if (isActive) registerSendEventCallback(sendEvent);\n  }, [sendEvent, registerSendEventCallback, isActive]);\n\n  useEffect(() => {\n    if (isActive) registerReloadFrameCallback(reloadFrame);\n  }, [reloadFrame, registerReloadFrameCallback, isActive]);\n\n  const isMainButtonVisible = isLoaded && mainButton?.isVisible && mainButton.text.trim().length > 0;\n  const isSecondaryButtonVisible = isLoaded && secondaryButton?.isVisible && secondaryButton.text.trim().length > 0;\n\n  const handleHideCloseModal = useLastCallback(() => {\n    updateCurrentWebApp({ isCloseModalOpen: false });\n  });\n  const handleConfirmCloseModal = useLastCallback(() => {\n    updateCurrentWebApp({ shouldConfirmClosing: false, isCloseModalOpen: false });\n    setTimeout(() => {\n      closeActiveWebApp();\n    }, ANIMATION_WAIT);\n  });\n\n  const handleHideRemoveModal = useLastCallback(() => {\n    updateCurrentWebApp({ isRemoveModalOpen: false });\n  });\n\n  const handleMainButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  });\n\n  const handleSecondaryButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'secondary_button_pressed',\n    });\n  });\n\n  const handleAppPopupClose = useLastCallback((buttonId?: string) => {\n    setPopupParameters(undefined);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  });\n\n  const handleAppPopupModalClose = useLastCallback(() => {\n    handleAppPopupClose();\n  });\n\n  const sendThemeCallback = useLastCallback(() => {\n    sendTheme();\n  });\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendThemeCallback();\n    }, ANIMATION_WAIT);\n  }, [theme]);\n\n  const setFullscreenCallback = useLastCallback(() => {\n    if (!checkIfFullscreen() && isActive) {\n      setFullscreen?.();\n    }\n  });\n\n  const exitIfFullscreenCallback = useLastCallback(() => {\n    if (checkIfFullscreen() && isActive) {\n      exitFullscreen?.();\n    }\n  });\n\n  const sendFullScreenChangedCallback = useLastCallback(\n    (value: boolean) => { if (isActive) sendFullScreenChanged(value); },\n  );\n\n  useEffect(() => {\n    if (isFullscreen) {\n      setFullscreenCallback();\n      sendFullScreenChangedCallback(true);\n    } else {\n      exitIfFullscreenCallback();\n      sendFullScreenChangedCallback(false);\n    }\n  }, [isFullscreen]);\n\n  const visibilityChangedCallBack = useLastCallback((visibility: boolean) => {\n    sendEvent({\n      eventType: 'visibility_changed',\n      eventData: {\n        is_visible: visibility,\n      },\n    });\n  });\n\n  useEffect(() => {\n    if (isLoaded) {\n      visibilityChangedCallBack(Boolean(isActive));\n    }\n  }, [isActive, isLoaded]);\n\n  useEffectWithPrevDeps(([prevModalState]) => {\n    if (modalState === 'minimized') {\n      visibilityChangedCallBack(false);\n    }\n    if (modalState && prevModalState === 'minimized') {\n      visibilityChangedCallBack(true);\n    }\n  }, [modalState]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n      resetPaymentStatus();\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, webApp?.slug]);\n\n  const handleRemoveAttachBot = useLastCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: false,\n    });\n    closeActiveWebApp();\n  });\n\n  const handleRejectPhone = useLastCallback(() => {\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n  });\n\n  const handleAcceptPhone = useLastCallback(() => {\n    sharePhoneWithBot({ botId: bot!.id });\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'sent',\n      },\n    });\n  });\n\n  const handleRejectFileDownload = useLastCallback((shouldCloseActive?: boolean) => {\n    if (shouldCloseActive) {\n      setRequestedFileDownload(undefined);\n      handlePopupClosed();\n    }\n\n    sendEvent({\n      eventType: 'file_download_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n  });\n\n  const handleRejectWriteAccess = useLastCallback(() => {\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  const handleAcceptWriteAccess = useLastCallback(async () => {\n    if (!bot) return;\n    const result = await callApi('allowBotSendMessages', { bot });\n    if (!result) {\n      handleRejectWriteAccess();\n      return;\n    }\n\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'allowed',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  async function handleRequestWriteAccess() {\n    if (!bot) return;\n    const canWrite = await callApi('fetchBotCanSendMessage', {\n      bot,\n    });\n\n    if (canWrite) {\n      sendEvent({\n        eventType: 'write_access_requested',\n        eventData: {\n          status: 'allowed',\n        },\n      });\n    }\n    setIsRequestingWriteAccess(!canWrite);\n  }\n\n  async function handleCheckDownloadFile(fileUrl: string, fileName: string) {\n    const canDownload = await callApi('checkBotDownloadFileParams', {\n      bot: bot!,\n      url: fileUrl,\n      fileName,\n    });\n\n    if (!canDownload) {\n      sendEvent({\n        eventType: 'file_download_requested',\n        eventData: {\n          status: 'cancelled',\n        },\n      });\n      return;\n    }\n\n    setRequestedFileDownload({ url: fileUrl, fileName });\n    handlePopupOpened();\n  }\n\n  const handleDownloadFile = useLastCallback(() => {\n    if (!requestedFileDownload) return;\n    setRequestedFileDownload(undefined);\n    handlePopupClosed();\n\n    download(requestedFileDownload.url, requestedFileDownload.fileName);\n    sendEvent({\n      eventType: 'file_download_requested',\n      eventData: {\n        status: 'downloading',\n      },\n    });\n  });\n\n  async function handleInvokeCustomMethod(requestId: string, method: string, parameters: string) {\n    const result = await callApi('invokeWebViewCustomMethod', {\n      bot: bot!,\n      customMethod: method,\n      parameters,\n    });\n\n    sendEvent({\n      eventType: 'custom_method_invoked',\n      eventData: {\n        req_id: requestId,\n        ...result,\n      },\n    });\n  }\n\n  useEffect(() => {\n    if (!isOpen) {\n      setPopupParameters(undefined);\n      setIsRequestingPhone(false);\n      setIsRequestingWriteAccess(false);\n      setMainButton(undefined);\n      setSecondaryButton(undefined);\n      updateCurrentWebApp({\n        isSettingsButtonVisible: false,\n        shouldConfirmClosing: false,\n        isBackButtonVisible: false,\n        isCloseModalOpen: false,\n        isRemoveModalOpen: false,\n      });\n      markUnloaded();\n    }\n  }, [isOpen]);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChatWithInfo({ id: bot!.id });\n  });\n\n  function handleEvent(event: WebAppInboundEvent) {\n    const { eventType, eventData } = event;\n\n    if (eventType === 'web_app_request_fullscreen') {\n      if (getIsWebAppsFullscreenSupported()) {\n        changeWebAppModalState({ state: 'fullScreen' });\n      } else {\n        sendEvent({\n          eventType: 'fullscreen_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n    }\n\n    if (eventType === 'web_app_exit_fullscreen') {\n      exitIfFullscreenCallback();\n    }\n\n    if (eventType === 'web_app_open_tg_link') {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl, shouldIgnoreCache: eventData.force_request });\n      closeActiveWebApp();\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      updateCurrentWebApp({ isBackButtonVisible: eventData.is_visible });\n    }\n\n    if (eventType === 'web_app_setup_settings_button') {\n      updateCurrentWebApp({ isSettingsButtonVisible: eventData.is_visible });\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      setBackgroundColorFromEvent(validateHexColor(eventData.color) ? eventData.color : undefined);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const key = eventData.color_key;\n      setHeaderColorFromEvent(eventData.color || (key ? themeParams[key] : undefined));\n    }\n\n    if (eventType === 'web_app_set_bottom_bar_color') {\n      setBottomBarColor(eventData.color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeActiveWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const color = eventData.color;\n      const textColor = eventData.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text,\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_secondary_button') {\n      const color = eventData.color;\n      const textColor = eventData.text_color;\n      setSecondaryButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text,\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n        position: eventData.position,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      updateCurrentWebApp({ shouldConfirmClosing: true });\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (popupParameters || !eventData.message.trim().length || !eventData.buttons?.length\n        || eventData.buttons.length > 3 || isRequestingPhone || isRequestingWriteAccess\n        || unlockPopupsAt > Date.now()) {\n        handleAppPopupClose(undefined);\n        return;\n      }\n\n      setPopupParameters(eventData);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_switch_inline_query') {\n      const filter = eventData.chat_types?.map(convertToApiChatType).filter(Boolean);\n      const isSamePeer = !filter?.length;\n\n      switchBotInline({\n        botId: bot!.id,\n        query: eventData.query,\n        filter,\n        isSamePeer,\n      });\n\n      closeActiveWebApp();\n    }\n\n    if (eventType === 'web_app_request_phone') {\n      if (popupParameters || isRequestingWriteAccess || unlockPopupsAt > Date.now()) {\n        handleRejectPhone();\n        return;\n      }\n\n      setIsRequestingPhone(true);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_request_write_access') {\n      if (popupParameters || isRequestingPhone || unlockPopupsAt > Date.now()) {\n        handleRejectWriteAccess();\n        return;\n      }\n\n      handleRequestWriteAccess();\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_invoke_custom_method') {\n      const { method, params, req_id: requestId } = eventData;\n      handleInvokeCustomMethod(requestId, method, JSON.stringify(params));\n    }\n\n    if (eventType === 'web_app_request_file_download') {\n      if (requestedFileDownload || unlockPopupsAt > Date.now()) {\n        handleRejectFileDownload();\n        return;\n      }\n      handleCheckDownloadFile(eventData.url, eventData.file_name);\n    }\n\n    if (eventType === 'web_app_send_prepared_message') {\n      if (!bot || !webAppKey) return;\n      const { id } = eventData;\n      openPreparedInlineMessageModal({ botId: bot.id, messageId: id, webAppKey });\n    }\n\n    if (eventType === 'web_app_request_emoji_status_access') {\n      if (!bot) return;\n      openEmojiStatusAccessModal({ bot, webAppKey });\n    }\n\n    if (eventType === 'web_app_check_location') {\n      const handleGeolocationCheck = () => {\n        sendEvent({\n          eventType: 'location_checked',\n          eventData: {\n            available: isAvailable,\n            access_requested: isAccessRequested,\n            access_granted: isAccessGranted,\n          },\n        });\n      };\n\n      handleGeolocationCheck();\n    }\n\n    if (eventType === 'web_app_request_location') {\n      const handleRequestLocation = async () => {\n        const geolocationData = await getGeolocationStatus();\n        const { accessRequested, accessGranted, geolocation } = geolocationData;\n\n        if (!accessGranted || !accessRequested) {\n          sendEvent({\n            eventType: 'location_requested',\n            eventData: {\n              available: false,\n            },\n          });\n          showNotification({ message: oldLang('PermissionNoLocationPosition') });\n          handleAppPopupClose(undefined);\n          return;\n        }\n\n        if (isAvailable) {\n          if (isAccessRequested) {\n            sendEvent({\n              eventType: 'location_requested',\n              eventData: {\n                available: Boolean(botAppPermissions?.geolocation),\n                latitude: geolocation?.latitude,\n                longitude: geolocation?.longitude,\n                altitude: geolocation?.altitude,\n                course: geolocation?.heading,\n                speed: geolocation?.speed,\n                horizontal_accuracy: geolocation?.accuracy,\n                vertical_accuracy: geolocation?.altitudeAccuracy,\n              },\n            });\n          } else {\n            openLocationAccessModal({ bot, webAppKey });\n          }\n        } else {\n          showNotification({ message: oldLang('PermissionNoLocationPosition') });\n          handleAppPopupClose(undefined);\n        }\n      };\n\n      handleRequestLocation();\n    }\n\n    if (eventType === 'web_app_open_location_settings') {\n      handleOpenChat();\n    }\n  }\n\n  const mainButtonCurrentColor = useCurrentOrPrev(mainButton?.color, true);\n  const mainButtonCurrentTextColor = useCurrentOrPrev(mainButton?.textColor, true);\n  const mainButtonCurrentIsActive = useCurrentOrPrev(mainButton && Boolean(mainButton.isActive), true);\n  const mainButtonCurrentText = useCurrentOrPrev(mainButton?.text, true);\n\n  const secondaryButtonCurrentPosition = useCurrentOrPrev(secondaryButton?.position, true);\n  const secondaryButtonCurrentColor = useCurrentOrPrev(secondaryButton?.color, true);\n  const secondaryButtonCurrentTextColor = useCurrentOrPrev(secondaryButton?.textColor, true);\n  const secondaryButtonCurrentIsActive = useCurrentOrPrev(secondaryButton && Boolean(secondaryButton.isActive), true);\n  const secondaryButtonCurrentText = useCurrentOrPrev(secondaryButton?.text, true);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideMainButton, setShouldHideMainButton] = useState(true);\n  const [shouldHideSecondaryButton, setShouldHideSecondaryButton] = useState(true);\n  const [shouldShowMainButton, setShouldShowMainButton] = useState(false);\n  const [shouldShowSecondaryButton, setShouldShowSecondaryButton] = useState(false);\n\n  const [shouldShowAppNameInFullscreen, setShouldShowAppNameInFullscreen] = useState(false);\n\n  const [backButtonTextWidth, setBackButtonTextWidth] = useState(0);\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n      sendSafeArea();\n    }, isTransforming ? 0 : ANIMATION_WAIT);\n  }, [shouldShowSecondaryButton, shouldHideSecondaryButton,\n    shouldShowMainButton, shouldShowMainButton,\n    secondaryButton?.position, sendViewport, isTransforming, modalHeight,\n    sendSafeArea]);\n\n  const isVerticalLayout = secondaryButtonCurrentPosition === 'top' || secondaryButtonCurrentPosition === 'bottom';\n  const isHorizontalLayout = !isVerticalLayout;\n\n  const rowsCount = (isVerticalLayout && shouldShowMainButton && shouldShowSecondaryButton) ? 2\n    : shouldShowMainButton || shouldShowSecondaryButton ? 1 : 0;\n\n  const hideDirection = (isHorizontalLayout\n    && (!shouldHideMainButton && !shouldHideSecondaryButton)) ? 'horizontal' : 'vertical';\n\n  const mainButtonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const mainButtonFastTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const secondaryButtonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const secondaryButtonFastTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const appNameDisplayTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (isFullscreen && isOpen && Boolean(activeWebAppName)) {\n      setShouldShowAppNameInFullscreen(true);\n\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n      }\n\n      appNameDisplayTimeout.current = setTimeout(() => {\n        setShouldShowAppNameInFullscreen(false);\n        appNameDisplayTimeout.current = undefined;\n      }, APP_NAME_DISPLAY_DURATION);\n    } else {\n      setShouldShowAppNameInFullscreen(false);\n\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n        appNameDisplayTimeout.current = undefined;\n      }\n    }\n\n    return () => {\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n      }\n    };\n  }, [isFullscreen, isOpen, activeWebAppName]);\n\n  useEffect(() => {\n    if (mainButtonChangeTimeout.current) clearTimeout(mainButtonChangeTimeout.current);\n    if (mainButtonFastTimeout.current) clearTimeout(mainButtonFastTimeout.current);\n\n    if (isMainButtonVisible) {\n      mainButtonFastTimeout.current = setTimeout(() => {\n        setShouldShowMainButton(true);\n      }, 35);\n      setShouldHideMainButton(false);\n      mainButtonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n\n    if (!isMainButtonVisible) {\n      setShouldShowMainButton(false);\n      mainButtonChangeTimeout.current = setTimeout(() => {\n        setShouldHideMainButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [isMainButtonVisible]);\n\n  useEffect(() => {\n    if (secondaryButtonChangeTimeout.current) clearTimeout(secondaryButtonChangeTimeout.current);\n    if (secondaryButtonFastTimeout.current) clearTimeout(secondaryButtonFastTimeout.current);\n\n    if (isSecondaryButtonVisible) {\n      secondaryButtonFastTimeout.current = setTimeout(() => {\n        setShouldShowSecondaryButton(true);\n      }, 35);\n      setShouldHideSecondaryButton(false);\n      secondaryButtonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n\n    if (!isSecondaryButtonVisible) {\n      setShouldShowSecondaryButton(false);\n      secondaryButtonChangeTimeout.current = setTimeout(() => {\n        setShouldHideSecondaryButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [isSecondaryButtonVisible]);\n\n  useEffect(() => {\n    if (!shouldShowSecondaryButton && !shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowSecondaryButton, shouldShowMainButton]);\n\n  const frameStyle = isTransforming ? 'pointer-events: none;' : '';\n\n  const handleBackClick = useLastCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      exitIfFullscreenCallback();\n      sendFullScreenChanged(false);\n      changeWebAppModalState({ state: 'maximized' });\n      closeWebAppModal();\n    }\n  });\n\n  const handleCollapseClick = useLastCallback(() => {\n    exitIfFullscreenCallback();\n  });\n\n  const handleShowContextMenu = useLastCallback((e: React.MouseEvent) => {\n    onContextMenuButtonClick(e);\n  });\n\n  const backIconClass = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n  const backButtonCaption = shouldShowAppNameInFullscreen ? activeWebAppName\n    : oldLang(isBackButtonVisible ? 'Back' : 'Close');\n\n  const hasHeaderElement = headerButtonCaptionRef?.current;\n\n  useEffect(() => {\n    const width = headerButtonCaptionRef?.current?.clientWidth || 0;\n    setBackButtonTextWidth(width);\n  }, [backButtonCaption, hasHeaderElement]);\n\n  function getBackButtonActiveKey() {\n    if (shouldShowAppNameInFullscreen) return 0;\n    return isBackButtonVisible ? 1 : 2;\n  }\n\n  function renderFullscreenBackButtonCaption() {\n    return (\n      <span\n        className={styles.buttonCaptionContainer}\n        style={\n          `width: ${backButtonTextWidth}px;`\n        }\n      >\n        <Transition\n          activeKey={getBackButtonActiveKey()}\n          name=\"slideFade\"\n        >\n          <div\n            ref={headerButtonCaptionRef}\n            className={styles.backButtonCaption}\n          >\n            {backButtonCaption}\n          </div>\n        </Transition>\n      </span>\n    );\n  }\n\n  function renderFullscreenHeaderPanel() {\n    return (\n      <div className={styles.headerPanel}>\n        <div ref={headerButtonRef} className={styles.headerButton} onClick={handleBackClick}>\n          <div className={styles.backIconContainer}>\n            <div className={backIconClass} />\n          </div>\n          {renderFullscreenBackButtonCaption()}\n        </div>\n        <div className={styles.headerSplitButton}>\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.left,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-label={lang('WebAppCollapse')}\n            onClick={handleCollapseClick}\n          >\n            <Icon\n              name=\"down\"\n              className={styles.icon}\n            />\n          </div>\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.right,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-haspopup=\"menu\"\n            aria-label={lang('AriaMoreButton')}\n            onClick={handleShowContextMenu}\n          >\n            <Icon\n              name=\"more\"\n              className={buildClassName(\n                styles.icon,\n                styles.moreIcon,\n              )}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderDefaultPlaceholder() {\n    const className = buildClassName(styles.loadingPlaceholder, styles.defaultPlaceholderGrid, isLoaded && styles.hide);\n    return (\n      <div className={className}>\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n      </div>\n    );\n  }\n\n  function renderPlaceholder() {\n    if (!placeholderPath) {\n      return renderDefaultPlaceholder();\n    }\n    return (\n      <svg\n        className={buildClassName(styles.loadingPlaceholder, isLoaded && styles.hide)}\n        viewBox=\"0 0 512 512\"\n      >\n        <path className={styles.placeholderPath} d={placeholderPath} />\n      </svg>\n    );\n  }\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(\n        styles.root,\n        !isActive && styles.hidden,\n        isMultiTabSupported && styles.multiTab,\n      )}\n    >\n      {isFullscreen && getIsWebAppsFullscreenSupported() && renderFullscreenHeaderPanel()}\n      {!isMinimizedState && renderPlaceholder()}\n      <iframe\n        className={buildClassName(\n          styles.frame,\n          shouldDecreaseWebFrameSize && styles.withButton,\n          !isLoaded && styles.hide,\n        )}\n        style={frameStyle}\n        src={url}\n        title={`${bot?.firstName} Web App`}\n        sandbox={SANDBOX_ATTRIBUTES}\n        allow=\"camera; microphone; geolocation; clipboard-write;\"\n        allowFullScreen\n        ref={frameRef}\n      />\n      {!isMinimizedState && (\n        <div\n          style={`background-color: ${bottomBarColor};`}\n          className={buildClassName(\n            styles.buttonsContainer,\n            secondaryButtonCurrentPosition === 'left' && styles.leftToRight,\n            secondaryButtonCurrentPosition === 'right' && styles.rightToLeft,\n            secondaryButtonCurrentPosition === 'top' && styles.topToBottom,\n            secondaryButtonCurrentPosition === 'bottom' && styles.bottomToTop,\n            hideDirection === 'horizontal' && styles.hideHorizontal,\n            rowsCount === 1 && styles.oneRow,\n            rowsCount === 2 && styles.twoRows,\n          )}\n        >\n          <Button\n            className={buildClassName(\n              styles.secondaryButton,\n              shouldShowSecondaryButton && !shouldHideSecondaryButton && styles.visible,\n              shouldHideSecondaryButton && styles.hidden,\n            )}\n            fluid\n            style={`background-color: ${secondaryButtonCurrentColor}; color: ${secondaryButtonCurrentTextColor}`}\n            disabled={!secondaryButtonCurrentIsActive && !secondaryButton?.isProgressVisible}\n            nonInteractive={secondaryButton?.isProgressVisible}\n            onClick={handleSecondaryButtonClick}\n            size=\"smaller\"\n          >\n            {!secondaryButton?.isProgressVisible && secondaryButtonCurrentText}\n            {secondaryButton?.isProgressVisible\n              && <Spinner className={styles.mainButtonSpinner} color=\"blue\" />}\n          </Button>\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && !shouldHideMainButton && styles.visible,\n              shouldHideMainButton && styles.hidden,\n            )}\n            fluid\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive && !mainButton?.isProgressVisible}\n            nonInteractive={mainButton?.isProgressVisible}\n            onClick={handleMainButtonClick}\n            size=\"smaller\"\n          >\n            {!mainButton?.isProgressVisible && mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </div>\n      )}\n      {popupParameters && (\n        <Modal\n          isOpen={Boolean(popupParameters)}\n          title={popupParameters.title || NBSP}\n          onClose={handleAppPopupModalClose}\n          hasCloseButton\n          className={\n            buildClassName(styles.webAppPopup, !popupParameters.title?.trim().length && styles.withoutTitle)\n          }\n        >\n          {popupParameters.message}\n          <div className=\"dialog-buttons mt-2\">\n            {popupParameters.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                size=\"smaller\"\n\n                onClick={() => handleAppPopupClose(button.id)}\n              >\n                {button.text || oldLang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n\n      <ConfirmDialog\n        isOpen={isRequestingPhone}\n        onClose={handleRejectPhone}\n        title={oldLang('ShareYouPhoneNumberTitle')}\n        text={oldLang('AreYouSureShareMyContactInfoBot')}\n        confirmHandler={handleAcceptPhone}\n        confirmLabel={oldLang('ContactShare')}\n      />\n      <ConfirmDialog\n        isOpen={isRequestingWriteAccess}\n        onClose={handleRejectWriteAccess}\n        title={oldLang('lng_bot_allow_write_title')}\n        text={oldLang('lng_bot_allow_write')}\n        confirmHandler={handleAcceptWriteAccess}\n        confirmLabel={oldLang('lng_bot_allow_write_confirm')}\n      />\n      <ConfirmDialog\n        isOpen={Boolean(requestedFileDownload)}\n        title={oldLang('BotDownloadFileTitle')}\n        textParts={lang('BotDownloadFileDescription', {\n          bot: bot?.firstName,\n          filename: requestedFileDownload?.fileName,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n        })}\n        confirmLabel={oldLang('BotDownloadFileButton')}\n        onClose={handleRejectFileDownload}\n        confirmHandler={handleDownloadFile}\n      />\n\n      <ConfirmDialog\n        isOpen={isCloseModalOpen}\n        onClose={handleHideCloseModal}\n        title={oldLang('lng_bot_close_warning_title')}\n        text={oldLang('lng_bot_close_warning')}\n        confirmHandler={handleConfirmCloseModal}\n        confirmIsDestructive\n        confirmLabel={oldLang('lng_bot_close_warning_sure')}\n      />\n      <ConfirmDialog\n        isOpen={isRemoveModalOpen}\n        onClose={handleHideRemoveModal}\n        title={oldLang('BotRemoveFromMenuTitle')}\n        textParts={renderText(oldLang('BotRemoveFromMenu', bot?.firstName), ['simple_markdown'])}\n        confirmHandler={handleRemoveAttachBot}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const activeWebApp = modal?.activeWebAppKey ? selectWebApp(global, modal.activeWebAppKey) : undefined;\n    const { botId: activeBotId } = activeWebApp || {};\n    const modalState = modal?.modalState;\n\n    const attachBot = activeBotId ? global.attachMenu.bots[activeBotId] : undefined;\n    const bot = activeBotId ? selectUser(global, activeBotId) : undefined;\n    const userFullInfo = activeBotId ? selectUserFullInfo(global, activeBotId) : undefined;\n    const botAppSettings = userFullInfo?.botInfo?.appSettings;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status: regularPaymentStatus } = selectTabState(global).payment;\n    const { status: starsPaymentStatus, inputInvoice: starsInputInvoice } = selectTabState(global).starsPayment;\n    const botAppPermissions = bot ? selectBotAppPermissions(global, bot.id) : undefined;\n\n    const paymentStatus = starsPaymentStatus || regularPaymentStatus;\n\n    return {\n      attachBot,\n      bot,\n      currentUser,\n      theme,\n      isPaymentModalOpen: isPaymentModalOpen || Boolean(starsInputInvoice),\n      paymentStatus,\n      modalState,\n      botAppPermissions,\n      botAppSettings,\n    };\n  },\n)(WebAppModalTabContent));\n","import { useRef, useState } from '../../../../lib/teact/teact';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function usePopupLimit(sequentialLimit: number, resetAfter: number) {\n  const [unlockPopupsAt, setUnlockPopupsAt] = useState(0);\n  const sequentialCalls = useRef(0);\n  const lastClosedDate = useRef(0);\n\n  const handlePopupOpened = useLastCallback(() => {\n    const now = Date.now();\n\n    if (now - lastClosedDate.current > resetAfter) {\n      sequentialCalls.current = 0;\n    }\n\n    sequentialCalls.current += 1;\n\n    if (sequentialCalls.current >= sequentialLimit) {\n      setUnlockPopupsAt(now + resetAfter);\n    }\n  });\n\n  const handlePopupClosed = useLastCallback(() => {\n    if (unlockPopupsAt < Date.now()) { // Prevent confused user from extending lock time\n      lastClosedDate.current = Date.now();\n    }\n  });\n\n  return {\n    unlockPopupsAt,\n    handlePopupOpened,\n    handlePopupClosed,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"XWfkIDLY\",\"multi-tab\":\"gBVR7Hec\",\"multiTab\":\"gBVR7Hec\",\"close-icon\":\"RuJ3d9N6\",\"closeIcon\":\"RuJ3d9N6\",\"minimized\":\"dJ1Ld_PX\",\"fullScreen\":\"ciSTWz16\",\"tabs\":\"X18WbDa5\",\"tool-bar\":\"qK4q0Sat\",\"toolBar\":\"qK4q0Sat\",\"tab-button-wrapper\":\"oHX2d8Or\",\"tabButtonWrapper\":\"oHX2d8Or\",\"tab-button\":\"O4NxErFX\",\"tabButton\":\"O4NxErFX\",\"tab-right-mask\":\"dgdyQDsZ\",\"tabRightMask\":\"dgdyQDsZ\",\"tab-close-button\":\"xGefqS93\",\"tabCloseButton\":\"xGefqS93\",\"tab-button-curve-path\":\"bOuMHiVw\",\"tabButtonCurvePath\":\"bOuMHiVw\",\"tab-button-left-curve\":\"f7EicoVH\",\"tabButtonLeftCurve\":\"f7EicoVH\",\"tab-button-right-curve\":\"s6pBIYMI\",\"tabButtonRightCurve\":\"s6pBIYMI\",\"more-apps-tab-icon\":\"Obu3ui67\",\"moreAppsTabIcon\":\"Obu3ui67\",\"avatar-container\":\"z39ojrWc\",\"avatarContainer\":\"z39ojrWc\",\"web-app-tab-more-menu\":\"txS0KiU0\",\"webAppTabMoreMenu\":\"txS0KiU0\",\"more-button\":\"kKPD09tc\",\"moreButton\":\"kKPD09tc\",\"tab-more-button\":\"gkji2_RB\",\"tabMoreButton\":\"gkji2_RB\",\"more-apps-button\":\"cEuW1_hJ\",\"moreAppsButton\":\"cEuW1_hJ\",\"window-state-button\":\"XpHR_yo0\",\"windowStateButton\":\"XpHR_yo0\",\"header-button\":\"GE5AkJOU\",\"headerButton\":\"GE5AkJOU\",\"fullscreenButton\":\"otlJULGy\",\"tab-close-icon\":\"DoeOewUR\",\"tabCloseIcon\":\"DoeOewUR\",\"state-icon\":\"YRMGpqUS\",\"stateIcon\":\"YRMGpqUS\",\"icon\":\"b13oE9uA\",\"tab-avatar\":\"tI6TE6HP\",\"tabAvatar\":\"tI6TE6HP\",\"state-back\":\"IWA50OWU\",\"stateBack\":\"IWA50OWU\",\"loading-spinner\":\"ZvO65ZK4\",\"loadingSpinner\":\"ZvO65ZK4\",\"hide\":\"_90e04Jo\",\"frame\":\"zA1w1IOq\",\"with-button\":\"XsPaFD9G\",\"withButton\":\"XsPaFD9G\",\"main-button\":\"Os96PEjQ\",\"mainButton\":\"Os96PEjQ\",\"visible\":\"C8aMayAw\",\"hidden\":\"GllU9an9\",\"main-button-spinner\":\"nYSFrf_X\",\"mainButtonSpinner\":\"nYSFrf_X\",\"web-app-popup\":\"cTVKrIjM\",\"webAppPopup\":\"cTVKrIjM\",\"without-title\":\"d0DG1SkF\",\"withoutTitle\":\"d0DG1SkF\"};","import { type MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useMemo, useRef,\n  useSignal, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { Point, Size, ThemeKey } from '../../../types';\nimport type { WebApp, WebAppOutboundEvent } from '../../../types/webapp';\n\nimport { RESIZE_HANDLE_CLASS_NAME } from '../../../config';\nimport { getWebAppKey } from '../../../global/helpers/bots';\nimport {\n  selectCurrentChat, selectTheme, selectUser,\n  selectWebApp,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { getColorLuma } from '../../../util/colors';\nimport { hexToRgb } from '../../../util/switchTheme';\nimport windowSize from '../../../util/windowSize';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDraggable from '../../../hooks/useDraggable';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport MinimizedWebAppModal from './MinimizedWebAppModal';\nimport MoreAppsTabContent from './MoreAppsTabContent';\nimport WebAppModalTabContent from './WebAppModalTabContent';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppModalTab = {\n  bot?: ApiUser;\n  webApp: WebApp;\n  isOpen: boolean;\n};\n\nexport type OwnProps = {\n  modal?: TabState['webApps'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  cachedSize?: Size;\n  cachedPosition?: Point;\n};\n\nconst PROLONG_INTERVAL = 45000; // 45s\nconst LUMA_THRESHOLD = 128;\n\nconst MINIMIZED_STATE_SIZE = { width: 300, height: 40 };\nconst DEFAULT_MAXIMIZED_STATE_SIZE = { width: 420, height: 730 };\nconst MAXIMIZED_STATE_MINIMUM_SIZE = { width: 300, height: 300 };\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  modal,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  cachedSize,\n  cachedPosition,\n}) => {\n  const {\n    closeActiveWebApp,\n    closeWebAppModal,\n    prolongWebView,\n    toggleAttachBot,\n    openChat,\n    changeWebAppModalState,\n    openWebAppTab,\n    updateWebApp,\n    openMoreAppsTab,\n    closeMoreAppsTab,\n    updateMiniAppCachedPosition,\n    updateMiniAppCachedSize,\n  } = getActions();\n\n  const [getMaximizedStateSize, setMaximizedStateSize] = useSignal(cachedSize || DEFAULT_MAXIMIZED_STATE_SIZE);\n\n  function getSize() {\n    if (modal?.modalState === 'fullScreen') return windowSize.get();\n    if (modal?.modalState === 'maximized') return getMaximizedStateSize();\n    return MINIMIZED_STATE_SIZE;\n  }\n  function getMinimumSize() {\n    if (modal?.modalState === 'maximized') return MAXIMIZED_STATE_MINIMUM_SIZE;\n    return undefined;\n  }\n\n  const {\n    openedWebApps, activeWebAppKey, openedOrderedKeys, sessionKeys, isMoreAppsTabActive,\n  } = modal || {};\n  const activeWebApp = activeWebAppKey ? openedWebApps?.[activeWebAppKey] : undefined;\n  const {\n    isBackButtonVisible, headerColor, backgroundColor, isSettingsButtonVisible,\n  } = activeWebApp || {};\n\n  const tabs = useMemo(() => {\n    return openedOrderedKeys?.map((key) => {\n      const webApp = openedWebApps![key];\n      return {\n        bot: getGlobal().users.byId[webApp.botId],\n        webApp,\n        isOpen: Boolean(activeWebApp && (key === getWebAppKey(activeWebApp))),\n      };\n    });\n  }, [openedOrderedKeys, openedWebApps, activeWebApp]);\n\n  const { isMobile } = useAppLayout();\n  const isOpen = modal?.isModalOpen || false;\n  const isMaximizedState = modal?.modalState === 'maximized';\n  const isMinimizedState = modal?.modalState === 'minimized';\n  const isFullScreen = modal?.modalState === 'fullScreen';\n\n  const supportMultiTabMode = !isMobile;\n  const ref = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n\n  const getTriggerElement = useLastCallback(() => ref.current!);\n\n  const getRootElement = useLastCallback(\n    () => ref.current!,\n  );\n\n  const getMenuElement = useLastCallback(\n    () => menuRef.current!,\n  );\n\n  const {\n    isContextMenuOpen,\n    contextMenuAnchor,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const [isDraggingEnabled, setIsDraggingEnabled] = useState(false);\n\n  const headerElement = headerRef.current;\n  const containerElement = ref.current;\n\n  useEffect(() => {\n    setIsDraggingEnabled(Boolean(supportMultiTabMode && headerElement && containerElement && !isFullScreen));\n  }, [supportMultiTabMode, headerElement, containerElement, isFullScreen]);\n\n  useEffect(() => {\n    changeWebAppModalState({ state: 'maximized' });\n  }, [supportMultiTabMode]);\n\n  const {\n    isDragging,\n    isResizing,\n    style: draggableStyle,\n    size,\n    position,\n  } = useDraggable(\n    ref,\n    headerRef,\n    isDraggingEnabled,\n    getSize(),\n    isFullScreen,\n    getMinimumSize(),\n    cachedPosition,\n  );\n\n  const x = position?.x;\n  const y = position?.y;\n  useEffect(() => {\n    if (!isDragging && x !== undefined && y !== undefined) {\n      updateMiniAppCachedPosition({ position: { x, y } });\n    }\n  }, [isDragging, x, y]);\n\n  useEffect(() => {\n    if (!isDragging && size && isMaximizedState) {\n      updateMiniAppCachedSize({ size });\n    }\n  }, [isDragging, isMaximizedState, size]);\n\n  const currentSize = size || getSize();\n\n  const currentWidth = currentSize.width;\n  const currentHeight = currentSize.height;\n\n  useEffect(() => {\n    if (isResizing) {\n      setMaximizedStateSize({ width: currentWidth, height: currentHeight });\n    }\n  }, [currentHeight, currentWidth, isResizing, setMaximizedStateSize]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const {\n    queryId,\n  } = activeWebApp || {};\n\n  const openTabsCount = openedWebApps ? Object.values(openedWebApps).length : 0;\n\n  useInterval(() => {\n    if (!openedWebApps) return;\n    Object.keys(openedWebApps).forEach((key) => {\n      const webApp = openedWebApps[key];\n      if (webApp.queryId) {\n        prolongWebView({\n          botId: webApp.botId,\n          queryId: webApp.queryId,\n          peerId: webApp.peerId || chat!.id,\n          replyInfo: webApp.replyInfo,\n        });\n      }\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  // eslint-disable-next-line no-null/no-null\n  const sendEventCallback = useRef<((event: WebAppOutboundEvent) => void) | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const reloadFrameCallback = useRef<((url: string) => void) | null>(null);\n\n  const registerSendEventCallback = useLastCallback((callback: (event: WebAppOutboundEvent) => void) => {\n    sendEventCallback.current = callback;\n  });\n\n  const sendEvent = useLastCallback((event: WebAppOutboundEvent) => {\n    if (sendEventCallback.current) {\n      sendEventCallback.current(event);\n    }\n  });\n\n  const registerReloadFrameCallback = useLastCallback((callback: (url: string) => void) => {\n    reloadFrameCallback.current = callback;\n  });\n\n  const reloadFrame = useLastCallback((url: string) => {\n    if (reloadFrameCallback.current) {\n      reloadFrameCallback.current(url);\n    }\n  });\n\n  const handleSettingsButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  });\n\n  const handleRefreshClick = useLastCallback(() => {\n    reloadFrame(activeWebApp!.url);\n  });\n\n  const handleModalClose = useLastCallback(() => {\n    closeWebAppModal();\n  });\n\n  const handleCloseMoreAppsTab = useLastCallback(() => {\n    closeMoreAppsTab();\n  });\n\n  const handleTabClose = useLastCallback(() => {\n    if (openTabsCount > 1) {\n      closeActiveWebApp();\n    } else {\n      closeWebAppModal();\n    }\n  });\n\n  const handleToggleClick = useLastCallback(() => {\n    if (attachBot) {\n      const key = getWebAppKey(activeWebApp!);\n      updateWebApp({\n        key,\n        update: {\n          isRemoveModalOpen: true,\n        },\n      });\n      return;\n    }\n\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: true,\n    });\n  });\n\n  const handleBackClick = useLastCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleModalClose();\n    }\n  });\n\n  const handleCollapseClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'minimized' });\n  });\n\n  const handleFullscreenClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'fullScreen' });\n  });\n\n  const handleOpenMoreAppsTabClick = useLastCallback(() => {\n    openMoreAppsTab();\n  });\n\n  const handleTabClick = useLastCallback((tab: WebAppModalTab) => {\n    openWebAppTab({ webApp: tab.webApp });\n  });\n\n  const openBotChat = useLastCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n  });\n\n  const MoreMenuButton:\n  FC<{ onTrigger: (e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        className={\n          buildClassName(\n            supportMultiTabMode ? styles.tabMoreButton : styles.moreButton,\n            isMenuOpen && 'active',\n          )\n        }\n        round\n        ripple={!isMobile}\n        size={supportMultiTabMode ? 'tiny' : 'smaller'}\n        color=\"translucent\"\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, supportMultiTabMode]);\n\n  function renderMenuItems() {\n    return (\n      <>\n        {chat && bot && chat.id !== bot.id && (\n          <MenuItem icon=\"bots\" onClick={openBotChat}>{oldLang('BotWebViewOpenBot')}</MenuItem>\n        )}\n        <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{oldLang('WebApp.ReloadPage')}</MenuItem>\n        {isSettingsButtonVisible && (\n          <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n            {oldLang('Settings')}\n          </MenuItem>\n        )}\n        {bot?.isAttachBot && (\n          <MenuItem\n            icon={attachBot ? 'stop' : 'install'}\n            onClick={handleToggleClick}\n            destructive={Boolean(attachBot)}\n          >\n            {oldLang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n          </MenuItem>\n        )}\n      </>\n    );\n  }\n\n  function renderMoreMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        ref={menuRef}\n        className={buildClassName(\n          supportMultiTabMode ? styles.webAppTabMoreMenu : 'web-app-more-menu',\n          'with-menu-transitions',\n        )}\n        getTriggerElement={getTriggerElement}\n        getMenuElement={getMenuElement}\n        getRootElement={getRootElement}\n        autoClose\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n      >\n        {renderMenuItems()}\n      </Menu>\n    );\n  }\n\n  function renderDropdownMoreMenu() {\n    return (\n      <DropdownMenu\n        className={buildClassName(\n          supportMultiTabMode ? styles.webAppTabMoreMenu : 'web-app-more-menu',\n          'with-menu-transitions',\n        )}\n        trigger={MoreMenuButton}\n        positionX={supportMultiTabMode ? 'left' : 'right'}\n      >\n        {renderMenuItems()}\n      </DropdownMenu>\n    );\n  }\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  const headerTextVar = useMemo(() => {\n    if (isMoreAppsTabActive) return 'color-text';\n    if (!headerColor) return undefined;\n    const { r, g, b } = hexToRgb(headerColor);\n    const luma = getColorLuma([r, g, b]);\n    const adaptedLuma = theme === 'dark' ? 255 - luma : luma;\n    return adaptedLuma > LUMA_THRESHOLD ? 'color-text' : 'color-background';\n  }, [headerColor, theme, isMoreAppsTabActive]);\n\n  function renderTabCurveBorder(className: string) {\n    return (\n      <svg\n        className={className}\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 16 16\"\n        fill=\"none\"\n      >\n        <path\n          className={styles.tabButtonCurvePath}\n          fill-rule=\"evenodd\"\n          clip-rule=\"evenodd\"\n          d=\"M16 16V0C16 12 12 16 0 16H16Z\"\n        />\n      </svg>\n    );\n  }\n\n  function renderActiveTab() {\n    const style = buildStyle(\n      headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n      headerColor && `--active-tab-background: ${headerColor}`,\n    );\n    return (\n      <div\n        className={styles.tabButtonWrapper}\n        style={style}\n      >\n        {renderTabCurveBorder(styles.tabButtonLeftCurve)}\n        <div\n          className={styles.tabButton}\n        >\n          <div className={styles.avatarContainer}>\n            <Avatar\n              size=\"mini\"\n              peer={bot}\n            />\n            <MoreMenuButton onTrigger={handleContextMenu} isOpen={isContextMenuOpen} />\n          </div>\n          {attachBot?.shortName ?? bot?.firstName}\n          <div className={styles.tabRightMask} />\n          <Button\n            className={styles.tabCloseButton}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            ariaLabel={oldLang('Close')}\n            onClick={handleTabClose}\n          >\n            <Icon className={styles.tabCloseIcon} name=\"close\" />\n          </Button>\n        </div>\n        {renderTabCurveBorder(styles.tabButtonRightCurve)}\n      </div>\n    );\n  }\n\n  function renderMoreAppsTab() {\n    return (\n      <div\n        className={styles.tabButtonWrapper}\n      >\n        {renderTabCurveBorder(styles.tabButtonLeftCurve)}\n        <div\n          className={styles.tabButton}\n        >\n          <div className={styles.moreAppsTabIcon}>\n            <Icon className={styles.icon} name=\"add\" />\n          </div>\n          {lang('OpenApp')}\n          <div className={styles.tabRightMask} />\n          <Button\n            className={styles.tabCloseButton}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            ariaLabel={oldLang('Close')}\n            onClick={handleCloseMoreAppsTab}\n          >\n            <Icon className={styles.tabCloseIcon} name=\"close\" />\n          </Button>\n        </div>\n        {renderTabCurveBorder(styles.tabButtonRightCurve)}\n      </div>\n    );\n  }\n\n  function renderMoreAppsButton() {\n    return (\n      <Button\n        className={buildClassName(\n          styles.moreAppsButton,\n          'no-drag',\n        )}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        onClick={handleOpenMoreAppsTabClick}\n      >\n        <Icon className={styles.icon} name=\"add\" />\n      </Button>\n    );\n  }\n\n  const containerRef = useRef<HTMLDivElement>();\n  useHorizontalScroll(containerRef, !isOpen || isMinimizedState || !(containerRef.current));\n\n  function renderTabs() {\n    return (\n      <div\n        className={styles.tabs}\n        ref={containerRef}\n      >\n        {tabs?.map((tab) => (\n          tab.isOpen ? (\n            renderActiveTab()\n          ) : (\n            <Avatar\n              className={styles.tabAvatar}\n              size=\"mini\"\n              peer={tab.bot}\n\n              onClick={() => handleTabClick(tab)}\n            />\n          )\n        ))}\n        {isMoreAppsTabActive && renderMoreAppsTab()}\n      </div>\n    );\n  }\n\n  function renderHeader() {\n    return (\n      <div\n        ref={headerRef}\n      >\n        {!supportMultiTabMode\n          ? renderSinglePageModeHeader()\n          : (isMaximizedState ? renderMultiTabHeader() : <MinimizedWebAppModal />)}\n      </div>\n    );\n  }\n\n  function renderMultiTabHeader() {\n    return (\n      <div\n        className={buildClassName(\n          'modal-header',\n          'multiTab',\n        )}\n        style={buildStyle(\n          headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n        )}\n      >\n        <Button\n          className={styles.headerButton}\n          round\n          color=\"translucent\"\n          size=\"tiny\"\n          ariaLabel={oldLang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        {renderTabs()}\n        {renderMoreMenu()}\n\n        <div className={styles.toolBar}>\n          {!isMoreAppsTabActive && renderMoreAppsButton()}\n\n          {!isMoreAppsTabActive && (\n            <Button\n              className={buildClassName(\n                styles.windowStateButton,\n                styles.fullscreenButton,\n                'no-drag',\n              )}\n              round\n              color=\"translucent\"\n              size=\"tiny\"\n              onClick={handleFullscreenClick}\n            >\n              <Icon className={styles.stateIcon} name=\"expand-modal\" />\n            </Button>\n          )}\n\n          <Button\n            className={buildClassName(\n              styles.windowStateButton,\n              'no-drag',\n            )}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            onClick={handleCollapseClick}\n          >\n            <Icon className={styles.stateIcon} name=\"collapse-modal\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  function renderSinglePageModeHeader() {\n    return (\n      <div\n        className=\"modal-header\"\n        style={buildStyle(\n          headerColor && `background-color: ${headerColor}`,\n          headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n        )}\n      >\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={oldLang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{attachBot?.shortName ?? bot?.firstName}</div>\n        {!isMoreAppsTabActive && renderDropdownMoreMenu()}\n      </div>\n    );\n  }\n\n  function buildResizeHandleClass(handleClassName: string) {\n    return buildClassName(RESIZE_HANDLE_CLASS_NAME, handleClassName);\n  }\n\n  function renderResizeHandles() {\n    return (\n      <>\n        <div className={buildResizeHandleClass('top')} />\n        <div className={buildResizeHandleClass('bottom')} />\n        <div className={buildResizeHandleClass('left')} />\n        <div className={buildResizeHandleClass('right')} />\n        <div className={buildResizeHandleClass('topLeft')} />\n        <div className={buildResizeHandleClass('topRight')} />\n        <div className={buildResizeHandleClass('bottomLeft')} />\n        <div className={buildResizeHandleClass('bottomRight')} />\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      dialogRef={ref}\n      className={buildClassName(\n        styles.root,\n        supportMultiTabMode && styles.multiTab,\n        isMinimizedState && styles.minimized,\n        isFullScreen && styles.fullScreen,\n      )}\n      dialogStyle={supportMultiTabMode ? draggableStyle : undefined}\n      dialogContent={isDraggingEnabled && !isMinimizedState ? renderResizeHandles() : undefined}\n      isOpen={isOpen}\n      isLowStackPriority\n      onClose={handleModalClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor || 'var(--color-background)'}`}\n      noBackdrop\n      noBackdropClose\n    >\n      {isFullScreen && renderMoreMenu()}\n      {openedWebApps && sessionKeys?.map((key) => (\n        <WebAppModalTabContent\n          key={key}\n          modal={modal}\n          registerSendEventCallback={registerSendEventCallback}\n          registerReloadFrameCallback={registerReloadFrameCallback}\n          webApp={openedWebApps[key]}\n          isTransforming={isDragging || isResizing}\n          onContextMenuButtonClick={handleContextMenu}\n          isMultiTabSupported={supportMultiTabMode}\n          modalHeight={currentHeight}\n        />\n      ))}\n      {isMoreAppsTabActive && (<MoreAppsTabContent />)}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const activeWebApp = modal?.activeWebAppKey ? selectWebApp(global, modal.activeWebAppKey) : undefined;\n    const { botId: activeBotId } = activeWebApp || {};\n\n    const attachBot = activeBotId ? global.attachMenu.bots[activeBotId] : undefined;\n    const bot = activeBotId ? selectUser(global, activeBotId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { miniAppsCachedPosition, miniAppsCachedSize } = selectSharedSettings(global);\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      cachedPosition: miniAppsCachedPosition,\n      cachedSize: miniAppsCachedSize,\n    };\n  },\n)(WebAppModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp' | 'botApp';\n  shouldRequestWriteAccess?: boolean;\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type, shouldRequestWriteAccess }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n\n  const [isWriteAllowed, setIsWriteAllowed] = useState(shouldRequestWriteAccess || false);\n\n  const lang = useOldLang();\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id, isWriteAllowed });\n  }, [markBotTrusted, isWriteAllowed, bot]);\n\n  const handleBotTrustDecline = useCallback(() => {\n    cancelBotTrustRequest();\n  }, []);\n\n  const title = type === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = useMemo(() => {\n    switch (type) {\n      case 'game':\n        return lang('BotPermissionGameAlert', getUserFullName(bot));\n      case 'webApp':\n        return lang('BotOpenPageMessage', getUserFullName(bot));\n      case 'botApp':\n      default:\n        return lang('BotWebViewStartPermission');\n    }\n  }, [bot, type, lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={handleBotTrustDecline}\n      title={title}\n      confirmHandler={handleBotTrustAccept}\n    >\n      {renderText(text, ['simple_markdown'])}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', bot?.firstName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(BotTrustModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { MINI_APP_TOS_URL } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['requestedAttachBotInstall'];\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  modal,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const bot = modal?.bot;\n\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n\n  const lang = useOldLang();\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed: Boolean(bot?.shouldRequestWriteAccess),\n    });\n  }, [confirmAttachBotInstall, bot]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsTosAccepted(false);\n    }\n  }, [bot]);\n\n  const tosLabel = useMemo(() => {\n    const base = lang('lng_mini_apps_disclaimer_button');\n    const split = base.split('{link}');\n    const linkText = lang('lng_mini_apps_disclaimer_link');\n    return [\n      split[0],\n      <a href={MINI_APP_TOS_URL} target=\"_blank\" rel=\"noopener noreferrer\">{linkText}</a>,\n      split[1],\n    ];\n  }, [lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={lang('lng_mini_apps_disclaimer_title')}\n      confirmHandler={handleConfirm}\n      isConfirmDisabled={!isTosAccepted}\n    >\n      {renderText(lang('lng_mini_apps_disclaimer_text', bot?.shortName), ['simple_markdown'])}\n      <Checkbox\n        className=\"dialog-checkbox\"\n        checked={isTosAccepted}\n        label={tosLabel}\n        onCheck={setIsTosAccepted}\n      />\n      {renderText(lang('WebBot.Account.Desclaimer.Desc', bot?.shortName), ['simple_markdown'])}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  folder?: ApiChatFolder;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  folder,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder, openDeleteChatFolderModal } = getActions();\n  const lang = useOldLang();\n\n  const isOpen = Boolean(folder);\n\n  const renderingFolder = usePreviousDeprecated(folder) || folder;\n  const isMyChatlist = renderingFolder?.hasMyInvites;\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    if (isMyChatlist) {\n      openDeleteChatFolderModal({ folderId: renderingFolder.id, isConfirmedForChatlist: true });\n    } else {\n      deleteChatFolder({ id: renderingFolder!.id });\n    }\n  }, [isMyChatlist, renderingFolder]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeDeleteChatFolderModal}\n      text={isMyChatlist ? lang('FilterDeleteAlertLinks') : lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wn7D2H1e\",\"text\":\"IQ1U2TrZ\",\"header\":\"F6qqXRvD\",\"description\":\"ILLaH6qQ\",\"icon\":\"DzGwbpu5\",\"font-icon\":\"Pa9h5mh3\",\"fontIcon\":\"Pa9h5mh3\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { IconName } from '../../../types/icons';\n\nimport { hexToRgb, lerpRgb } from '../../../util/switchTheme';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps<T> = {\n  title: string;\n  text: string;\n  index: number;\n  count: number;\n  section: T;\n  onClick?: (section: T) => void;\n} & ({\n  icon: IconName;\n  isFontIcon: true;\n} | {\n  icon: string;\n  isFontIcon?: false;\n});\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n].map(hexToRgb);\n\nconst PremiumFeatureItem = <T,>({\n  icon,\n  isFontIcon,\n  title,\n  text,\n  index,\n  count,\n  section,\n  onClick,\n}: OwnProps<T>) => {\n  const newIndex = (index / count) * COLORS.length;\n  const colorA = COLORS[Math.floor(newIndex)];\n  const colorB = COLORS[Math.ceil(newIndex)] ?? colorA;\n  const { r, g, b } = lerpRgb(colorA, colorB, 0.5);\n\n  const handleClick = useLastCallback(() => {\n    onClick?.(section);\n  });\n\n  return (\n    <ListItem buttonClassName={styles.root} onClick={handleClick} inactive={!onClick}>\n      {isFontIcon ? (\n        <Icon name={icon} className={styles.fontIcon} style={`--item-color: rgb(${r},${g},${b})`} />\n      ) : (\n        <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: rgb(${r},${g},${b})`} draggable={false} />\n      )}\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HmY1pYD9\",\"arrow\":\"cqNhvdib\",\"right\":\"hIgQCprt\",\"arrow-hidden\":\"wDzTWXzO\",\"arrowHidden\":\"wDzTWXzO\",\"dot\":\"Ac0pMX9w\",\"medium\":\"yDo_8Y7X\",\"small\":\"bhODNwmU\",\"invisible\":\"O9pyrgj0\",\"active\":\"NYDxCNdz\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport Button from '../ui/Button';\nimport Icon from './icons/Icon';\n\nimport styles from './SliderDots.module.scss';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <Icon name=\"previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst || isInvisible) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <Icon name=\"next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"u84X0r2z\",\"floating-badge\":\"hPi4fICJ\",\"floatingBadge\":\"hPi4fICJ\",\"floating-badge-triangle\":\"jufjjcX9\",\"floatingBadgeTriangle\":\"jufjjcX9\",\"floating-badge-icon\":\"XkiOXdMP\",\"floatingBadgeIcon\":\"XkiOXdMP\",\"text\":\"YaiSoFKE\",\"floating-badge-value\":\"iC3LJrvy\",\"floatingBadgeValue\":\"iC3LJrvy\",\"left-text\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"leftText\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"right-text\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"rightText\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"right-value\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"rightValue\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"left-value\":\"RJosx238 YaiSoFKE\",\"leftValue\":\"RJosx238 YaiSoFKE\",\"line\":\"Hy5kWx0p\",\"left\":\"scGr4JS9\",\"right\":\"nPaUalQf\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { IconName } from '../../../../types/icons';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\ntype OwnProps = {\n  floatingBadgeIcon?: IconName;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <Icon name={floatingBadgeIcon} className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle}>\n            <svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\">\n              <path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\" />\n            </svg>\n          </div>\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZXp65Wgy\",\"title\":\"W1xG3pjS\",\"description\":\"b_CBXIkT\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"O1fqNCy0\",\"sticker\":\"ogaoEAcn\",\"effect-sticker\":\"Stdz4UIW ogaoEAcn\",\"effectSticker\":\"Stdz4UIW ogaoEAcn\"};","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: (index: number) => void;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useLastCallback(() => {\n    onClick(realIndex);\n  });\n\n  const handleEnded = useLastCallback(() => {\n    inanimate();\n    onEnded(realIndex);\n  });\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\n\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useLastCallback((i: number) => {\n    setOffset(-i);\n  });\n\n  const handleEnded = useLastCallback((i: number) => {\n    const displayIndex = cycleRestrict(renderedStickers.length, i + offset);\n    if (displayIndex !== 0) return;\n\n    setTimeout(() => {\n      setOffset((current) => {\n        return cycleRestrict(renderedStickers.length, current + 1);\n      });\n    }, ENDED_DELAY);\n  });\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {Boolean(size) && renderedStickers?.map((sticker, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={sticker}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mFElmm7a\",\"header\":\"Jjbochk6\",\"circle\":\"ChteQ9C3\",\"title\":\"d2ayix6L\",\"features\":\"ensyCeMe\",\"mobile\":\"DFbZJafh\",\"scrolled\":\"iN1T0a2Y\"};","import { memo, useLayoutEffect, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiUser } from '../../../../api/types';\nimport type { IconName } from '../../../../types/icons';\n\nimport { selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useOldLang from '../../../../hooks/useOldLang';\nimport useScrolledState from '../../../../hooks/useScrolledState';\nimport useDevicePixelRatio from '../../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar, { AVATAR_SIZES } from '../../../common/Avatar';\nimport { drawGradientCircle } from '../../../common/AvatarStoryCircle';\nimport PremiumFeatureItem from '../PremiumFeatureItem';\n\nimport styles from './PremiumFeaturePreviewStories.module.scss';\n\ntype StateProps = {\n  currentUser: ApiUser;\n};\n\nconst STORY_FEATURE_TITLES = {\n  stories_order: 'PremiumStoriesPriority',\n  stories_stealth: 'PremiumStoriesStealth',\n  stories_views: 'PremiumStoriesViews',\n  stories_timer: 'lng_premium_stories_subtitle_expiration',\n  stories_save: 'PremiumStoriesSaveToGallery',\n  stories_caption: 'lng_premium_stories_subtitle_caption',\n  stories_link: 'lng_premium_stories_subtitle_links',\n};\n\nconst STORY_FEATURE_DESCRIPTIONS = {\n  stories_order: 'PremiumStoriesPriorityDescription',\n  stories_stealth: 'PremiumStoriesStealthDescription',\n  stories_views: 'PremiumStoriesViewsDescription',\n  stories_timer: 'PremiumStoriesExpirationDescription',\n  stories_save: 'PremiumStoriesSaveToGalleryDescription',\n  stories_caption: 'PremiumStoriesCaptionDescription',\n  stories_link: 'PremiumStoriesFormattingDescription',\n};\n\nconst STORY_FEATURE_ICONS: Record<string, IconName> = {\n  stories_order: 'story-priority',\n  stories_stealth: 'eye-crossed-outline',\n  stories_views: 'eye-outline',\n  stories_timer: 'timer',\n  stories_save: 'arrow-down-circle',\n  stories_caption: 'story-caption',\n  stories_link: 'link-badge',\n};\n\nconst STORY_FEATURE_ORDER = Object.keys(STORY_FEATURE_TITLES) as (keyof typeof STORY_FEATURE_TITLES)[];\n\nconst CIRCLE_SIZE = AVATAR_SIZES.giant + 0.25 * REM;\nconst CIRCLE_SEGMENTS = 8;\nconst CIRCLE_READ_SEGMENTS = 0;\n\nconst PremiumFeaturePreviewVideo = ({\n  currentUser,\n}: StateProps) => {\n  const circleRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n\n  const dpr = useDevicePixelRatio();\n\n  useLayoutEffect(() => {\n    if (!circleRef.current) {\n      return;\n    }\n\n    drawGradientCircle({\n      canvas: circleRef.current,\n      size: CIRCLE_SIZE * dpr,\n      segmentsCount: CIRCLE_SEGMENTS,\n      color: 'purple',\n      readSegmentsCount: CIRCLE_READ_SEGMENTS,\n      readSegmentColor: 'transparent',\n      dpr,\n    });\n  }, [dpr]);\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const maxSize = CIRCLE_SIZE;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.header}>\n        <Avatar forPremiumPromo peer={currentUser} size=\"giant\" />\n        <canvas className={styles.circle} ref={circleRef} style={`max-width: ${maxSize}px; max-height: ${maxSize}px`} />\n      </div>\n      <div className={styles.title}>{lang('UpgradedStories')}</div>\n      <div\n        className={buildClassName(styles.features, !isAtBeginning && styles.scrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {STORY_FEATURE_ORDER.map((section, index) => {\n          return (\n            <PremiumFeatureItem\n              key={section}\n              title={lang(STORY_FEATURE_TITLES[section])}\n              text={lang(STORY_FEATURE_DESCRIPTIONS[section])}\n              icon={STORY_FEATURE_ICONS[section]}\n              isFontIcon\n              index={index}\n              count={STORY_FEATURE_ORDER.length}\n              section={section}\n            />\n          );\n        })}\n        <div className={styles.mobile}>{lang('lng_premium_stories_about_mobile')}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      currentUser: selectUser(global, global.currentUserId!)!,\n    };\n  },\n)(PremiumFeaturePreviewVideo));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ot0dA1yZ\",\"wrapper\":\"yxSAGAc1\",\"down\":\"Jcy6cDoc\",\"frame\":\"Vn81yTTJ\",\"video\":\"rrVJClLL\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../../hooks/useMediaTransitionDeprecated';\n\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} draggable={false} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oyUTEj8I\",\"button\":\"EPfM7AgT\",\"button-content\":\"GysZk2mF\",\"buttonContent\":\"GysZk2mF\",\"back-button\":\"njYoMrKM\",\"backButton\":\"njYoMrKM\",\"white-back-button\":\"SB4pczOo\",\"whiteBackButton\":\"SB4pczOo\",\"content\":\"sJubG84j\",\"frame\":\"a7IoUtQG\",\"slide\":\"gubS9KP1\",\"limits\":\"U7ePgVBR\",\"stories\":\"J1M6fEdo\",\"limits-content\":\"n_rowVPI\",\"limitsContent\":\"n_rowVPI\",\"header\":\"mz2Hmd83\",\"no-header-border\":\"AgmNOqi7\",\"noHeaderBorder\":\"AgmNOqi7\",\"preview\":\"dIVBSdWi\",\"title\":\"iZLwcL8v\",\"description\":\"A7YHY8qF\",\"footer\":\"yN2611rA\",\"no-footer-border\":\"rCHMABcD\",\"noFooterBorder\":\"rCHMABcD\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { toggleExtraClass } from '../../../lib/teact/teact-dom';\n\nimport type {\n  ApiLimitTypeForPromo,\n  ApiPremiumPromo,\n  ApiPremiumSection,\n  ApiPremiumSubscriptionOption,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport { PREMIUM_BOTTOM_VIDEOS, PREMIUM_FEATURE_SECTIONS, PREMIUM_LIMITS_ORDER } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport SliderDots from '../../common/SliderDots';\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\nimport PremiumFeaturePreviewStories from './previews/PremiumFeaturePreviewStories';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n  translations: 'PremiumPreviewTranslations',\n  stories: 'PremiumPreviewStories',\n  saved_tags: 'PremiumPreviewTags2',\n  last_seen: 'PremiumPreviewLastSeen',\n  message_privacy: 'PremiumPreviewMessagePrivacy',\n  effects: 'Premium.MessageEffects',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n  translations: 'PremiumPreviewTranslationsDescription',\n  stories: 'PremiumPreviewStoriesDescription',\n  saved_tags: 'PremiumPreviewTagsDescription2',\n  last_seen: 'PremiumPreviewLastSeenDescription',\n  message_privacy: 'PremiumPreviewMessagePrivacyDescription',\n  effects: 'Premium.MessageEffectsInfo',\n};\n\nconst LIMITS_TITLES: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n  recommendedChannels: 'SimilarChannelsLimitTitle',\n  moreAccounts: 'ConnectedAccountsLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n  recommendedChannels: 'SimilarChannelsLimitSubtitle',\n  moreAccounts: 'ConnectedAccountsLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  initialSection: ApiPremiumSection;\n  promo: ApiPremiumPromo;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumPromoOrder?: ApiPremiumSection[];\n  subscriptionOption?: ApiPremiumSubscriptionOption;\n  onBack: VoidFunction;\n  onClickSubscribe: (startParam?: string) => void;\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  isPremium,\n  limits,\n  premiumPromoOrder,\n  subscriptionOption,\n  onBack,\n  onClickSubscribe,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const scrollContainerRef = useRef<HTMLDivElement>();\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePreviousDeprecated(initialSection);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  const subscriptionButtonText = useMemo(() => {\n    if (!subscriptionOption) return undefined;\n\n    const { amount, months, currency } = subscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n\n    return isPremium\n      ? lang('OK')\n      : lang('SubscribeToPremium', { price: formatCurrency(lang, perMonthPrice, currency) }, { withNodes: true });\n  }, [isPremium, lang, subscriptionOption]);\n\n  const handleClick = useLastCallback(() => {\n    onClickSubscribe(initialSection);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const target = e.currentTarget;\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = target;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex}`);\n\n    requestMutation(() => {\n      target.style.setProperty('--scroll-progress', progress.toString());\n      target.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n\n      if (prevElement) toggleExtraClass(prevElement, 'reverse', false);\n      if (reverseElement) toggleExtraClass(reverseElement, 'reverse', true);\n    });\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = filteredSections.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, filteredSections, initialSection, prevInitialSection]);\n\n  const handleSelectSlide = useLastCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  });\n\n  const currentSection = filteredSections[currentSlideIndex];\n  const hasHeaderBackdrop = currentSection !== 'double_limits' && currentSection !== 'stories';\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, hasHeaderBackdrop && styles.whiteBackButton)}\n        color={hasHeaderBackdrop ? 'translucent-white' : 'translucent'}\n        onClick={onBack}\n        ariaLabel={oldLang('Back')}\n      >\n        <Icon name=\"arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {filteredSections.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {oldLang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {PREMIUM_LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={oldLang(LIMITS_TITLES[limit])}\n                        description={oldLang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (PREMIUM_LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {oldLang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(oldLang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'stories') {\n            return (\n              <div className={buildClassName(styles.slide, styles.stories)}>\n                <PremiumFeaturePreviewStories />\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {oldLang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(oldLang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        {Boolean(subscriptionButtonText) && (\n          <Button\n            className={buildClassName(styles.button)}\n            isShiny={!isPremium}\n            withPremiumGradient={!isPremium}\n            onClick={isPremium ? onBack : handleClick}\n          >\n            {subscriptionButtonText}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiPremiumGiftCodeOption, ApiPremiumSubscriptionOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport styles from './PremiumSubscriptionOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumSubscriptionOption | ApiPremiumGiftCodeOption;\n  isGiveaway?: boolean;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  className?: string;\n  onChange: (month: number) => void;\n};\n\nconst PremiumSubscriptionOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount,\n  onChange, className, isGiveaway,\n}) => {\n  const oldLang = useOldLang();\n\n  const {\n    months, amount, currency,\n  } = option;\n  const users = 'users' in option ? option.users : undefined;\n  const perMonth = Math.floor(amount / months);\n  const isUserCountPlural = users ? users > 1 : undefined;\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label\n      className={buildClassName(\n        isGiveaway ? styles.giveawayWrapper : styles.wrapper,\n        (checked && !isGiveaway) && styles.active,\n        className,\n      )}\n      dir={oldLang.isRtl ? 'rtl' : undefined}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"subscription_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>\n          {Boolean(discount) && (\n            <span\n              className={buildClassName(styles.giveawayDiscount, styles.discount)}\n              title={oldLang('GiftDiscount')}\n            >\n              {' '}\n              &minus;\n              {discount}\n              %\n            </span>\n          )}\n          {oldLang('Months', months)}\n        </div>\n        <div className={styles.perMonth}>\n          {(isGiveaway || isUserCountPlural) ? `${formatCurrencyAsString(amount, currency, oldLang.code)} x ${users!}`\n            : oldLang('PricePerMonth', formatCurrencyAsString(perMonth, currency, oldLang.code))}\n        </div>\n        <div className={styles.amount}>\n          {formatCurrencyAsString(amount, currency, oldLang.code)}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(PremiumSubscriptionOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"qZA6S2kc\",\"giveawayWrapper\":\"PkseWxFK\",\"active\":\"EJOQwnRj\",\"input\":\"WOEkhx6R\",\"content\":\"BHUCScsU\",\"month\":\"DfYCMUkL\",\"perMonth\":\"poxOXJ2o\",\"amount\":\"IGMrERf_\",\"discount\":\"uqDlP3Zt\",\"giveawayDiscount\":\"ublijP0j\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sfbpMFHM\",\"transition\":\"ELNkgPve\",\"button\":\"c1tMxuFH\",\"main\":\"ZpOIPrhp\",\"logo\":\"mlMezt6b\",\"status-emoji\":\"mQwvY9LA\",\"statusEmoji\":\"mQwvY9LA\",\"header-text\":\"y71v6ECL\",\"headerText\":\"y71v6ECL\",\"description\":\"cUcKXV3j\",\"list\":\"c3Ee2oSo\",\"no-button\":\"yWEHoJOL\",\"noButton\":\"yWEHoJOL\",\"header\":\"Bc_F0RKb\",\"hidden-header\":\"ltXo0Xi7\",\"hiddenHeader\":\"ltXo0Xi7\",\"close-button\":\"XyN3eWog\",\"closeButton\":\"XyN3eWog\",\"premium-header-text\":\"xysPdANX\",\"premiumHeaderText\":\"xysPdANX\",\"footer-text\":\"yKm9hKQP\",\"footerText\":\"yKm9hKQP\",\"primary-footer-text\":\"l1WlNpmu\",\"primaryFooterText\":\"l1WlNpmu\",\"footer\":\"nCnlO9UZ\",\"stickerSetText\":\"xw_GbDj7\",\"stickerSetLink\":\"FLzl2ng5\",\"stickerSetLinkIcon\":\"Y0jTcadE\",\"subscriptionOptions\":\"xZC_Oajr\",\"subscriptionOption\":\"gygsbDbE\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumPromo, ApiPremiumSection, ApiPremiumSubscriptionOption, ApiSticker, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport { PREMIUM_FEATURE_SECTIONS, TME_LINK_PREFIX } from '../../../config';\nimport { getUserFullName } from '../../../global/helpers';\nimport {\n  selectIsCurrentUserPremium, selectStickerSet,\n  selectTabState, selectUser,\n} from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './PremiumMainModal.module.scss';\n\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumEffects from '../../../assets/premium/PremiumEffects.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumLastSeen from '../../../assets/premium/PremiumLastSeen.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumMessagePrivacy from '../../../assets/premium/PremiumMessagePrivacy.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumTags from '../../../assets/premium/PremiumTags.svg';\nimport PremiumTranslate from '../../../assets/premium/PremiumTranslate.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\n\nconst LIMIT_ACCOUNTS = 4;\nconst STATUS_EMOJI_SIZE = 8 * REM;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<ApiPremiumSection, string> = {\n  stories: PremiumStatus,\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n  translations: PremiumTranslate,\n  saved_tags: PremiumTags,\n  last_seen: PremiumLastSeen,\n  message_privacy: PremiumMessagePrivacy,\n  effects: PremiumEffects,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  fromUser?: ApiUser;\n  fromUserStatusEmoji?: ApiSticker;\n  fromUserStatusSet?: ApiStickerSet;\n  toUser?: ApiUser;\n  initialSection?: ApiPremiumSection;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: ApiPremiumSection[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  fromUserStatusEmoji,\n  fromUserStatusSet,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  const dialogRef = useRef<HTMLDivElement>();\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink, loadStickers, openStickerSet,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<ApiPremiumSection | undefined>(initialSection);\n  const [selectedSubscriptionOption, setSubscriptionOption] = useState<ApiPremiumSubscriptionOption>();\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n      setCurrentSection(undefined);\n    }\n  }, [isOpen]);\n\n  const handleOpenSection = useLastCallback((section: ApiPremiumSection) => {\n    setCurrentSection(section);\n  });\n\n  const handleResetSection = useLastCallback(() => {\n    setCurrentSection(undefined);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleClickWithStartParam = useLastCallback((startParam?: string) => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        type: 'slug',\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (selectedSubscriptionOption) {\n      handleClickWithStartParam(String(selectedSubscriptionOption.months));\n    } else {\n      handleClickWithStartParam();\n    }\n  });\n\n  const handleChangeSubscriptionOption = useLastCallback((months: number) => {\n    const foundOption = promo?.options.find((option) => option.months === months);\n    setSubscriptionOption(foundOption);\n  });\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  useEffect(() => {\n    if (!fromUserStatusEmoji || fromUserStatusSet) return;\n    loadStickers({\n      stickerSetInfo: fromUserStatusEmoji.stickerSetInfo,\n    });\n  }, [loadStickers, fromUserStatusEmoji, fromUserStatusSet]);\n\n  useEffect(() => {\n    const [defaultOption] = promo?.options ?? [];\n    setSubscriptionOption(defaultOption);\n  }, [promo]);\n\n  const handleOpenStatusSet = useLastCallback(() => {\n    if (!fromUserStatusSet) return;\n\n    openStickerSet({\n      stickerSetInfo: fromUserStatusSet,\n    });\n  });\n\n  const fullMonthlyAmount = useMemo(() => {\n    const monthOption = promo?.options.find((option) => option.months === 1);\n    if (!monthOption) {\n      return undefined;\n    }\n    return Number(monthOption.amount);\n  }, [promo]);\n\n  const subscribeButtonText = useMemo(() => {\n    if (!selectedSubscriptionOption) {\n      return undefined;\n    }\n    const { amount, months, currency } = selectedSubscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n    return formatCurrency(\n      lang,\n      perMonthPrice,\n      currency,\n    );\n  }, [selectedSubscriptionOption, lang]);\n\n  if (!promo || (fromUserStatusEmoji && !fromUserStatusSet)) return undefined;\n\n  function getHeaderText() {\n    if (isGift) {\n      return renderText(\n        fromUser?.id === currentUserId\n          ? oldLang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n          : oldLang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]),\n        ['simple_markdown', 'emoji'],\n      );\n    }\n\n    if (fromUserStatusSet && fromUser) {\n      const template = oldLang('lng_premium_emoji_status_title').replace('{user}', getUserFullName(fromUser)!);\n      const [first, second] = template.split('{link}');\n\n      const emoji = fromUserStatusSet.thumbCustomEmojiId ? (\n        <CustomEmoji className={styles.stickerSetLinkIcon} documentId={fromUserStatusSet.thumbCustomEmojiId} />\n      ) : undefined;\n      const link = (\n        <span className={styles.stickerSetLink} onClick={handleOpenStatusSet}>\n          {emoji}\n          {renderText(fromUserStatusSet.title)}\n        </span>\n      );\n      return [renderText(first), link, renderText(second)];\n    }\n\n    return renderText(\n      fromUser\n        ? oldLang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n        : oldLang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium'),\n      ['simple_markdown', 'emoji'],\n    );\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? oldLang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : oldLang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    if (fromUserStatusSet) {\n      return oldLang('TelegramPremiumUserStatusDialogSubtitle');\n    }\n\n    return fromUser\n      ? oldLang('TelegramPremiumUserDialogSubtitle')\n      : oldLang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={oldLang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities({\n          text: promo.statusText,\n          entities: promo.statusEntities,\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.subscriptionOptions}>\n        {promo?.options\n          .map((option) => (\n            <PremiumSubscriptionOption\n              className={styles.subscriptionOption}\n              key={option.amount}\n              option={option}\n              onChange={handleChangeSubscriptionOption}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={selectedSubscriptionOption?.months === option.months}\n            />\n          ))}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={closePremiumModal}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n\n              onClick={() => closePremiumModal()}\n              ariaLabel={oldLang('Close')}\n            >\n              <Icon name=\"close\" />\n            </Button>\n            {(fromUserStatusEmoji && !isGift) ? (\n              <CustomEmoji\n                className={styles.statusEmoji}\n                onClick={handleOpenStatusSet}\n                documentId={fromUserStatusEmoji.id}\n                isBig\n                size={STATUS_EMOJI_SIZE}\n              />\n            ) : (\n              <img className={styles.logo} src={PremiumLogo} alt=\"\" draggable={false} />\n            )}\n            <h2 className={buildClassName(styles.headerText, fromUserStatusSet && styles.stickerSetText)}>\n              {getHeaderText()}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            {!isPremium && !isGift && renderSubscriptionOptions()}\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {oldLang('TelegramPremium')}\n              </h2>\n            </div>\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={oldLang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? oldLang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : oldLang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    count={filteredSections.length}\n                    section={section}\n                    onClick={handleOpenSection}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={oldLang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(oldLang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(oldLang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && selectedSubscriptionOption && (\n              <div className={styles.footer}>\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {oldLang('SubscribeToPremium', subscribeButtonText)}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleResetSection}\n            promo={promo}\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n            premiumPromoOrder={premiumPromoOrder}\n            subscriptionOption={selectedSubscriptionOption}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n\n  const fromUser = premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined;\n  const fromUserStatusEmoji = fromUser?.emojiStatus ? global.customEmojis.byId[fromUser.emojiStatus.documentId]\n    : undefined;\n  const fromUserStatusSet = fromUserStatusEmoji ? selectStickerSet(global, fromUserStatusEmoji.stickerSetInfo)\n    : undefined;\n\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    fromUser,\n    fromUserStatusEmoji,\n    fromUserStatusSet,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","import type { TeactNode } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport Loading from '../../ui/Loading';\nimport Radio from '../../ui/Radio';\nimport Icon from '../icons/Icon';\nimport PickerItem from './PickerItem';\n\nimport styles from './PickerStyles.module.scss';\n\nexport type ItemPickerOption = {\n  label: TeactNode;\n  subLabel?: string;\n  disabled?: boolean;\n  isLoading?: boolean;\n  value: string;\n};\n\ntype SingleModeProps = {\n  allowMultiple?: false;\n  itemInputType?: 'radio';\n  selectedValue?: string;\n  selectedValues?: never; // Help TS to throw an error if this is passed\n  onSelectedValueChange?: (value: string) => void;\n};\n\ntype MultipleModeProps = {\n  allowMultiple: true;\n  itemInputType: 'checkbox';\n  selectedValue?: never;\n  selectedValues: string[];\n  lockedSelectedValues?: string[];\n  lockedUnselectedValues?: string[];\n  onSelectedValuesChange?: (values: string[]) => void;\n};\n\ntype OwnProps = {\n  className?: string;\n  isSearchable?: boolean;\n  searchInputId?: string;\n  items: ItemPickerOption[];\n  itemClassName?: string;\n  filterValue?: string;\n  filterPlaceholder?: string;\n  notFoundText?: string;\n  isLoading?: boolean;\n  noScrollRestore?: boolean;\n  isViewOnly?: boolean;\n  withDefaultPadding?: boolean;\n  forceRenderAllItems?: boolean;\n  onFilterChange?: (value: string) => void;\n  onDisabledClick?: (value: string, isSelected: boolean) => void;\n  onLoadMore?: () => void;\n} & (SingleModeProps | MultipleModeProps);\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst ITEM_CLASS_NAME = 'ItemPickerItem';\n\nconst ItemPicker = ({\n  className,\n  isSearchable,\n  searchInputId,\n  items,\n  filterValue,\n  notFoundText,\n  isLoading,\n  noScrollRestore,\n  filterPlaceholder,\n  isViewOnly,\n  itemInputType,\n  itemClassName,\n  withDefaultPadding,\n  forceRenderAllItems,\n  onFilterChange,\n  onDisabledClick,\n  onLoadMore,\n  ...optionalProps\n}: OwnProps) => {\n  const lang = useOldLang();\n  const inputRef = useRef<HTMLInputElement>();\n\n  const allowMultiple = optionalProps.allowMultiple;\n  const lockedSelectedValues = allowMultiple ? optionalProps.lockedSelectedValues : undefined;\n  const lockedUnselectedValues = allowMultiple ? optionalProps.lockedUnselectedValues : undefined;\n\n  useEffect(() => {\n    if (!isSearchable) return undefined;\n    const timeoutId = window.setTimeout(() => {\n      requestMeasure(() => {\n        inputRef.current?.focus();\n      });\n    }, FOCUS_DELAY_MS);\n\n    return () => {\n      window.clearTimeout(timeoutId);\n    };\n  }, [isSearchable]);\n\n  const selectedValues = useMemo(() => {\n    if (allowMultiple) {\n      return optionalProps.selectedValues;\n    }\n\n    return optionalProps.selectedValue ? [optionalProps.selectedValue] : MEMO_EMPTY_ARRAY;\n  }, [allowMultiple, optionalProps.selectedValue, optionalProps.selectedValues]);\n\n  const lockedSelectedValuesSet = useMemo(() => new Set(lockedSelectedValues), [lockedSelectedValues]);\n  const lockedUnselectedValuesSet = useMemo(() => new Set(lockedUnselectedValues), [lockedUnselectedValues]);\n\n  const sortedItemValuesList = useMemo(() => {\n    if (filterValue) {\n      return items.map((item) => item.value);\n    }\n\n    const lockedSelectedBucket: ItemPickerOption[] = [];\n    const unlockedBucket: ItemPickerOption[] = [];\n    const lockedUnselectableBucket: ItemPickerOption[] = [];\n\n    items.forEach((item) => {\n      if (lockedSelectedValuesSet.has(item.value)) {\n        lockedSelectedBucket.push(item);\n      } else if (lockedUnselectedValuesSet.has(item.value)) {\n        lockedUnselectableBucket.push(item);\n      } else {\n        unlockedBucket.push(item);\n      }\n    });\n\n    return lockedSelectedBucket.concat(unlockedBucket, lockedUnselectableBucket).map((item) => item.value);\n  }, [filterValue, items, lockedSelectedValuesSet, lockedUnselectedValuesSet]);\n\n  const handleItemClick = useLastCallback((value: string) => {\n    if (allowMultiple) {\n      const newSelectedValues = selectedValues.slice();\n      const index = newSelectedValues.indexOf(value);\n      if (index >= 0) {\n        newSelectedValues.splice(index, 1);\n      } else {\n        newSelectedValues.push(value);\n      }\n\n      optionalProps.onSelectedValuesChange?.(newSelectedValues);\n      return;\n    }\n\n    optionalProps.onSelectedValueChange?.(value);\n  });\n\n  const [viewportValuesList, getMore] = useInfiniteScroll(\n    onLoadMore, sortedItemValuesList, Boolean(forceRenderAllItems || filterValue),\n  );\n\n  const handleFilterChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange?.(value);\n  });\n\n  const renderItem = useCallback((value: string) => {\n    const item = items.find((itemOption) => itemOption.value === value);\n    if (!item) return undefined;\n\n    const { label, subLabel, isLoading: isItemLoading } = item;\n    const isAlwaysUnselected = lockedUnselectedValuesSet.has(value);\n    const isAlwaysSelected = lockedSelectedValuesSet.has(value);\n    const isLocked = isAlwaysUnselected || isAlwaysSelected;\n    const isChecked = selectedValues.includes(value);\n\n    function getInputElement() {\n      if (isLocked) return <Icon name=\"lock-badge\" />;\n      if (itemInputType === 'radio') {\n        return <Radio checked={isChecked} disabled={isLocked} isLoading={isItemLoading} onlyInput />;\n      }\n      if (itemInputType === 'checkbox') {\n        return <Checkbox checked={isChecked} disabled={isLocked} isLoading={isItemLoading} onlyInput />;\n      }\n      return undefined;\n    }\n\n    return (\n      <PickerItem\n        key={value}\n        className={buildClassName(ITEM_CLASS_NAME, itemClassName)}\n        title={label}\n        subtitle={subLabel}\n        disabled={isLocked}\n        inactive={isViewOnly}\n        ripple\n        inputElement={getInputElement()}\n\n        onClick={() => handleItemClick(value)}\n\n        onDisabledClick={onDisabledClick && (() => onDisabledClick(value, isAlwaysSelected))}\n      />\n    );\n  }, [\n    items, lockedUnselectedValuesSet, lockedSelectedValuesSet, selectedValues, isViewOnly, onDisabledClick,\n    itemInputType, itemClassName,\n  ]);\n\n  return (\n    <div className={buildClassName(styles.container, className)}>\n      {isSearchable && (\n        <div className={buildClassName(styles.header, 'custom-scroll')} dir={lang.isRtl ? 'rtl' : undefined}>\n          <InputText\n            id={searchInputId}\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={filterPlaceholder || lang('Search')}\n          />\n        </div>\n      )}\n\n      {viewportValuesList?.length ? (\n        <InfiniteScroll\n          className={buildClassName(styles.pickerList, withDefaultPadding && styles.padded, 'custom-scroll')}\n          items={viewportValuesList}\n          itemSelector={`.${ITEM_CLASS_NAME}`}\n          onLoadMore={getMore}\n          noScrollRestore={noScrollRestore}\n        >\n          {viewportValuesList.map((value) => renderItem(value))}\n        </InfiniteScroll>\n      ) : !isLoading && viewportValuesList && !viewportValuesList.length ? (\n        <p className={styles.noResults}>{notFoundText || lang('SearchEmptyViewTitle')}</p>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ItemPicker);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wzzA3MFh\",\"pickerSelector\":\"xhujrq9i\",\"pickerTitle\":\"YuRK4e7S\",\"picker\":\"YF9nLkCK\",\"footer\":\"ATCZ2Q5G\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\nimport ItemPicker from './pickers/ItemPicker';\n\nimport styles from './CountryPickerModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (value: string[]) => void;\n  countryList: ApiCountry[];\n  selectionLimit?: number | undefined;\n};\n\nconst CountryPickerModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onSubmit,\n  countryList,\n  selectionLimit,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useOldLang();\n\n  const [selectedCountryIds, setSelectedCountryIds] = useState<string[]>([]);\n  const prevSelectedCountryIds = usePreviousDeprecated(selectedCountryIds);\n  const noPickerScrollRestore = prevSelectedCountryIds === selectedCountryIds;\n\n  const displayedIds = useMemo(() => {\n    if (!countryList) {\n      return [];\n    }\n\n    return countryList.filter((country) => !country.isHidden && country.iso2 !== 'FT')\n      .map(({\n        iso2, defaultName,\n      }) => ({\n        value: iso2,\n        label: defaultName,\n      }));\n  }, [countryList]);\n\n  const handleSelectedIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (selectionLimit && newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningCountries', selectionLimit),\n      });\n      return;\n    }\n    setSelectedCountryIds(newSelectedIds);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    onSubmit(selectedCountryIds);\n    onClose();\n  });\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleSubmit}\n    >\n      <div className={styles.container}>\n        <div className={styles.pickerSelector}>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n\n          <h4 className={styles.pickerTitle}>\n            {lang('BoostingSelectCountry')}\n          </h4>\n        </div>\n      </div>\n\n      <div className={buildClassName(styles.main, 'custom-scroll')}>\n        <ItemPicker\n          className={styles.picker}\n          items={displayedIds}\n          selectedValues={selectedCountryIds}\n          onSelectedValuesChange={handleSelectedIdsChange}\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          itemInputType=\"checkbox\"\n        />\n      </div>\n\n      <div className={styles.footer}>\n        <Button\n          size=\"smaller\"\n          onClick={handleSubmit}\n        >\n          {lang('SelectCountries.OK')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(CountryPickerModal);\n","import {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport {\n  isChatChannel, isChatPublic, isChatSuperGroup,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  giveawayChatId?: string;\n  selectionLimit: number;\n  initialSelectedIds: string[];\n  onSelectedIdsConfirmed: (newSelectedIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\nconst GiveawayChannelPickerModal = ({\n  isOpen,\n  giveawayChatId,\n  selectionLimit,\n  initialSelectedIds,\n  onSelectedIdsConfirmed,\n  onClose,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n\n  const [pendingChannelId, setPendingChannelId] = useState<string | undefined>(undefined);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [selectedIds, setSelectedIds] = useState<string[]>(initialSelectedIds);\n\n  useEffect(() => {\n    setSelectedIds(initialSelectedIds);\n  }, [initialSelectedIds]);\n\n  const channelIds = useMemo(() => {\n    const global = getGlobal();\n    const chatsById = global.chats.byId;\n    const { active, archived } = global.chats.listIds;\n    const ids = (active || []).concat(archived || []);\n\n    return unique(ids).map((id) => chatsById[id])\n      .filter((chat) => (\n        chat && (\n          isChatChannel(chat) || isChatSuperGroup(chat)\n        ) && chat.id !== giveawayChatId\n      )).map((chat) => chat.id);\n  }, [giveawayChatId]);\n\n  const displayedChannelIds = useMemo(() => {\n    const foundChannelIds = channelIds ? filterPeersByQuery({ ids: channelIds, query: searchQuery, type: 'chat' }) : [];\n\n    return sortChatIds(foundChannelIds,\n      false,\n      selectedIds);\n  }, [channelIds, searchQuery, selectedIds]);\n\n  const handleSelectedChannelIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    const chatsById = getGlobal().chats.byId;\n    const newlyAddedIds = newSelectedIds.filter((id) => !selectedIds.includes(id));\n    const privateLinkChannelId = newlyAddedIds.find((id) => {\n      const chat = chatsById[id];\n      return chat && !isChatPublic(chat);\n    });\n\n    if (selectedIds?.length >= selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningChannelsPlural', selectionLimit),\n      });\n      return;\n    }\n\n    if (privateLinkChannelId) {\n      setPendingChannelId(privateLinkChannelId);\n      openConfirmModal();\n    } else {\n      setSelectedIds(newSelectedIds);\n    }\n  });\n\n  const confirmPrivateLinkChannelSelection = useLastCallback(() => {\n    if (pendingChannelId) {\n      setSelectedIds(unique([...selectedIds, pendingChannelId]));\n    }\n    closeConfirmModal();\n  });\n\n  const handleModalConfirm = useLastCallback(() => {\n    onSelectedIdsConfirmed(selectedIds);\n    onClose();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('RequestPeer.ChooseChannelTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={lang('Save')}\n      onConfirm={handleModalConfirm}\n      onEnter={handleModalConfirm}\n    >\n      <PeerPicker\n        itemIds={displayedChannelIds}\n        selectedIds={selectedIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onSelectedIdsChange={handleSelectedChannelIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        allowMultiple\n        itemInputType=\"checkbox\"\n      />\n      <ConfirmDialog\n        title={lang('BoostingGiveawayPrivateChannel')}\n        text={lang('BoostingGiveawayPrivateChannelWarning')}\n        confirmLabel={lang('Add')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmPrivateLinkChannelSelection}\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(GiveawayChannelPickerModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './GiveawayTypeOption.module.scss';\n\ntype ApiGiveawayType = 'premium_giveaway' | 'stars_giveaway';\n\ntype OwnProps = {\n  option: ApiGiveawayType;\n  name: string;\n  text: string;\n  img: string;\n  checked?: boolean;\n  isLink: boolean;\n  className?: string;\n  onChange: (value: ApiGiveawayType) => void;\n  onClickAction?: () => void;\n  userNames?: string;\n  selectedMemberIds?: string[];\n};\n\nconst GiveawayTypeOption: FC<OwnProps> = ({\n  option, checked,\n  name, text, img,\n  isLink, onChange, onClickAction, className,\n  userNames, selectedMemberIds,\n}) => {\n  const lang = useOldLang();\n\n  let displayText: string | undefined = lang(text);\n  if (isLink && selectedMemberIds?.length) {\n    displayText = selectedMemberIds.length > 2 ? selectedMemberIds.length.toString() : userNames;\n  }\n\n  const handleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(option);\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    onClickAction?.();\n  });\n\n  return (\n    <label\n      className={buildClassName(styles.wrapper, className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"giveaway_option\"\n        value={option}\n        checked={checked}\n        onChange={handleChange}\n        onClick={(e) => e.stopPropagation()}\n      />\n      <div className={styles.content}>\n        <img className={styles.optionImg} src={img} alt=\"\" draggable={false} />\n        <div className={styles.giveaway}>\n          <h3 className={styles.title}>\n            {lang(name)}\n          </h3>\n          {isLink ? (\n            <div className={styles.link} onClick={handleClick}>\n              <span>{displayText}</span>\n              <Icon name=\"next\" />\n            </div>\n          ) : (\n            <span className={styles.contentText}>{displayText}</span>\n          )}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiveawayTypeOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"w3OGYFKn\",\"input\":\"xy4AclZa\",\"content\":\"TTgSI7Xh\",\"notChecked\":\"JDcXsByU\",\"giveaway\":\"sEt7TF59\",\"title\":\"u4NzVBBi\",\"link\":\"y7XfPOoG\",\"optionImg\":\"lGhZJbMF\",\"contentText\":\"kt2ZKZ6j\"};","import {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember } from '../../../api/types';\n\nimport {\n  isUserBot,\n  sortUserIds,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChatFullInfo } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\n\ntype OwnProps = {\n  isOpen?: boolean;\n\n  giveawayChatId?: string;\n  selectionLimit: number;\n  initialSelectedIds: string[];\n  onSelectedIdsConfirmed: (newSelectedIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst GiveawayUserPickerModal = ({\n  isOpen,\n  selectionLimit,\n  members,\n  adminMembersById,\n  initialSelectedIds,\n  onSelectedIdsConfirmed,\n  onClose,\n}: OwnProps & StateProps) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [selectedIds, setSelectedIds] = useState<string[]>(initialSelectedIds);\n\n  useEffect(() => {\n    setSelectedIds(initialSelectedIds);\n  }, [initialSelectedIds]);\n\n  const memberIds = useMemo(() => {\n    const global = getGlobal();\n    const { byId, statusesById } = global.users;\n    if (!members?.length) {\n      return [];\n    }\n\n    const adminIdsSet = adminMembersById && new Set(Object.keys(adminMembersById));\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      byId,\n      statusesById,\n    );\n\n    return adminIdsSet ? userIds.filter((userId) => !adminIdsSet.has(userId)) : userIds;\n  }, [adminMembersById, members]);\n\n  const displayedMemberIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const filteredUserIds = memberIds\n      ? filterPeersByQuery({ ids: memberIds, query: searchQuery, type: 'user' }) : [];\n\n    return sortChatIds(unique(filteredUserIds).filter((userId) => {\n      const user = usersById[userId];\n      if (!user) {\n        return true;\n      }\n\n      return !isUserBot(user);\n    }));\n  }, [memberIds, searchQuery]);\n\n  const handleSelectedMemberIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningUsers', selectionLimit),\n      });\n      return;\n    }\n    setSelectedIds(newSelectedIds);\n  });\n\n  const handleModalConfirm = useLastCallback(() => {\n    onSelectedIdsConfirmed(selectedIds);\n    onClose();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('BoostingAwardSpecificUsers')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={lang('Save')}\n      onConfirm={handleModalConfirm}\n      onEnter={handleModalConfirm}\n    >\n      <PeerPicker\n        itemIds={displayedMemberIds}\n        selectedIds={selectedIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onSelectedIdsChange={handleSelectedMemberIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        allowMultiple\n        itemInputType=\"checkbox\"\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { giveawayChatId }): StateProps => {\n  const chatFullInfo = giveawayChatId ? selectChatFullInfo(global, giveawayChatId) : undefined;\n  if (!chatFullInfo) {\n    return {};\n  }\n\n  return {\n    members: chatFullInfo.members,\n    adminMembersById: chatFullInfo.adminMembersById,\n  };\n})(GiveawayUserPickerModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"P0kLOw15\",\"button\":\"ILuhBsJG\",\"main\":\"SqiN63Ef\",\"logo\":\"Me2hCsMs\",\"header-text\":\"UVDnB0Wq\",\"headerText\":\"UVDnB0Wq\",\"description\":\"v5yGzV6v\",\"header\":\"U6XNIToQ\",\"hidden-header\":\"tDZc21ZC\",\"hiddenHeader\":\"tDZc21ZC\",\"close-button\":\"OX6_HqAd\",\"closeButton\":\"OX6_HqAd\",\"premium-header-text\":\"v6hiGpEn\",\"premiumHeaderText\":\"v6hiGpEn\",\"primary-footer-text\":\"YGbiSd3e\",\"primaryFooterText\":\"YGbiSd3e\",\"section\":\"rZRDMqUL\",\"types\":\"sQ5PkKEs\",\"footer\":\"hD_AEzjd\",\"options\":\"JjDLNrKG\",\"giveawayTitle\":\"p5Hn4Q6E\",\"subscription\":\"rniPcuiP\",\"starSubscription\":\"bzRAETfR\",\"subscriptionOption\":\"ggZrgZnv\",\"status\":\"q1y2qUTn\",\"info\":\"IsT38nlq\",\"titleInfo\":\"nmsfBLut\",\"month\":\"TsGuei3B\",\"quantity\":\"G9H3tm6D\",\"floatingBadge\":\"xKl2UeV8\",\"floatingBadgeColor\":\"HLx3wTBD\",\"floatingBadgeButtonColor\":\"JLH0MExt\",\"floatingBadgeIcon\":\"Ftr7zf2v\",\"floatingBadgeValue\":\"Ce0Ob2tg\",\"subscriptionFooter\":\"rDFQAfTt\",\"premiumFeatures\":\"eNQ_nrKr\",\"dateButton\":\"GeKqKRgP\",\"title\":\"LZ3vPzak\",\"checkboxSection\":\"Z9QJQ6IS\",\"prizesSection\":\"eQVP0Nx8\",\"prizesInput\":\"qMYNwiUZ\",\"subLabelClassName\":\"txXJxVFu\",\"prepaidImg\":\"ldn4mh2T\",\"addButton\":\"sOXvh85b\",\"addChannel\":\"aGbyR60s\",\"removeChannel\":\"UZdErfVI\",\"starOptions\":\"cLhNkYPB\",\"transition\":\"vEI2Wewt\"};","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiCountry,\n  ApiPremiumGiftCodeOption,\n  ApiPrepaidGiveaway,\n  ApiPrepaidStarsGiveaway,\n  ApiStarGiveawayOption,\n  ApiTypePrepaidGiveaway,\n  ApiUser,\n} from '../../../api/types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n  GIVEAWAY_MAX_ADDITIONAL_CHANNELS,\n  GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  GIVEAWAY_MAX_ADDITIONAL_USERS,\n  STARS_CURRENCY_CODE,\n} from '../../../config';\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { unique } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport CountryPickerModal from '../../common/CountryPickerModal';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport StarTopupOptionList from '../../modals/stars/StarTopupOptionList';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSliderWithMarks from '../../ui/RangeSliderWithMarks';\nimport Switcher from '../../ui/Switcher';\nimport GiveawayChannelPickerModal from './GiveawayChannelPickerModal';\nimport GiveawayTypeOption from './GiveawayTypeOption';\nimport GiveawayUserPickerModal from './GiveawayUserPickerModal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './GiveawayModal.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  userIds?: string[];\n};\n\ntype StateProps = {\n  chatId?: string;\n  gifts?: ApiPremiumGiftCodeOption[];\n  isOpen?: boolean;\n  fromUser?: ApiUser;\n  selectedMemberList?: string[] | undefined;\n  selectedChannelList?: string[] | undefined;\n  giveawayBoostPerPremiumLimit?: number;\n  userSelectionLimit?: number;\n  countryList: ApiCountry[];\n  prepaidGiveaway?: ApiTypePrepaidGiveaway;\n  countrySelectionLimit: number | undefined;\n  isChannel?: boolean;\n  isStarsGiftEnabled?: boolean;\n  starsGiftOptions?: ApiStarGiveawayOption[] | undefined;\n};\n\ntype GiveawayAction = 'createPremiumGiveaway' | 'createStarsGiveaway';\ntype ApiGiveawayType = 'premium_giveaway' | 'stars_giveaway';\ntype SubscribersType = 'all' | 'new';\n\ninterface TypeOption {\n  name: string;\n  text: string;\n  value: ApiGiveawayType;\n  img: string;\n  actions?: GiveawayAction;\n  isLink: boolean;\n  onClickAction?: () => void;\n}\n\nconst DEFAULT_CUSTOM_EXPIRE_DATE = 86400 * 3 * 1000; // 3 days\nconst MAX_ADDITIONAL_CHANNELS = 9;\nconst DEFAULT_BOOST_COUNT = 5;\n\nconst GIVEAWAY_IMG_LIST: Partial<Record<number, string>> = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst GiveawayModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  gifts,\n  isOpen,\n  isChannel,\n  selectedMemberList,\n  selectedChannelList,\n  giveawayBoostPerPremiumLimit = GIVEAWAY_BOOST_PER_PREMIUM,\n  countryList,\n  prepaidGiveaway,\n  countrySelectionLimit = GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  userSelectionLimit = GIVEAWAY_MAX_ADDITIONAL_USERS,\n  isStarsGiftEnabled,\n  starsGiftOptions,\n}) => {\n  const dialogRef = useRef<HTMLDivElement>();\n  const {\n    closeGiveawayModal, openInvoice, openPremiumModal,\n    launchPrepaidGiveaway, launchPrepaidStarsGiveaway,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isCountryPickerModalOpen, openCountryPickerModal, closeCountryPickerModal] = useFlag();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [isUserPickerModalOpen, openUserPickerModal, closeUserPickerModal] = useFlag();\n  const [isChannelPickerModalOpen, openChannelPickerModal, closeChannelPickerModal] = useFlag();\n\n  const TYPE_OPTIONS: TypeOption[] = [{\n    name: 'Premium.Title',\n    text: 'BoostingWinnersRandomly',\n    value: 'premium_giveaway',\n    img: GiftBlueRound,\n    actions: 'createPremiumGiveaway',\n    isLink: true,\n    onClickAction: () => {\n      openUserPickerModal();\n    },\n  }];\n\n  if (isStarsGiftEnabled) {\n    TYPE_OPTIONS.push({\n      name: 'TelegramStars',\n      text: 'BoostingWinnersRandomly',\n      value: 'stars_giveaway',\n      img: GiftStar,\n      actions: 'createStarsGiveaway',\n      isLink: false,\n    });\n  }\n\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [selectedRandomUserCount, setSelectedRandomUserCount] = useState<number>(DEFAULT_BOOST_COUNT);\n  const [selectedGiveawayOption, setGiveawayOption] = useState<ApiGiveawayType>(TYPE_OPTIONS[0].value);\n  const [selectedStarOption, setSelectedStarOption] = useState<ApiStarGiveawayOption | undefined>();\n  const [selectedSubscriberOption, setSelectedSubscriberOption] = useState<SubscribersType>('all');\n  const [selectedMonthOption, setSelectedMonthOption] = useState<number | undefined>();\n  const [selectedUserIds, setSelectedUserIds] = useState<string[]>([]);\n  const [selectedChannelIds, setSelectedChannelIds] = useState<string[]>([]);\n  const [selectedCountryIds, setSelectedCountryIds] = useState<string[] | undefined>([]);\n  const [shouldShowWinners, setShouldShowWinners] = useState<boolean>(false);\n  const [shouldShowPrizes, setShouldShowPrizes] = useState<boolean>(false);\n  const [prizeDescription, setPrizeDescription] = useState<string | undefined>(undefined);\n  const [dataPrepaidGiveaway, setDataPrepaidGiveaway] = useState<ApiPrepaidGiveaway | undefined>(undefined);\n  const [\n    dataStarsPrepaidGiveaway, setDataStarsPrepaidGiveaway,\n  ] = useState<ApiPrepaidStarsGiveaway | undefined>(undefined);\n\n  const isPremiumGiveaway = selectedGiveawayOption === 'premium_giveaway';\n  const isStarsGiveaway = selectedGiveawayOption === 'stars_giveaway';\n  const selectedUserCount = isPremiumGiveaway\n    && !selectedUserIds.length ? selectedRandomUserCount : selectedUserIds.length;\n  const boostQuantity = selectedUserCount * giveawayBoostPerPremiumLimit;\n  const boostStarsQuantity = selectedStarOption?.yearlyBoosts;\n\n  const SUBSCRIBER_OPTIONS = useMemo(() => [\n    {\n      value: 'all',\n      label: lang(isChannel ? 'BoostingAllSubscribers' : 'BoostingAllMembers'),\n      subLabel: selectedCountryIds && selectedCountryIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountryIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n    {\n      value: 'new',\n      label: lang(isChannel ? 'BoostingNewSubscribers' : 'BoostingNewMembers'),\n      subLabel: selectedCountryIds && selectedCountryIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountryIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n  ], [isChannel, lang, selectedCountryIds]);\n\n  const monthQuantity = lang('Months', selectedMonthOption);\n  const isStarsPrepaidGiveaway = prepaidGiveaway?.type === 'starsGiveaway';\n  const isPremiumPrepaidGiveaway = prepaidGiveaway?.type === 'giveaway';\n\n  const selectedGift = useMemo(() => {\n    return gifts?.find((gift) => gift.months === selectedMonthOption && gift.users === selectedUserCount);\n  }, [gifts, selectedMonthOption, selectedUserCount]);\n\n  const selectedStarsGift = useMemo(() => {\n    return starsGiftOptions?.find((gift) => {\n      return isStarsPrepaidGiveaway && gift.stars === (dataStarsPrepaidGiveaway?.stars);\n    });\n  }, [dataStarsPrepaidGiveaway, starsGiftOptions, isStarsPrepaidGiveaway]);\n\n  const filteredGifts = useMemo(() => {\n    return gifts?.filter((gift) => gift.users === selectedUserCount && gift.currency !== STARS_CURRENCY_CODE);\n  }, [gifts, selectedUserCount]);\n\n  const fullMonthlyAmount = useMemo(() => {\n    const basicGift = filteredGifts?.reduce((acc, gift) => {\n      return gift.amount < acc.amount ? gift : acc;\n    }, filteredGifts[0]);\n\n    return basicGift && Math.floor(basicGift.amount / basicGift.months);\n  }, [filteredGifts]);\n\n  const userCountOptions = useMemo(() => {\n    return unique((gifts?.filter((gift) => gift.currency !== STARS_CURRENCY_CODE)\n      ?.map((winner) => winner.users) || [])).sort((a, b) => a - b);\n  }, [gifts]);\n\n  const winnerCountOptions = useMemo(() => {\n    return unique((selectedStarOption?.winners?.map((winner) => winner.users) || [])).sort((a, b) => a - b);\n  }, [selectedStarOption]);\n\n  useEffect(() => {\n    if (isOpen && gifts?.length && !isStarsPrepaidGiveaway) {\n      setSelectedMonthOption(gifts?.[0].months);\n    }\n  }, [isOpen, gifts, isStarsPrepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && starsGiftOptions?.length && !isPremiumPrepaidGiveaway) {\n      setSelectedStarOption(starsGiftOptions?.[0]);\n    }\n  }, [isOpen, starsGiftOptions, isPremiumPrepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && isStarsPrepaidGiveaway) {\n      setSelectedRandomUserCount(prepaidGiveaway.quantity);\n      setDataStarsPrepaidGiveaway(prepaidGiveaway);\n    }\n  }, [isOpen, isStarsPrepaidGiveaway, prepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && isPremiumPrepaidGiveaway) {\n      setSelectedRandomUserCount(prepaidGiveaway.quantity);\n      setDataPrepaidGiveaway(prepaidGiveaway);\n      setSelectedMonthOption(prepaidGiveaway.months);\n    }\n  }, [isOpen, isPremiumPrepaidGiveaway, prepaidGiveaway]);\n\n  useEffect(() => {\n    if (selectedMemberList) {\n      setSelectedUserIds(selectedMemberList);\n    }\n  }, [selectedMemberList]);\n\n  useEffect(() => {\n    if (selectedChannelList) {\n      setSelectedChannelIds(selectedChannelList);\n    }\n  }, [selectedChannelList]);\n\n  const handlePremiumClick = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    setDataStarsPrepaidGiveaway(undefined);\n    setDataPrepaidGiveaway(undefined);\n    setSelectedStarOption(undefined);\n    setSelectedMonthOption(undefined);\n    setSelectedRandomUserCount(DEFAULT_BOOST_COUNT);\n    closeGiveawayModal();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (isPremiumGiveaway) {\n      if (selectedUserIds?.length) {\n        openInvoice({\n          type: 'giftcode',\n          boostChannelId: chatId!,\n          userIds: selectedUserIds,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n          option: selectedGift!,\n        });\n      } else {\n        openInvoice({\n          type: 'giveaway',\n          chatId: chatId!,\n          additionalChannelIds: selectedChannelIds,\n          isOnlyForNewSubscribers: selectedSubscriberOption === 'new',\n          countries: selectedCountryIds,\n          areWinnersVisible: shouldShowWinners,\n          prizeDescription,\n          untilDate: customExpireDate / 1000,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n          option: selectedGift!,\n        });\n      }\n    } else {\n      openInvoice({\n        type: 'starsgiveaway',\n        chatId: chatId!,\n        additionalChannelIds: selectedChannelIds,\n        isOnlyForNewSubscribers: selectedSubscriberOption === 'new',\n        countries: selectedCountryIds,\n        areWinnersVisible: shouldShowWinners,\n        prizeDescription,\n        untilDate: customExpireDate / 1000,\n        currency: selectedStarOption!.currency,\n        amount: selectedStarOption!.amount,\n        stars: selectedStarOption!.stars,\n        users: selectedRandomUserCount,\n      });\n    }\n\n    handleClose();\n  });\n\n  const confirmLaunchPrepaidGiveaway = useLastCallback(() => {\n    if (isStarsPrepaidGiveaway) {\n      launchPrepaidStarsGiveaway({\n        chatId: chatId!,\n        giveawayId: dataStarsPrepaidGiveaway!.id,\n        paymentPurpose: {\n          additionalChannelIds: selectedChannelIds,\n          countries: selectedCountryIds,\n          prizeDescription,\n          areWinnersVisible: shouldShowWinners,\n          untilDate: customExpireDate / 1000,\n          stars: dataStarsPrepaidGiveaway!.stars,\n          currency: selectedStarsGift!.currency,\n          amount: selectedStarsGift!.amount,\n          users: dataStarsPrepaidGiveaway!.quantity,\n        },\n      });\n    } else {\n      launchPrepaidGiveaway({\n        chatId: chatId!,\n        giveawayId: dataPrepaidGiveaway!.id,\n        paymentPurpose: {\n          additionalChannelIds: selectedChannelIds,\n          countries: selectedCountryIds,\n          prizeDescription,\n          areWinnersVisible: shouldShowWinners,\n          untilDate: customExpireDate / 1000,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n        },\n      });\n    }\n\n    closeConfirmModal();\n    handleClose();\n  });\n\n  const handleRandomUserCountChange = useLastCallback((newValue) => {\n    setSelectedRandomUserCount(newValue);\n  });\n\n  const handleWinnerCountChange = useLastCallback((newValue) => {\n    setSelectedRandomUserCount(newValue);\n  });\n\n  const handlePrizeDescriptionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setPrizeDescription(e.target.value);\n  });\n\n  const userNames = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    return selectedUserIds?.map((userId) => getUserFullName(usersById[userId])).join(', ');\n  }, [selectedUserIds]);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleChangeSubscriberOption = useLastCallback((value) => {\n    setSelectedSubscriberOption(value);\n  });\n\n  const handleChangeTypeOption = useLastCallback((value: ApiGiveawayType) => {\n    setGiveawayOption(value);\n    setSelectedUserIds([]);\n    setSelectedRandomUserCount(DEFAULT_BOOST_COUNT);\n  });\n\n  const handleExpireDateChange = useLastCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  });\n\n  const handleSetCountriesListChange = useLastCallback((value: string[]) => {\n    setSelectedCountryIds(value);\n  });\n\n  const handleSelectedUserIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    setSelectedUserIds(newSelectedIds);\n    if (!newSelectedIds.length) {\n      setGiveawayOption('premium_giveaway');\n    }\n  });\n\n  const handleSelectedChannelIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    setSelectedChannelIds(newSelectedIds);\n  });\n\n  const handleShouldShowWinnersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowWinners(e.target.checked);\n  });\n\n  const handleShouldShowPrizesChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowPrizes(e.target.checked);\n  });\n\n  const onClickActionHandler = useLastCallback(() => {\n    openCountryPickerModal();\n  });\n\n  const handleStarClick = useLastCallback((option) => {\n    setSelectedStarOption(option);\n  });\n\n  function renderTypeOptions() {\n    return (\n      <div className={styles.options}>\n        {TYPE_OPTIONS.map((option) => {\n          return (\n            <GiveawayTypeOption\n              key={option.name}\n              name={option.name}\n              text={option.text}\n              option={option.value}\n              img={option.img}\n              onChange={handleChangeTypeOption}\n              checked={selectedGiveawayOption === option.value}\n              isLink={option.isLink}\n              userNames={userNames}\n              selectedMemberIds={selectedUserIds}\n              onClickAction={option.onClickAction}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscribersOptions() {\n    return (\n      <div className={styles.options}>\n        <RadioGroup\n          name=\"subscribers\"\n          options={SUBSCRIBER_OPTIONS}\n          selected={selectedSubscriberOption}\n          onChange={handleChangeSubscriberOption}\n          onClickAction={onClickActionHandler}\n          subLabelClassName={styles.subLabelClassName}\n          isLink\n        />\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.options}>\n        {filteredGifts?.map((gift) => (\n          <PremiumSubscriptionOption\n            isGiveaway\n            key={gift.months}\n            option={gift}\n            fullMonthlyAmount={fullMonthlyAmount}\n            checked={gift.months === selectedMonthOption}\n            onChange={setSelectedMonthOption}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  function deleteParticipantsHandler(id: string) {\n    const filteredChannelIds = selectedChannelIds.filter((channelId) => channelId !== id);\n    setSelectedChannelIds(filteredChannelIds);\n  }\n\n  function renderStarOptionList() {\n    return (\n      <StarTopupOptionList\n        className={styles.starOptions}\n        options={starsGiftOptions}\n        selectedStarCount={selectedRandomUserCount}\n        selectedStarOption={selectedStarOption}\n        onClick={handleStarClick}\n      />\n    );\n  }\n\n  function renderGiveawayOptionList() {\n    return (\n      <>\n        <div className={styles.section}>\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingChannelsGroupsIncludedGiveaway')}\n          </h2>\n\n          <ListItem\n            inactive\n            className=\"chat-item-clickable contact-list-item\"\n          >\n            <GroupChatInfo\n              chatId={chatId!}\n              status={lang(isChannel ? 'BoostingChannelWillReceiveBoost'\n                : 'BoostingGroupWillReceiveBoost', boostQuantity || boostStarsQuantity, 'i')}\n            />\n          </ListItem>\n\n          {selectedChannelIds?.map((channelId) => {\n            return (\n              <ListItem\n                ripple\n                key={channelId}\n                className=\"chat-item-clickable contact-list-item\"\n\n                onClick={() => deleteParticipantsHandler(channelId)}\n                rightElement={(<Icon name=\"close\" className={styles.removeChannel} />)}\n              >\n                <GroupChatInfo\n                  chatId={channelId.toString()}\n                />\n              </ListItem>\n            );\n          })}\n\n          {selectedChannelIds.length < MAX_ADDITIONAL_CHANNELS && (\n            <ListItem\n              icon=\"add\"\n              ripple\n              onClick={openChannelPickerModal}\n              className={styles.addButton}\n              iconClassName={styles.addChannel}\n            >\n              {lang('BoostingAddChannelOrGroup')}\n            </ListItem>\n          )}\n        </div>\n\n        <div className={styles.section}>\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingEligibleUsers')}\n          </h2>\n\n          {renderSubscribersOptions()}\n        </div>\n\n        <div className={styles.subscription}>\n          {renderText(lang(isChannel ? 'BoostGift.LimitSubscribersInfo' : 'lng_giveaway_users_about_group'))}\n        </div>\n\n        <div className={styles.section}>\n          <div className={styles.checkboxSection}>\n            <h2 className={styles.title}>\n              {lang('BoostingGiveawayAdditionalPrizes')}\n            </h2>\n\n            <Switcher\n              label={lang('BoostingGiveawayAdditionalPrizes')}\n              checked={shouldShowPrizes}\n              onChange={handleShouldShowPrizesChange}\n            />\n          </div>\n\n          {shouldShowPrizes && (\n            <div className={styles.prizesSection}>\n              <h2 className={styles.title}>\n                {selectedRandomUserCount}\n              </h2>\n              <InputText\n                className={styles.prizesInput}\n                value={prizeDescription}\n                onChange={handlePrizeDescriptionChange}\n                label={lang('BoostingGiveawayEnterYourPrize')}\n              />\n            </div>\n          )}\n        </div>\n\n        {shouldShowPrizes ? (\n          !isStarsGiveaway && !isStarsPrepaidGiveaway ? (\n            <div className={styles.subscription}>\n              {prizeDescription?.length ? renderText(lang('BoostingGiveawayAdditionPrizeCountNameHint',\n                dataPrepaidGiveaway\n                  ? [dataPrepaidGiveaway.quantity, prizeDescription, monthQuantity]\n                  : [selectedUserCount, prizeDescription, monthQuantity],\n                undefined,\n                selectedMonthOption), ['simple_markdown']) : renderText(lang('BoostingGiveawayAdditionPrizeCountHint',\n                dataPrepaidGiveaway\n                  ? [dataPrepaidGiveaway.quantity, monthQuantity]\n                  : [selectedUserCount, monthQuantity],\n                undefined,\n                selectedMonthOption), ['simple_markdown'])}\n            </div>\n          ) : undefined\n        ) : (\n          <div className={styles.subscription}>\n            {renderText(lang('BoostingGiveawayAdditionPrizeHint'))}\n          </div>\n        )}\n\n        <div className={styles.section}>\n          <div className={styles.checkboxSection}>\n            <h2 className={styles.title}>\n              {lang('BoostingGiveawayShowWinners')}\n            </h2>\n\n            <Switcher\n              label={lang('BoostingGiveawayAdditionalPrizes')}\n              checked={shouldShowWinners}\n              onChange={handleShouldShowWinnersChange}\n            />\n          </div>\n        </div>\n\n        <div className={styles.subscription}>\n          {renderText(lang('BoostingGiveawayShowWinnersHint'))}\n        </div>\n\n        <div className={buildClassName(styles.section,\n          (dataPrepaidGiveaway || dataStarsPrepaidGiveaway || isStarsGiveaway) && styles.subscriptionFooter)}\n        >\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingDateWhenGiveawayEnds')}\n          </h2>\n\n          <Button\n            ariaLabel={lang('BoostGift.DateEnds')}\n            className={buildClassName(styles.dateButton, 'expire-limit')}\n            isText\n            onClick={openCalendar}\n          >\n            <h3 className={styles.title}>\n              {lang('BoostGift.DateEnds')}\n            </h3>\n            {formatDateTimeToString(customExpireDate, lang.code)}\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={handleClose}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n      onEnter={(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? openConfirmModal : handleClick}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          onClick={handleClose}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <img className={styles.logo} src={PremiumLogo} alt=\"\" draggable={false} />\n        <h2 className={styles.headerText}>\n          {renderText(lang('BoostingBoostsViaGifts'))}\n        </h2>\n        <div className={styles.description}>\n          {renderText(lang(isChannel ? 'BoostingGetMoreBoost' : 'BoostingGetMoreBoostsGroup'))}\n        </div>\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.premiumHeaderText}>\n            {lang('BoostingBoostsViaGifts')}\n          </h2>\n        </div>\n        {(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? (\n          <div className={styles.status}>\n            <div>\n              {dataStarsPrepaidGiveaway ? (\n                <img className={styles.prepaidImg} src={GiftStar} alt=\"\" />\n              ) : (\n                <img\n                  className={styles.prepaidImg}\n                  src={GIVEAWAY_IMG_LIST[dataPrepaidGiveaway!.months] || GIVEAWAY_IMG_LIST[3]}\n                  alt=\"\"\n                />\n              )}\n            </div>\n            <div className={styles.info}>\n              <h3 className={styles.title}>\n                {dataStarsPrepaidGiveaway ? lang('Giveaway.Stars.Prepaid.Title', dataStarsPrepaidGiveaway?.stars)\n                  : lang('BoostingTelegramPremiumCountPlural', dataPrepaidGiveaway!.quantity)}\n              </h3>\n              <p className={styles.month}>\n                {dataStarsPrepaidGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', dataStarsPrepaidGiveaway?.quantity)\n                  : lang('PrepaidGiveawayMonths', dataPrepaidGiveaway?.months)}\n              </p>\n            </div>\n            <div className={styles.quantity}>\n              <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {dataStarsPrepaidGiveaway ? dataStarsPrepaidGiveaway?.boosts\n                    : dataPrepaidGiveaway!.quantity * (giveawayBoostPerPremiumLimit ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className={buildClassName(styles.section, styles.types)}>\n            {renderTypeOptions()}\n          </div>\n        )}\n\n        {isPremiumGiveaway && !selectedUserIds?.length && (\n          <>\n            {!dataPrepaidGiveaway && !dataStarsPrepaidGiveaway && (\n              <>\n                <div className={styles.section}>\n                  <div className={styles.quantity}>\n                    <h2 className={styles.giveawayTitle}>\n                      {lang('BoostingQuantityPrizes')}\n                    </h2>\n                    <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                      <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                      <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                        {boostQuantity}\n                      </div>\n                    </div>\n                  </div>\n\n                  <RangeSliderWithMarks\n                    rangeCount={selectedUserCount}\n                    marks={userCountOptions}\n                    onChange={handleRandomUserCountChange}\n                  />\n                </div>\n\n                <div className={styles.subscription}>\n                  {renderText(lang('BoostingChooseHowMany'))}\n                </div>\n              </>\n            )}\n\n            {renderGiveawayOptionList()}\n          </>\n        )}\n\n        {isStarsGiveaway && (\n          <>\n            {!dataStarsPrepaidGiveaway && !dataPrepaidGiveaway && (\n              <>\n                <div className={styles.section}>\n                  <div className={styles.quantity}>\n                    <h2 className={styles.giveawayTitle}>\n                      {lang('BoostingStarsOptions')}\n                    </h2>\n                    <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                      <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                      <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                        {boostStarsQuantity}\n                      </div>\n                    </div>\n                  </div>\n\n                  {renderStarOptionList()}\n                </div>\n\n                <div className={buildClassName(styles.subscription, styles.starSubscription)}>\n                  {renderText(lang('BoostGift.Stars.Info'))}\n                </div>\n\n                <div className={styles.section}>\n                  <h2 className={styles.giveawayTitle}>\n                    {lang('BoostingStarsQuantityPrizes')}\n                  </h2>\n\n                  <RangeSliderWithMarks\n                    rangeCount={selectedRandomUserCount}\n                    marks={winnerCountOptions}\n                    onChange={handleWinnerCountChange}\n                  />\n\n                  <div className={styles.subscription}>\n                    {renderText(lang('BoostingStarsQuantityPrizesInfo'))}\n                  </div>\n                </div>\n              </>\n            )}\n\n            {renderGiveawayOptionList()}\n          </>\n        )}\n\n        {!dataPrepaidGiveaway && !dataStarsPrepaidGiveaway && isPremiumGiveaway && (\n          <>\n            <div className={styles.section}>\n              <h2 className={styles.giveawayTitle}>\n                {lang('BoostingDurationOfPremium')}\n              </h2>\n\n              {renderSubscriptionOptions()}\n            </div>\n\n            <div className={buildClassName(styles.subscription, styles.subscriptionFooter)}>\n              {renderPremiumFeaturesLink()}\n            </div>\n          </>\n        )}\n\n        {selectedGiveawayOption && (\n          <div className={styles.footer}>\n            <Button\n              className={styles.button}\n              onClick={(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? openConfirmModal : handleClick}\n            >\n              {lang('BoostingStartGiveaway')}\n            </Button>\n          </div>\n        )}\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n      <CountryPickerModal\n        isOpen={isCountryPickerModalOpen}\n        onClose={closeCountryPickerModal}\n        countryList={countryList}\n        onSubmit={handleSetCountriesListChange}\n        selectionLimit={countrySelectionLimit}\n      />\n      <GiveawayUserPickerModal\n        isOpen={isUserPickerModalOpen}\n        onClose={closeUserPickerModal}\n        onSelectedIdsConfirmed={handleSelectedUserIdsChange}\n        initialSelectedIds={selectedUserIds}\n        selectionLimit={userSelectionLimit}\n        giveawayChatId={chatId}\n      />\n      <GiveawayChannelPickerModal\n        isOpen={isChannelPickerModalOpen}\n        onClose={closeChannelPickerModal}\n        initialSelectedIds={selectedChannelIds}\n        onSelectedIdsConfirmed={handleSelectedChannelIdsChange}\n        selectionLimit={GIVEAWAY_MAX_ADDITIONAL_CHANNELS}\n        giveawayChatId={chatId}\n      />\n      <ConfirmDialog\n        title={lang('BoostingStartGiveawayConfirmTitle')}\n        text={lang('BoostingStartGiveawayConfirmText')}\n        confirmLabel={lang('Start')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmLaunchPrepaidGiveaway}\n      />\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    giveawayModal,\n  } = selectTabState(global);\n  const chatId = giveawayModal?.chatId;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const isChannel = chat && isChatChannel(chat);\n\n  return {\n    chatId,\n    gifts: giveawayModal?.gifts,\n    selectedMemberList: giveawayModal?.selectedMemberIds,\n    selectedChannelList: giveawayModal?.selectedChannelIds,\n    giveawayBoostPerPremiumLimit: global.appConfig?.giveawayBoostsPerPremium,\n    isStarsGiftEnabled: global.appConfig?.isStarsGiftEnabled,\n    userSelectionLimit: global.appConfig?.giveawayAddPeersMax,\n    countrySelectionLimit: global.appConfig?.giveawayCountriesMax,\n    countryList: global.countryList.general,\n    prepaidGiveaway: giveawayModal?.prepaidGiveaway,\n    isChannel,\n    starsGiftOptions: giveawayModal?.starOptions,\n  };\n})(GiveawayModal));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiLimitTypeWithModal } from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\nimport type { IconName } from '../../../../types/icons';\n\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n  chatlistInvites: 'LimitReachedFolderLinks',\n  chatlistJoined: 'LimitReachedSharedFolders',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogs',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n  chatlistInvites: 'LimitReachedFolderLinksLocked',\n  chatlistJoined: 'LimitReachedSharedFoldersLocked',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n  chatlistInvites: 'LimitReachedFolderLinksPremium',\n  chatlistJoined: 'LimitReachedSharedFoldersPremium',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, IconName> = {\n  dialogFiltersChats: 'chat-badge',\n  uploadMaxFileparts: 'file-badge',\n  dialogFilters: 'folder-badge',\n  dialogFolderPinned: 'pin-badge',\n  channelsPublic: 'link-badge',\n  channels: 'chats-badge',\n  chatlistInvites: 'link-badge',\n  chatlistJoined: 'folder-badge',\n  savedDialogsPinned: 'pin-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: OldLangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: OldLangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useOldLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon, 'icon')} />\n          <div className={styles.limitValue}>\n            {valueFormatter?.(\n              lang, isPremium ? premiumValue : defaultValue,\n            ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n          && (\n            <Button\n              className=\"confirm-dialog-button\"\n              isText\n              onClick={handleClick}\n              color=\"primary\"\n            >\n              {lang('IncreaseLimit')}\n              <Icon name=\"double-badge\" className={styles.x2} />\n            </Button>\n          )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QAs_iFxO\",\"limit-compare\":\"k0O6Rnjh\",\"limitCompare\":\"k0O6Rnjh\",\"limit-badge\":\"Q5d_7bB4\",\"limitBadge\":\"Q5d_7bB4\",\"limit-value\":\"ArEy3hhB\",\"limitValue\":\"ArEy3hhB\",\"limit-icon\":\"rbnU7JVX\",\"limitIcon\":\"rbnU7JVX\",\"dialog-buttons\":\"RVM_RSap\",\"dialogButtons\":\"RVM_RSap\",\"x2\":\"esB1OhAF\",\"button-icon\":\"ydpxmYS3\",\"buttonIcon\":\"ydpxmYS3\"};","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useRef, useState } from '../../../lib/teact/teact';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport animateScroll from '../../../util/animateScroll';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst STICKER_INTERSECTION_MARGIN = 100;\nconst SLIDE_TRANSITION_DURATION = 350 + ANIMATION_END_DELAY;\nconst SCROLL_MAX_DISTANCE_WHEN_CLOSE = 200;\nconst SCROLL_MAX_DISTANCE_WHEN_FAR = 80;\nconst FOCUS_MARGIN = 0.5 * REM;\n\nexport function useStickerPickerObservers(\n  containerRef: ElementRef<HTMLDivElement>,\n  headerRef: ElementRef<HTMLDivElement>,\n  idPrefix: string,\n  isHidden?: boolean,\n) {\n  const stickerSetIntersectionsRef = useRef<boolean[]>([]);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const {\n    observe: observeIntersectionForSet,\n    freeze: freezeForSet,\n    unfreeze: unfreezeForSet,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    const stickerSetIntersections = stickerSetIntersectionsRef.current;\n\n    entries.forEach((entry) => {\n      const index = Number(entry.target.id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = stickerSetIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveSetIndex(minIntersectingIndex);\n  });\n\n  const {\n    observe: observeIntersectionForShowingItems,\n    freeze: freezeForShowingItems,\n    unfreeze: unfreezeForShowingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForPlayingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForCovers,\n  } = useIntersectionObserver({\n    rootRef: headerRef,\n  });\n\n  useSyncEffect(() => {\n    if (isHidden) {\n      freezeForSet();\n      freezeForShowingItems();\n    } else {\n      setTimeout(() => {\n        unfreezeForShowingItems();\n        unfreezeForSet();\n      }, SLIDE_TRANSITION_DURATION);\n    }\n  }, [freezeForSet, freezeForShowingItems, isHidden, unfreezeForSet, unfreezeForShowingItems]);\n\n  const selectStickerSet = useLastCallback((index: number) => {\n    setActiveSetIndex((currentIndex) => {\n      const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n      const isClose = Math.abs(currentIndex - index) === 1;\n\n      animateScroll({\n        container: containerRef.current!,\n        element: stickerSetEl,\n        position: 'start',\n        margin: FOCUS_MARGIN,\n        maxDistance: isClose ? SCROLL_MAX_DISTANCE_WHEN_CLOSE : SCROLL_MAX_DISTANCE_WHEN_FAR,\n      });\n\n      return index;\n    });\n  });\n\n  return {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForShowingItems,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"m6XpTzQX\",\"video\":\"OZHqKbDL\",\"image\":\"enA6c8gc\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { getStickerMediaHash } from '../../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport useColorFilter from '../../../hooks/stickers/useColorFilter';\nimport useDynamicColorListener from '../../../hooks/stickers/useDynamicColorListener';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noPlay?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noPlay,\n  forcePlayback,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const {\n    hasThumbnail, hasVideoThumb, hasAnimatedThumb, hasStaticThumb, thumbCustomEmojiId,\n  } = stickerSet;\n\n  const { customEmoji } = useCustomEmoji(thumbCustomEmojiId);\n  const hasCustomColor = customEmoji?.shouldUseTextColor;\n  const customColor = useDynamicColorListener(containerRef, undefined, !hasCustomColor);\n  const colorFilter = useColorFilter(customColor);\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const shouldFallbackToSticker = !hasThumbnail\n    || (hasVideoThumb && !IS_WEBM_SUPPORTED && !hasAnimatedThumb && !hasStaticThumb);\n  const firstStickerHash = shouldFallbackToSticker && stickerSet.stickers?.[0]\n    && getStickerMediaHash(stickerSet.stickers[0], 'preview');\n  const firstStickerMediaData = useMedia(firstStickerHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !firstStickerHash) || hasAnimatedThumb) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = thumbCustomEmojiId || mediaData || firstStickerMediaData;\n  const transitionClassNames = useMediaTransitionDeprecated(isReady);\n\n  const coords = useCoordsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: stickerSet,\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'sticker-set-cover')}\n      style={`--_size: ${size}px`}\n    >\n      {isReady ? (\n        thumbCustomEmojiId ? (\n          <CustomEmoji\n            documentId={thumbCustomEmojiId}\n            size={size}\n            observeIntersectionForPlaying={observeIntersection}\n            noPlay={noPlay}\n          />\n        ) : hasAnimatedThumb ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size}\n            play={shouldPlay}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={coords}\n            forceAlways={forcePlayback}\n          />\n        ) : (hasVideoThumb && !shouldFallbackToSticker) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={shouldPlay}\n            style={colorFilter}\n            isPriority={forcePlayback}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || firstStickerMediaData}\n            style={colorFilter}\n            className={buildClassName(styles.image, transitionClassNames)}\n            alt=\"\"\n            draggable={false}\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import type { MouseEvent as ReactMouseEvent, ReactNode } from 'react';\nimport type {\n  ElementRef } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiBotInlineMediaResult, ApiSticker } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useDynamicColorListener from '../../hooks/stickers/useDynamicColorListener';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport Icon from './icons/Icon';\nimport Sparkles from './Sparkles';\nimport StickerView from './StickerView';\n\nimport './StickerButton.scss';\n\ntype OwnProps<T> = {\n  sticker: ApiSticker;\n  size: number;\n  noPlay?: boolean;\n  title?: string;\n  className?: string;\n  noContextMenu?: boolean;\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  canViewSet?: boolean;\n  isSelected?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldIgnorePremium?: boolean;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n  withTranslucentThumb?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  observeIntersectionForShowing?: ObserveFn;\n  noShowPremium?: boolean;\n  onClick?: (arg: OwnProps<T>['clickArg'], isSilent?: boolean, shouldSchedule?: boolean) => void;\n  clickArg: T;\n  onFaveClick?: (sticker: ApiSticker) => void;\n  onUnfaveClick?: (sticker: ApiSticker) => void;\n  onRemoveRecentClick?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n  isEffectEmoji?: boolean;\n  withSparkles?: boolean;\n};\n\nconst contentForStatusMenuContext = [\n  { title: 'SetTimeoutFor.Hours', value: 1, arg: 3600 },\n  { title: 'SetTimeoutFor.Hours', value: 2, arg: 7200 },\n  { title: 'SetTimeoutFor.Hours', value: 8, arg: 28800 },\n  { title: 'SetTimeoutFor.Days', value: 1, arg: 86400 },\n  { title: 'SetTimeoutFor.Days', value: 2, arg: 172800 },\n];\n\nconst StickerButton = <T extends number | ApiSticker | ApiBotInlineMediaResult | undefined = undefined>({\n  sticker,\n  size,\n  noPlay,\n  title,\n  className,\n  noContextMenu,\n  isSavedMessages,\n  isStatusPicker,\n  canViewSet,\n  observeIntersection,\n  observeIntersectionForShowing,\n  isSelected,\n  isCurrentUserPremium,\n  shouldIgnorePremium,\n  noShowPremium,\n  sharedCanvasRef,\n  withTranslucentThumb,\n  forcePlayback,\n  onClick,\n  clickArg,\n  onFaveClick,\n  onUnfaveClick,\n  onRemoveRecentClick,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n  isEffectEmoji,\n  withSparkles,\n}: OwnProps<T>) => {\n  const { openStickerSet, openPremiumModal, setEmojiStatus } = getActions();\n  const ref = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n  const lang = useOldLang();\n  const hasCustomColor = sticker.shouldUseTextColor;\n  const customColor = useDynamicColorListener(ref, undefined, !hasCustomColor);\n\n  const {\n    id, stickerSetInfo,\n  } = sticker;\n\n  const isPremium = (!sticker.isFree && isEffectEmoji) || sticker.hasEffect;\n  const isCustomEmoji = sticker.isCustomEmoji || isEffectEmoji;\n  const isLocked = !isCurrentUserPremium && isPremium && !shouldIgnorePremium;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const shouldLoad = isIntersecting;\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const isIntesectingForShowing = useIsIntersecting(ref, observeIntersectionForShowing);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const shouldRenderContextMenu = Boolean(!noContextMenu && contextMenuAnchor);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => {\n    return isStatusPicker ? menuRef.current : ref.current!.querySelector('.sticker-context-menu .bubble');\n  });\n  const getLayout = useLastCallback(() => ({ withPortal: isStatusPicker, shouldAvoidNegativePosition: true }));\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenuOpen?.();\n    } else {\n      onContextMenuClose?.();\n    }\n  }, [isContextMenuOpen, onContextMenuClose, onContextMenuOpen]);\n\n  useEffect(() => {\n    if (!isIntersecting) handleContextMenuClose();\n  }, [handleContextMenuClose, isIntersecting]);\n\n  const handleClick = () => {\n    if (isContextMenuOpen) return;\n    if (isLocked) {\n      if (isEffectEmoji) {\n        openPremiumModal({ initialSection: 'effects' });\n      } else {\n        openPremiumModal({ initialSection: 'premium_stickers' });\n      }\n      return;\n    }\n    onClick?.(clickArg);\n  };\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleRemoveClick = useLastCallback((e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextRemoveRecent = useLastCallback(() => {\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextUnfave = useLastCallback(() => {\n    onUnfaveClick!(sticker);\n  });\n\n  const handleContextFave = useLastCallback(() => {\n    onFaveClick!(sticker);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick?.(clickArg, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick?.(clickArg, undefined, true);\n  });\n\n  const handleOpenSet = useLastCallback(() => {\n    openStickerSet({ stickerSetInfo });\n  });\n\n  const handleEmojiStatusExpiresClick = useLastCallback((e: React.SyntheticEvent, duration = 0) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    handleContextMenuClose();\n    onContextMenuClick?.();\n    setEmojiStatus({\n      emojiStatus: { type: 'regular', documentId: sticker.id, until: getServerTime() + duration },\n    });\n  });\n\n  const shouldShowCloseButton = !IS_TOUCH_ENV && onRemoveRecentClick;\n\n  const fullClassName = buildClassName(\n    'StickerButton',\n    onClick && 'interactive',\n    isSelected && 'selected',\n    isCustomEmoji && 'custom-emoji',\n    isEffectEmoji && 'effect-emoji',\n    className,\n  );\n\n  const contextMenuItems = useMemo(() => {\n    if (!shouldRenderContextMenu || noContextMenu || (isCustomEmoji && !isStatusPicker)) return [];\n\n    const items: ReactNode[] = [];\n\n    if (isCustomEmoji) {\n      contentForStatusMenuContext.forEach((item) => {\n        items.push(\n          <MenuItem onClick={handleEmojiStatusExpiresClick} clickArg={item.arg}>\n            {lang(item.title, item.value, 'i')}\n          </MenuItem>,\n        );\n      });\n\n      return items;\n    }\n\n    if (onUnfaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextUnfave}>\n          {lang('Stickers.RemoveFromFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (onFaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextFave}>\n          {lang('Stickers.AddToFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (!isLocked && onClick) {\n      if (!isSavedMessages) {\n        items.push(<MenuItem onClick={handleSendQuiet} icon=\"muted\">{lang('SendWithoutSound')}</MenuItem>);\n      }\n      items.push(\n        <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>,\n      );\n    }\n\n    if (canViewSet) {\n      items.push(\n        <MenuItem onClick={handleOpenSet} icon=\"stickers\">\n          {lang('ViewPackPreview')}\n        </MenuItem>,\n      );\n    }\n    if (onRemoveRecentClick) {\n      items.push(\n        <MenuItem icon=\"delete\" onClick={handleContextRemoveRecent}>\n          {lang('DeleteFromRecent')}\n        </MenuItem>,\n      );\n    }\n    return items;\n  }, [\n    shouldRenderContextMenu, noContextMenu, isCustomEmoji, isStatusPicker, onUnfaveClick, onFaveClick, isLocked,\n    onClick, canViewSet, onRemoveRecentClick, handleEmojiStatusExpiresClick, lang, handleContextUnfave,\n    handleContextFave, isSavedMessages, handleSendScheduled, handleSendQuiet, handleOpenSet, handleContextRemoveRecent,\n  ]);\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      title={title || (sticker?.emoji)}\n      data-sticker-id={id}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {withSparkles && <Sparkles preset=\"button\" />}\n      {isIntesectingForShowing && (\n        <StickerView\n          containerRef={ref}\n          sticker={sticker}\n          isSmall\n          size={size}\n          shouldLoop\n          shouldPreloadPreview\n          noLoad={!shouldLoad}\n          noPlay={!shouldPlay}\n          noVideoOnMobile\n          withSharedAnimation\n          sharedCanvasRef={sharedCanvasRef}\n          withTranslucentThumb={withTranslucentThumb}\n          customColor={customColor}\n          forceAlways={forcePlayback}\n        />\n      )}\n      {!noShowPremium && isLocked && (\n        <div\n          className=\"sticker-locked\"\n        >\n          <Icon name=\"lock-badge\" />\n        </div>\n      )}\n      {!noShowPremium && isPremium && !isLocked && (\n        <div className=\"sticker-premium\">\n          <Icon name=\"star\" />\n        </div>\n      )}\n      {shouldShowCloseButton && (\n        <Button\n          className=\"sticker-remove-button\"\n          color=\"dark\"\n          round\n          noFastClick\n          onClick={handleRemoveClick}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      {Boolean(contextMenuItems.length) && (\n        <Menu\n          ref={menuRef}\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className=\"sticker-context-menu\"\n          autoClose\n          withPortal={isStatusPicker}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {contextMenuItems}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AVrrYEbM\",\"selected\":\"QkdO_lz1\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiReactionWithPaid } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER } from '../../../config';\nimport { getDocumentMediaHash, isSameReaction } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../helpers/animatedAssets';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../AnimatedIconWithPreview';\nimport CustomEmoji from '../CustomEmoji';\n\nimport styles from './ReactionEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionWithPaid;\n  availableReactions?: ApiAvailableReaction[];\n  className?: string;\n  isSelected?: boolean;\n  loadAndPlay?: boolean;\n  observeIntersection?: ObserveFn;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n  sharedCanvasHqRef?: ElementRef<HTMLCanvasElement>;\n  forcePlayback?: boolean;\n  onClick: (reaction: ApiReactionWithPaid) => void;\n  onContextMenu?: (reaction: ApiReactionWithPaid) => void;\n};\n\nconst ReactionEmoji: FC<OwnProps> = ({\n  reaction,\n  availableReactions,\n  isSelected,\n  loadAndPlay,\n  observeIntersection,\n  sharedCanvasRef,\n  sharedCanvasHqRef,\n  forcePlayback,\n  onClick,\n  onContextMenu,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const isCustom = reaction.type === 'custom';\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((available) => isSameReaction(available.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const thumbDataUri = availableReaction?.staticIcon?.thumbnail?.dataUri;\n  const animationId = availableReaction?.selectAnimation?.id;\n  const coords = useCoordsInSharedCanvas(ref, sharedCanvasRef);\n  const mediaData = useMedia(\n    availableReaction?.selectAnimation ? getDocumentMediaHash(availableReaction.selectAnimation, 'full') : undefined,\n    !animationId,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, reaction.type !== 'paid', undefined, undefined, undefined, true);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenu?.(reaction);\n\n      handleContextMenuClose();\n      handleContextMenuHide();\n    }\n  }, [handleContextMenuClose, onContextMenu, handleContextMenuHide, isContextMenuOpen, reaction]);\n\n  const tgsUrl = reaction.type === 'paid' ? LOCAL_TGS_URLS.StarReaction : mediaData;\n  const handleClick = useLastCallback(() => {\n    onClick(reaction);\n  });\n\n  const transitionClassNames = useMediaTransitionDeprecated(mediaData);\n  const fullClassName = buildClassName(\n    styles.root,\n    isSelected && styles.selected,\n    !isCustom && 'sticker-reaction',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onClick={handleClick}\n      title={availableReaction?.title}\n      data-sticker-id={isCustom ? reaction.documentId : undefined}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n    >\n      {isCustom ? (\n        <CustomEmoji\n          ref={ref}\n          documentId={reaction.documentId}\n          size={EMOJI_SIZE_PICKER}\n          noPlay={!loadAndPlay}\n          observeIntersectionForPlaying={observeIntersection}\n          sharedCanvasRef={sharedCanvasRef}\n          sharedCanvasHqRef={sharedCanvasHqRef}\n          withTranslucentThumb\n          forceAlways={forcePlayback}\n        />\n      ) : (\n        <AnimatedIconWithPreview\n          tgsUrl={tgsUrl}\n          thumbDataUri={thumbDataUri}\n          play={loadAndPlay}\n          noLoop={false}\n          size={EMOJI_SIZE_PICKER}\n          isLowPriority\n          className={transitionClassNames}\n          sharedCanvas={sharedCanvasRef!.current || undefined}\n          sharedCanvasCoords={coords}\n          forceAlways={forcePlayback}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionEmoji);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiEmojiStatusType, ApiReactionWithPaid, ApiSticker,\n} from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  COLLECTIBLE_STATUS_SET_ID,\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EFFECT_EMOJIS_SET_ID,\n  EFFECT_STICKERS_SET_ID,\n  EMOJI_SIZE_PICKER,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  STICKER_SIZE_PICKER,\n} from '../../config';\nimport { getReactionKey } from '../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../hooks/useOldLang';\nimport useResizeObserver from '../../hooks/useResizeObserver';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Icon from './icons/Icon';\nimport ReactionEmoji from './reactions/ReactionEmoji';\nimport StickerButton from './StickerButton';\n\nimport grey from '../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrReactionsSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix: string;\n  isNearActive: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideHeader?: boolean;\n  selectedReactionIds?: string[];\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  isChatEmojiSet?: boolean;\n  isChatStickerSet?: boolean;\n  isTranslucent?: boolean;\n  noContextMenus?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection?: ObserveFn;\n  observeIntersectionForPlayingItems: ObserveFn;\n  observeIntersectionForShowingItems: ObserveFn;\n  availableReactions?: ApiAvailableReaction[];\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onReactionSelect?: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  collectibleStatuses?: ApiEmojiStatusType[];\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\nconst ITEMS_MOBILE_PER_ROW_FALLBACK = 7;\nconst ITEMS_MINI_MOBILE_PER_ROW_FALLBACK = 6;\nconst MOBILE_WIDTH_THRESHOLD_PX = 440;\nconst MINI_MOBILE_WIDTH_THRESHOLD_PX = 362;\n\nconst StickerSet: FC<OwnProps & StateProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  isNearActive,\n  favoriteStickers,\n  availableReactions,\n  isSavedMessages,\n  isStatusPicker,\n  isReactionPicker,\n  isCurrentUserPremium,\n  shouldHideHeader,\n  withDefaultTopicIcon,\n  selectedReactionIds,\n  withDefaultStatusIcon,\n  isChatEmojiSet,\n  isChatStickerSet,\n  isTranslucent,\n  noContextMenus,\n  forcePlayback,\n  observeIntersection,\n  observeIntersectionForPlayingItems,\n  observeIntersectionForShowingItems,\n  onReactionSelect,\n  onReactionContext,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n  collectibleStatuses,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    clearRecentReactions,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n  const { width: windowWidth } = useWindowSize();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(getItemsPerRowFallback(windowWidth));\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection ?? observeIntersectionForShowingItems);\n  const transitionClassNames = useMediaTransitionDeprecated(isIntersecting);\n\n  // `isNearActive` is set in advance during animation, but it is not reliable for short sets\n  const shouldRender = isNearActive || isIntersecting;\n\n  const stickerMarginPx = isMobile ? 8 : 4;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const emojiVerticalMarginPx = isMobile ? 8 : 4;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isStatusCollectible = stickerSet.id === COLLECTIBLE_STATUS_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isPopular = stickerSet.id === POPULAR_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useLastCallback(() => {\n    if (isReactionPicker) {\n      clearRecentReactions();\n    } else if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  });\n\n  const handleAddClick = useLastCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  });\n\n  const handleDefaultTopicIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      mediaType: 'sticker',\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const handleDefaultStatusIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      mediaType: 'sticker',\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n  const verticalMargin = isEmoji ? emojiVerticalMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useLastCallback((width: number) => {\n    if (!width) {\n      return getItemsPerRowFallback(windowWidth);\n    }\n\n    return Math.floor((width + margin) / (itemSize + margin));\n  });\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  });\n\n  useResizeObserver(ref, handleResize);\n\n  useEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (shouldRender && !stickerSet.stickers?.length && !stickerSet.reactions?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [shouldRender, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isCurrentUserPremium && isPremiumSet && !isChatEmojiSet;\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID\n    && stickerSet.id !== POPULAR_SYMBOL_SET_ID && stickerSet.id !== EFFECT_EMOJIS_SET_ID\n    && stickerSet.id !== EFFECT_STICKERS_SET_ID && !isChatEmojiSet && !isChatStickerSet;\n\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = (withDefaultTopicIcon || withDefaultStatusIcon) ? stickerSet.count + 1 : stickerSet.count;\n\n  const itemHeight = itemSize + verticalMargin;\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow)\n    * itemHeight - verticalMargin;\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * itemHeight - verticalMargin;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n  const collectibleEmojiIdsSet = useMemo(() => (\n    collectibleStatuses ? new Set(collectibleStatuses.map(({ documentId }) => documentId)) : undefined\n  ), [collectibleStatuses]);\n  const withAddSetButton = !shouldHideHeader && !isRecent && !isStatusCollectible\n    && isEmoji && !isPopular && !isChatEmojiSet\n    && (!isInstalled || (!isCurrentUserPremium && !isSavedMessages));\n  const addSetButtonText = useMemo(() => {\n    if (isLocked) {\n      if (isInstalled) return lang('lng_emoji_premium_restore');\n      return lang('Unlock');\n    }\n\n    return lang('Add');\n  }, [isLocked, lang, isInstalled]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className={buildClassName('symbol-set-title', withAddSetButton && 'symbol-set-title-external')}>\n            {isLocked && <Icon name=\"lock-badge\" className=\"symbol-set-locked-icon\" />}\n            <span className=\"symbol-set-name\">{stickerSet.title}</span>\n            {(isChatEmojiSet || isChatStickerSet) && (\n              <span className=\"symbol-set-chat\">{lang(isChatEmojiSet ? 'GroupEmoji' : 'GroupStickers')}</span>\n            )}\n            {withAddSetButton && Boolean(stickerSet.stickers) && (\n              <span className=\"symbol-set-amount\">\n                {lang(isEmoji ? 'EmojiCount' : 'Stickers', stickerSet.stickers.length, 'i')}\n              </span>\n            )}\n          </p>\n          {isRecent && (\n            <Icon className=\"symbol-set-remove\" name=\"close\" onClick={openConfirmModal} />\n          )}\n          {withAddSetButton && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {addSetButtonText}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(\n          'symbol-set-container shared-canvas-container',\n          transitionClassNames,\n          stickerSet.id === EFFECT_EMOJIS_SET_ID && 'effect-emojis',\n        )}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" className=\"sticker-media\" draggable={false} />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <Icon name=\"star\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.reactions?.map((reaction) => {\n          const reactionId = getReactionKey(reaction);\n          const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n          return (\n            <ReactionEmoji\n              key={`${stickerSet.id}_${reactionId}`}\n              reaction={reaction}\n              isSelected={isSelected}\n              loadAndPlay={loadAndPlay}\n              availableReactions={availableReactions}\n              observeIntersection={observeIntersectionForPlayingItems}\n              onClick={onReactionSelect!}\n              onContextMenu={onReactionContext}\n              sharedCanvasRef={sharedCanvasRef}\n              sharedCanvasHqRef={sharedCanvasHqRef}\n              forcePlayback={forcePlayback}\n            />\n          );\n        })}\n        {shouldRender && stickerSet.stickers?.slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n            const reactionId = sticker.isCustomEmoji ? sticker.id : sticker.emoji;\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            const withSparkles = sticker.id === COLLECTIBLE_STATUS_SET_ID\n              || collectibleEmojiIdsSet?.has(sticker.id);\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersectionForPlayingItems}\n                observeIntersectionForShowing={observeIntersectionForShowingItems}\n                noPlay={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                noContextMenu={noContextMenus}\n                isCurrentUserPremium={isCurrentUserPremium}\n                shouldIgnorePremium={isChatEmojiSet}\n                sharedCanvasRef={canvasRef}\n                withTranslucentThumb={isTranslucent}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                isSelected={isSelected}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n                forcePlayback={forcePlayback}\n                isEffectEmoji={stickerSet.id === EFFECT_EMOJIS_SET_ID}\n                noShowPremium={isCurrentUserPremium\n                  && (stickerSet.id === EFFECT_STICKERS_SET_ID || stickerSet.id === EFFECT_EMOJIS_SET_ID)}\n                withSparkles={withSparkles}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +\n            {totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang(isReactionPicker ? 'ClearRecentReactionsAlertMessage' : 'ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return { collectibleStatuses };\n  },\n)(StickerSet));\n\nfunction getItemsPerRowFallback(windowWidth: number): number {\n  return windowWidth > MOBILE_WIDTH_THRESHOLD_PX\n    ? ITEMS_PER_ROW_FALLBACK\n    : (windowWidth < MINI_MOBILE_WIDTH_THRESHOLD_PX\n      ? ITEMS_MINI_MOBILE_PER_ROW_FALLBACK\n      : ITEMS_MOBILE_PER_ROW_FALLBACK);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"lq8BD6Hc\",\"main\":\"p7c8y0LH\",\"hasHeader\":\"zTGriBHY\",\"main_customEmoji\":\"U0BL1VvK\",\"mainCustomEmoji\":\"U0BL1VvK\",\"header\":\"Qn3lBUNs\",\"headerWithBorder\":\"HMspKpNp\",\"stickerCover\":\"YKO0Obwy\",\"activated\":\"y02WwQk6\",\"pickerDisabled\":\"BZfaP1GD\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiEmojiStatusType,\n  ApiReaction, ApiReactionWithPaid, ApiSticker, ApiStickerSet,\n} from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  COLLECTIBLE_STATUS_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n  TOP_SYMBOL_SET_ID,\n} from '../../config';\nimport { isSameReaction } from '../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChatFullInfo,\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\nimport animateHorizontalScroll from '../../util/animateHorizontalScroll';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { pickTruthy, unique, uniqueByField } from '../../util/iteratees';\nimport { REM } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useScrolledState from '../../hooks/useScrolledState';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\nimport { useStickerPickerObservers } from './hooks/useStickerPickerObservers';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport Icon from './icons/Icon';\nimport StickerButton from './StickerButton';\nimport StickerSet from './StickerSet';\n\nimport pickerStyles from '../middle/composer/StickerPicker.module.scss';\nimport styles from './CustomEmojiPicker.module.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  pickerListClassName?: string;\n  isHidden?: boolean;\n  loadAndPlay: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  selectedReactionIds?: string[];\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isTranslucent?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onReactionSelect?: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  collectibleStatuses?: ApiEmojiStatusType[];\n  chatEmojiSetId?: string;\n  topReactions?: ApiReaction[];\n  recentReactions?: ApiReaction[];\n  defaultTagReactions?: ApiReaction[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  availableReactions?: ApiAvailableReaction[];\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  isWithPaidReaction?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\nconst TOP_REACTIONS_COUNT = 16;\nconst RECENT_REACTIONS_COUNT = 32;\nconst RECENT_DEFAULT_STATUS_COUNT = 7;\nconst FADED_BUTTON_SET_IDS = new Set([RECENT_SYMBOL_SET_ID, FAVORITE_SYMBOL_SET_ID, POPULAR_SYMBOL_SET_ID]);\nconst STICKER_SET_IDS_WITH_COVER = new Set([\n  RECENT_SYMBOL_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n]);\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  pickerListClassName,\n  isHidden,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  selectedReactionIds,\n  recentStatusEmojis,\n  collectibleStatuses,\n  stickerSetsById,\n  chatEmojiSetId,\n  topReactions,\n  recentReactions,\n  availableReactions,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isReactionPicker,\n  isStatusPicker,\n  isTranslucent,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  defaultTagReactions,\n  isWithPaidReaction,\n  onCustomEmojiSelect,\n  onReactionSelect,\n  onReactionContext,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const collectibleStatusEmojis = useMemo(() => {\n    const collectibleStatusEmojiIds = collectibleStatuses?.map((status) => status.documentId);\n    return customEmojisById && collectibleStatusEmojiIds?.map((id) => customEmojisById[id]).filter(Boolean);\n  }, [customEmojisById, collectibleStatuses]);\n\n  const prefix = `${idPrefix}-custom-emoji`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const canLoadAndPlay = usePrevDuringAnimation(loadAndPlay || undefined, SLIDE_TRANSITION_DURATION);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    const defaultSets: StickerSetOrReactionsSetOrRecent[] = [];\n\n    if (isReactionPicker && isSavedMessages) {\n      if (defaultTagReactions?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang('PremiumPreviewTags'),\n          reactions: defaultTagReactions,\n          count: defaultTagReactions.length,\n          isEmoji: true,\n        });\n      }\n    }\n\n    if (isReactionPicker && !isSavedMessages) {\n      const topReactionsSlice: ApiReactionWithPaid[] = topReactions?.slice(0, TOP_REACTIONS_COUNT) || [];\n      if (isWithPaidReaction) {\n        topReactionsSlice.unshift({ type: 'paid' });\n      }\n      if (topReactionsSlice?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang('Reactions'),\n          reactions: topReactionsSlice,\n          count: topReactionsSlice.length,\n          isEmoji: true,\n        });\n      }\n\n      const cleanRecentReactions = (recentReactions || [])\n        .filter((reaction) => !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction)))\n        .slice(0, RECENT_REACTIONS_COUNT);\n      const cleanAvailableReactions = (availableReactions || [])\n        .filter(({ isInactive }) => !isInactive)\n        .map(({ reaction }) => reaction)\n        .filter((reaction) => {\n          return !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction))\n            && !cleanRecentReactions.some((topReaction) => isSameReaction(topReaction, reaction));\n        });\n      if (cleanAvailableReactions?.length || cleanRecentReactions?.length) {\n        const isPopular = !cleanRecentReactions?.length;\n        const allRecentReactions = cleanRecentReactions.concat(cleanAvailableReactions);\n        defaultSets.push({\n          id: isPopular ? POPULAR_SYMBOL_SET_ID : RECENT_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang(isPopular ? 'PopularReactions' : 'RecentStickers'),\n          reactions: allRecentReactions,\n          count: allRecentReactions.length,\n          isEmoji: true,\n        });\n      }\n    } else if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack?.stickers?.length) {\n        const stickers = uniqueByField(defaultStatusIconsPack.stickers\n          .slice(0, RECENT_DEFAULT_STATUS_COUNT)\n          .concat(recentCustomEmojis || []), 'id');\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: oldLang('RecentStickers'),\n          isEmoji: true,\n        });\n      }\n      if (collectibleStatusEmojis?.length) {\n        defaultSets.push({\n          id: COLLECTIBLE_STATUS_SET_ID,\n          accessHash: '',\n          count: collectibleStatusEmojis.length,\n          stickers: collectibleStatusEmojis,\n          title: lang('CollectibleStatusesCategory'),\n          isEmoji: true,\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: oldLang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: oldLang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true,\n      });\n    }\n\n    const userSetIds = [...(addedCustomEmojiIds || [])];\n    if (chatEmojiSetId) {\n      userSetIds.unshift(chatEmojiSetId);\n    }\n\n    const setIdsToDisplay = unique(userSetIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isReactionPicker, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, topReactions, availableReactions, oldLang, recentReactions,\n    defaultStatusIconsId, defaultTopicIconsId, isSavedMessages, defaultTagReactions, chatEmojiSetId,\n    isWithPaidReaction, collectibleStatusEmojis, lang,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContent = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContent = areAddedLoaded && canRenderContent && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, isMobile || !shouldRenderContent);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      pickerStyles.stickerCover,\n      index === activeSetIndex && styles.activated,\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === TOP_SYMBOL_SET_ID) {\n      return undefined;\n    }\n\n    if (STICKER_SET_IDS_WITH_COVER.has(stickerSet.id) || stickerSet.hasThumbnail || !firstSticker) {\n      const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === POPULAR_SYMBOL_SET_ID;\n      const isFaded = FADED_BUTTON_SET_IDS.has(stickerSet.id);\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={isFaded}\n          color=\"translucent\"\n\n          onClick={() => selectStickerSet(isRecent ? 0 : index)}\n        >\n          {isRecent ? (\n            <Icon name=\"recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !canLoadAndPlay}\n              forcePlayback\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    }\n\n    return (\n      <StickerButton\n        key={stickerSet.id}\n        sticker={firstSticker}\n        size={STICKER_SIZE_PICKER_HEADER}\n        title={stickerSet.title}\n        className={buttonClassName}\n        noPlay={!canAnimate || !canLoadAndPlay}\n        observeIntersection={observeIntersectionForCovers}\n        noContextMenu\n        isCurrentUserPremium\n        sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n        withTranslucentThumb={isTranslucent}\n        onClick={selectStickerSet}\n        clickArg={index}\n        forcePlayback\n      />\n    );\n  }\n\n  const fullClassName = buildClassName('StickerPicker', styles.root, className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className={pickerStyles.pickerDisabled}>{oldLang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    pickerStyles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && pickerStyles.headerWithBorder,\n  );\n  const listClassName = buildClassName(\n    pickerStyles.main,\n    pickerStyles.main_customEmoji,\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    pickerListClassName,\n    pickerStyles.hasHeader,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={listClassName}\n      >\n        {allSets.map((stickerSet, i) => {\n          const shouldHideHeader = stickerSet.id === TOP_SYMBOL_SET_ID\n            || (stickerSet.id === RECENT_SYMBOL_SET_ID && (withDefaultTopicIcons || isStatusPicker));\n          const isChatEmojiSet = stickerSet.id === chatEmojiSetId;\n\n          return (\n            <StickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              loadAndPlay={Boolean(canAnimate && canLoadAndPlay)}\n              index={i}\n              idPrefix={prefix}\n              observeIntersection={observeIntersectionForSet}\n              observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n              observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n              isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n              isSavedMessages={isSavedMessages}\n              isStatusPicker={isStatusPicker}\n              isReactionPicker={isReactionPicker}\n              shouldHideHeader={shouldHideHeader}\n              withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              isChatEmojiSet={isChatEmojiSet}\n              isCurrentUserPremium={isCurrentUserPremium}\n              selectedReactionIds={selectedReactionIds}\n              availableReactions={availableReactions}\n              isTranslucent={isTranslucent}\n              onReactionSelect={onReactionSelect}\n              onReactionContext={onReactionContext}\n              onStickerSelect={handleEmojiSelect}\n              onContextMenuOpen={onContextMenuOpen}\n              onContextMenuClose={onContextMenuClose}\n              onContextMenuClick={onContextMenuClick}\n              forcePlayback\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker, isReactionPicker }): StateProps => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n      reactions: {\n        availableReactions,\n        recentReactions,\n        topReactions,\n        defaultTags,\n      },\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      customEmojisById,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      collectibleStatuses: isStatusPicker ? collectibleStatuses : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: selectCanPlayAnimatedEmojis(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n      topReactions: isReactionPicker ? topReactions : undefined,\n      recentReactions: isReactionPicker ? recentReactions : undefined,\n      chatEmojiSetId: chatFullInfo?.emojiSet?.id,\n      isWithPaidReaction: isReactionPicker && chatFullInfo?.isPaidReactionAvailable,\n      availableReactions: isReactionPicker ? availableReactions : undefined,\n      defaultTagReactions: isReactionPicker ? defaultTags : undefined,\n    };\n  },\n)(CustomEmojiPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qk9PEGRE\",\"activated\":\"WYeuJNQx\"};","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"hRzvfaRb\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { selectIsContextMenuTranslucent } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: ElementRef<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n  isTranslucent?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  isTranslucent,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isHidden={!isOpen}\n          isStatusPicker\n          isTranslucent={isTranslucent}\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"C9sWDINB\",\"topEmoji\":\"gdG3oY21\",\"description\":\"p7S4AH8A\",\"title\":\"KVpsce1g\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SuggestedStatusModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestedStatusModal'];\n};\n\ntype StateProps = {\n  bot?: ApiUser;\n  currentUser?: ApiUser;\n};\n\nconst CUSTOM_EMOJI_SIZE = 6 * REM;\n\nconst SuggestedStatusModal = ({ modal, currentUser, bot }: OwnProps & StateProps) => {\n  const { setEmojiStatus, closeSuggestedStatusModal, sendWebAppEvent } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const mockPeerWithStatus = useMemo(() => {\n    if (!currentUser || !renderingModal) return undefined;\n    return {\n      ...currentUser,\n      emojiStatus: {\n        type: 'regular',\n        documentId: renderingModal.customEmojiId,\n      },\n    } satisfies ApiUser;\n  }, [currentUser, renderingModal]);\n\n  const description = useMemo(() => {\n    if (!renderingModal || !bot) return undefined;\n\n    const botName = getUserFullName(bot);\n\n    if (renderingModal.duration) {\n      return lang('BotSuggestedStatusFor', {\n        bot: botName,\n        duration: formatShortDuration(lang, renderingModal.duration),\n      }, {\n        withNodes: true,\n        withMarkdown: true,\n      });\n    }\n\n    return lang('BotSuggestedStatus', { bot: botName }, { withNodes: true, withMarkdown: true });\n  }, [bot, lang, renderingModal]);\n\n  const handleClose = useLastCallback(() => {\n    const webAppKey = renderingModal?.webAppKey;\n\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n      });\n    }\n\n    closeSuggestedStatusModal();\n  });\n\n  const handleSetStatus = useLastCallback(() => {\n    if (!renderingModal) return;\n\n    const expires = renderingModal.duration ? getServerTime() + renderingModal.duration : undefined;\n\n    setEmojiStatus({\n      referrerWebAppKey: renderingModal.webAppKey,\n      emojiStatus: { type: 'regular', documentId: renderingModal.customEmojiId, until: expires },\n    });\n    closeSuggestedStatusModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      contentClassName={styles.content}\n      hasAbsoluteCloseButton\n      isSlim\n      onClose={handleClose}\n    >\n      {renderingModal && (\n        <CustomEmoji\n          className={styles.topEmoji}\n          documentId={renderingModal.customEmojiId}\n          size={CUSTOM_EMOJI_SIZE}\n          loopLimit={1}\n          forceAlways\n        />\n      )}\n      <div>\n        <h3 className={styles.title}>{lang('BotSuggestedStatusTitle')}</h3>\n        <p className={styles.description}>{description}</p>\n      </div>\n      {mockPeerWithStatus && (\n        <PeerChip\n          mockPeer={mockPeerWithStatus}\n          withEmojiStatus\n        />\n      )}\n      <Button size=\"smaller\" onClick={handleSetStatus}>\n        {lang('GeneralConfirm')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const bot = modal?.botId ? selectUser(global, modal.botId) : undefined;\n\n    return {\n      currentUser,\n      bot,\n    };\n  },\n)(SuggestedStatusModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"pUyNTysT\",\"modal\":\"IK2mBqbm\",\"loading\":\"zjXCH3pT\",\"description\":\"j6xEoljc\",\"bold\":\"hAA6B1lc\",\"chip\":\"smWR78pO\",\"replaceModal\":\"GIFAjZPY\",\"replaceModalContent\":\"Jxyz9TaL\",\"avatarContainer\":\"OKp6HS1U\",\"arrow\":\"WSJdWV7L\",\"boostedWrapper\":\"NU9itcIm\",\"boostedMark\":\"upXvhNRY\"};","import { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiMyBoost } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getChatTitle, isChatAdmin, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Loading from '../../ui/Loading';\nimport Modal from '../../ui/Modal';\n\nimport styles from './BoostModal.module.scss';\n\ntype LoadedParams = {\n  boost?: ApiMyBoost;\n  leftText: string;\n  rightText?: string;\n  value: string;\n  progress: number;\n  descriptionText: string;\n  isBoosted?: boolean;\n  canBoostMore?: boolean;\n};\n\ntype BoostInfo = ({\n  isStatusLoaded: false;\n  title: string;\n} & Undefined<LoadedParams>) | ({\n  isStatusLoaded: true;\n  title: string;\n} & LoadedParams);\n\nexport type OwnProps = {\n  modal: TabState['boostModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  prevBoostedChat?: ApiChat;\n  isCurrentUserPremium?: boolean;\n};\n\nconst BoostModal = ({\n  modal,\n  chat,\n  chatFullInfo,\n  prevBoostedChat,\n  isCurrentUserPremium,\n}: OwnProps & StateProps) => {\n  const {\n    applyBoost,\n    closeBoostModal,\n    requestConfetti,\n    openPremiumModal,\n    loadFullChat,\n  } = getActions();\n\n  const [isReplaceModalOpen, openReplaceModal, closeReplaceModal] = useFlag();\n  const [isWaitDialogOpen, openWaitDialog, closeWaitDialog] = useFlag();\n  const [isPremiumDialogOpen, openPremiumDialog, closePremiumDialog] = useFlag();\n\n  const isChannel = chat && isChatChannel(chat);\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (chat && !chatFullInfo) {\n      loadFullChat({ chatId: chat.id });\n    }\n  }, [chat, chatFullInfo]);\n\n  const chatTitle = useMemo(() => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return getChatTitle(oldLang, chat);\n  }, [chat, oldLang]);\n\n  const boostedChatTitle = useMemo(() => {\n    if (!prevBoostedChat) {\n      return undefined;\n    }\n\n    return getChatTitle(oldLang, prevBoostedChat);\n  }, [prevBoostedChat, oldLang]);\n\n  const {\n    isStatusLoaded,\n    isBoosted,\n    boost,\n    title,\n    leftText,\n    rightText,\n    value,\n    progress,\n    descriptionText,\n    canBoostMore,\n  }: BoostInfo = useMemo(() => {\n    if (!modal?.boostStatus || !chat) {\n      return {\n        isStatusLoaded: false,\n        title: oldLang('Loading'),\n      };\n    }\n\n    const {\n      hasMyBoost,\n    } = modal.boostStatus;\n\n    const firstBoost = modal?.myBoosts && getFirstAvailableBoost(modal.myBoosts, chat.id);\n    const areBoostsInDifferentChannels = modal?.myBoosts && !areAllBoostsInChannel(modal.myBoosts, chat.id);\n\n    const {\n      boosts,\n      currentLevel,\n      hasNextLevel,\n      levelProgress,\n      remainingBoosts,\n      isMaxLevel,\n    } = getBoostProgressInfo(modal.boostStatus, true);\n\n    const hasBoost = hasMyBoost;\n\n    const left = oldLang('BoostsLevel', currentLevel);\n    const right = hasNextLevel ? oldLang('BoostsLevel', currentLevel + 1) : undefined;\n\n    const moreBoosts = oldLang('ChannelBoost.MoreBoosts', remainingBoosts);\n\n    const modalTitle = isChannel ? oldLang('BoostChannel') : oldLang('BoostGroup');\n\n    const boostsLeftToUnrestrict = (chatFullInfo?.boostsToUnrestrict || 0) - (chatFullInfo?.boostsApplied || 0);\n\n    let description: string | undefined;\n    if (isMaxLevel) {\n      description = oldLang('BoostsMaxLevelReached');\n    } else if (boostsLeftToUnrestrict > 0 && !isChatAdmin(chat)) {\n      const boostTimes = oldLang('GroupBoost.BoostToUnrestrict.Times', boostsLeftToUnrestrict);\n      description = oldLang('GroupBoost.BoostToUnrestrict', [boostTimes, chatTitle]);\n    } else {\n      description = oldLang('ChannelBoost.MoreBoostsNeeded.Text', [chatTitle, moreBoosts]);\n    }\n\n    return {\n      isStatusLoaded: true,\n      title: modalTitle,\n      leftText: left,\n      rightText: right,\n      value: boosts.toString(),\n      progress: levelProgress,\n      remainingBoosts,\n      descriptionText: description,\n      boost: firstBoost,\n      isBoosted: hasBoost,\n      canBoostMore: areBoostsInDifferentChannels && !isMaxLevel,\n    };\n  }, [chat, chatTitle, modal, oldLang, chatFullInfo, isChannel]);\n\n  const isBoostDisabled = !modal?.myBoosts?.length && isCurrentUserPremium;\n  const isReplacingBoost = boost?.chatId && boost.chatId !== modal?.chatId;\n\n  const handleApplyBoost = useLastCallback(() => {\n    closeReplaceModal();\n    applyBoost({ chatId: chat!.id, slots: [boost!.slot] });\n    requestConfetti({});\n  });\n\n  const handleProceedPremium = useLastCallback(() => {\n    openPremiumModal();\n    closePremiumDialog();\n    closeBoostModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (!boost) {\n      if (!isCurrentUserPremium) {\n        openPremiumDialog();\n        return;\n      }\n\n      closeBoostModal();\n      return;\n    }\n\n    if (!canBoostMore) {\n      closeBoostModal();\n      return;\n    }\n\n    if (boost.cooldownUntil) {\n      openWaitDialog();\n      return;\n    }\n\n    if (isReplacingBoost) {\n      openReplaceModal();\n      return;\n    }\n\n    handleApplyBoost();\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closeBoostModal();\n  });\n\n  function renderContent() {\n    if (!isStatusLoaded) {\n      return <Loading className={styles.loading} />;\n    }\n\n    return (\n      <>\n        <PremiumProgress\n          leftText={leftText}\n          rightText={rightText}\n          progress={progress}\n          floatingBadgeText={value}\n          floatingBadgeIcon=\"boost\"\n        />\n        {isBoosted && (\n          <div className={buildClassName(styles.description, styles.bold)}>\n            {oldLang('ChannelBoost.YouBoostedChannelText', chatTitle)}\n          </div>\n        )}\n        <div className={styles.description}>\n          {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n        </div>\n        <div className=\"dialog-buttons\">\n          <Button isText className=\"confirm-dialog-button\" disabled={isBoostDisabled} onClick={handleButtonClick}>\n            {canBoostMore ? (\n              <>\n                <Icon name=\"boost\" />\n                {oldLang(isChannel ? 'ChannelBoost.BoostChannel' : 'GroupBoost.BoostGroup')}\n              </>\n            ) : oldLang('OK')}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={handleCloseClick}>\n            {oldLang('Cancel')}\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      className={styles.modal}\n      contentClassName={styles.content}\n      onClose={closeBoostModal}\n    >\n      {renderContent()}\n      {isReplacingBoost && boostedChatTitle && (\n        <Modal\n          isOpen={isReplaceModalOpen}\n          className={styles.replaceModal}\n          contentClassName={styles.replaceModalContent}\n          onClose={closeReplaceModal}\n        >\n          <div className={styles.avatarContainer}>\n            <div className={styles.boostedWrapper}>\n              <Avatar peer={prevBoostedChat} size=\"large\" />\n              <Icon name=\"boostcircle\" className={styles.boostedMark} />\n            </div>\n            <Icon name=\"next\" className={styles.arrow} />\n            <Avatar peer={chat} size=\"large\" />\n          </div>\n          <div>\n            {renderText(\n              oldLang('ChannelBoost.ReplaceBoost', [boostedChatTitle, chatTitle]), ['simple_markdown', 'emoji'],\n            )}\n          </div>\n          <div className=\"dialog-buttons\">\n            <Button isText className=\"confirm-dialog-button\" onClick={handleApplyBoost}>\n              {oldLang('Replace')}\n            </Button>\n            <Button isText className=\"confirm-dialog-button\" onClick={closeReplaceModal}>\n              {oldLang('Cancel')}\n            </Button>\n          </div>\n        </Modal>\n      )}\n      {Boolean(boost?.cooldownUntil) && (\n        <ConfirmDialog\n          isOpen={isWaitDialogOpen}\n          isOnlyConfirm\n          confirmLabel={oldLang('OK')}\n          title={oldLang('ChannelBoost.Error.BoostTooOftenTitle')}\n          onClose={closeWaitDialog}\n          confirmHandler={closeWaitDialog}\n        >\n          {renderText(\n            oldLang(\n              'ChannelBoost.Error.BoostTooOftenText',\n              formatShortDuration(lang, boost.cooldownUntil - getServerTime()),\n            ),\n            ['simple_markdown', 'emoji'],\n          )}\n        </ConfirmDialog>\n      )}\n      {!isCurrentUserPremium && (\n        <ConfirmDialog\n          isOpen={isPremiumDialogOpen}\n          confirmLabel={oldLang('Common.Yes')}\n          title={oldLang('PremiumNeeded')}\n          onClose={closePremiumDialog}\n          confirmHandler={handleProceedPremium}\n        >\n          {renderText(oldLang('PremiumNeededForBoosting'), ['simple_markdown', 'emoji'])}\n        </ConfirmDialog>\n      )}\n    </Modal>\n  );\n};\n\nfunction getFirstAvailableBoost(myBoosts: ApiMyBoost[], chatId?: string) {\n  return myBoosts.find((boost) => !boost.chatId)\n    || myBoosts.filter((b) => chatId && b.chatId !== chatId)\n      .sort((a, b) => a.date - b.date)[0];\n}\n\nfunction areAllBoostsInChannel(myBoosts: ApiMyBoost[], chatId: string) {\n  return myBoosts.every((boost) => boost.chatId === chatId);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal && selectChat(global, modal?.chatId);\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const firstBoost = modal?.myBoosts && getFirstAvailableBoost(modal.myBoosts, modal.chatId);\n    const boostedChat = firstBoost?.chatId ? selectChat(global, firstBoost?.chatId) : undefined;\n\n    return {\n      chat,\n      chatFullInfo,\n      prevBoostedChat: boostedChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(BoostModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"clickable\":\"IzcASdzD\",\"centered\":\"xVLGjLub\",\"logo\":\"Mtx4SWww\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { selectChatMessage, selectSender } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport LinkField from '../../common/LinkField';\nimport TableInfoModal, { type TableData } from '../common/TableInfoModal';\n\nimport styles from './GiftCodeModal.module.scss';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\n\nexport type OwnProps = {\n  modal: TabState['giftCodeModal'];\n};\n\nexport type StateProps = {\n  currentUserId?: string;\n  messageSender?: ApiPeer;\n};\n\nconst GIFTCODE_PATH = 'giftcode';\n\nconst GiftCodeModal = ({\n  currentUserId,\n  modal,\n  messageSender,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftCodeModal, applyGiftCode, focusMessage,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const canUse = (!modal?.info.toId || modal?.info.toId === currentUserId) && !modal?.info.usedAt;\n\n  const handleOpenGiveaway = useLastCallback(() => {\n    if (!modal || !modal.info.giveawayMessageId) return;\n    focusMessage({\n      chatId: modal.info.fromId!,\n      messageId: modal.info.giveawayMessageId,\n    });\n    closeGiftCodeModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (canUse) {\n      applyGiftCode({ slug: modal!.slug });\n      return;\n    }\n    closeGiftCodeModal();\n  });\n\n  const modalData = useMemo(() => {\n    if (!modal) return undefined;\n    const { slug, info } = modal;\n\n    const fromId = info.fromId || messageSender?.id;\n\n    const header = (\n      <>\n        <img src={PremiumLogo} alt=\"\" className={styles.logo} />\n        <p className={styles.centered}>{renderText(lang('lng_gift_link_about'), ['simple_markdown'])}</p>\n        <LinkField title=\"BoostingGiftLink\" link={`${TME_LINK_PREFIX}/${GIFTCODE_PATH}/${slug}`} />\n      </>\n    );\n\n    const tableData = [\n      [lang('BoostingFrom'), fromId ? { chatId: fromId } : lang('BoostingNoRecipient')],\n      [lang('BoostingTo'), info.toId ? { chatId: info.toId } : lang('BoostingNoRecipient')],\n      [lang('BoostingGift'), lang('BoostingTelegramPremiumFor', lang('Months', info.months, 'i'))],\n      [lang('BoostingReason'), (\n        <span className={buildClassName(info.giveawayMessageId && styles.clickable)} onClick={handleOpenGiveaway}>\n          {info.isFromGiveaway && !info.toId ? lang('BoostingIncompleteGiveaway')\n            : lang(info.isFromGiveaway ? 'BoostingGiveaway' : 'BoostingYouWereSelected')}\n        </span>\n      )],\n      [lang('BoostingDate'), formatDateTimeToString(info.date * 1000, lang.code, true)],\n    ] satisfies TableData;\n\n    const footer = (\n      <span className={styles.centered}>\n        {renderText(\n          info.usedAt ? lang('BoostingUsedLinkDate', formatDateTimeToString(info.usedAt * 1000, lang.code, true))\n            : lang('BoostingSendLinkToAnyone'),\n          ['simple_markdown'],\n        )}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [lang, messageSender?.id, modal]);\n\n  if (!modalData) return undefined;\n\n  return (\n    <TableInfoModal\n      isOpen={isOpen}\n      title={lang('lng_gift_link_title')}\n      tableData={modalData.tableData}\n      header={modalData.header}\n      footer={modalData.footer}\n      buttonText={canUse ? lang('BoostingUseLink') : lang('Close')}\n      onButtonClick={handleButtonClick}\n      onClose={closeGiftCodeModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { message } = modal || {};\n    const chatMessage = message && selectChatMessage(global, message.chatId, message.messageId);\n    const sender = chatMessage && selectSender(global, chatMessage);\n\n    return {\n      currentUserId: global.currentUserId,\n      messageSender: sender,\n    };\n  },\n)(GiftCodeModal));\n","export function getClosestEntry(arr: number[], value: number): number {\n  return arr.reduce((prev, curr) => {\n    return Math.abs(curr - value) < Math.abs(prev - value) ? curr : prev;\n  });\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"X6K5oA8U\"};","import { memo, useEffect, useMemo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { ACCOUNT_TTL_OPTIONS } from '../../../config.ts';\nimport { getClosestEntry } from '../../../util/getClosestEntry.ts';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup.tsx';\n\nimport styles from './DeleteAccountModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['deleteAccountModal'];\n};\n\nexport type StateProps = {\n  selfDestructAccountDays?: number;\n};\n\nconst DAYS_PER_MONTH = 30;\n\nconst DeleteAccountModal = ({\n  modal,\n  selfDestructAccountDays,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftCodeModal, closeDeleteAccountModal, setAccountTTL,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const [selectedOption, setSelectedOption] = useState<string>();\n\n  const optionToDays = useLastCallback((value: string): number => {\n    return Number(value) * DAYS_PER_MONTH;\n  });\n\n  const initialSelectedOption = useMemo(() => {\n    if (!selfDestructAccountDays) return undefined;\n    return getClosestEntry(ACCOUNT_TTL_OPTIONS, selfDestructAccountDays / DAYS_PER_MONTH).toString();\n  }, [selfDestructAccountDays]);\n\n  useEffect(() => {\n    if (initialSelectedOption) {\n      setSelectedOption(initialSelectedOption);\n    }\n  }, [initialSelectedOption]);\n\n  const options: { value: string; label: string }[] = useMemo(() => {\n    return ACCOUNT_TTL_OPTIONS.map((months) => ({\n      value: String(months),\n      label: lang('Months', { count: months }, { pluralValue: 1 }),\n    }));\n  }, [lang]);\n\n  const handleChange = useLastCallback((value: string) => {\n    setSelectedOption(value);\n  });\n\n  const confirmHandler = useLastCallback(() => {\n    if (!selectedOption) return;\n    setAccountTTL({ days: optionToDays(selectedOption) });\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    closeDeleteAccountModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={lang('SelfDestructTitle')}\n      onClose={closeGiftCodeModal}\n      className={styles.root}\n    >\n      <p>{lang('SelfDestructSessionsDescription')}</p>\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedOption}\n        onChange={handleChange}\n        withIcon\n      />\n      <div\n        className=\"dialog-buttons mt-2\"\n      >\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={confirmHandler}\n        >\n          {lang('Save')}\n        </Button>\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={onCloseHandler}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { selfDestructAccountDays } = modal || {};\n\n    return {\n      selfDestructAccountDays,\n    };\n  },\n)(DeleteAccountModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"dl10exNi\",\"picker-wrapper\":\"gxWY5c6x\",\"pickerWrapper\":\"gxWY5c6x\",\"picker-header\":\"h8N7eyob\",\"pickerHeader\":\"h8N7eyob\",\"picker-header-info\":\"Rth2Qu07\",\"pickerHeaderInfo\":\"Rth2Qu07\",\"selection-toggle\":\"B6eAugx8\",\"selectionToggle\":\"B6eAugx8\",\"foldersWrapper\":\"mwcvgD2S\",\"folders\":\"LKavx8ww\",\"folder\":\"qglLx5Dn\",\"button-text\":\"bgaRuEMs\",\"buttonText\":\"bgaRuEMs\",\"button-badge\":\"rTe14Z22\",\"buttonBadge\":\"rTe14Z22\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistInviteAlready } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteAlready;\n  folder: ApiChatFolder;\n};\n\nconst ChatlistAlready: FC<OwnProps> = ({ invite, folder }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.missingPeerIds);\n\n  const hasChatsToAdd = Boolean(invite.missingPeerIds.length);\n  const isNew = invite.alreadyPeerIds.length === 0;\n  const newChatsCount = hasChatsToAdd ? invite.missingPeerIds.length : 0;\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const descriptionText = isNew ? lang('FolderLinkSubtitleNew')\n    : newChatsCount ? lang('FolderLinkSubtitleAdd', {\n      chats: lang('FolderLinkSubtitleAddCount', { count: newChatsCount }, { pluralValue: newChatsCount }),\n      title: renderTextWithEntities({\n        text: folder.title.text,\n        entities: folder.title.entities,\n        noCustomEmojiPlayback: folder.noTitleAnimations,\n      }),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    }) : lang('FolderLinkSubtitleAlready');\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    if (!selectedPeerIds.length) return;\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.missingPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : invite.missingPeerIds);\n  }, [invite.missingPeerIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        {Boolean(invite.missingPeerIds.length) && (\n          <>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {oldLang('FolderLinkHeaderChatsJoin', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === invite.missingPeerIds.length\n                  ? oldLang('DeselectAll') : oldLang('SelectAll')}\n              </div>\n            </div>\n            <PeerPicker\n              itemIds={invite.missingPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n              allowMultiple\n              withStatus\n              itemInputType=\"checkbox\"\n            />\n          </>\n        )}\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {oldLang('FolderLinkHeaderAlready')}\n          </div>\n        </div>\n        <PeerPicker\n          itemIds={invite.alreadyPeerIds}\n          lockedSelectedIds={invite.alreadyPeerIds}\n          selectedIds={invite.alreadyPeerIds}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && oldLang('OK')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {oldLang('FolderLinkButtonJoinPlural', selectedPeerIds.length, 'i')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistAlready);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  folder: ApiChatFolder;\n  suggestedPeerIds?: string[];\n};\n\nconst ChatlistDelete: FC<OwnProps> = ({\n  folder,\n  suggestedPeerIds = MEMO_EMPTY_ARRAY,\n}) => {\n  const { closeChatlistModal, leaveChatlist } = getActions();\n\n  const lang = useOldLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>([]);\n\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === suggestedPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : suggestedPeerIds);\n  }, [suggestedPeerIds, selectedPeerIds.length]);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n    leaveChatlist({ folderId: folder.id, peerIds: selectedPeerIds });\n  }, [folder.id, selectedPeerIds]);\n\n  return (\n    <div className={styles.content}>\n      {Boolean(suggestedPeerIds?.length) && (\n        <>\n          <div className={styles.description}>\n            {renderText(lang('FolderLinkSubtitleRemove'), ['simple_markdown', 'emoji'])}\n          </div>\n          <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsQuit', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === suggestedPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <PeerPicker\n              itemIds={suggestedPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n              allowMultiple\n              withStatus\n              itemInputType=\"checkbox\"\n            />\n          </div>\n        </>\n      )}\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('FolderLinkButtonRemove')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonRemoveChats')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistDelete);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiChatlistInviteNew } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteNew;\n};\n\nconst ChatlistNew: FC<OwnProps> = ({ invite }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.peerIds);\n\n  const joinedIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    return invite.peerIds.filter((id) => !chatsById[id].isNotJoined);\n  }, [invite.peerIds]);\n\n  const selectedCount = selectedPeerIds.length - joinedIds.length;\n\n  const badgeText = selectedCount ? selectedCount.toString() : undefined;\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.peerIds.length;\n    setSelectedPeerIds(areAllSelected ? joinedIds : invite.peerIds);\n  }, [invite.peerIds, joinedIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {lang('FolderLinkSubtitleNew')}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {oldLang('FolderLinkHeaderChatsJoin', selectedCount, 'i')}\n          </div>\n          <div\n            className={styles.selectionToggle}\n            role=\"button\"\n            tabIndex={0}\n            onClick={handleSelectionToggle}\n          >\n            {selectedPeerIds.length === invite.peerIds.length ? oldLang('DeselectAll') : oldLang('SelectAll')}\n          </div>\n        </div>\n        <PeerPicker\n          itemIds={invite.peerIds}\n          lockedSelectedIds={joinedIds}\n          onSelectedIdsChange={setSelectedPeerIds}\n          selectedIds={selectedPeerIds}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n      <Button\n        onClick={handleButtonClick}\n        size=\"smaller\"\n        disabled={!selectedPeerIds.length}\n      >\n        <div className={styles.buttonText}>\n          {lang('FolderLinkAddFolder')}\n          <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistNew);\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { selectChatFolder } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Modal from '../../ui/Modal';\nimport Tab from '../../ui/Tab';\nimport ChatlistAlready from './ChatlistAlready';\nimport ChatlistDelete from './ChatlistDelete';\nimport ChatlistNew from './ChatlistNew';\n\nimport styles from './ChatlistModal.module.scss';\n\nexport type OwnProps = {\n  modal?: TabState['chatlistModal'];\n};\n\ntype StateProps = {\n  folder?: ApiChatFolder;\n};\n\nconst ChatlistInviteModal: FC<OwnProps & StateProps> = ({\n  modal,\n  folder,\n}) => {\n  const { closeChatlistModal } = getActions();\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(modal);\n  const renderingInfo = usePreviousDeprecated(modal) || modal;\n  const renderingFolder = usePreviousDeprecated(folder) || folder;\n\n  const title = useMemo(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return invite.missingPeerIds.length ? lang('FolderLinkTitleAddChats') : lang('FolderLinkTitleAlready');\n      }\n      return lang('FolderLinkTitleAdd');\n    }\n    if (renderingInfo.removal) {\n      return lang('FolderLinkTitleRemove');\n    }\n\n    return undefined;\n  }, [lang, renderingInfo]);\n\n  const renderingFolderTitle = useMemo(() => {\n    if (renderingFolder) {\n      return renderTextWithEntities({\n        text: renderingFolder.title.text,\n        entities: renderingFolder.title.entities,\n        noCustomEmojiPlayback: renderingFolder.noTitleAnimations,\n      });\n    }\n    if (renderingInfo?.invite && 'title' in renderingInfo.invite) {\n      return renderTextWithEntities({\n        text: renderingInfo.invite.title.text,\n        entities: renderingInfo.invite.title.entities,\n        noCustomEmojiPlayback: renderingInfo.invite.noTitleAnimations,\n      });\n    }\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  const folderTabNumber = useMemo(() => {\n    if (!renderingInfo?.invite) return undefined;\n    if ('missingPeerIds' in renderingInfo.invite) return renderingInfo.invite.missingPeerIds.length;\n    return undefined;\n  }, [renderingInfo]);\n\n  function renderFolders(folderTitle: TeactNode) {\n    return (\n      <div className={styles.foldersWrapper}>\n        <div className={styles.folders}>\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewLeft')} />\n          <Tab\n            className={styles.folder}\n            isActive\n            badgeCount={folderTabNumber}\n            isBadgeActive\n            title={folderTitle}\n          />\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewRight')} />\n        </div>\n      </div>\n    );\n  }\n\n  const renderContent = useCallback(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return <ChatlistAlready invite={invite} folder={renderingFolder!} />;\n      }\n\n      return <ChatlistNew invite={invite} />;\n    }\n\n    if (renderingInfo.removal) {\n      return <ChatlistDelete folder={renderingFolder!} suggestedPeerIds={renderingInfo.removal.suggestedPeerIds} />;\n    }\n\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      onClose={closeChatlistModal}\n      isSlim\n      hasCloseButton\n    >\n      {renderingFolderTitle && renderFolders(renderingFolderTitle)}\n      {renderContent()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { invite, removal } = modal || {};\n    const folderId = removal?.folderId || (invite && 'folderId' in invite ? invite.folderId : undefined);\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n\n    return {\n      folder,\n    };\n  },\n)(ChatlistInviteModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MZ0RCecx\",\"title\":\"ar8XeydN\",\"participantCount\":\"un00TXYY\",\"participants\":\"YvkZ6c2D\",\"participant\":\"DHJSBDeE\",\"buttons\":\"KFtrPtNr\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { getCustomPeerFromInvite, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport PeerBadge from '../../common/PeerBadge';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './ChatInviteModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['chatInviteModal'];\n};\n\nconst ChatInviteModal = ({ modal }: OwnProps) => {\n  const { acceptChatInvite, closeChatInviteModal, showNotification } = getActions();\n  const participantsRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const prevModal = usePrevious(modal);\n  const { hash, inviteInfo } = modal || prevModal || {};\n  const {\n    about, isBroadcast, participantIds, participantsCount, photo, isRequestNeeded,\n  } = inviteInfo || {};\n\n  const handleClose = useLastCallback(() => {\n    closeChatInviteModal();\n  });\n\n  const handleAccept = useLastCallback(() => {\n    acceptChatInvite({ hash: hash! });\n\n    showNotification({\n      message: isBroadcast ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n    });\n\n    handleClose();\n  });\n\n  const acceptLangKey = isBroadcast ? 'ProfileJoinChannel' : 'JoinGroup';\n  const requestToJoinLangKey = isBroadcast ? 'MemberRequests.RequestToJoinChannel'\n    : 'MemberRequests.RequestToJoinGroup';\n\n  const customPeer = useMemo(() => {\n    if (!inviteInfo) return undefined;\n\n    return getCustomPeerFromInvite(inviteInfo);\n  }, [inviteInfo]);\n\n  const participants = useMemo(() => {\n    if (!participantIds) {\n      return undefined;\n    }\n\n    const global = getGlobal();\n    return participantIds.map((id) => selectUser(global, id)).filter(Boolean);\n  }, [participantIds]);\n\n  useHorizontalScroll(participantsRef, !modal || !participants);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      contentClassName={styles.content}\n      isSlim\n      onClose={handleClose}\n      onEnter={handleAccept}\n    >\n      {customPeer && <Avatar size=\"jumbo\" photo={photo} peer={customPeer} withVideo />}\n      {customPeer && <FullNameTitle className={styles.title} peer={customPeer} />}\n      {about && <p className={styles.about}>{about}</p>}\n      <p className={styles.participantCount}>\n        {lang(isBroadcast ? 'Subscribers' : 'Members', participantsCount, 'i')}\n      </p>\n      {participants && (\n        <div ref={participantsRef} className={buildClassName(styles.participants, 'no-scrollbar')}>\n          {participants.map((participant) => (\n            <PeerBadge className={styles.participant} peer={participant} text={getUserFullName(participant)} />\n          ))}\n        </div>\n      )}\n      <div className={buildClassName('dialog-buttons', styles.buttons)}>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleAccept}>\n          {lang(isRequestNeeded ? requestToJoinLangKey : acceptLangKey)}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(ChatInviteModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LFkgLoAk\",\"title\":\"La4sUYaq\",\"description\":\"Bn5kz5br\",\"moreButton\":\"JdN5pGTw\",\"secondary\":\"hbsLlXSH\",\"content\":\"TZE15Pt_\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { TableAboutData } from '../common/TableAboutModal';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport SponsoredMessageContextMenuContainer from '../../middle/message/SponsoredContextMenuContainer';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport TableAboutModal from '../common/TableAboutModal';\n\nimport styles from './AboutAdsModal.module.scss';\n\nexport type OwnProps = {\n\n  modal: TabState['aboutAdsModal'];\n};\n\ntype StateProps = {\n  minLevelToRestrictAds?: number;\n};\n\nconst AboutAdsModal = ({ modal, minLevelToRestrictAds }: OwnProps & StateProps) => {\n  const { closeAboutAdsModal } = getActions();\n\n  const moreMenuRef = useRef<HTMLButtonElement>();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  const {\n    canReport, randomId, additionalInfo, sponsorInfo,\n  } = renderingModal || {};\n  const isMonetizationSharing = canReport;\n\n  const renderingIsNewDesign = useCurrentOrPrev(isMonetizationSharing);\n\n  const oldLang = useOldLang();\n\n  const regularAdContent = useMemo(() => {\n    return (\n      <>\n        <h3>{oldLang('SponsoredMessageInfoScreen.Title')}</h3>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n        <p>\n          <SafeLink\n            url={oldLang('SponsoredMessageAlertLearnMoreUrl')}\n            text={oldLang('SponsoredMessageAlertLearnMoreUrl')}\n          />\n        </p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      </>\n    );\n  }, [oldLang]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleContextMenu, handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(moreMenuRef, !renderingIsNewDesign);\n\n  const handleClose = useLastCallback(() => {\n    closeAboutAdsModal();\n    handleContextMenuClose();\n    handleContextMenuHide();\n  });\n\n  const modalData = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const header = (\n      <>\n        <h3 className={styles.title}>{oldLang('AboutRevenueSharingAds')}</h3>\n        <p className={buildClassName(styles.description, styles.secondary)}>\n          {oldLang('RevenueSharingAdsAlertSubtitle')}\n        </p>\n        <Button\n          ref={moreMenuRef}\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className={styles.moreButton}\n          onClick={handleContextMenu}\n        >\n          <Icon name=\"more\" />\n        </Button>\n      </>\n    );\n\n    const listItemData = [\n      ['lock', oldLang('RevenueSharingAdsInfo1Title'),\n        renderText(oldLang('RevenueSharingAdsInfo1Subtitle'), ['simple_markdown'])],\n      ['revenue-split', oldLang('RevenueSharingAdsInfo2Title'),\n        renderText(oldLang('RevenueSharingAdsInfo2Subtitle'), ['simple_markdown'])],\n      ['nochannel', oldLang('RevenueSharingAdsInfo3Title'),\n        renderText(oldLang('RevenueSharingAdsInfo3Subtitle', minLevelToRestrictAds), ['simple_markdown'])],\n    ] satisfies TableAboutData;\n\n    const footer = (\n      <>\n        <h3 className={styles.title}>{renderText(oldLang('RevenueSharingAdsInfo4Title'), ['simple_markdown'])}</h3>\n        <p className={styles.description}>\n          {renderText(oldLang('RevenueSharingAdsInfo4Subtitle2', ''), ['simple_markdown'])}\n          <SafeLink\n            url={oldLang('PromoteUrl')}\n            text={oldLang('LearnMoreArrow')}\n          />\n        </p>\n      </>\n    );\n\n    return {\n      header,\n      listItemData,\n      footer,\n    };\n  }, [isOpen, oldLang, handleContextMenu, minLevelToRestrictAds]);\n\n  if (renderingIsNewDesign) {\n    return (\n      <>\n        <TableAboutModal\n          isOpen={isOpen}\n          listItemData={modalData?.listItemData}\n          headerIconName=\"channel\"\n          withSeparator\n          header={modalData?.header}\n          footer={modalData?.footer}\n          buttonText={oldLang('RevenueSharingAdsUnderstood')}\n          onClose={handleClose}\n        />\n        {contextMenuAnchor && randomId && (\n          <SponsoredMessageContextMenuContainer\n            isOpen={isContextMenuOpen}\n            anchor={contextMenuAnchor}\n            triggerRef={moreMenuRef}\n            randomId={randomId}\n            additionalInfo={additionalInfo}\n            canReport={canReport}\n            sponsorInfo={sponsorInfo}\n            shouldSkipAbout\n            onItemClick={handleClose}\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={styles.root}\n      contentClassName={styles.content}\n      onClose={handleClose}\n    >\n      {regularAdContent}\n      <Button\n        size=\"smaller\"\n        onClick={handleClose}\n      >\n        {oldLang('RevenueSharingAdsUnderstood')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const minLevelToRestrictAds = global.appConfig?.channelRestrictAdsLevelMin;\n\n    return {\n      minLevelToRestrictAds,\n    };\n  },\n)(AboutAdsModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"t9iZUzOj\",\"description\":\"mjveZmdr\",\"toncoin\":\"ATkOSqJ7\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\n\nimport type { TableAboutData } from '../modals/common/TableAboutModal';\n\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TableAboutModal from '../modals/common/TableAboutModal';\nimport Icon from './icons/Icon';\nimport SafeLink from './SafeLink';\n\nimport styles from './AboutMonetizationModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\nconst AboutMonetizationModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const blockchainText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnLearnCoinAbout',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationInfoTONLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const monetizationTitle = useMemo(() => {\n    return lang(\n      'MonetizationInfoTONTitle',\n      undefined,\n      {\n        withNodes: true,\n        specialReplacement: { '💎': <Icon className={styles.toncoin} name=\"toncoin\" /> },\n      },\n    );\n  }, [lang]);\n\n  const modalData = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const header = (\n      <h3 className={styles.title}>{oldLang('lng_channel_earn_learn_title')}</h3>\n    );\n\n    const listItemData = [\n      ['channel', oldLang('lng_channel_earn_learn_in_subtitle'),\n        renderText(oldLang('lng_channel_earn_learn_in_about'), ['simple_markdown'])],\n      ['revenue-split', oldLang('lng_channel_earn_learn_split_subtitle'),\n        renderText(oldLang('Monetization.Intro.Split.Text'), ['simple_markdown'])],\n      ['cash-circle', oldLang('lng_channel_earn_learn_out_subtitle'),\n        renderText(oldLang('lng_channel_earn_learn_out_about'), ['simple_markdown'])],\n    ] satisfies TableAboutData;\n\n    const footer = (\n      <>\n        <h3 className={styles.title}>{monetizationTitle}</h3>\n        <p className={styles.description}>{blockchainText}</p>\n      </>\n    );\n\n    return {\n      header,\n      listItemData,\n      footer,\n    };\n  }, [isOpen, oldLang, monetizationTitle, blockchainText]);\n\n  if (!modalData) {\n    return undefined;\n  }\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      listItemData={modalData.listItemData}\n      headerIconName=\"cash-circle\"\n      withSeparator\n      header={modalData.header}\n      footer={modalData.footer}\n      buttonText={oldLang('RevenueSharingAdsUnderstood')}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(AboutMonetizationModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WqeWhMAS\",\"content\":\"oofoCYlu\"};","import {\n  memo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Modal from '../ui/Modal';\nimport PasswordForm from './PasswordForm';\n\nimport styles from './VerificationMonetizationModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['monetizationVerificationModal'];\n};\n\ntype StateProps = {\n  passwordHint?: string;\n};\n\nconst VerificationMonetizationModal = ({\n  modal,\n  passwordHint,\n}: OwnProps & StateProps) => {\n  const {\n    closeMonetizationVerificationModal, clearMonetizationVerificationError, processMonetizationRevenueWithdrawalUrl,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const lang = useLang();\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useLastCallback((password: string) => {\n    if (!renderingModal) return;\n    processMonetizationRevenueWithdrawalUrl({\n      peerId: renderingModal.chatId,\n      currentPassword: password,\n    });\n  });\n\n  const handleClearError = useLastCallback(() => {\n    clearMonetizationVerificationError();\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeMonetizationVerificationModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('CheckPasswordTitle')}\n      className={styles.root}\n      contentClassName={styles.content}\n      onClose={handleClose}\n    >\n      <div className={buildClassName(styles.content, 'settings-content password-form custom-scroll')}>\n        <div className=\"settings-item pt-0\">\n          <PasswordForm\n            shouldShowSubmit\n            placeholder={lang('CheckPasswordPlaceholder')}\n            error={renderingModal?.errorKey && lang.withRegular(renderingModal.errorKey)}\n            description={lang('CheckPasswordDescription')}\n            clearError={handleClearError}\n            isLoading={renderingModal?.isLoading}\n            hint={passwordHint}\n            isPasswordVisible={shouldShowPassword}\n            shouldResetValue={isOpen}\n            onChangePasswordVisibility={setShouldShowPassword}\n            onSubmit={handleSubmit}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n\n    return {\n      passwordHint,\n    };\n  },\n)(VerificationMonetizationModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MKdSUg2P\",\"chatItem\":\"qEIwBtp0\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './EmojiStatusAccessModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['emojiStatusAccessModal'];\n};\n\nexport type StateProps = {\n  currentUser?: ApiUser;\n  stickerSet?: ApiStickerSet;\n  isPremium?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nconst INTERVAL = 3200;\n\nconst EmojiStatusAccessModal: FC<OwnProps & StateProps> = ({\n  modal,\n  currentUser,\n  stickerSet,\n  isPremium,\n  isAccountFrozen,\n}) => {\n  const {\n    closeEmojiStatusAccessModal,\n    toggleUserEmojiStatusPermission,\n    sendWebAppEvent,\n    openPremiumModal,\n    loadDefaultStatusIcons,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [currentStatusIndex, setCurrentStatusIndex] = useState<number>(0);\n\n  useEffect(() => {\n    if (isOpen && !stickerSet?.stickers && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n    }\n  }, [isOpen, stickerSet, isAccountFrozen]);\n\n  const mockPeerWithStatus = useMemo(() => {\n    if (!currentUser || !stickerSet?.stickers) return undefined;\n    return {\n      ...currentUser,\n      emojiStatus: {\n        type: 'regular',\n        documentId: stickerSet.stickers[currentStatusIndex].id,\n      },\n    } satisfies ApiUser;\n  }, [currentUser, stickerSet, currentStatusIndex]);\n\n  const totalCount = stickerSet?.stickers?.length;\n  useInterval(\n    () => {\n      if (!totalCount) return;\n      setCurrentStatusIndex((prevIndex) => (prevIndex + 1) % totalCount);\n    },\n    totalCount ? INTERVAL : undefined,\n  );\n\n  const renderPickerItem = useLastCallback(() => {\n    return (\n      <PeerChip\n        withEmojiStatus\n        className={styles.chatItem}\n        itemClassName={styles.itemName}\n        mockPeer={mockPeerWithStatus}\n      />\n    );\n  });\n\n  const confirmHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeEmojiStatusAccessModal();\n    if (modal?.webAppKey) {\n      if (isPremium) {\n        sendWebAppEvent({\n          webAppKey: modal.webAppKey,\n          event: {\n            eventType: 'emoji_status_access_requested',\n            eventData: {\n              status: 'allowed',\n            },\n          },\n        });\n        toggleUserEmojiStatusPermission({ botId: modal.bot.id, isEnabled: true, isBotAccessEmojiGranted: true });\n      } else {\n        openPremiumModal();\n        sendWebAppEvent({\n          webAppKey: modal.webAppKey,\n          event: {\n            eventType: 'emoji_status_access_requested',\n            eventData: {\n              status: 'cancelled',\n            },\n          },\n        });\n      }\n    }\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeEmojiStatusAccessModal();\n    if (modal?.webAppKey) {\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'emoji_status_access_requested',\n          eventData: {\n            status: 'cancelled',\n          },\n        },\n      });\n    }\n    if (isPremium) {\n      toggleUserEmojiStatusPermission({ botId: modal.bot.id, isEnabled: false });\n    }\n  });\n\n  const renderStatusText = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return lang('EmojiStatusAccessText', {\n      name: getUserFullName(modal?.bot),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      contentClassName={styles.content}\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n    >\n      {renderPickerItem()}\n      <div>\n        {renderStatusText()}\n        <div\n          className=\"dialog-buttons mt-2\"\n          ref={containerRef}\n        >\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={confirmHandler}\n            color=\"primary\"\n          >\n            {oldLang('lng_bot_allow_write_confirm')}\n          </Button>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={onCloseHandler}\n          >\n            {lang('Cancel')}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const isPremium = selectIsCurrentUserPremium(global);\n    const stickerSet = global.defaultStatusIconsId ? selectStickerSet(global, global.defaultStatusIconsId) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUser,\n      stickerSet,\n      isPremium,\n      isAccountFrozen,\n    };\n  },\n)(EmojiStatusAccessModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { getGeolocationStatus } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './LocationAccessModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['locationAccessModal'];\n};\n\nexport type StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst LocationAccessModal: FC<OwnProps & StateProps> = ({\n  modal,\n  currentUser,\n}) => {\n  const {\n    closeLocationAccessModal, toggleUserLocationPermission, sendWebAppEvent,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const confirmHandler = useLastCallback(async () => {\n    const geolocationData = await getGeolocationStatus();\n    const { geolocation } = geolocationData;\n    if (!modal?.bot?.id) return;\n    closeLocationAccessModal();\n    if (modal?.webAppKey) {\n      toggleUserLocationPermission({\n        botId: modal.bot.id,\n        isAccessGranted: true,\n      });\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'location_requested',\n          eventData: {\n            available: true,\n            latitude: geolocation?.latitude,\n            longitude: geolocation?.longitude,\n            altitude: geolocation?.altitude,\n            course: geolocation?.heading,\n            speed: geolocation?.speed,\n            horizontal_accuracy: geolocation?.accuracy,\n            vertical_accuracy: geolocation?.accuracy,\n          },\n        },\n      });\n    }\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeLocationAccessModal();\n    if (modal?.webAppKey) {\n      toggleUserLocationPermission({\n        botId: modal.bot.id,\n        isAccessGranted: false,\n      });\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'location_requested',\n          eventData: {\n            available: false,\n          },\n        },\n      });\n    }\n  });\n\n  const renderInfo = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return (\n      <div className={styles.avatars}>\n        <Avatar\n          size=\"large\"\n          peer={currentUser}\n        />\n        <Icon name=\"next\" className={styles.arrow} />\n        <Avatar\n          size=\"large\"\n          peer={modal.bot}\n        />\n      </div>\n    );\n  });\n\n  const renderStatusText = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return lang('LocationPermissionText', {\n      name: getUserFullName(modal?.bot),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n    >\n      {renderInfo()}\n      <div>\n        {renderStatusText()}\n        <div\n          className=\"dialog-buttons mt-2\"\n          ref={containerRef}\n        >\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={confirmHandler}\n            color=\"primary\"\n          >\n            {oldLang('lng_bot_allow_write_confirm')}\n          </Button>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={onCloseHandler}\n          >\n            {lang('Cancel')}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n\n    return {\n      currentUser,\n    };\n  },\n)(LocationAccessModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatars\":\"CGPoDaLo\",\"arrow\":\"pzERgD5x\"};","// extracted by mini-css-extract-plugin\nexport default {\"slide\":\"qJDgUtjV\",\"root\":\"njPBcVYr\",\"modalTitle\":\"ZAdG13Ah\",\"optionText\":\"oWujoaSC\",\"option\":\"aFbjDzNo\",\"optionButton\":\"VbE0HzDs\",\"sectionTitle\":\"jrA2dOiw\",\"description\":\"k71Zrc_P\",\"title\":\"mMmY6YR4\",\"titleMultiline\":\"lVVyV0py\",\"subtitle\":\"gSkAFc4u\",\"transition\":\"HjsGIG6e\"};","import {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Transition, { ACTIVE_SLIDE_CLASS_NAME, TO_SLIDE_CLASS_NAME } from '../../ui/Transition';\n\nimport styles from './ReportAdModal.module.scss';\n\nconst ADDED_PADDING = 56;\n\nexport type OwnProps = {\n  modal: TabState['reportAdModal'];\n};\n\nconst ReportAdModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    reportSponsored, closeReportAdModal, openPreviousReportAdModal,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const handleOptionClick = useLastCallback((e, option: string) => {\n    const { chatId, randomId } = modal!;\n    reportSponsored({ peerId: chatId, randomId, option });\n  });\n\n  const [renderingSection, renderingDepth] = useMemo(() => {\n    if (!modal) return [undefined, 0];\n    const sectionDepth = modal.sections.length - 1;\n    return [modal.sections[sectionDepth], sectionDepth];\n  }, [modal]);\n\n  const handleBackClick = useLastCallback(() => {\n    if (!renderingDepth) {\n      closeReportAdModal();\n      return;\n    }\n\n    openPreviousReportAdModal();\n  });\n\n  const bottomText = useMemo(() => {\n    if (!modal) return undefined;\n    const template = lang('lng_report_sponsored_reported_learn');\n    const parts = template.split('{link}');\n    return [\n      parts[0],\n      <SafeLink\n        text={lang('lng_report_sponsored_reported_link')}\n        url={lang('ReportAd.Help_URL')}\n      />,\n      parts[1],\n    ];\n  }, [lang, modal]);\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    const hasSubtitle = Boolean(renderingSection?.subtitle);\n\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(renderingDepth ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <Icon name={renderingDepth ? 'arrow-left' : 'close'} />\n        </Button>\n        <div className={buildClassName('modal-title', styles.modalTitle, hasSubtitle && styles.titleMultiline)}>\n          <h3 className={styles.title}>{lang('ReportAd')}</h3>\n          {hasSubtitle && (\n            <span className={styles.subtitle}>{renderingSection.subtitle}</span>\n          )}\n        </div>\n      </div>\n    );\n  }, [lang, modal, renderingDepth, renderingSection?.subtitle]);\n\n  useEffect(() => {\n    if (!modal) return;\n    const slide = document.querySelector<HTMLElement>(`.${ACTIVE_SLIDE_CLASS_NAME} > .${styles.slide}`);\n    if (!slide) return;\n\n    const height = slide.scrollHeight;\n    requestMutation(() => {\n      transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n    });\n  }, [modal]);\n\n  const handleAnimationStart = useLastCallback(() => {\n    const slide = document.querySelector<HTMLElement>(`.${TO_SLIDE_CLASS_NAME} > .${styles.slide}`)!;\n\n    requestMeasure(() => {\n      const height = slide.scrollHeight;\n      requestMutation(() => {\n        transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n      });\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      className={styles.root}\n      header={header}\n      onClose={closeReportAdModal}\n    >\n      <Transition\n        name=\"slide\"\n        className={styles.transition}\n        ref={transitionRef}\n        activeKey={renderingDepth}\n        onStart={handleAnimationStart}\n      >\n        <div className={styles.slide}>\n          <h3 className={styles.sectionTitle}>{renderingSection?.title}</h3>\n          {renderingSection?.options.map((option) => (\n            <ListItem\n              narrow\n              secondaryIcon=\"next\"\n              className={styles.option}\n              buttonClassName={styles.optionButton}\n              clickArg={option.option}\n              onClick={handleOptionClick}\n            >\n              <div className={styles.optionText}>{option.text}</div>\n            </ListItem>\n          ))}\n        </div>\n        <p className={styles.description}>{bottomText}</p>\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ReportAdModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"slide\":\"kq9LwNTZ\",\"root\":\"E1bGWeON\",\"content\":\"tNysQgHL\",\"modalTitle\":\"Lj_ezEWU\",\"header\":\"AlMDkK7c\",\"optionText\":\"FU8m6NUU\",\"option\":\"RoxwMzvA\",\"optionButton\":\"Z6skYdvb\",\"sectionTitle\":\"GSfUuTet\",\"description\":\"zwfjNhF9\",\"title\":\"QawchdxB\",\"hasDepth\":\"CV7kzv9H\",\"titleMultiline\":\"OYFbu8fQ\",\"subtitle\":\"OUFckTb7\",\"transition\":\"n2VxPirU\",\"block\":\"KpptZ3Mk\",\"optionInfo\":\"yc3szGcx\",\"reportIcon\":\"kO8JC4gK\"};","import type { ChangeEvent } from 'react';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport TextArea from '../../ui/TextArea';\nimport Transition, { ACTIVE_SLIDE_CLASS_NAME, TO_SLIDE_CLASS_NAME } from '../../ui/Transition';\n\nimport styles from './ReportModal.module.scss';\n\nconst MAX_DESCRIPTION = 512;\nconst ADDED_PADDING = 20;\n\nexport type OwnProps = {\n  modal: TabState['reportModal'];\n};\n\nconst ReportModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    reportMessages, reportStory, closeReportModal, openPreviousReportModal,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const [text, setText] = useState('');\n\n  const handleOptionClick = useLastCallback((e, option: string) => {\n    const {\n      messageIds, subject, peerId, chatId,\n    } = modal!;\n    if (!messageIds) return;\n    switch (subject) {\n      case 'message':\n        reportMessages({ chatId: chatId!, messageIds, option });\n        break;\n      case 'story':\n        reportStory({\n          storyId: messageIds[0], peerId: peerId!, option,\n        });\n        break;\n    }\n  });\n\n  const [renderingSection, renderingDepth] = useMemo(() => {\n    if (!modal) return [undefined, 0];\n    const sectionDepth = modal.sections.length - 1;\n    return [modal?.sections[sectionDepth], sectionDepth];\n  }, [modal]);\n\n  const handleBackClick = useLastCallback(() => {\n    openPreviousReportModal();\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closeReportModal();\n  });\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    const hasSubtitle = Boolean(renderingSection?.subtitle);\n\n    return (\n      <div className=\"modal-header-condensed\">\n        {renderingDepth ? (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Back')}\n            onClick={handleBackClick}\n          >\n            <Icon name=\"arrow-left\" />\n          </Button>\n        ) : (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={handleCloseClick}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n        <div className={buildClassName('modal-title', styles.modalTitle, hasSubtitle && styles.titleMultiline)}>\n          <h3 className={buildClassName(styles.title, renderingDepth && styles.hasDepth)}>\n            {renderingSection?.options\n              ? lang(modal?.subject === 'story' ? 'ReportStory' : 'Report') : renderingSection?.title}\n          </h3>\n          {hasSubtitle && (\n            <span className={styles.subtitle}>{renderingSection.subtitle}</span>\n          )}\n        </div>\n      </div>\n    );\n  }, [lang, modal, renderingDepth, renderingSection?.options, renderingSection?.subtitle, renderingSection?.title]);\n\n  const handleTextChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setText(e.target.value);\n  });\n\n  useEffect(() => {\n    if (!modal) return;\n    const slide = document.querySelector<HTMLElement>(`.${ACTIVE_SLIDE_CLASS_NAME} > .${styles.slide}`);\n    if (!slide) return;\n\n    const height = slide.scrollHeight;\n    requestMutation(() => {\n      transitionRef.current!.style.height = `${height}px`;\n    });\n  }, [modal]);\n\n  const handleAnimationStart = useLastCallback(() => {\n    const slide = document.querySelector<HTMLElement>(`.${TO_SLIDE_CLASS_NAME} > .${styles.slide}`)!;\n\n    requestMeasure(() => {\n      const height = slide.scrollHeight;\n      requestMutation(() => {\n        transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n      });\n    });\n  });\n\n  const closeReportMessageModalHandler = useLastCallback(() => {\n    setText('');\n    closeReportModal();\n  });\n\n  const sendMessageReportHandler = useLastCallback(() => {\n    const {\n      messageIds, subject, peerId, chatId,\n    } = modal!;\n    switch (subject) {\n      case 'message':\n        reportMessages({\n          chatId: chatId!, messageIds, option: renderingSection?.option, description: text,\n        });\n        break;\n      case 'story':\n        reportStory({\n          storyId: messageIds?.[0], peerId: peerId!, option: renderingSection?.option, description: text,\n        });\n        break;\n    }\n    closeReportMessageModalHandler();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      header={header}\n      onClose={closeReportMessageModalHandler}\n      contentClassName={styles.content}\n      className={buildClassName(styles.root, modal?.subject === 'story' && 'component-theme-dark')}\n    >\n      <Transition\n        name=\"slide\"\n        className={styles.transition}\n        ref={transitionRef}\n        activeKey={renderingDepth}\n        onStart={handleAnimationStart}\n      >\n        <div className={styles.slide}>\n          {renderingSection?.options\n            ? <h3 className={styles.sectionTitle}>{renderingSection?.title}</h3> : undefined}\n          {renderingSection?.options?.map((option) => (\n            <ListItem\n              narrow\n              nonInteractive\n              secondaryIcon=\"next\"\n              className={styles.option}\n              buttonClassName={styles.optionButton}\n              clickArg={option.option}\n              onClick={handleOptionClick}\n            >\n              <div className={styles.optionText}>{option.text}</div>\n            </ListItem>\n          ))}\n          {renderingSection?.option ? (\n            <div className={styles.block}>\n              <AnimatedIconWithPreview\n                tgsUrl={LOCAL_TGS_URLS.Report}\n                size={100}\n                className={styles.reportIcon}\n                nonInteractive\n                forceAlways\n                noLoop={false}\n              />\n              <TextArea\n                id=\"option\"\n                className={styles.optionInfo}\n                label={renderingSection.isOptional ? lang('Report2CommentOptional') : lang('Report2Comment')}\n                onChange={handleTextChange}\n                value={text}\n                maxLength={MAX_DESCRIPTION}\n                maxLengthIndicator={(MAX_DESCRIPTION - text.length).toString()}\n                noReplaceNewlines\n              />\n              <Button\n                size=\"smaller\"\n                onClick={sendMessageReportHandler}\n                disabled={!renderingSection.isOptional ? !text.length : undefined}\n              >\n                {lang('ReportSend')}\n              </Button>\n            </div>\n          ) : undefined}\n        </div>\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ReportModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Rzj2LMLf\",\"content\":\"Ve4u2KVI\",\"modalTitle\":\"E42tgAwD\",\"container\":\"pNSCKAVN\",\"header\":\"P1fPh6h8\",\"actionMessageView\":\"McJgXCtB\",\"info\":\"xWnXsG7q\",\"background\":\"_6w75ldP\",\"customBgImage\":\"CZkpv8n0\",\"customBgColor\":\"VJAYrDF_\",\"withTransition\":\"lElCwweL\",\"blurred\":\"m8xzfVvU\",\"withRightColumn\":\"rJCyBVMB\"};","import {\n  type FC,\n  memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getMockPreparedMessageFromResult, getUserFullName } from '../../../global/helpers';\nimport { selectTheme, selectThemeValues, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\n\nimport useCustomBackground from '../../../hooks/useCustomBackground';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Message from '../../middle/message/Message';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './PreparedMessageModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['preparedMessageModal'];\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n  isBackgroundBlurred?: boolean;\n  patternColor?: string;\n  customBackground?: string;\n  backgroundColor?: string;\n  bot?: ApiUser;\n};\n\nconst PreparedMessageModal: FC<OwnProps & StateProps> = ({\n  modal,\n  theme,\n  isBackgroundBlurred,\n  patternColor,\n  customBackground,\n  backgroundColor,\n  bot,\n}) => {\n  const {\n    closePreparedInlineMessageModal, sendWebAppEvent, openSharePreparedMessageModal,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const { webAppKey, message, botId } = modal || {};\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const handleOpenClick = useLastCallback(() => {\n    if (webAppKey && botId && message) {\n      openSharePreparedMessageModal({\n        webAppKey,\n        message,\n      });\n      closePreparedInlineMessageModal();\n    }\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closePreparedInlineMessageModal();\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_failed',\n          eventData: { error: 'USER_DECLINED' },\n        },\n      });\n    }\n  });\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.header}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang('Close')}\n          onClick={handleCloseClick}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <h3 className={buildClassName('modal-title', styles.modalTitle)}>\n          {lang('BotShareMessage')}\n        </h3>\n      </div>\n    );\n  }, [lang, modal]);\n\n  const localMessage = useMemo(() => {\n    if (!botId || !message || !webAppKey) return undefined;\n    return getMockPreparedMessageFromResult(botId, message);\n  }, [botId, message, webAppKey]);\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n  );\n\n  return (\n    <Modal\n      dialogRef={containerRef}\n      isOpen={isOpen}\n      header={header}\n      onClose={handleCloseClick}\n      className={styles.root}\n      contentClassName={styles.content}\n    >\n      <div\n        className={buildClassName(styles.actionMessageView, 'MessageList')}\n        // @ts-ignore -- FIXME: Find a way to disable interactions but keep a11y\n        inert\n        style={buildStyle(\n          `--pattern-color: ${patternColor}`,\n          backgroundColor && `--theme-background-color: ${backgroundColor}`,\n        )}\n      >\n        <div\n          className={bgClassName}\n          style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        />\n        {localMessage && (\n          <Message\n            key={botId}\n            message={localMessage}\n            threadId={MAIN_THREAD_ID}\n            messageListType=\"thread\"\n            noComments\n            noReplies\n            appearanceOrder={0}\n            isJustAdded={false}\n            isFirstInGroup\n            isLastInGroup\n            isLastInList={false}\n            isFirstInDocumentGroup={false}\n            isLastInDocumentGroup={false}\n          />\n        )}\n      </div>\n      <div className={styles.container}>\n        <p className={styles.info}>\n          {lang('WebAppShareMessageInfo', { user: getUserFullName(bot) })}\n        </p>\n        <Button\n          size=\"smaller\"\n          onClick={handleOpenClick}\n        >\n          {lang('BotShareMessageShare')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }) => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred,\n      patternColor,\n      background: customBackground,\n      backgroundColor,\n    } = selectThemeValues(global, theme) || {};\n    const bot = modal ? selectUser(global, modal?.botId) : undefined;\n\n    return {\n      theme,\n      isBackgroundBlurred,\n      patternColor,\n      customBackground,\n      backgroundColor,\n      bot,\n      currentUserId: global.currentUserId,\n    };\n  },\n)(PreparedMessageModal));\n","import {\n  type FC,\n  memo, useEffect,\n} from '../../../lib/teact/teact';\nimport {\n  getActions, getGlobal, withGlobal,\n} from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectPeer, selectTabState,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePaidMessageConfirmation from '../../middle/composer/hooks/usePaidMessageConfirmation';\n\nimport PaymentMessageConfirmDialog from '../../common/PaymentMessageConfirmDialog';\nimport RecipientPicker from '../../common/RecipientPicker';\n\nexport type OwnProps = {\n  modal: TabState['sharePreparedMessageModal'];\n};\n\ntype StateProps = {\n  isPaymentMessageConfirmDialogOpen: boolean;\n  starsBalance: number;\n  isStarsBalanceModalOpen: boolean;\n};\n\nexport type SendParams = {\n  peerName?: string;\n  starsForSendMessage: number;\n};\n\nconst SharePreparedMessageModal: FC<OwnProps & StateProps> = ({\n  modal, isPaymentMessageConfirmDialogOpen, isStarsBalanceModalOpen, starsBalance,\n}) => {\n  const {\n    closeSharePreparedMessageModal,\n    sendInlineBotResult,\n    sendWebAppEvent,\n    showNotification,\n    updateSharePreparedMessageModalSendArgs,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const {\n    message, filter, webAppKey, pendingSendArgs,\n  } = modal || {};\n\n  const {\n    starsForSendMessage,\n  } = pendingSendArgs || {};\n\n  const {\n    closeConfirmDialog: closeConfirmModalPayForMessage,\n    dialogHandler: paymentMessageConfirmDialogHandler,\n    shouldAutoApprove: shouldPaidMessageAutoApprove,\n    setAutoApprove: setShouldPaidMessageAutoApprove,\n    handleWithConfirmation: handleActionWithPaymentConfirmation,\n  } = usePaidMessageConfirmation(starsForSendMessage || 0, isStarsBalanceModalOpen, starsBalance);\n\n  const handleClose = useLastCallback(() => {\n    closeSharePreparedMessageModal();\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_failed',\n          eventData: { error: 'USER_DECLINED' },\n        },\n      });\n    }\n  });\n\n  const handleSend = useLastCallback((id: string, threadId?: ThreadId) => {\n    if (message && webAppKey) {\n      const global = getGlobal();\n      const peer = selectPeer(global, id);\n      sendInlineBotResult({\n        chatId: id,\n        threadId: threadId || MAIN_THREAD_ID,\n        id: message.result.id,\n        queryId: message.result.queryId,\n      });\n      if (!starsForSendMessage) {\n        showNotification({\n          message: lang('BotSharedToOne', getPeerTitle(lang, peer!)),\n        });\n      }\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_sent',\n        },\n      });\n      closeSharePreparedMessageModal();\n      updateSharePreparedMessageModalSendArgs({ args: undefined });\n    }\n  });\n\n  const handleSelectRecipient = useLastCallback((id: string, threadId?: ThreadId) => {\n    updateSharePreparedMessageModalSendArgs({ args: { peerId: id, threadId } });\n  });\n\n  const handleSendWithPaymentConfirmation = useLastCallback(() => {\n    if (pendingSendArgs) {\n      handleActionWithPaymentConfirmation(handleSend, pendingSendArgs.peerId, pendingSendArgs.threadId);\n    }\n  });\n\n  const handleClosePaymentMessageConfirmDialog = useLastCallback(() => {\n    closeConfirmModalPayForMessage();\n    updateSharePreparedMessageModalSendArgs({ args: undefined });\n  });\n\n  useEffect(() => {\n    if (pendingSendArgs) {\n      handleSendWithPaymentConfirmation();\n    }\n  }, [pendingSendArgs]);\n\n  const global = getGlobal();\n  const peer = pendingSendArgs ? selectPeer(global, pendingSendArgs.peerId) : undefined;\n  const peerName = peer ? getPeerTitle(lang, peer) : undefined;\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <>\n      <RecipientPicker\n        isOpen={isOpen}\n        searchPlaceholder={lang('Search')}\n        filter={filter}\n        onSelectRecipient={handleSelectRecipient}\n        onClose={handleClose}\n        onCloseAnimationEnd={unmarkIsShown}\n        isLowStackPriority\n      />\n      <PaymentMessageConfirmDialog\n        isOpen={isPaymentMessageConfirmDialogOpen}\n        onClose={handleClosePaymentMessageConfirmDialog}\n        userName={peerName}\n        messagePriceInStars={starsForSendMessage || 0}\n        messagesCount={1}\n        shouldAutoApprove={shouldPaidMessageAutoApprove}\n        setAutoApprove={setShouldPaidMessageAutoApprove}\n        confirmHandler={paymentMessageConfirmDialogHandler}\n      />\n    </>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { isPaymentMessageConfirmDialogOpen } = tabState;\n    const starsBalance = global.stars?.balance.amount || 0;\n    const isStarsBalanceModalOpen = Boolean(tabState.starsBalanceModal);\n    return {\n      isPaymentMessageConfirmDialogOpen,\n      starsBalance,\n      isStarsBalanceModalOpen,\n    };\n  },\n)(SharePreparedMessageModal));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  const resetPermissions = useCallback(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n  }, [defaultPermissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n    resetPermissions,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\n\nimport { isChatPublic } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\n\nexport type OwnProps = {\n  chatId?: string;\n  handlePermissionChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  permissions: ApiChatBannedRights;\n  isMediaDropdownOpen: boolean;\n  setIsMediaDropdownOpen: (open: boolean) => void;\n  className?: string;\n  shiftedClassName?: string;\n  dropdownClassName?: string;\n  withCheckbox?: boolean;\n  permissionGroup?: boolean;\n  getControlIsDisabled?: (key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => boolean | undefined;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasLinkedChat?: boolean;\n};\n\nconst permissionKeyList: (keyof ApiChatBannedRights)[] = [\n  'sendPhotos', 'sendVideos', 'sendStickers',\n  'sendAudios', 'sendDocs', 'sendVoices', 'sendRoundvideos', 'embedLinks', 'sendPolls',\n];\n\nconst PermissionCheckboxList: FC<OwnProps & StateProps> = ({\n  chat,\n  isMediaDropdownOpen,\n  setIsMediaDropdownOpen,\n  hasLinkedChat,\n  permissions,\n  handlePermissionChange,\n  className,\n  shiftedClassName,\n  dropdownClassName,\n  withCheckbox,\n  getControlIsDisabled,\n  permissionGroup,\n}) => {\n  const {\n    showNotification,\n  } = getActions();\n\n  const { isForum } = chat || {};\n\n  const lang = useOldLang();\n\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  const countCheckedPermissions = useMemo(() => {\n    return permissionKeyList.reduce((count, key) => {\n      if (!permissions[key]) {\n        count += 1;\n      }\n      return count;\n    }, 0);\n  }, [permissions]);\n\n  const handleOpenMediaDropdown = useLastCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  });\n\n  const handleDisabledClick = useLastCallback(() => {\n    showNotification({ message: lang('lng_rights_permission_unavailable') });\n  });\n\n  return (\n    <>\n      <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n        <Checkbox\n          name=\"sendPlain\"\n          checked={!permissions.sendPlain}\n          label={lang('UserRestrictionsSend')}\n          blocking\n          permissionGroup={permissionGroup}\n          onChange={handlePermissionChange}\n          disabled={getControlIsDisabled && getControlIsDisabled('sendPlain')}\n        />\n      </div>\n      <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n        <Checkbox\n          name=\"sendMedia\"\n          checked={!permissions.sendMedia}\n          label={lang('UserRestrictionsSendMedia')}\n          labelText={`${countCheckedPermissions}/${permissionKeyList.length}`}\n          blocking\n          permissionGroup={permissionGroup}\n          rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n          onChange={handlePermissionChange}\n          onClickLabel={handleOpenMediaDropdown}\n          disabled={getControlIsDisabled && getControlIsDisabled('sendMedia')}\n        />\n      </div>\n      <div className={dropdownClassName}>\n        <div\n          className={className}\n        >\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendPhotos\"\n              checked={!permissions.sendPhotos}\n              label={lang('UserRestrictionsSendPhotos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendPhotos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendVideos\"\n              checked={!permissions.sendVideos}\n              label={lang('UserRestrictionsSendVideos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendVideos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendStickers')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendAudios\"\n              checked={!permissions.sendAudios}\n              label={lang('UserRestrictionsSendMusic')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendAudios')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendDocs\"\n              checked={!permissions.sendDocs}\n              label={lang('UserRestrictionsSendFiles')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendDocs')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendVoices\"\n              checked={!permissions.sendVoices}\n              label={lang('UserRestrictionsSendVoices')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendVoices')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendRoundvideos\"\n              checked={!permissions.sendRoundvideos}\n              label={lang('UserRestrictionsSendRound')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendRoundvideos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('embedLinks')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendPolls')}\n            />\n          </div>\n        </div>\n      </div>\n      <div className={shiftedClassName}>\n        <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n          <Checkbox\n            name=\"inviteUsers\"\n            checked={!permissions.inviteUsers}\n            label={lang('UserRestrictionsInviteUsers')}\n            blocking\n            permissionGroup={permissionGroup}\n            onChange={handlePermissionChange}\n            disabled={getControlIsDisabled && getControlIsDisabled('inviteUsers')}\n          />\n        </div>\n        <div\n          className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}\n          onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n        >\n          <Checkbox\n            name=\"pinMessages\"\n            checked={!permissions.pinMessages}\n            label={lang('UserRestrictionsPinMessages')}\n            disabled={getControlIsDisabled ? getControlIsDisabled('pinMessages')\n              : shouldDisablePermissionForPublicGroup}\n            blocking\n            permissionGroup={permissionGroup}\n            onChange={handlePermissionChange}\n          />\n        </div>\n        <div\n          className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}\n          onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n        >\n          <Checkbox\n            name=\"changeInfo\"\n            checked={!permissions.changeInfo}\n            label={lang('UserRestrictionsChangeInfo')}\n            blocking\n            permissionGroup={permissionGroup}\n            disabled={getControlIsDisabled ? getControlIsDisabled('changeInfo')\n              : shouldDisablePermissionForPublicGroup}\n            onChange={handlePermissionChange}\n          />\n        </div>\n        {isForum && (\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"manageTopics\"\n              checked={!permissions.manageTopics}\n              label={lang('CreateTopicsPermission')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('manageTopics')}\n            />\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const fullInfo = chat && selectChatFullInfo(global, chat.id);\n    const hasLinkedChat = Boolean(fullInfo?.linkedChatId);\n\n    return {\n      chat,\n      hasLinkedChat,\n    };\n  },\n)(PermissionCheckboxList));\n","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"_YNfwDqt\",\"root\":\"SeaF_shb\",\"container\":\"axa67kqo\",\"title\":\"U4IFhV0a\",\"singleTitle\":\"qd6OFHiG\",\"actionTitle\":\"yGhFKTl5\",\"restrictionTitle\":\"t3KOsBfm\",\"button\":\"goI3MITH\",\"options\":\"b6847Kh3\",\"dropdownList\":\"czTjjKim\",\"dialogButtons\":\"JTT_DIRv\",\"proceedButtons\":\"L4YzeG91\",\"restrictionContainer\":\"iv0u9Zw6\",\"restrictionContainerOpen\":\"qCQftA04\",\"dropdownListOpen\":\"Ifpyv7Jp\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../api/types';\nimport type { IRadioOption } from '../ui/CheckboxGroup';\n\nimport {\n  getHasAdminRight,\n  getPrivateChatUserId,\n  getUserFirstOrLastName, isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isSystemBot,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  getSendersFromSelectedMessages,\n  selectBot,\n  selectCanDeleteSelectedMessages,\n  selectChat,\n  selectChatFullInfo, selectIsChatWithBot,\n  selectSenderFromMessage,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\nimport { buildCollectionByCallback, unique } from '../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useManagePermissions from '../right/hooks/useManagePermissions';\n\nimport PermissionCheckboxList from '../main/PermissionCheckboxList';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport CheckboxGroup from '../ui/CheckboxGroup';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Avatar from './Avatar';\nimport AvatarList from './AvatarList';\nimport Icon from './icons/Icon';\n\nimport styles from './DeleteMessageModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isGroup?: boolean;\n  isChannel?: boolean;\n  isSuperGroup?: boolean;\n  messageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  currentUserId?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n  chatBot?: boolean;\n  isSchedule?: boolean;\n  onConfirm?: NoneToVoidFunction;\n  canBanUsers?: boolean;\n  isCreator?: boolean;\n  linkedChatId?: string;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chat,\n  isChannel,\n  isSuperGroup,\n  isSchedule,\n  currentUserId,\n  messageIds,\n  isCreator,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onConfirm,\n  chatBot,\n  adminMembersById,\n  canBanUsers,\n  linkedChatId,\n}) => {\n  const {\n    closeDeleteMessageModal,\n    deleteMessages,\n    reportChannelSpam,\n    deleteChatMember,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n    updateChatMemberBannedRights,\n    deleteParticipantHistory,\n  } = getActions();\n\n  const prevIsOpen = usePreviousDeprecated(isOpen);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    permissions, havePermissionChanged, handlePermissionChange, resetPermissions,\n  } = useManagePermissions(chat?.defaultBannedRights);\n\n  const [peerIdsToDeleteAll, setPeerIdsToDeleteAll] = useState<string[]>([]);\n  const [peerIdsToBan, setPeerIdsToBan] = useState<string[]>([]);\n  const [peerIdsToReportSpam, setPeerIdsToReportSpam] = useState<string[]>([]);\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const [isAdditionalOptionsVisible, setIsAdditionalOptionsVisible] = useState(false);\n  const [shouldDeleteForAll, setShouldDeleteForAll] = useState(true);\n\n  const peerList = useMemo(() => {\n    if (isChannel || !messageIds || !chat) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const global = getGlobal();\n    const senderArray = getSendersFromSelectedMessages(global, chat.id, messageIds);\n    return senderArray ? unique(senderArray)\n      .filter((peer) => peer?.id !== chat?.id && peer?.id !== linkedChatId) : MEMO_EMPTY_ARRAY;\n  }, [chat, isChannel, linkedChatId, messageIds]);\n\n  const buildNestedOptionListWithAvatars = useLastCallback(() => {\n    return peerList.map((member) => {\n      return {\n        value: member.id,\n        label: getPeerTitle(lang, member) || '',\n        leftElement: <Avatar size=\"small\" peer={member} />,\n      };\n    });\n  });\n\n  const peerListToDeleteAll = useMemo(() => {\n    return peerList.filter((peer) => peer.id !== linkedChatId && peer.id !== currentUserId);\n  }, [peerList, currentUserId, linkedChatId]);\n\n  const peerListToReportSpam = useMemo(() => {\n    return peerList.filter((peer) => peer.id !== currentUserId && peer.id !== linkedChatId);\n  }, [peerList, currentUserId, linkedChatId]);\n\n  const peerListToBan = useMemo(() => {\n    const isCurrentUserInList = peerList.some((peer) => peer.id === currentUserId);\n    const shouldReturnEmpty = !canBanUsers || isCurrentUserInList;\n\n    if (shouldReturnEmpty) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return peerList.filter((peer) => {\n      const isAdmin = adminMembersById?.[peer.id];\n      return isCreator || !isAdmin;\n    });\n  }, [peerList, isCreator, currentUserId, canBanUsers, adminMembersById]);\n\n  const shouldShowAdditionalOptions = useMemo(() => {\n    return Boolean(peerListToDeleteAll.length || peerListToReportSpam.length || peerListToBan.length);\n  }, [peerListToDeleteAll, peerListToReportSpam, peerListToBan]);\n\n  const shouldShowOption = shouldShowAdditionalOptions\n    && !canDeleteForAll && !isSchedule && isSuperGroup;\n\n  const peerNames = useMemo(() => {\n    if (!peerList || isSchedule) return {};\n    return buildCollectionByCallback(peerList, (peer) => [peer.id, getPeerTitle(lang, peer)]);\n  }, [isSchedule, lang, peerList]);\n\n  const ACTION_SPAM_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'spam' : peerList?.[0]?.id,\n        label: oldLang('ReportSpamTitle'),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars().filter((opt) => opt.value !== linkedChatId\n            && opt.value !== currentUserId),\n        ] : undefined,\n      },\n    ];\n  }, [messageIds, peerList, oldLang, linkedChatId, currentUserId]);\n\n  const ACTION_DELETE_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'delete_all' : peerList?.[0]?.id,\n        label: messageIds && peerList.length >= 2\n          ? oldLang('DeleteAllFromUsers')\n          : oldLang('DeleteAllFrom', Object.values(peerNames)[0]),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars().filter((opt) => opt.value !== linkedChatId\n            && opt.value !== currentUserId),\n        ] : undefined,\n      },\n    ];\n  }, [messageIds, peerList, oldLang, peerNames, linkedChatId, currentUserId]);\n\n  const ACTION_BAN_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'ban' : peerList?.[0]?.id,\n        label: messageIds && peerList.length >= 2\n          ? (isAdditionalOptionsVisible ? oldLang('DeleteRestrictUsers') : oldLang('DeleteBanUsers'))\n          : (isAdditionalOptionsVisible ? oldLang('KickFromSupergroup')\n            : oldLang('DeleteBan', Object.values(peerNames)[0])),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars(),\n        ] : undefined,\n      },\n    ];\n  }, [isAdditionalOptionsVisible, oldLang, messageIds, peerList, peerNames]);\n\n  const toggleAdditionalOptions = useLastCallback(() => {\n    setIsAdditionalOptionsVisible((prev) => !prev);\n  });\n\n  const filterMessageIdByPeerId = useLastCallback((peerIds: string[], selectedMessageIdList: number[]) => {\n    if (!chat) return MEMO_EMPTY_ARRAY;\n    const global = getGlobal();\n    return selectedMessageIdList.filter((msgId) => {\n      const sender = selectSenderFromMessage(global, chat.id, msgId);\n      return sender && peerIds.includes(sender.id);\n    });\n  });\n\n  const handleReportSpam = useLastCallback((userMessagesMap: Record<string, number[]>) => {\n    Object.entries(userMessagesMap).forEach(([userId, messageIdList]) => {\n      if (messageIdList.length) {\n        reportChannelSpam({\n          participantId: userId,\n          chatId: chat!.id,\n          messageIds: messageIdList,\n        });\n      }\n    });\n  });\n\n  const handleDeleteMessages = useLastCallback((filteredMessageIdList: number[]) => {\n    deleteMessages({ messageIds: filteredMessageIdList, shouldDeleteForAll: true });\n  });\n\n  const handleDeleteAllPeerMessages = useLastCallback((peerIdList: string[]) => {\n    if (!chat) return;\n    peerIdList.forEach((peerId) => {\n      deleteParticipantHistory({ peerId, chatId: chat.id });\n    });\n  });\n\n  const handleDeleteMember = useLastCallback((filteredUserIdList: string[]) => {\n    filteredUserIdList.forEach((userId) => {\n      deleteChatMember({ chatId: chat!.id, userId });\n    });\n  });\n\n  const handleUpdateChatMemberBannedRights = useLastCallback((filteredUserIdList: string[]) => {\n    filteredUserIdList.forEach((userId) => {\n      updateChatMemberBannedRights({\n        chatId: chat!.id,\n        userId,\n        bannedRights: permissions,\n      });\n    });\n  });\n\n  const handleDeleteMessageList = useLastCallback(() => {\n    if (!chat || !messageIds) return;\n\n    onConfirm?.();\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else if (shouldShowOption) {\n      if (peerIdsToReportSpam) {\n        const global = getGlobal();\n        const peerIdList = peerIdsToReportSpam.filter((option) => !Number.isNaN(Number(option)));\n        const messageList = messageIds.reduce<Record<string, number[]>>((acc, msgId) => {\n          const peer = selectSenderFromMessage(global, chat.id, msgId);\n          if (peer && peerIdList.includes(peer.id)) {\n            if (!acc[peer.id]) {\n              acc[peer.id] = [];\n            }\n            acc[peer.id].push(Number(msgId));\n          }\n          return acc;\n        }, {});\n\n        handleReportSpam(messageList);\n      }\n\n      if (peerIdsToDeleteAll) {\n        const peerIdList = peerIdsToDeleteAll.filter((option) => !Number.isNaN(Number(option)));\n        handleDeleteAllPeerMessages(peerIdList);\n      }\n\n      if (peerIdsToBan && !havePermissionChanged) {\n        const peerIdList = peerIdsToBan.filter((option) => !Number.isNaN(Number(option)));\n        handleDeleteMember(peerIdList);\n        const filteredMessageIdList = filterMessageIdByPeerId(peerIdList, messageIds);\n        handleDeleteMessages(filteredMessageIdList);\n      }\n\n      if (peerIdsToBan && havePermissionChanged) {\n        const peerIdList = peerIdsToBan.filter((option) => !Number.isNaN(Number(option)));\n        handleUpdateChatMemberBannedRights(peerIdList);\n      }\n\n      if (!peerIdsToReportSpam || !peerIdsToDeleteAll || !peerIdsToBan) {\n        deleteMessages({ messageIds, shouldDeleteForAll });\n      }\n    } else {\n      deleteMessages({ messageIds, shouldDeleteForAll });\n    }\n\n    closeDeleteMessageModal();\n    exitMessageSelectMode();\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    closeDeleteMessageModal();\n  });\n\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      setPeerIdsToReportSpam([]);\n      setPeerIdsToDeleteAll([]);\n      setPeerIdsToBan([]);\n      setShouldDeleteForAll(true);\n      setIsMediaDropdownOpen(false);\n      setIsAdditionalOptionsVisible(false);\n      resetPermissions();\n    }\n  }, [isOpen, prevIsOpen, resetPermissions]);\n\n  function renderHeader() {\n    return (\n      <div\n        className={shouldShowOption && styles.container}\n        dir={oldLang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldShowOption && (\n          <AvatarList\n            size=\"small\"\n            peers={peerList}\n          />\n        )}\n        <h3 className={buildClassName(shouldShowOption ? styles.title : styles.singleTitle)}>\n          {oldLang('Chat.DeleteMessagesConfirmation', messageIds?.length)}\n        </h3>\n      </div>\n    );\n  }\n\n  function renderAdditionalActionOptions() {\n    return (\n      <div className={styles.options}>\n        <CheckboxGroup\n          options={ACTION_SPAM_OPTION}\n          onChange={setPeerIdsToReportSpam}\n          selected={peerIdsToReportSpam}\n          nestedCheckbox={messageIds && peerList.length >= 2}\n        />\n        {peerListToDeleteAll?.length > 0 && (\n          <CheckboxGroup\n            options={ACTION_DELETE_OPTION}\n            onChange={setPeerIdsToDeleteAll}\n            selected={peerIdsToDeleteAll}\n            nestedCheckbox={messageIds && peerList.length >= 2}\n          />\n        )}\n        {peerListToBan?.length > 0 && (\n          <CheckboxGroup\n            options={ACTION_BAN_OPTION}\n            onChange={setPeerIdsToBan}\n            selected={peerIdsToBan}\n            nestedCheckbox={messageIds && peerList.length >= 2}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderPartiallyRestrictedUser() {\n    return (\n      <div className={buildClassName(styles.restrictionContainer,\n        isAdditionalOptionsVisible && styles.restrictionContainerOpen)}\n      >\n        <h3 className={buildClassName(styles.actionTitle, styles.restrictionTitle)}>\n          {oldLang('UserRestrictionsCanDoUsers', peerList.length)}\n        </h3>\n        <PermissionCheckboxList\n          withCheckbox\n          chatId={chat?.id}\n          isMediaDropdownOpen={isMediaDropdownOpen}\n          setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n          handlePermissionChange={handlePermissionChange}\n          permissions={permissions}\n          className={buildClassName(\n            styles.dropdownList,\n            isMediaDropdownOpen && styles.dropdownListOpen,\n          )}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageList}\n      className={styles.root}\n    >\n      <div className={styles.main}>\n        {renderHeader()}\n        {shouldShowOption && (\n          <>\n            <p className={styles.actionTitle}>{oldLang('DeleteAdditionalActions')}</p>\n            {renderAdditionalActionOptions()}\n            {renderPartiallyRestrictedUser()}\n            {\n              peerIdsToBan && canBanUsers ? (\n                <ListItem\n                  narrow\n                  buttonClassName={styles.button}\n                  onClick={toggleAdditionalOptions}\n                >\n                  {oldLang(isAdditionalOptionsVisible ? 'DeleteToggleBanUsers' : 'DeleteToggleRestrictUsers')}\n                  <Icon\n                    name={isAdditionalOptionsVisible ? 'up' : 'down'}\n                    className={buildClassName(styles.button, 'ml-2')}\n                  />\n                </ListItem>\n              ) : setIsAdditionalOptionsVisible(false)\n            }\n          </>\n        )}\n        {(canDeleteForAll || chatBot || !shouldShowOption) && (\n          <>\n            <p>\n              {messageIds && messageIds.length > 1\n                ? lang('AreYouSureDeleteFewMessages') : lang('AreYouSureDeleteSingleMessage')}\n            </p>\n            {willDeleteForCurrentUserOnly && (\n              <p>{oldLang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n            )}\n            {willDeleteForAll && (\n              <p>{oldLang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n            )}\n          </>\n        )}\n        {canDeleteForAll && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={contactName ? renderText(oldLang('DeleteMessagesOptionAlso', contactName))\n              : oldLang('Conversation.DeleteMessagesForEveryone')}\n            checked={shouldDeleteForAll}\n            onCheck={setShouldDeleteForAll}\n          />\n        )}\n        <div className={buildClassName('dialog-buttons',\n          isMediaDropdownOpen ? styles.dialogButtons : styles.proceedButtons)}\n        >\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageList}>\n            {shouldShowOption ? oldLang('DeleteProceedBtn') : lang('Delete')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={onCloseHandler}>{oldLang('Cancel')}</Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      deleteMessageModal,\n    } = selectTabState(global);\n    const messageIds = deleteMessageModal?.messageIds;\n    const chatId = deleteMessageModal?.chatId;\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global, messageIds);\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const linkedChatId = chatFullInfo?.linkedChatId;\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const isSchedule = deleteMessageModal?.isSchedule;\n    const onConfirm = deleteMessageModal?.onConfirm;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n    const chatBot = Boolean(chat && !isSystemBot(chat.id) && selectBot(global, chat.id));\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const canBanUsers = chat && getHasAdminRight(chat, 'banUsers');\n    const isCreator = chat?.isCreator;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const willDeleteForCurrentUserOnly = (chat && isChatBasicGroup(chat) && !canDeleteForAll) || isChatWithBot;\n    const willDeleteForAll = chat && (isChatSuperGroup(chat) || isChannel);\n\n    return {\n      chat,\n      isChannel,\n      isSuperGroup,\n      messageIds,\n      currentUserId: global.currentUserId,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n      adminMembersById,\n      chatBot,\n      canBanUsers,\n      linkedChatId,\n      isSchedule,\n      isCreator,\n      onConfirm,\n    };\n  },\n)(DeleteMessageModal));\n","import { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  getPrivateChatUserId,\n  getUserFirstOrLastName,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport renderText from './helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal = ({\n  isOpen,\n  chatId,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}: OwnProps & StateProps) => {\n  const { pinMessage } = getActions();\n\n  const [shouldPinForAll, setShouldPinForAll] = useState(true);\n\n  const handlePinMessage = useLastCallback(() => {\n    pinMessage({\n      chatId,\n      messageId,\n      isUnpin: false,\n      isOneSide: !shouldPinForAll,\n      isSilent: !shouldPinForAll,\n    });\n    onClose();\n  });\n\n  const lang = useOldLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      {canPinForAll && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          label={contactName ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          checked={shouldPinForAll}\n          onCheck={setShouldPinForAll}\n        />\n      )}\n      <div className=\"dialog-buttons\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive?: boolean) => {\n  function handleCopy(e: KeyboardEvent) {\n    e.preventDefault();\n    getActions().copySelectedMessages();\n  }\n\n  useHotkeys(useMemo(() => (isActive ? {\n    'Mod+C': handleCopy,\n  } : undefined), [isActive]));\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\nimport type { MessageListType } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages, selectCurrentChat,\n  selectCurrentMessageList, selectHasProtectedMessage,\n  selectHasSvg,\n  selectSelectedMessagesCount,\n  selectTabState,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n  shouldWarnAboutSvg?: boolean;\n  hasSvgs?: boolean;\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  chat,\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n  shouldWarnAboutSvg,\n  hasSvgs,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n    reportMessages,\n    openDeleteMessageModal,\n    setSharedSettingOption,\n  } = getActions();\n  const lang = useOldLang();\n\n  useCopySelectedMessages(isActive);\n\n  const [isSvgDialogOpen, openSvgDialog, closeSvgDialog] = useFlag();\n  const [shouldNotWarnAboutSvg, setShouldNotWarnAboutSvg] = useState(false);\n\n  const handleExitMessageSelectMode = useLastCallback(() => {\n    exitMessageSelectMode();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    if (!selectedMessageIds || !chat) return;\n    openDeleteMessageModal({\n      chatId: chat.id,\n      messageIds: selectedMessageIds,\n      isSchedule,\n    });\n  });\n\n  useEffect(() => {\n    return isActive && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? handleDelete : undefined,\n        onDelete: canDeleteMessages ? handleDelete : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, handleDelete, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useLastCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  });\n\n  const handleDownload = useLastCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  });\n\n  const handleMessageDownload = useLastCallback(() => {\n    if (shouldWarnAboutSvg && hasSvgs) {\n      openSvgDialog();\n      return;\n    }\n\n    handleDownload();\n  });\n\n  const handleSvgConfirm = useLastCallback(() => {\n    setSharedSettingOption({ shouldWarnAboutSvg: !shouldNotWarnAboutSvg });\n    closeSvgDialog();\n    handleDownload();\n  });\n\n  const prevSelectedMessagesCount = usePreviousDeprecated(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const openMessageReport = useLastCallback(() => {\n    if (!selectedMessageIds || !chat) return;\n    reportMessages({\n      chatId: chat.id,\n      messageIds: selectedMessageIds,\n    });\n    exitMessageSelectMode();\n  });\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: IconName, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'div-button',\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n        aria-label={label}\n      >\n        <Icon name={icon} />\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div className={className}>\n        <div className=\"MessageSelectToolbar-inner\">\n          <Button\n            color=\"translucent\"\n            round\n            onClick={handleExitMessageSelectMode}\n            ariaLabel=\"Exit select mode\"\n          >\n            <Icon name=\"close\" />\n          </Button>\n          <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n            {formattedMessagesCount}\n          </span>\n\n          {Boolean(selectedMessagesCount) && (\n            <div className=\"MessageSelectToolbar-actions\">\n              {messageListType !== 'scheduled' && canForwardMessages && (\n                renderButton(\n                  'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n                )\n              )}\n              {canReportMessages && (\n                renderButton('flag', lang('Conversation.ReportMessages'), openMessageReport)\n              )}\n              {canDownloadMessages && !hasProtectedMessage && (\n                renderButton('download', lang('lng_media_download'), handleMessageDownload)\n              )}\n              {!hasProtectedMessage && (\n                renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n              )}\n              {canDeleteMessages && (\n                renderButton('delete', lang('EditAdminGroupDeleteMessages'), handleDelete, true)\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isSvgDialogOpen}\n        onClose={closeSvgDialog}\n        confirmHandler={handleSvgConfirm}\n      >\n        {lang('lng_launch_svg_warning')}\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={shouldNotWarnAboutSvg}\n          label={lang('lng_launch_exe_dont_ask')}\n          onCheck={setShouldNotWarnAboutSvg}\n        />\n      </ConfirmDialog>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { shouldWarnAboutSvg } = selectSharedSettings(global);\n    const chat = selectCurrentChat(global);\n\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const hasSvgs = selectedMessageIds && chatId ? selectHasSvg(global, chatId, selectedMessageIds) : false;\n    const isShareMessageModalOpen = tabState.isShareMessageModalShown;\n    const isAnyModalOpen = Boolean(isShareMessageModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall || tabState.reportModal\n      || tabState.deleteMessageModal);\n\n    return {\n      chat,\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n      shouldWarnAboutSvg,\n      hasSvgs,\n    };\n  },\n)(MessageSelectToolbar));\n","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport styles from './SeenByModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  seenByDates?: Record<string, number>;\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nfunction SeenByModal({\n  isOpen,\n  seenByDates,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderingSeenByDates = useCurrentOrPrev(seenByDates, true);\n  const memberIds = useMemo(() => {\n    if (!renderingSeenByDates) {\n      return undefined;\n    }\n\n    const result = Object.keys(renderingSeenByDates);\n    result.sort((leftId, rightId) => renderingSeenByDates[rightId] - renderingSeenByDates[leftId]);\n\n    return result;\n  }, [renderingSeenByDates]);\n\n  const handleClick = useLastCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleCloseSeenByModal = useLastCallback(() => {\n    closeSeenByModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className={buildClassName(styles.modal, 'narrow')}\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {memberIds && memberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo\n              userId={userId}\n              noStatusOrTyping\n              status={formatDateAtTime(lang, renderingSeenByDates![userId] * 1000)}\n              statusIcon=\"message-read\"\n            />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      seenByDates: selectChatMessage(global, chatId, messageId)?.seenByDates,\n    };\n  },\n)(SeenByModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"slqA9gR2\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"tauadiDm\",\"icon\":\"i4wZg_0J\",\"header\":\"MQxuEIRA\",\"desc\":\"AEAN1Au4\",\"separator\":\"sXXb5yOS\",\"button\":\"F7owtTHj\",\"closeButton\":\"i6iFv9YE\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTabState, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\nimport renderText from './helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal, { ANIMATION_DURATION } from '../ui/Modal';\nimport Separator from '../ui/Separator';\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\nimport Icon from './icons/Icon';\n\nimport styles from './PrivacySettingsNoticeModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isReadDate?: boolean;\n};\n\nconst CLOSE_ANIMATION_DURATION = ANIMATION_DURATION + ANIMATION_END_DELAY;\n\nconst PrivacySettingsNoticeModal = ({ isOpen, isReadDate, user }: OwnProps & StateProps) => {\n  const lang = useOldLang();\n  const {\n    updateGlobalPrivacySettings,\n    openPremiumModal,\n    closePrivacySettingsNoticeModal,\n    showNotification,\n    setPrivacyVisibility,\n    loadUser,\n  } = getActions();\n  const userName = getUserFirstOrLastName(user);\n\n  const handleShowReadTime = useLastCallback(() => {\n    updateGlobalPrivacySettings({ shouldHideReadMarks: false });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumReadSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleShowLastSeen = useLastCallback(() => {\n    setPrivacyVisibility({\n      privacyKey: 'lastSeen',\n      visibility: 'everybody',\n      onSuccess: () => loadUser({ userId: user!.id }),\n    });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumLastSeenSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleOpenPremium = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      openPremiumModal({ initialSection: 'last_seen' });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleClose = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n  });\n\n  return (\n    <Modal isSlim isOpen={isOpen} onClose={handleClose}>\n      <div className={styles.container} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className={styles.closeButton}\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={handleClose}\n          ariaLabel=\"Close\"\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <AnimatedIconWithPreview\n          tgsUrl={isReadDate ? LOCAL_TGS_URLS.ReadTime : LOCAL_TGS_URLS.LastSeen}\n          size={84}\n          className={styles.icon}\n          nonInteractive\n          noLoop\n        />\n        <h2 className={styles.header}>\n          {lang(isReadDate ? 'PremiumReadHeader1' : 'PremiumLastSeenHeader1')}\n        </h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(\n              isReadDate ? 'PremiumReadText1' : 'PremiumLastSeenText1Locked',\n              userName,\n            ),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          size=\"smaller\"\n          onClick={isReadDate ? handleShowReadTime : handleShowLastSeen}\n          className={styles.button}\n        >\n          {lang(isReadDate ? 'PremiumReadButton1' : 'PremiumLastSeenButton1')}\n        </Button>\n        <Separator className={styles.separator}>{lang('PremiumOr')}</Separator>\n        <h2 className={styles.header}>{lang('PremiumReadHeader2')}</h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(isReadDate ? 'PremiumReadText2' : 'PremiumLastSeenText2', userName),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          withPremiumGradient\n          size=\"smaller\"\n          onClick={handleOpenPremium}\n          className={styles.button}\n        >\n          {lang('PremiumLastSeenButton2')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(\n  withGlobal<OwnProps>((global): StateProps => {\n    const { chatId, isReadDate } = selectTabState(global).privacySettingsNoticeModal || {};\n    const user = chatId ? selectUser(global, chatId) : undefined;\n\n    return { user, isReadDate };\n  })(PrivacySettingsNoticeModal),\n);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { getReactionKey, isSameReaction } from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\nimport { unique } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\nimport Icon from '../common/icons/Icon';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/reactions/ReactionStaticEmoji';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByDates'> & {\n  chatId?: string;\n  messageId?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByDates,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on chats or users, so we avoid them\n  const chatsById = getGlobal().chats.byId;\n  const usersById = getGlobal().users.byId;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useLastCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    startClosing();\n  });\n\n  const handleClick = useLastCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  });\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const peerIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ peerId }) => peerId);\n    }\n\n    const seenByUserIds = Object.keys(seenByDates || {});\n\n    return unique(reactors?.reactions.map(({ peerId }) => peerId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByDates]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, peerIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={oldLang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n\n            onClick={() => setChosenTab(undefined)}\n          >\n            <Icon name=\"heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(lang, reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(lang, count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={oldLang.isRtl ? 'rtl' : undefined} className=\"reactor-list-wrapper\">\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (peerId) => {\n                const peer = usersById[peerId] || chatsById[peerId];\n\n                const peerReactions = reactors?.reactions.filter((reactor) => reactor.peerId === peerId);\n                const items: React.ReactNode[] = [];\n                const seenByUser = seenByDates?.[peerId];\n\n                peerReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-${getReactionKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <Avatar peer={peer} size=\"medium\" />\n                      <div className=\"info\">\n                        <FullNameTitle peer={peer} withEmojiStatus />\n                        <span className=\"status\" dir=\"auto\">\n                          <Icon name=\"heart-outline\" className=\"status-icon\" />\n                          {formatDateAtTime(oldLang, r.addedDate * 1000)}\n                        </span>\n                      </div>\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n\n                if (!chosenTab && !peerReactions?.length) {\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-seen-by`}\n                      className=\"chat-item-clickable scroll-item small-icon\"\n\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <PrivateChatInfo\n                        userId={peerId}\n                        noStatusOrTyping\n                        avatarSize=\"medium\"\n                        status={seenByUser ? formatDateAtTime(oldLang, seenByUser * 1000) : undefined}\n                        statusIcon=\"message-read\"\n                      />\n                    </ListItem>,\n                  );\n                }\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {oldLang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByDates: message?.seenByDates,\n      availableReactions: global.reactions.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../types';\n\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { IS_ANDROID } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useLastCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  });\n\n  const handleCancelAnimation = useLastCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  });\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      endHeavyAnimation();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceAlways\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport {\n  selectLanguageCode,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\n\nimport styles from './ChatLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst ChatLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const {\n    requestMessageTranslation,\n    closeChatLanguageModal,\n    setSettingOption,\n    requestChatTranslation,\n  } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useOldLang();\n\n  const handleSelect = useLastCallback((langCode: string) => {\n    if (!chatId) return;\n\n    if (messageId) {\n      requestMessageTranslation({ chatId, id: messageId, toLanguageCode: langCode });\n    } else {\n      setSettingOption({ translationLanguage: langCode });\n      requestChatTranslation({ chatId, toLanguageCode: langCode });\n    }\n\n    closeChatLanguageModal();\n  });\n\n  const handleSearch = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  });\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeChatLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={buildClassName(styles.listItem, 'no-icon')}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).chatLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId\n      ? messageId\n        ? selectRequestedMessageTranslationLanguage(global, chatId, messageId)\n        : selectRequestedChatTranslationLanguage(global, chatId)\n      : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(ChatLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aMjNU9gm\",\"list-item\":\"T3An6Hoz\",\"listItem\":\"T3An6Hoz\",\"title\":\"dQ9wwFu1\",\"subtitle\":\"m_J41YYl\",\"languages\":\"r3YNWDQr\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"WEJIbFQj\",\"closeButton\":\"_vwPuDEM\",\"icon\":\"BUiGM8qZ\",\"title\":\"Q3NhXpNI\",\"description\":\"frZbGQ0G\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiCountryCode } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport formatUsername from '../../common/helpers/formatUsername';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './CollectibleInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['collectibleInfoModal'];\n};\n\ntype StateProps = {\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst TOP_ICON_SIZE = 60;\n\nconst CollectibleInfoModal: FC<OwnProps & StateProps> = ({\n  modal,\n  phoneCodeList,\n}) => {\n  const {\n    closeCollectibleInfoModal,\n    openChat,\n    openUrl,\n    showNotification,\n  } = getActions();\n  const lang = useOldLang();\n\n  const isUsername = modal?.type === 'username';\n\n  const handleClose = useLastCallback(() => {\n    closeCollectibleInfoModal();\n  });\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: modal!.peerId });\n    handleClose();\n  });\n\n  const handleOpenUrl = useLastCallback(() => {\n    openUrl({\n      url: modal!.url,\n      shouldSkipModal: true,\n    });\n    handleClose();\n  });\n\n  const handleCopy = useLastCallback(() => {\n    const text = isUsername ? formatUsername(modal.collectible)\n      : formatPhoneNumberWithCode(phoneCodeList, modal!.collectible);\n    copyTextToClipboard(text);\n    showNotification({\n      message: lang(isUsername ? 'UsernameCopied' : 'PhoneCopied'),\n    });\n    handleClose();\n  });\n\n  const title = useMemo(() => {\n    if (!modal) return undefined;\n    const key = isUsername ? 'FragmentUsernameTitle' : 'FragmentPhoneTitle';\n    const formattedCollectible = isUsername\n      ? formatUsername(modal.collectible)\n      : formatPhoneNumberWithCode(phoneCodeList, modal.collectible);\n    return lang(key, formattedCollectible);\n  }, [modal, isUsername, phoneCodeList, lang]);\n\n  const description = useMemo(() => {\n    if (!modal) return undefined;\n    const key = isUsername ? 'FragmentUsernameMessage' : 'FragmentPhoneMessage';\n    const date = formatDateAtTime(lang, modal.purchaseDate * 1000);\n    const currency = formatCurrencyAsString(modal.amount, modal.currency, lang.code);\n    const cryptoCurrency = formatCurrencyAsString(modal.cryptoAmount, modal.cryptoCurrency, lang.code);\n    const paid = `${cryptoCurrency} (${currency})`;\n    return lang(key, [date, paid]);\n  }, [modal, isUsername, lang]);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      isSlim\n      contentClassName={styles.content}\n      onClose={closeCollectibleInfoModal}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className={styles.icon}>\n        <AnimatedIconWithPreview\n          tgsUrl={isUsername ? LOCAL_TGS_URLS.Mention : LOCAL_TGS_URLS.Fragment}\n          size={TOP_ICON_SIZE}\n        />\n      </div>\n      <h3 className={styles.title}>\n        {title && renderText(title, ['simple_markdown'])}\n      </h3>\n      <PeerChip\n        className={styles.chip}\n        peerId={modal?.peerId}\n        forceShowSelf\n        clickArg={modal?.peerId}\n        onClick={handleOpenChat}\n      />\n      <p className={styles.description}>\n        {description && renderText(description, ['simple_markdown'])}\n      </p>\n      <div className=\"dialog-buttons dialog-buttons-centered\">\n        <Button className=\"confirm-dialog-button\" onClick={handleOpenUrl}>\n          {lang('FragmentUsernameOpen')}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleCopy}>\n          {lang(isUsername ? 'FragmentUsernameCopy' : 'FragmentPhoneCopy')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { countryList } = global;\n\n    return {\n      phoneCodeList: countryList.phoneCodes,\n    };\n  },\n)(CollectibleInfoModal));\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { GlobalState, TabState } from '../../../../global/types';\nimport type { ThemeKey } from '../../../../types';\nimport type { SearchResultKey } from '../../../../util/keys/searchResultKey';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\nimport { selectSharedSettings } from '../../../../global/selectors/sharedState';\n\nexport type StateProps = {\n  theme: ThemeKey;\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: SearchResultKey[];\n  searchChatId?: string;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  shouldWarnAboutSvg?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    const { shouldWarnAboutSvg } = selectSharedSettings(global);\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      shouldWarnAboutSvg,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { getIsDownloading, getMessageDownloadableMedia } from '../../../global/helpers';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n\n      const media = getMessageDownloadableMedia(message)!;\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              key={message.date}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            key={message.id}\n          >\n            <Audio\n              key={message.id}\n              theme={theme}\n              message={message}\n              origin={AudioOrigin.Search}\n              senderTitle={getSenderName(lang, message, chatsById, usersById)}\n              date={message.date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n              isDownloading={getIsDownloading(activeDownloads, media)}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  const buttonRef = useRef<HTMLDivElement>();\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectChat, selectIsChatPinned, selectNotifyDefaults, selectNotifyException, selectUser,\n} from '../../../global/selectors';\nimport { isUserId } from '../../../util/entities/ids';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\nimport MuteChatModal from '../MuteChatModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  withOpenAppButton?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n  withOpenAppButton,\n  onClick,\n}) => {\n  const { requestMainWebView } = getActions();\n  const oldLang = useOldLang();\n\n  const [isMuteModalOpen, openMuteModal, closeMuteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n  const [shouldRenderChatFolderModal, markRenderChatFolderModal, unmarkRenderChatFolderModal] = useFlag();\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n\n  const handleChatFolderChange = useCallback(() => {\n    markRenderChatFolderModal();\n    openChatFolderModal();\n  }, [markRenderChatFolderModal, openChatFolderModal]);\n\n  const handleMute = useCallback(() => {\n    markRenderMuteModal();\n    openMuteModal();\n  }, [markRenderMuteModal, openMuteModal]);\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleMute,\n    handleChatFolderChange,\n  }, true);\n\n  const handleClick = useLastCallback(() => {\n    onClick(chatId);\n  });\n\n  const handleOpenApp = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    const theme = extractCurrentThemeParams();\n    requestMainWebView({\n      botId: chatId,\n      peerId: chatId,\n      theme,\n    });\n  });\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo\n          userId={chatId}\n          withUsername={withUsername}\n          withStory\n          avatarSize=\"medium\"\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      ) : (\n        <GroupChatInfo\n          chatId={chatId}\n          withUsername={withUsername}\n          avatarSize=\"medium\"\n          withStory\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      )}\n      {withOpenAppButton && user?.hasMainMiniApp && (\n        <Button\n          className=\"ChatBadge miniapp\"\n          pill\n          fluid\n          size=\"tiny\"\n          onClick={handleOpenApp}\n        >\n          {oldLang('BotOpen')}\n        </Button>\n      )}\n      {shouldRenderMuteModal && (\n        <MuteChatModal\n          isOpen={isMuteModalOpen}\n          onClose={closeMuteModal}\n          onCloseAnimationEnd={unmarkRenderMuteModal}\n          chatId={chatId}\n        />\n      )}\n      {shouldRenderChatFolderModal && (\n        <ChatFolderModal\n          isOpen={isChatFolderModalOpen}\n          onClose={closeChatFolderModal}\n          onCloseAnimationEnd={unmarkRenderChatFolderModal}\n          chatId={chatId}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const user = selectUser(global, chatId);\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat && getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id));\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype StateProps = {\n  isLoading?: boolean;\n  foundIds?: string[];\n  recentBotIds?: string[];\n};\n\nconst LESS_LIST_ITEMS_AMOUNT = 5;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst BotAppResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  foundIds,\n  recentBotIds,\n}) => {\n  const {\n    searchPopularBotApps,\n    openChatWithInfo,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const [shouldShowMoreMine, setShouldShowMoreMine] = useState<boolean>(false);\n\n  const filteredFoundIds = useMemo(() => {\n    if (!foundIds) return [];\n    const recentSet = new Set(recentBotIds);\n    const withoutRecent = foundIds.filter((id) => !recentSet.has(id));\n\n    return filterPeersByQuery({ ids: withoutRecent, query: searchQuery, type: 'user' });\n  }, [foundIds, recentBotIds, searchQuery]);\n\n  const handleChatClick = useLastCallback((id: string) => {\n    openChatWithInfo({ id, shouldReplaceHistory: true });\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchPopularBotApps();\n      });\n    }\n  }, []);\n\n  const handleToggleShowMoreMine = useLastCallback(() => {\n    setShouldShowMoreMine((prev) => !prev);\n  });\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll\"\n        items={canRenderContents ? filteredFoundIds : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && !filteredFoundIds?.length && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && !searchQuery && Boolean(recentBotIds?.length) && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\">\n              {recentBotIds.length > LESS_LIST_ITEMS_AMOUNT && (\n                <Link className=\"Link\" onClick={handleToggleShowMoreMine}>\n                  {lang(shouldShowMoreMine ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n                </Link>\n              )}\n              {lang('SearchAppsMine')}\n            </h3>\n            {recentBotIds.map((id, index) => {\n              if (!shouldShowMoreMine && index >= LESS_LIST_ITEMS_AMOUNT) {\n                return undefined;\n              }\n\n              return (\n                <LeftSearchResultChat\n                  chatId={id}\n                  onClick={handleChatClick}\n                  withOpenAppButton\n                />\n              );\n            })}\n          </div>\n        )}\n        {canRenderContents && Boolean(filteredFoundIds?.length) && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\">{lang('SearchAppsPopular')}</h3>\n            {filteredFoundIds.map((id) => {\n              return (\n                <LeftSearchResultChat\n                  chatId={id}\n                  onClick={handleChatClick}\n                  withOpenAppButton\n                />\n              );\n            })}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  const globalSearch = selectTabState(global).globalSearch;\n  const foundIds = globalSearch.popularBotApps?.peerIds;\n\n  return {\n    isLoading: !foundIds && globalSearch.fetchingStatus?.botApps,\n    foundIds,\n    recentBotIds: global.topBotApps.userIds,\n  };\n})(BotAppResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiMessageOutgoingStatus,\n  ApiUser,\n} from '../../../api/types';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageVideo,\n  getPrivateChatUserId,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  });\n\n  const lang = useOldLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  const peer = privateChatUser || chat;\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        peer={peer}\n        isSavedMessages={privateChatUser?.isSelf}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={peer}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: OldLangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n        draggable={false}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n\n    return {\n      chat,\n      ...(privateChatUserId && { privateChatUser }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport { formatDateToString } from '../../../util/dates/dateFormat';\n\nimport Icon from '../../common/icons/Icon';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <Icon name=\"calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport { selectTopic } from '../../../global/selectors';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport TopicIcon from '../../common/TopicIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const topic = selectTopic(global, chatId, topicId);\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: SearchResultKey[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openThread } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      if (!searchChatId) return;\n      openThread({ chatId: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('Topics')}\n            </h3>\n            {foundTopicIds.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId } } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiSponsoredPeer } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { isUserId } from '../../../util/entities/ids';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport BadgeButton from '../../common/BadgeButton';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport SponsoredMessageContextMenuContainer from '../../middle/message/SponsoredContextMenuContainer';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  sponsoredPeer: ApiSponsoredPeer;\n  observeIntersection?: ObserveFn;\n};\n\nconst LeftSearchResultSponsored: FC<OwnProps> = ({\n  sponsoredPeer,\n  observeIntersection,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const { clickSponsored, viewSponsored, openChat } = getActions();\n  const lang = useLang();\n\n  const {\n    peerId, randomId, additionalInfo, sponsorInfo,\n  } = sponsoredPeer;\n\n  useOnIntersect(ref, observeIntersection, (entry) => {\n    if (entry.intersectionRatio === 1) {\n      viewSponsored({ randomId });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    clickSponsored({ randomId });\n    openChat({ id: peerId });\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const {\n    handleClick: handleBadgeClick,\n    handleMouseDown: handleBadgeMouseDown,\n  } = useFastClick((e: React.MouseEvent) => {\n    e.stopPropagation();\n    handleContextMenu(e);\n  });\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  return (\n    <ListItem\n      ref={ref}\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n      buttonRef={buttonRef}\n    >\n      {isUserId(peerId) ? (\n        <PrivateChatInfo\n          userId={peerId}\n          withUsername\n          withStory\n          avatarSize=\"medium\"\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      ) : (\n        <GroupChatInfo\n          chatId={peerId}\n          withUsername\n          avatarSize=\"medium\"\n          withStory\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      )}\n      <BadgeButton className=\"search-sponsored-badge\" onMouseDown={handleBadgeMouseDown} onClick={handleBadgeClick}>\n        {lang('SponsoredPeerBadge')}\n        <Icon name=\"more\" />\n      </BadgeButton>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(LeftSearchResultSponsored);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  const topUsersRef = useRef<HTMLDivElement>();\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useOldLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers\">\n            {topUserIds.map((userId) => (\n              <div\n                key={userId}\n                className=\"top-peer-item\"\n                onClick={() => handleClick(userId)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <Avatar peer={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3\n            className={buildClassName(\n              'section-heading mt-0 recent-chats-header',\n              !topUserIds && 'without-border',\n            )}\n            dir={lang.isRtl ? 'rtl' : undefined}\n          >\n            {lang('Recent')}\n\n            <Button\n              className=\"clear-recent-chats\"\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel={lang('Clear')}\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <Icon name=\"close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              withOpenAppButton\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageSearchContext, ApiSponsoredPeer } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { ALL_FOLDER_ID, GLOBAL_SUGGESTED_CHANNELS_ID } from '../../../config';\nimport {\n  isChatChannel,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectSimilarChannelIds, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport { unique } from '../../../util/iteratees';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport NothingFound from '../../common/NothingFound';\nimport PeerChip from '../../common/PeerChip';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Transition from '../../ui/Transition';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport LeftSearchResultSponsored from './LeftSearchResultSponsored';\nimport RecentContacts from './RecentContacts';\n\nimport './ChatResults.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  isChannelList?: boolean;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  contactIds?: string[];\n  accountPeerIds?: string[];\n  globalPeerIds?: string[];\n  foundIds?: SearchResultKey[];\n  sponsoredPeer?: ApiSponsoredPeer;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  suggestedChannelIds?: string[];\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  isChannelList,\n  searchQuery,\n  searchDate,\n  dateSearchQuery,\n  currentUserId,\n  contactIds,\n  accountPeerIds,\n  globalPeerIds,\n  foundIds,\n  globalMessagesByChatId,\n  fetchingStatus,\n  suggestedChannelIds,\n  sponsoredPeer,\n  onReset,\n  onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal,\n    setGlobalSearchChatId, loadChannelRecommendations,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const chatSelectionRef = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n  const [searchContext, setSearchContext] = useState<ApiMessageSearchContext>('all');\n  const ref = useRef<HTMLDivElement>();\n\n  useEffectOnce(() => {\n    if (isChannelList) loadChannelRecommendations({});\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: isChannelList ? 'channels' : 'text',\n          context: searchContext,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery, searchContext]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  function getSearchContextCaption(context: ApiMessageSearchContext) {\n    if (context === 'users') return lang('PrivateChatsSearchContext');\n    if (context === 'groups') return lang('GroupChatsSearchContext');\n    if (context === 'channels') return lang('ChannelsSearchContext');\n    return lang('AllChatsSearchContext');\n  }\n\n  const {\n    isContextMenuOpen, contextMenuAnchor, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getRootElement = useLastCallback(() => ref.current!);\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.chatResultsContextMenu .bubble'));\n  const getTriggerElement = useLastCallback(() => ref.current!.querySelector('.menuTrigger'));\n\n  const handleClickContext = useLastCallback((e: React.MouseEvent): void => {\n    handleContextMenu(e);\n  });\n\n  const itemPlaceholderClass = buildClassName('icon', 'iconPlaceholder');\n\n  function renderContextMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        getTriggerElement={getTriggerElement}\n        getRootElement={getRootElement}\n        getMenuElement={getMenuElement}\n        className=\"chatResultsContextMenu\"\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n        autoClose\n      >\n        <>\n          <MenuItem\n            icon={searchContext === 'all' ? 'check' : undefined}\n            customIcon={searchContext !== 'all' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('all')}\n          >\n            {getSearchContextCaption('all')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'users' ? 'check' : undefined}\n            customIcon={searchContext !== 'users' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('users')}\n          >\n            {getSearchContextCaption('users')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'groups' ? 'check' : undefined}\n            customIcon={searchContext !== 'groups' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('groups')}\n          >\n            {getSearchContextCaption('groups')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'channels' ? 'check' : undefined}\n            customIcon={searchContext !== 'channels' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('channels')}\n          >\n            {getSearchContextCaption('channels')}\n          </MenuItem>\n        </>\n      </Menu>\n    );\n  }\n\n  const localResults = useMemo(() => {\n    if (!isChannelList && (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2))) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const orderedChatIds = getOrderedIds(ALL_FOLDER_ID) ?? [];\n    const filteredChatIds = orderedChatIds.filter((id) => {\n      if (!isChannelList) return true;\n      const chat = chatsById[id];\n      return chat && isChatChannel(chat);\n    });\n    const localChatIds = filterPeersByQuery({ ids: filteredChatIds, query: searchQuery, type: 'chat' });\n\n    if (isChannelList) return localChatIds;\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(contactIds || []),\n    ];\n\n    const localContactIds = filterPeersByQuery({\n      ids: contactIdsWithMe, query: searchQuery, type: 'user',\n    });\n\n    const localPeerIds = [\n      ...localContactIds,\n      ...localChatIds,\n    ];\n\n    return unique([\n      ...sortChatIds(localPeerIds, undefined, currentUserId ? [currentUserId] : undefined),\n      ...sortChatIds(accountPeerIds || []),\n    ]);\n  }, [searchQuery, currentUserId, contactIds, accountPeerIds, isChannelList]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length || isChannelList, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalPeerIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const filteredIds = globalPeerIds.filter((id) => {\n      if (!isChannelList) return true;\n      const chat = chatsById[id];\n      return chat && isChatChannel(chat);\n    });\n\n    return sortChatIds(filteredIds, true);\n  }, [globalPeerIds, isChannelList, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n        const chat = chatsById[chatId];\n        if (!chat) return undefined;\n        if (isChannelList && !isChatChannel(chat)) return undefined;\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean);\n  }, [searchQuery, searchDate, foundIds, isChannelList, globalMessagesByChatId]);\n\n  useEffect(() => {\n    if (!searchQuery) return;\n    searchMessagesGlobal({\n      type: isChannelList ? 'channels' : 'text',\n      context: searchContext,\n      shouldResetResultsByType: true,\n      shouldCheckFetchingMessagesStatus: true,\n    });\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [searchContext]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const chatsById = getGlobal().chats.byId;\n\n    const text = renderMessageSummary(oldLang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const actualFoundIds = foundMessages;\n\n  const nothingFound = searchContext === 'all' && fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !actualFoundIds.length;\n  const isMessagesFetching = fetchingStatus?.messages;\n\n  const shouldRenderTopPeers = !searchQuery && !searchDate && !isChannelList;\n\n  const { observe } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n    isDisabled: !shouldRenderTopPeers,\n  });\n\n  if (shouldRenderTopPeers) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  const shouldRenderMessagesSection = searchContext === 'all' ? Boolean(actualFoundIds.length) : true;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"LeftSearch--content custom-scroll\"\n      items={actualFoundIds}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={oldLang('ChatList.Search.NoResults')}\n          description={oldLang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && !isChannelList && (\n        <div\n          className=\"chat-selection no-scrollbar\"\n          dir={oldLang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PeerChip\n              peerId={id}\n              className=\"left-search-local-suggestion\"\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {oldLang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {oldLang(isChannelList ? 'SearchMyChannels' : 'DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                withOpenAppButton\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {oldLang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {oldLang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {sponsoredPeer && (\n            <LeftSearchResultSponsored sponsoredPeer={sponsoredPeer} observeIntersection={observe} />\n          )}\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(suggestedChannelIds?.length) && !searchQuery && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n            {oldLang('SearchRecommendedChannels')}\n          </h3>\n          {suggestedChannelIds.map((id) => {\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      <div className=\"menuOwner\" ref={ref}>\n        {renderContextMenu()}\n        {shouldRenderMessagesSection && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n              {!isChannelList && (\n                <Link className=\"Link menuTrigger dropDownLink\" onClick={handleClickContext}>\n                  {lang('SearchContextCaption', {\n                    type: getSearchContextCaption(searchContext),\n                  }, {\n                    withNodes: true,\n                  })}\n\n                  <Transition\n                    name=\"fade\"\n                    shouldCleanup\n                    activeKey={Number(isMessagesFetching)}\n                    className=\"iconContainer\"\n                    slideClassName=\"iconContainerSlide\"\n                  >\n                    {isMessagesFetching && (<Loading />)}\n                    {!isMessagesFetching && <Icon name=\"down\" />}\n                  </Transition>\n                </Link>\n              )}\n              {oldLang('SearchMessages')}\n            </h3>\n            {actualFoundIds.map(renderFoundMessage)}\n          </div>\n        )}\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isChannelList }): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const {\n      currentUserId, messages,\n    } = global;\n\n    if (!contactIds) {\n      return {};\n    }\n\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType, sponsoredPeer,\n    } = selectTabState(global).globalSearch;\n    const { peerIds: globalPeerIds } = globalResults || {};\n    const { peerIds: accountPeerIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.[isChannelList ? 'channels' : 'text']?.foundIds;\n    const { similarChannelIds } = selectSimilarChannelIds(global, GLOBAL_SUGGESTED_CHANNELS_ID) || {};\n\n    return {\n      currentUserId,\n      contactIds,\n      accountPeerIds,\n      globalPeerIds,\n      foundIds,\n      globalMessagesByChatId,\n      fetchingStatus,\n      sponsoredPeer,\n      suggestedChannelIds: similarChannelIds,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { getIsDownloading, getMessageDocument } from '../../../global/helpers';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Document from '../../common/Document';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  shouldWarnAboutSvg,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n      const message = globalMessagesByChatId[chatId]?.byId[messageId];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              dir={lang.isRtl ? 'rtl' : undefined}\n              key={message.date}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            key={message.id}\n          >\n            <Document\n              document={getMessageDocument(message)!}\n              message={message}\n              withDate\n              datetime={message.date}\n              smaller\n              sender={getSenderName(lang, message, chatsById, usersById)}\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, message.content.document!)}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport NothingFound from '../../common/NothingFound';\nimport WebLink from '../../common/WebLink';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              key={message.date}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            dir={lang.isRtl ? 'rtl' : undefined}\n            key={message.id}\n          >\n            <WebLink\n              key={message.id}\n              message={message}\n              senderTitle={getSenderName(lang, message, chatsById, usersById)}\n              isProtected={isChatProtected || message.isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Media from '../../common/Media';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport ChatMessage from './ChatMessage';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      messageId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch--content LeftSearch--media\">\n      <InfiniteScroll\n        className={classNames}\n        items={canRenderContents ? foundMessages : undefined}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { RegularLangKey } from '../../../types/language';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseDateString } from '../../../util/dates/dateFormat';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport AudioResults from './AudioResults';\nimport BotAppResults from './BotAppResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport ChatResults from './ChatResults';\nimport FileResults from './FileResults';\nimport LinkResults from './LinkResults';\nimport MediaResults from './MediaResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\ntype TabInfo = {\n  type: GlobalSearchContent;\n  key: RegularLangKey;\n};\n\nconst TABS: TabInfo[] = [\n  { type: GlobalSearchContent.ChatList, key: 'SearchTabChats' },\n  { type: GlobalSearchContent.ChannelList, key: 'SearchTabChannels' },\n  { type: GlobalSearchContent.BotApps, key: 'SearchTabApps' },\n  { type: GlobalSearchContent.Media, key: 'SearchTabMedia' },\n  { type: GlobalSearchContent.Links, key: 'SearchTabLinks' },\n  { type: GlobalSearchContent.Files, key: 'SearchTabFiles' },\n  { type: GlobalSearchContent.Music, key: 'SearchTabMusic' },\n  { type: GlobalSearchContent.Voice, key: 'SearchTabVoice' },\n];\n\nconst CHAT_TABS: TabInfo[] = [\n  { type: GlobalSearchContent.ChatList, key: 'SearchTabMessages' },\n  ...TABS.slice(3), // Skip ChatList, ChannelList and BotApps, replaced with All Messages\n];\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const tabs = useMemo(() => {\n    const arr = chatId ? CHAT_TABS : TABS;\n    return arr.map((tab) => ({\n      ...tab,\n      title: lang(tab.key),\n    }));\n  }, [chatId, lang]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    const tab = tabs[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  });\n\n  const handleSearchDateSelect = useLastCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const containerRef = useRef<HTMLDivElement>();\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        renderCount={tabs.length}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n            case GlobalSearchContent.ChannelList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  isChannelList={currentContent === GlobalSearchContent.ChannelList}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.BotApps:\n              return (\n                <BotAppResults\n                  key=\"botApps\"\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaState, TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterPeersByQuery } from '../../../../global/helpers/peers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { unique } from '../../../../util/iteratees';\nimport { CUSTOM_PEER_EXCLUDED_CHAT_TYPES, CUSTOM_PEER_INCLUDED_CHAT_TYPES } from '../../../../util/objects/customPeer';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Loading from '../../../ui/Loading';\n\ntype StateProps = {\n  maxChats: number;\n};\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: VoidFunction;\n  onSaveFilter: VoidFunction;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps & StateProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n  onSaveFilter,\n  maxChats,\n}) => {\n  const lang = useOldLang();\n\n  const { openLimitReachedModal } = getActions();\n\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = useMemo(() => selectChatFilters(state, mode, true), [mode, state]);\n  const chatTypes = mode === 'included' ? CUSTOM_PEER_INCLUDED_CHAT_TYPES : CUSTOM_PEER_EXCLUDED_CHAT_TYPES;\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const shouldHideChatTypes = state.folder.isChatList;\n\n  useEffect(() => {\n    if (!isActive) {\n      setIsTouched(false);\n    }\n  }, [isActive]);\n\n  const displayedIds = useMemo(() => {\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...filterPeersByQuery({ ids: chatIds, query: chatFilter, type: 'chat' }),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, chatFilter]);\n\n  const handleFilterChange = useLastCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n    setIsTouched(true);\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    if (mode === 'included') {\n      if (ids.length >= maxChats) {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n    setIsTouched(true);\n  });\n\n  const handleSelectedChatTypesChange = useLastCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n    setIsTouched(true);\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <div className=\"Picker settings-folders-chat-list\">\n      <PeerPicker\n        categories={shouldHideChatTypes ? undefined : chatTypes}\n        itemIds={displayedIds}\n        selectedIds={selectedChatIds}\n        selectedCategories={selectedChatTypes}\n        filterValue={chatFilter}\n        filterPlaceholder={lang('Search')}\n        categoryPlaceholderKey=\"FilterChatTypes\"\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        withDefaultPadding\n        withPeerTypes\n        allowMultiple\n        itemInputType=\"checkbox\"\n        onSelectedIdsChange={handleSelectedIdsChange}\n        onSelectedCategoriesChange={handleSelectedChatTypesChange}\n        onFilterChange={handleFilterChange}\n      />\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={onSaveFilter}\n        ariaLabel={lang('Save')}\n      >\n        <Icon name=\"check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatFilters));\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatlistExportedInvite } from '../../../../api/types';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { selectCanShareFolder } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { isUserId } from '../../../../util/entities/ids';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { CUSTOM_PEER_EXCLUDED_CHAT_TYPES, CUSTOM_PEER_INCLUDED_CHAT_TYPES } from '../../../../util/objects/customPeer';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport Icon from '../../../common/icons/Icon';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: VoidFunction;\n  onAddExcludedChats: VoidFunction;\n  onShareFolder: VoidFunction;\n  onOpenInvite: (url: string) => void;\n  isActive?: boolean;\n  isOnlyInvites?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n  onSaveFolder: (cb?: VoidFunction) => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  invites?: ApiChatlistExportedInvite[];\n  isRemoved?: boolean;\n  maxInviteLinks: number;\n  maxChatLists: number;\n  chatListCount: number;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nexport const ERROR_NO_TITLE = 'Please provide a title for this folder.';\nexport const ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  onShareFolder,\n  onOpenInvite,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  isOnlyInvites,\n  loadedArchivedChatIds,\n  invites,\n  maxInviteLinks,\n  maxChatLists,\n  chatListCount,\n  onSaveFolder,\n}) => {\n  const {\n    loadChatlistInvites,\n    openLimitReachedModal,\n    showNotification,\n  } = getActions();\n\n  const isCreating = state.mode === 'create';\n  const isEditingChatList = state.folder.isChatList;\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  useEffect(() => {\n    if (isActive && state.folderId && state.folder.isChatList) {\n      loadChatlistInvites({ folderId: state.folderId });\n    }\n  }, [isActive, state.folder.isChatList, state.folderId]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = useMemo(() => selectChatFilters(state, 'included'), [state]);\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = useMemo(() => selectChatFilters(state, 'excluded'), [state]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    dispatch({ type: 'setIsLoading', payload: true });\n\n    onSaveFolder(() => {\n      setTimeout(() => {\n        onReset();\n      }, SUBMIT_TIMEOUT);\n    });\n  }, [dispatch, onSaveFolder, onReset]);\n\n  const handleCreateInviteClick = useCallback(() => {\n    if (!invites) {\n      if (isCreating) {\n        onSaveFolder(onShareFolder);\n      }\n      return;\n    }\n\n    // Ignoring global updates is a known drawback here\n    if (!selectCanShareFolder(getGlobal(), state.folderId!)) {\n      showNotification({ message: lang('ChatList.Filter.InviteLink.IncludeExcludeError') });\n      return;\n    }\n\n    if (chatListCount >= maxChatLists && !state.folder.isChatList) {\n      openLimitReachedModal({\n        limit: 'chatlistJoined',\n      });\n      return;\n    }\n\n    if (invites.length < maxInviteLinks) {\n      if (state.isTouched) {\n        onSaveFolder(onShareFolder);\n      } else {\n        onShareFolder();\n      }\n      return;\n    }\n\n    openLimitReachedModal({\n      limit: 'chatlistInvites',\n    });\n  }, [\n    invites, state.folderId, state.isTouched, chatListCount, maxInviteLinks, isCreating, onSaveFolder,\n    onShareFolder, lang, maxChatLists, state.folder.isChatList,\n  ]);\n\n  const handleEditInviteClick = useCallback((e: React.MouseEvent<HTMLElement>, url: string) => {\n    if (state.isTouched) {\n      onSaveFolder(() => onOpenInvite(url));\n    } else {\n      onOpenInvite(url);\n    }\n  }, [onSaveFolder, onOpenInvite, state.isTouched]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? CUSTOM_PEER_INCLUDED_CHAT_TYPES.find(({ type: typeKey }) => typeKey === key)\n      : CUSTOM_PEER_EXCLUDED_CHAT_TYPES.find(({ type: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.type}\n        className=\"settings-folders-list-item mb-1\"\n        narrow\n        inactive\n      >\n        <PrivateChatInfo\n          avatarSize=\"small\"\n          customPeer={chatType}\n        />\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ListItem\n            key=\"load-more\"\n            className=\"settings-folders-list-item\"\n            narrow\n\n            onClick={clickHandler}\n            icon=\"down\"\n          >\n            {lang('FilterShowMoreChats', leftChatsCount, 'i')}\n          </ListItem>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIconWithPreview\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {isCreating && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title.text}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        {!isOnlyInvites && (\n          <div className=\"settings-item\">\n            {state.error && state.error === ERROR_NO_CHATS && (\n              <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang(state.error)}\n              </p>\n            )}\n\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary\"\n              icon=\"add\"\n              narrow\n              onClick={onAddIncludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('included')}\n          </div>\n        )}\n\n        {!isOnlyInvites && !isEditingChatList && (\n          <div className=\"settings-item pt-3\">\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary\"\n              icon=\"add\"\n              narrow\n              onClick={onAddExcludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('excluded')}\n          </div>\n        )}\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FolderLinkScreen.Title')}\n          </h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary\"\n            icon=\"add\"\n            narrow\n            onClick={handleCreateInviteClick}\n          >\n            {lang('ChatListFilter.CreateLinkNew')}\n          </ListItem>\n\n          {invites?.map((invite) => (\n            <ListItem\n              className=\"settings-folders-list-item\"\n              icon=\"link\"\n              narrow\n              multiline\n              onClick={handleEditInviteClick}\n              clickArg={invite.url}\n            >\n              <span className=\"title\" dir=\"auto\">{invite.title || invite.url}</span>\n              <span className=\"subtitle\">\n                {lang('ChatListFilter.LinkLabelChatCount', invite.peerIds.length, 'i')}\n              </span>\n            </ListItem>\n          ))}\n\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId, invites } = global.chatFolders;\n    const chatListCount = Object.values(byId).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      invites: state.folderId ? (invites[state.folderId] || MEMO_EMPTY_ARRAY) : undefined,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n      maxInviteLinks: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      chatListCount,\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { isBetween } from '../../../../util/math';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../../hooks/usePreviousDeprecated';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Icon from '../../../common/icons/Icon';\nimport Button from '../../../ui/Button';\nimport Draggable from '../../../ui/Draggable';\nimport ListItem from '../../../ui/ListItem';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 56;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePreviousDeprecated(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: {\n            text: lang('FilterAllChats'),\n            entities: [],\n          },\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n        isChatList: folder.isChatList,\n        noTitleAnimations: folder.noTitleAnimations,\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIconWithPreview\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"settings-button with-icon\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <Icon name=\"add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"drag-item no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                    allowSelection\n                  >\n                    <span className=\"title\">\n                      {renderTextWithEntities({\n                        text: folder.title.text,\n                        entities: folder.title.entities,\n                        noCustomEmojiPlayback: folder.noTitleAnimations,\n                      })}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"drag-item no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderTextWithEntities({\n                      text: folder.title.text,\n                      entities: folder.title.entities,\n                      noCustomEmojiPlayback: folder.noTitleAnimations,\n                    })}\n                    {isBlocked && <Icon name=\"lock-badge\" className=\"settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">\n                    {folder.isChatList && <Icon name=\"link\" className=\"mr-1\" />}\n                    {folder.subtitle}\n                  </span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              narrow\n\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">\n                    {renderTextWithEntities({\n                      text: folder.title.text,\n                      entities: folder.title.entities,\n                      noCustomEmojiPlayback: folder.noTitleAnimations,\n                    })}\n                  </span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { isChatChannel, isUserBot } from '../../../../global/helpers';\nimport {\n  selectCanInviteToChat, selectChat,\n  selectChatFolder,\n  selectTabState, selectUser,\n} from '../../../../global/selectors';\nimport { partition } from '../../../../util/iteratees';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Icon from '../../../common/icons/Icon';\nimport LinkField from '../../../common/LinkField';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  folderId?: number;\n  folder?: ApiChatFolder;\n  peerIds?: string[];\n  url?: string;\n  isLoading?: boolean;\n};\n\nconst SettingsShareChatlist: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  folderId,\n  folder,\n  peerIds,\n  url,\n  isLoading,\n}) => {\n  const {\n    createChatlistInvite, deleteChatlistInvite, editChatlistInvite, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (!isLoading) {\n      setIsTouched(false);\n    }\n  }, [isLoading]);\n\n  useEffect(() => {\n    if (!url && folderId && isActive) {\n      createChatlistInvite({ folderId });\n    }\n  }, [folderId, isActive, url]);\n\n  const handleRevoke = useLastCallback(() => {\n    if (!url || !folderId) return;\n\n    deleteChatlistInvite({ folderId, url });\n    onReset();\n  });\n\n  const itemIds = useMemo(() => {\n    return (folder?.includedChatIds || []).concat(folder?.pinnedChatIds || []);\n  }, [folder?.includedChatIds, folder?.pinnedChatIds]);\n\n  const [unlockedIds, lockedIds] = useMemo(() => {\n    const global = getGlobal();\n    return partition(itemIds, (id) => selectCanInviteToChat(global, id));\n  }, [itemIds]);\n\n  const [selectedIds, setSelectedIds] = useState<string[]>(peerIds || []);\n\n  const isFirstRenderRef = useRef(true);\n  useEffectWithPrevDeps(([prevUrl]) => {\n    if (prevUrl !== url) {\n      isFirstRenderRef.current = true;\n    }\n    if (!isFirstRenderRef.current) return;\n    isFirstRenderRef.current = false;\n    if (!url) {\n      setSelectedIds(unlockedIds);\n    } else if (peerIds) {\n      setSelectedIds(peerIds);\n    }\n  }, [url, unlockedIds, peerIds]);\n\n  const handleClickDisabled = useLastCallback((id: string) => {\n    const global = getGlobal();\n    const user = selectUser(global, id);\n    const chat = selectChat(global, id);\n    if (user && isUserBot(user)) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailableBot'),\n      });\n    } else if (user) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailableUser'),\n      });\n    } else if (chat && isChatChannel(chat)) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailablePublicChannel'),\n      });\n    } else {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailablePublicGroup'),\n      });\n    }\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    setSelectedIds(ids);\n    setIsTouched(true);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    if (!folderId || !url || !isTouched) return;\n    editChatlistInvite({ folderId, peerIds: selectedIds, url });\n  });\n\n  const chatsCount = selectedIds.length;\n  const isDisabled = !chatsCount || isLoading;\n\n  return (\n    <div className=\"settings-content no-border custom-scroll SettingsFoldersChatsPicker\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersShare}\n          className=\"settings-content-icon\"\n        />\n\n        {folder && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('FolderLinkTitleDescription', {\n              folder: renderTextWithEntities({\n                text: folder.title.text,\n                entities: folder.title.entities,\n                noCustomEmojiPlayback: folder.noTitleAnimations,\n              }),\n              chats: lang('FolderLinkTitleDescriptionChats', { count: chatsCount }, { pluralValue: chatsCount }),\n            }, {\n              withMarkdown: true,\n              withNodes: true,\n            })}\n          </p>\n        )}\n      </div>\n\n      <LinkField\n        className=\"settings-item\"\n        link={!url ? oldLang('Loading') : url}\n        withShare\n        onRevoke={handleRevoke}\n        isDisabled={!chatsCount || isTouched}\n      />\n\n      <div className=\"settings-item settings-item-picker\">\n        <PeerPicker\n          itemIds={itemIds}\n          lockedUnselectedIds={lockedIds}\n          onSelectedIdsChange={handleSelectedIdsChange}\n          selectedIds={selectedIds}\n          onDisabledClick={handleClickDisabled}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n\n      <FloatingActionButton\n        isShown={isLoading || isTouched}\n        disabled={isDisabled}\n        onClick={handleSubmit}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { folderId, url, isLoading } = selectTabState(global).shareFolderScreen || {};\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n    const invite = folderId ? global.chatFolders.invites[folderId]?.find((i) => i.url === url) : undefined;\n\n    return {\n      folderId,\n      folder,\n      url,\n      isLoading,\n      peerIds: invite?.peerIds,\n    };\n  },\n)(SettingsShareChatlist));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\nimport SettingsFoldersEdit, { ERROR_NO_CHATS, ERROR_NO_TITLE } from './SettingsFoldersEdit';\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsShareChatlist from './SettingsShareChatlist';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const {\n    openShareChatFolderModal,\n    editChatFolder,\n    addChatFolder,\n    openSettingsScreen,\n  } = getActions();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n      } else {\n        openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n      }\n      return;\n    }\n\n    onReset();\n  }, [state.mode, dispatch, currentScreen, onReset]);\n\n  const isCreating = state.mode === 'create';\n\n  const saveState = useCallback((newState: FoldersState) => {\n    const { title } = newState.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return false;\n    }\n\n    const {\n      selectedChatIds: includedChatIds,\n      selectedChatTypes: includedChatTypes,\n    } = selectChatFilters(newState, 'included');\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return false;\n    }\n\n    if (!isCreating) {\n      editChatFolder({ id: newState.folderId!, folderUpdate: newState.folder });\n    } else {\n      addChatFolder({ folder: newState.folder as ApiChatFolder });\n    }\n\n    dispatch({ type: 'setError', payload: undefined });\n    dispatch({ type: 'setIsTouched', payload: false });\n\n    return true;\n  }, [dispatch, isCreating]);\n\n  const handleSaveFolder = useCallback((cb?: NoneToVoidFunction) => {\n    if (!saveState(state)) {\n      return;\n    }\n    cb?.();\n  }, [saveState, state]);\n\n  const handleSaveFilter = useCallback(() => {\n    const newState = dispatch({ type: 'saveFilters' });\n    handleReset();\n    saveState(newState);\n  }, [dispatch, handleReset, saveState]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n  }, [dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n  }, [dispatch]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    openSettingsScreen({\n      screen: currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n        ? SettingsScreens.FoldersIncludedChatsFromChatList\n        : SettingsScreens.FoldersIncludedChats,\n    });\n  }, [currentScreen, dispatch]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    openSettingsScreen({\n      screen: currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n        ? SettingsScreens.FoldersExcludedChatsFromChatList\n        : SettingsScreens.FoldersExcludedChats,\n    });\n  }, [currentScreen, dispatch]);\n\n  const handleShareFolder = useCallback(() => {\n    openShareChatFolderModal({ folderId: state.folderId!, noRequestNextScreen: true });\n    dispatch({ type: 'setIsChatlist', payload: true });\n    openSettingsScreen({ screen: SettingsScreens.FoldersShare });\n  }, [dispatch, state.folderId]);\n\n  const handleOpenInvite = useCallback((url: string) => {\n    openShareChatFolderModal({ folderId: state.folderId!, url, noRequestNextScreen: true });\n    openSettingsScreen({ screen: SettingsScreens.FoldersShare });\n  }, [state.folderId]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n    case SettingsScreens.FoldersEditFolderInvites:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onShareFolder={handleShareFolder}\n          onOpenInvite={handleOpenInvite}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          isOnlyInvites={currentScreen === SettingsScreens.FoldersEditFolderInvites}\n          onBack={onReset}\n          onSaveFolder={handleSaveFolder}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n\n    case SettingsScreens.FoldersShare:\n      return (\n        <SettingsShareChatlist\n          isActive={isActive}\n          onReset={handleReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PasswordForm from '../../common/PasswordForm';\nimport PasswordMonkey from '../../common/PasswordMonkey';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useOldLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"edit\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeCurrent })}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PasscodeTurnOff })}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram Web A.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram Web A and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { decryptSession } from '../../../../util/passcode';\n\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n    openSettingsScreen,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscode });\n  }, [onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscodeConfirm });\n  }, [onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    openSettingsScreen({ screen: SettingsScreens.PasscodeCongratulations });\n  }, [onSetPasscode, passcode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeNew });\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onSetPasscode]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeConfirm });\n  }, [onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      openSettingsScreen({ screen: SettingsScreens.Privacy });\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsText } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../icons/Icon';\n\ntype OwnProps = {\n  min?: number;\n  max: number;\n  value: number;\n  disabled?: boolean;\n  readOnly?: boolean;\n  bold?: boolean;\n  className?: string;\n  defaultValue: number;\n  onChange: (value: number) => void;\n  canChangeChargeForMessages?: boolean;\n};\n\nconst DEFAULT_POINTS = [50, 100, 500, 1000, 2000, 5000, 10000];\n\nconst PaidMessageSlider: FC<OwnProps> = ({\n  min = 0,\n  max,\n  value,\n  disabled,\n  readOnly,\n  bold,\n  className,\n  defaultValue,\n  onChange,\n  canChangeChargeForMessages,\n}) => {\n  const lang = useLang();\n\n  const points = useMemo(() => {\n    const result = [];\n    for (let i = 0; i < DEFAULT_POINTS.length; i++) {\n      if (DEFAULT_POINTS[i] < max) {\n        result.push(DEFAULT_POINTS[i]);\n      }\n\n      if (DEFAULT_POINTS[i] >= max) {\n        result.push(max);\n        break;\n      }\n    }\n\n    return result;\n  }, [max]);\n\n  const handleChange = useLastCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = Number(event.currentTarget.value);\n    onChange(getValue(points, newValue));\n  });\n\n  const mainClassName = buildClassName(\n    className,\n    'RangeSlider',\n    disabled && 'disabled',\n    readOnly && 'readOnly',\n    bold && 'bold',\n  );\n\n  function renderTopRow() {\n    return (\n      <div className=\"slider-top-row\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"value-min\" dir=\"auto\">{lang.number(min)}</span>\n        <span className=\"settings-range-value\">\n          {!canChangeChargeForMessages && (<Icon name=\"lock-badge\" />)}\n          {formatStarsAsText(lang, getValue(points, getProgress(points, value)))}\n        </span>\n        <span className=\"value-max\" dir=\"auto\">{lang.number(max)}</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className={mainClassName}>\n      {renderTopRow()}\n      <div className=\"slider-main\">\n        <div\n          className=\"slider-fill-track\"\n          style={`width: ${(getProgress(points, value) / points.length) * 100}%`}\n        />\n        <input\n          min={0}\n          max={points.length}\n          defaultValue={getProgress(points, defaultValue)}\n          step=\"any\"\n          type=\"range\"\n          className=\"RangeSlider__input\"\n          onChange={handleChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction getProgress(points: number[], value: number) {\n  const pointIndex = points.findIndex((point) => value <= point);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const progress = (value - prevPoint) / (nextPoint - prevPoint);\n  return pointIndex + progress;\n}\n\nfunction getValue(points: number[], progress: number) {\n  const pointIndex = Math.floor(progress);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const pointValue = prevPoint + (nextPoint - prevPoint) * (progress - pointIndex);\n  return pointValue < 100 ? Math.round(pointValue) : Math.round(pointValue / 10) * 10;\n}\n\nexport default memo(PaidMessageSlider);\n","import {\n  memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport {\n  DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES,\n  MINIMUM_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatPercent } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Icon from '../icons/Icon';\nimport PaidMessageSlider from './PaidMessageSlider';\n\ntype OwnProps = {\n  chargeForMessages: number;\n  canChangeChargeForMessages?: boolean;\n  isGroupChat?: boolean;\n  onChange: (value: number) => void;\n};\n\ntype StateProps = {\n  starsUsdWithdrawRate: number;\n  starsPaidMessageAmountMax: number;\n  starsPaidMessageCommissionPermille: number;\n};\n\nfunction PaidMessagePrice({\n  starsUsdWithdrawRate,\n  starsPaidMessageAmountMax,\n  starsPaidMessageCommissionPermille,\n  canChangeChargeForMessages,\n  isGroupChat,\n  chargeForMessages,\n  onChange,\n}: OwnProps & StateProps) {\n  const { openPremiumModal } = getActions();\n\n  const lang = useLang();\n\n  const handleChargeForMessagesChange = useLastCallback((value: number) => {\n    onChange?.(value);\n  });\n\n  const handleUnlockWithPremium = useLastCallback(() => {\n    openPremiumModal({ initialSection: 'message_privacy' });\n  });\n\n  return (\n    <>\n      <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('SectionTitleStarsForForMessages')}\n      </h4>\n      <PaidMessageSlider\n        defaultValue={chargeForMessages}\n        min={MINIMUM_CHARGE_FOR_MESSAGES}\n        max={starsPaidMessageAmountMax}\n        value={chargeForMessages}\n        onChange={handleChargeForMessagesChange}\n        canChangeChargeForMessages={canChangeChargeForMessages}\n        readOnly={!canChangeChargeForMessages}\n      />\n      {!canChangeChargeForMessages && (\n        <Button\n          color=\"primary\"\n          fluid\n          size=\"smaller\"\n          noForcedUpperCase\n          className=\"settings-unlock-button\"\n          onClick={handleUnlockWithPremium}\n        >\n          <span className=\"settings-unlock-button-title\">\n            {lang('UnlockButtonTitle')}\n            <Icon name=\"lock-badge\" className=\"settings-unlock-button-icon\" />\n          </span>\n        </Button>\n      )}\n      {canChangeChargeForMessages && (\n        <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang(isGroupChat ? 'SetPriceGroupDescription' : 'SectionDescriptionStarsForForMessages', {\n            percent: formatPercent(starsPaidMessageCommissionPermille * 100),\n            amount: formatCurrencyAsString(\n              chargeForMessages * starsUsdWithdrawRate * starsPaidMessageCommissionPermille,\n              'USD',\n              lang.code,\n            ),\n          }, {\n            withNodes: true,\n          })}\n        </p>\n      )}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const starsUsdWithdrawRateX1000 = global.appConfig?.starsUsdWithdrawRateX1000;\n    const starsUsdWithdrawRate = starsUsdWithdrawRateX1000 ? starsUsdWithdrawRateX1000 / 1000 : 1;\n    const configStarsPaidMessageCommissionPermille = global.appConfig?.starsPaidMessageCommissionPermille;\n    const starsPaidMessageCommissionPermille = configStarsPaidMessageCommissionPermille\n      ? configStarsPaidMessageCommissionPermille / 1000 : 100;\n\n    return {\n      starsPaidMessageCommissionPermille,\n      starsUsdWithdrawRate,\n      starsPaidMessageAmountMax: global.appConfig?.starsPaidMessageAmountMax || DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES,\n    };\n  },\n)(PaidMessagePrice));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPremiumSection } from '../../../api/types';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  premiumSection?: ApiPremiumSection;\n};\n\nfunction PremiumStatusItem({ premiumSection }: OwnProps) {\n  const { openPremiumModal } = getActions();\n  const lang = useOldLang();\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal({ initialSection: premiumSection }));\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n        onClick={handleOpenPremiumModal}\n      >\n        {lang('PrivacyLastSeenPremium')}\n      </ListItem>\n      <p\n        className=\"settings-item-description-larger premium-info\"\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {lang('lng_messages_privacy_premium_about')}\n      </p>\n    </div>\n  );\n}\n\nexport default memo(PremiumStatusItem);\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './PrivacyLockedOption.module.scss';\n\ntype OwnProps = {\n  label: string;\n  isChecked?: boolean;\n};\n\nfunction PrivacyLockedOption({ label, isChecked }: OwnProps) {\n  const lang = useOldLang();\n  const { showNotification } = getActions();\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        isChecked && styles.checked,\n      )}\n      onClick={() => showNotification({ message: lang('OptionPremiumRequiredMessage') })}\n    >\n      <span>{label}</span>\n      <Icon name=\"lock-badge\" className={styles.lockIcon} />\n    </div>\n  );\n}\n\nexport default memo(PrivacyLockedOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sBptmiga\",\"lock-icon\":\"jWxrRbkh\",\"lockIcon\":\"jWxrRbkh\",\"checked\":\"U_6O1ebL\"};","import {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  DEFAULT_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectNewNoncontactPeersRequirePremium,\n  selectNonContactPeersPaidStars,\n} from '../../../global/selectors';\n\nimport useDebouncedCallback from '../../../hooks/useDebouncedCallback';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PaidMessagePrice from '../../common/paidMessage/PaidMessagePrice';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  shouldChargeForMessages?: boolean;\n  canLimitNewMessagesWithoutPremium?: boolean;\n  canChargeForMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  nonContactPeersPaidStars: number;\n  noPaidReactionsForUsersCount: number;\n  privacy: GlobalState['settings']['privacy'];\n};\n\nfunction PrivacyMessages({\n  isActive,\n  canLimitNewMessagesWithoutPremium,\n  canChargeForMessages,\n  shouldNewNonContactPeersRequirePremium,\n  shouldChargeForMessages,\n  nonContactPeersPaidStars,\n  isCurrentUserPremium,\n  noPaidReactionsForUsersCount,\n  onReset,\n  privacy,\n}: OwnProps & StateProps) {\n  const { updateGlobalPrivacySettings, openSettingsScreen, showNotification } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const canChangeForContactsAndPremium = isCurrentUserPremium || canLimitNewMessagesWithoutPremium;\n  const canChangeChargeForMessages = isCurrentUserPremium && canChargeForMessages;\n  const [chargeForMessages, setChargeForMessages] = useState<number>(nonContactPeersPaidStars);\n  const [hasShownNotification, setHasShownNotification] = useState(false);\n\n  const selectedValue = useMemo(() => {\n    if (shouldChargeForMessages) return 'charge_for_messages';\n    if (shouldNewNonContactPeersRequirePremium) return 'contacts_and_premium';\n    return 'everybody';\n  }, [shouldChargeForMessages, shouldNewNonContactPeersRequirePremium]);\n\n  useEffectWithPrevDeps(([prevSelectedValue]) => {\n    if (\n      !hasShownNotification && prevSelectedValue !== undefined\n      && selectedValue !== 'everybody'\n      && selectedValue !== prevSelectedValue\n    ) {\n      if (privacy.chatInvite?.visibility === 'everybody') {\n        showNotification({\n          message: lang('CheckPrivacyInviteText'),\n          action: {\n            action: 'openSettingsScreen',\n            payload: { screen: SettingsScreens.PrivacyGroupChats },\n          },\n          actionText: { key: 'Review' },\n          duration: 8000,\n        });\n      }\n      if (privacy.phoneCall?.visibility === 'everybody') {\n        showNotification({\n          message: lang('CheckPrivacyCallsText'),\n          action: {\n            action: 'openSettingsScreen',\n            payload: { screen: SettingsScreens.PrivacyPhoneCall },\n          },\n          actionText: { key: 'Review' },\n          duration: 8000,\n        });\n      }\n      setHasShownNotification(true);\n    }\n  }, [selectedValue, shouldChargeForMessages, privacy, lang, hasShownNotification]);\n\n  const options = useMemo(() => {\n    return [\n      { value: 'everybody', label: oldLang('P2PEverybody') },\n      {\n        value: 'contacts_and_premium',\n        label: canChangeForContactsAndPremium ? (\n          oldLang('PrivacyMessagesContactsAndPremium')\n        ) : (\n          <PrivacyLockedOption\n            label={oldLang('PrivacyMessagesContactsAndPremium')}\n            isChecked={selectedValue === 'contacts_and_premium'}\n          />\n        ),\n        hidden: !canChangeForContactsAndPremium,\n        isCanCheckedInDisabled: true,\n      },\n      {\n        value: 'charge_for_messages',\n        label: canChangeChargeForMessages ? (\n          lang('PrivacyChargeForMessages')\n        ) : (\n          <PrivacyLockedOption\n            label={lang('PrivacyChargeForMessages')}\n            isChecked={selectedValue === 'charge_for_messages'}\n          />\n        ),\n        hidden: !canChangeChargeForMessages,\n        isCanCheckedInDisabled: true,\n      },\n    ];\n  }, [oldLang, lang, canChangeForContactsAndPremium, canChangeChargeForMessages, selectedValue]);\n\n  const handleChange = useLastCallback((privacyValue: string) => {\n    updateGlobalPrivacySettings({\n      shouldNewNonContactPeersRequirePremium: privacyValue === 'contacts_and_premium',\n      // eslint-disable-next-line no-null/no-null\n      nonContactPeersPaidStars: privacyValue === 'charge_for_messages' ? chargeForMessages : null,\n    });\n  });\n\n  const updateGlobalPrivacySettingsWithDebounced = useDebouncedCallback((value: number) => {\n    updateGlobalPrivacySettings({\n      nonContactPeersPaidStars: value,\n    });\n  }, [updateGlobalPrivacySettings], 300, true);\n\n  const handleChargeForMessagesChange = useCallback((value: number) => {\n    setChargeForMessages(value);\n    updateGlobalPrivacySettingsWithDebounced(value);\n  }, [setChargeForMessages, updateGlobalPrivacySettingsWithDebounced]);\n\n  function renderSectionNoPaidMessagesForUsers() {\n    const itemSubtitle = !noPaidReactionsForUsersCount ? lang('SubtitlePrivacyAddUsers')\n      : oldLang('Users', noPaidReactionsForUsersCount, 'i');\n\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {lang('RemoveFeeTitle')}\n        </h4>\n        <ListItem\n          narrow\n          icon=\"delete-user\"\n\n          onClick={() => {\n            openSettingsScreen({ screen: SettingsScreens.PrivacyNoPaidMessages });\n          }}\n        >\n          <div className=\"multiline-item full-size\">\n            <span className=\"title\">{lang('ExceptionTitlePrivacyChargeForMessages')}</span>\n            <span className=\"subtitle\">\n              {\n                itemSubtitle\n              }\n            </span>\n          </div>\n        </ListItem>\n      </div>\n    );\n  }\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const privacyDescription = useMemo(() => {\n    if (shouldChargeForMessages) return lang('PrivacyDescriptionChargeForMessages');\n    return lang('PrivacyDescriptionMessagesContactsAndPremium');\n  }, [shouldChargeForMessages, lang]);\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {oldLang('PrivacyMessagesTitle')}\n        </h4>\n        <RadioGroup\n          name=\"privacy-messages\"\n          options={options}\n          onChange={handleChange}\n          selected={selectedValue}\n        />\n        <p className=\"settings-item-description-larger\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {privacyDescription}\n        </p>\n      </div>\n      {selectedValue === 'charge_for_messages' && (\n        <div className=\"settings-item fluid-container\">\n          <PaidMessagePrice\n            canChangeChargeForMessages={canChangeChargeForMessages}\n            chargeForMessages={chargeForMessages}\n            onChange={handleChargeForMessagesChange}\n          />\n        </div>\n      )}\n      {canChangeChargeForMessages && selectedValue === 'charge_for_messages' && renderSectionNoPaidMessagesForUsers()}\n      {!isCurrentUserPremium && selectedValue !== 'charge_for_messages'\n        && <PremiumStatusItem premiumSection=\"message_privacy\" />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    settings: {\n      privacy,\n    },\n  } = global;\n  const nonContactPeersPaidStars = selectNonContactPeersPaidStars(global);\n\n  const noPaidReactionsForUsersCount = global.settings.privacy.noPaidMessages?.allowUserIds.length || 0;\n\n  return {\n    shouldNewNonContactPeersRequirePremium: selectNewNoncontactPeersRequirePremium(global),\n    shouldChargeForMessages: Boolean(nonContactPeersPaidStars),\n    nonContactPeersPaidStars: nonContactPeersPaidStars || DEFAULT_CHARGE_FOR_MESSAGES,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    canLimitNewMessagesWithoutPremium: global.appConfig?.canLimitNewMessagesWithoutPremium,\n    canChargeForMessages: global.appConfig?.starsPaidMessagesAvailable,\n    noPaidReactionsForUsersCount,\n    privacy,\n  };\n})(PrivacyMessages));\n","import type { ApiSession } from '../../../../api/types';\nimport type { DeviceType } from '../../../../types/icons/device';\n\nexport default function getSessionIcon(session: ApiSession): DeviceType {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"M84mrPgu\",\"settingsActiveSession\":\"M84mrPgu\",\"iconDevice\":\"Add8P_K4\",\"iconDevice__android\":\"onkXVGY4\",\"iconDeviceAndroid\":\"onkXVGY4\",\"iconDevice__apple\":\"xw13aT8u\",\"iconDeviceApple\":\"xw13aT8u\",\"iconDevice__brave\":\"HESrGUdv\",\"iconDeviceBrave\":\"HESrGUdv\",\"iconDevice__chrome\":\"Vpej7wm7\",\"iconDeviceChrome\":\"Vpej7wm7\",\"iconDevice__edge\":\"ueWE77x9\",\"iconDeviceEdge\":\"ueWE77x9\",\"iconDevice__firefox\":\"_lMTmvya\",\"iconDeviceFirefox\":\"_lMTmvya\",\"iconDevice__linux\":\"cDVfvyG_\",\"iconDeviceLinux\":\"cDVfvyG_\",\"iconDevice__opera\":\"nWqlTxZt\",\"iconDeviceOpera\":\"nWqlTxZt\",\"iconDevice__safari\":\"ldFLp1Gf\",\"iconDeviceSafari\":\"ldFLp1Gf\",\"iconDevice__samsung\":\"VHNORBGL\",\"iconDeviceSamsung\":\"VHNORBGL\",\"iconDevice__ubuntu\":\"QBVivtdu\",\"iconDeviceUbuntu\":\"QBVivtdu\",\"iconDevice__unknown\":\"GbjIgrwU\",\"iconDeviceUnknown\":\"GbjIgrwU\",\"iconDevice__vivaldi\":\"yieVnjoI\",\"iconDeviceVivaldi\":\"yieVnjoI\",\"iconDevice__windows\":\"_0dnTFOE\",\"iconDeviceWindows\":\"_0dnTFOE\",\"iconDevice__xbox\":\"fbCjjDpU\",\"iconDeviceXbox\":\"fbCjjDpU\",\"title\":\"c6edjhlh\",\"note\":\"lRqTZAYn\",\"date\":\"oLnN6crs\",\"box\":\"wVEXuPlZ\",\"actionHeader\":\"olQS2T1n\",\"actionName\":\"KuX1APpO\",\"headerButton\":\"VT8pZfMu\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useOldLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName}\n          {' '}\n          {renderingSession?.appVersion}\n          ,\n          {' '}\n          {renderingSession?.platform}\n          {' '}\n          {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)}`} iconClassName=\"icon-device\">\n          <div className=\"multiline-item full-size\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName}\n              {' '}\n              {session.appVersion}\n              ,\n              {' '}\n              {session.platform}\n              {' '}\n              {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">\n              {session.ip}\n              {' '}\n              -\n              {' '}\n              {getLocation(session)}\n            </span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p className=\"settings-item-description-larger\">{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)}`}\n        iconClassName=\"icon-device\"\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName}\n            {' '}\n            {session.appVersion}\n            ,\n            {' '}\n            {session.platform}\n            {' '}\n            {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">\n            {session.ip}\n            {' '}\n            {getLocation(session)}\n          </span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wd0fmiSY\",\"avatar\":\"OhZHdRsP\",\"title\":\"EQ7__xGn\",\"note\":\"YRYk96ki\",\"box\":\"kmCTIfvf\",\"action-header\":\"qkq5Fa0V\",\"actionHeader\":\"qkq5Fa0V\",\"action-name\":\"zFYUiy13\",\"actionName\":\"zFYUiy13\",\"header-button\":\"lUf0RJ2h\",\"headerButton\":\"lUf0RJ2h\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useOldLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={renderingBot}\n        size=\"large\"\n      />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }): StateProps => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n\n  return {\n    session,\n    bot,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"v0wP46TR\",\"clear-help\":\"WnnxcARX\",\"clearHelp\":\"WnnxcARX\",\"subtitle\":\"uEUfjByC\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} peer={bot} size=\"tiny\" />\n        <div className=\"multiline-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}\n            ,\n            {session.browser}\n            ,\n            {session.platform}\n          </span>\n          <span className={buildClassName('subtitle', styles.subtitle)}>\n            {session.ip}\n            {' '}\n            {session.region}\n          </span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { CHAT_HEIGHT_PX, STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noPlay?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noPlay,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useLastCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  });\n\n  if (!stickerSet?.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noPlay={noPlay}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noPlay={noPlay}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      className={buildClassName('StickerSetCard', 'chat-item-clickable small-icon', className)}\n      style={`height: ${CHAT_HEIGHT_PX}px;`}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { AccountSettings } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useOldLang();\n\n  const stickerSettingsRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', {\n      limit: lang('FileSizeMB', { count: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] }),\n    });\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettingsContacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsPrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsGroupChats')}\n          checked={canAutoLoadInGroups}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsChannels')}\n          checked={canAutoLoadInChannels}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadFilesTitle'),\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ys1i4ssl\",\"item\":\"skaVPMTF\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings } from '../../../types';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { partition } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ItemPicker, { type ItemPickerOption } from '../../common/pickers/ItemPicker';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useOldLang();\n  const language = lang.code || 'en';\n  const [displayedOptions, setDisplayedOptions] = useState<string[]>([]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedOptionList: ItemPickerOption[] = useMemo(() => {\n    const options = SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).filter(Boolean).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n    }));\n\n    if (!searchQuery.trim()) {\n      const currentLanguageOption = options.find((option) => option.value === language);\n      const otherOptionList = options.filter((option) => option.value !== language);\n      return currentLanguageOption ? [currentLanguageOption, ...otherOptionList] : options;\n    }\n\n    return options?.filter((option) => option.label.toLowerCase().includes(searchQuery.toLowerCase()));\n  }, [language, searchQuery]);\n\n  useEffectWithPrevDeps(([prevIsActive, prevLanguage]) => {\n    if (prevIsActive === isActive && prevLanguage?.find((option) => option === language)) return;\n    const [selected] = partition(displayedOptionList, (option) => doNotTranslate.includes(option.value));\n    setDisplayedOptions([...selected.map((option) => option.value)]);\n  }, [isActive, doNotTranslate, displayedOptions.length, language, displayedOptionList]);\n\n  const handleChange = useLastCallback((newSelectedIds: string[]) => {\n    setDisplayedOptions(newSelectedIds);\n    setSettingOption({\n      doNotTranslate: newSelectedIds,\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content infinite-scroll')}>\n      <div className={buildClassName(styles.item)}>\n        <ItemPicker\n          className={styles.picker}\n          items={displayedOptionList}\n          selectedValues={displayedOptions}\n          onSelectedValuesChange={handleChange}\n          filterValue={searchQuery}\n          onFilterChange={setSearchQuery}\n          isSearchable\n          allowMultiple\n          withDefaultPadding\n          itemInputType=\"checkbox\"\n          searchInputId=\"lang-picker-search\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUsername } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { isBetween } from '../../util/math';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 56;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useOldLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePreviousDeprecated(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (!usernameForConfirm) {\n      return;\n    }\n\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('drag-item no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">\n                    @\n                    {usernameData.username}\n                  </span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"PaO1MMi5\",\"header\":\"wSswdVkR\",\"description\":\"oiJc22Aj\",\"sortableContainer\":\"lAeeBh9K\",\"item\":\"l04OwRBg\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport {\n  isUsernameValid, MAX_USERNAME_LENGTH, MIN_UPDATE_USERNAME_LENGTH, USERNAME_REGEX,\n} from '../../util/entities/username';\nimport { debounce } from '../../util/schedulers';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useOldLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_UPDATE_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.trim();\n    // Prevent prefix editing\n    if (asLink && !value.match(LINK_PREFIX_REGEX)) {\n      if (!value.length) {\n        setUsername('');\n        onChange?.('');\n      }\n      return;\n    }\n    const newUsername = value.replace(LINK_PREFIX_REGEX, '');\n\n    setUsername(newUsername);\n\n    const isValid = newUsername === '' ? true : isUsernameValid(newUsername, true);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectTabState, selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available'))\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-item\">\n          <div className=\"settings-input\">\n            <AvatarEditable\n              currentAvatarBlobUrl={currentAvatarBlobUrl}\n              onChange={handlePhotoChange}\n              title=\"Edit your profile photo\"\n              disabled={isLoading}\n            />\n            <InputText\n              value={firstName}\n              onChange={handleFirstNameChange}\n              label={lang('FirstName')}\n              disabled={isLoading}\n              error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n            />\n            <InputText\n              value={lastName}\n              onChange={handleLastNameChange}\n              label={lang('LastName')}\n              disabled={isLoading}\n            />\n            <TextArea\n              value={bio}\n              onChange={handleBioChange}\n              label={lang('UserBio')}\n              disabled={isLoading}\n              maxLength={maxBioLength}\n              maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n            />\n          </div>\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <div className=\"settings-input\">\n            <UsernameInput\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n          </div>\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}\n              <br />\n              <span className=\"username-link\">\n                {TME_LINK_PREFIX}\n                {editableUsername}\n              </span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        editUsernameError,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n    } = currentUser;\n    const currentUserFullInfo = currentUserId ? selectUserFullInfo(global, currentUserId) : undefined;\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio: currentUserFullInfo?.bio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { DEBUG_LOG_FILENAME } from '../../../config';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport {\n  IS_ELECTRON,\n  IS_SNAP_EFFECT_SUPPORTED,\n  IS_WAVE_TRANSFORM_SUPPORTED,\n} from '../../../util/browser/windowEnvironment';\nimport { getDebugLogs } from '../../../util/debugConsole';\nimport download from '../../../util/download';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport { animateSnap } from '../../main/visualEffects/SnapEffectContainer';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  shouldForceHttpTransport?: boolean;\n  shouldAllowHttpTransport?: boolean;\n  shouldCollectDebugLogs?: boolean;\n  shouldDebugExportedSenders?: boolean;\n};\n\nconst SettingsExperimental: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  shouldForceHttpTransport,\n  shouldAllowHttpTransport,\n  shouldCollectDebugLogs,\n  shouldDebugExportedSenders,\n}) => {\n  const { requestConfetti, setSharedSettingOption, requestWave } = getActions();\n\n  const snapButtonRef = useRef<HTMLDivElement>();\n  const [isSnapButtonAnimating, setIsSnapButtonAnimating] = useState(false);\n\n  const lang = useOldLang();\n\n  const [isAutoUpdateEnabled, setIsAutoUpdateEnabled] = useState(false);\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsAutoUpdateEnabled);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDownloadLog = useLastCallback(() => {\n    const file = new File([getDebugLogs()], DEBUG_LOG_FILENAME, { type: 'text/plain' });\n    const url = URL.createObjectURL(file);\n    download(url, DEBUG_LOG_FILENAME);\n  });\n\n  const handleIsAutoUpdateEnabledChange = useCallback((isChecked: boolean) => {\n    window.electron?.setIsAutoUpdateEnabled(isChecked);\n  }, []);\n\n  const handleRequestWave = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    requestWave({ startX: e.clientX, startY: e.clientY });\n  });\n\n  const handleRequestConfetti = useLastCallback(() => {\n    requestConfetti({ withStars: true });\n  });\n\n  const handleSnap = useLastCallback(() => {\n    const button = snapButtonRef.current;\n    if (!button) return;\n\n    if (animateSnap(button)) {\n      setIsSnapButtonAnimating(true);\n      // Manual reset for debug\n      setTimeout(() => {\n        setIsSnapButtonAnimating(false);\n      }, 1500);\n    }\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description pt-3\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          onClick={handleRequestConfetti}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n        <ListItem\n          onClick={handleRequestWave}\n          icon=\"story-expired\"\n          disabled={!IS_WAVE_TRANSFORM_SUPPORTED}\n        >\n          <div className=\"title\">Start wave</div>\n        </ListItem>\n        <ListItem\n          ref={snapButtonRef}\n          onClick={handleSnap}\n          icon=\"spoiler\"\n          disabled={!IS_SNAP_EFFECT_SUPPORTED}\n          style={isSnapButtonAnimating ? 'visibility: hidden' : ''}\n        >\n          <div className=\"title\">Vaporize this button</div>\n        </ListItem>\n\n        <Checkbox\n          label=\"Allow HTTP Transport\"\n          checked={Boolean(shouldAllowHttpTransport)}\n\n          onCheck={() => setSharedSettingOption({ shouldAllowHttpTransport: !shouldAllowHttpTransport })}\n        />\n\n        <Checkbox\n          label=\"Force HTTP Transport\"\n          disabled={!shouldAllowHttpTransport}\n          checked={Boolean(shouldForceHttpTransport)}\n\n          onCheck={() => setSharedSettingOption({ shouldForceHttpTransport: !shouldForceHttpTransport })}\n        />\n\n        <Checkbox\n          label={lang('DebugMenuEnableLogs')}\n          checked={Boolean(shouldCollectDebugLogs)}\n\n          onCheck={() => setSharedSettingOption({ shouldCollectDebugLogs: !shouldCollectDebugLogs })}\n        />\n\n        <Checkbox\n          label=\"Enable exported senders debug\"\n          checked={Boolean(shouldDebugExportedSenders)}\n\n          onCheck={() => setSharedSettingOption({ shouldDebugExportedSenders: !shouldDebugExportedSenders })}\n        />\n\n        {IS_ELECTRON && (\n          <Checkbox\n            label=\"Enable autoupdates\"\n            checked={Boolean(isAutoUpdateEnabled)}\n            onCheck={handleIsAutoUpdateEnabledChange}\n          />\n        )}\n\n        <ListItem\n          onClick={handleDownloadLog}\n          icon=\"bug\"\n        >\n          <div className=\"title\">Download log</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      shouldForceHttpTransport,\n      shouldAllowHttpTransport,\n      shouldCollectDebugLogs,\n      shouldDebugExportedSenders,\n    } = selectSharedSettings(global);\n\n    return {\n      shouldForceHttpTransport,\n      shouldAllowHttpTransport,\n      shouldCollectDebugLogs,\n      shouldDebugExportedSenders,\n    };\n  },\n)(SettingsExperimental));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { SharedSettings, ThemeKey, TimeFormat } from '../../../types';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_MAC_OS, IS_WINDOWS,\n} from '../../../util/browser/windowEnvironment';\nimport { setTimeFormat } from '../../../util/oldLangProvider';\nimport { getSystemTheme } from '../../../util/systemTheme';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<SharedSettings, (\n    'messageTextSize' |\n    'messageSendKeyCombo' |\n    'timeFormat' |\n    'theme' |\n    'shouldUseSystemTheme'\n  )>;\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  messageTextSize,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n  onReset,\n}) => {\n  const {\n    setSharedSettingOption, openSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const isMobileDevice = isMobile && (IS_IOS || IS_ANDROID);\n\n  const timeFormatOptions: IRadioOption[] = [{\n    label: lang('SettingsTimeFormat12'),\n    value: '12h',\n  }, {\n    label: lang('SettingsTimeFormat24'),\n    value: '24h',\n  }];\n\n  const appearanceThemeOptions: IRadioOption[] = [{\n    label: lang('EmptyChatAppearanceLight'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChatAppearanceDark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChatAppearanceSystem'),\n    value: 'auto',\n  }];\n\n  const keyboardSendOptions = !isMobileDevice ? [\n    { value: 'enter', label: lang('SettingsSendEnter'), subLabel: lang('SettingsSendEnterDescription') },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS || IS_IOS ? 'SettingsSendCmdenter' : 'SettingsSendCtrlenter'),\n      subLabel: lang('SettingsSendPlusEnterDescription'),\n    },\n  ] : undefined;\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSharedSettingOption({ messageTextSize: newSize });\n  }, []);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ThemeKey;\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: value === 'auto' });\n  }, []);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSharedSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSharedSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, []);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSharedSettingOption({ messageSendKeyCombo: newCombo as SharedSettings['messageSendKeyCombo'] });\n  }, []);\n\n  const [isTrayIconEnabled, setIsTrayIconEnabled] = useState(false);\n  useEffect(() => {\n    window.electron?.getIsTrayIconEnabled().then(setIsTrayIconEnabled);\n  }, []);\n\n  const handleIsTrayIconEnabledChange = useCallback((isChecked: boolean) => {\n    window.electron?.setIsTrayIconEnabled(isChecked);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Settings')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.GeneralChatBackground })}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n\n        {IS_ELECTRON && IS_WINDOWS && (\n          <Checkbox\n            label={lang('SettingsTray')}\n            checked={Boolean(isTrayIconEnabled)}\n            onCheck={handleIsTrayIconEnabledChange}\n          />\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={appearanceThemeOptions}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsTimeFormat')}\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={timeFormatOptions}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      {keyboardSendOptions && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SettingsKeyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={keyboardSendOptions}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      theme,\n      shouldUseSystemTheme,\n      messageSendKeyCombo,\n      messageTextSize,\n      timeFormat,\n    } = selectSharedSettings(global);\n\n    return {\n      messageSendKeyCombo,\n      messageTextSize,\n      timeFormat,\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\n\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransitionDeprecated(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const isLoadingRef = useRef(false);\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePreviousDeprecated(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransitionDeprecated(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    // If we've clicked on a wallpaper, select it when full media is loaded\n    if (fullMedia && isLoadingRef.current) {\n      handleSelect();\n      isLoadingRef.current = false;\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      isLoadingRef.current = true;\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { selectTheme, selectThemeValues } from '../../../global/selectors';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { validateFiles } from '../../../util/files';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n    openSettingsScreen,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.GeneralChatBackgroundColor });\n  }, []);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              key={wallpaper.slug}\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = selectThemeValues(global, theme) || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\n\nimport { selectTheme, selectThemeValues } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { captureEvents } from '../../../util/captureEvents';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { pick } from '../../../util/iteratees';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  const containerRef = useRef<HTMLDivElement>();\n  const colorPickerRef = useRef<HTMLDivElement>();\n  const huePickerRef = useRef<HTMLDivElement>();\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={buildClassName('predefined-color', color === `#${hex}` ? 'active' : undefined)}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: React.RefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: React.RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = selectThemeValues(global, theme) || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    openSettingsScreen({ screen: SettingsScreens.Experimental });\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{oldLang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{oldLang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{oldLang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{oldLang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{oldLang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{oldLang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{oldLang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{oldLang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{oldLang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{oldLang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{oldLang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{oldLang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{oldLang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{oldLang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{oldLang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{oldLang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyBio:\n        return <h3>{oldLang('PrivacyBio')}</h3>;\n      case SettingsScreens.PrivacyBirthday:\n        return <h3>{oldLang('PrivacyBirthday')}</h3>;\n      case SettingsScreens.PrivacyGifts:\n        return <h3>{lang('PrivacyGifts')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{oldLang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{oldLang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyMessages:\n        return <h3>{oldLang('PrivacyMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{oldLang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneCall:\n        return <h3>{oldLang('Calls')}</h3>;\n\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{oldLang('AlwaysShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{oldLang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyGiftsAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        return <h3>{oldLang('AlwaysAllow')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyGiftsDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n        return <h3>{oldLang('NeverAllow')}</h3>;\n\n      case SettingsScreens.PrivacyNoPaidMessages:\n        return <h3>{lang('RemoveFeeTitle')}</h3>;\n\n      case SettingsScreens.Performance:\n        return <h3>{lang('MenuAnimations')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{oldLang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{oldLang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{oldLang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{oldLang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{oldLang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{oldLang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{oldLang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{oldLang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{oldLang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{oldLang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{oldLang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{oldLang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{oldLang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{oldLang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{oldLang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{oldLang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersShare:\n        return <h3>{oldLang('FolderLinkScreen.Title')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{oldLang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {oldLang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <h3>\n            {oldLang(\n              currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList\n                ? 'FilterInclude' : 'FilterExclude',\n            )}\n          </h3>\n        );\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {oldLang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n\n              onClick={() => openSettingsScreen({ screen: SettingsScreens.EditProfile })}\n              ariaLabel={oldLang('lng_settings_information')}\n            >\n              <Icon name=\"edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{oldLang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={oldLang('AccDescrGoBack')}\n      >\n        <Icon name=\"arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={oldLang('lng_sure_logout')}\n        confirmLabel={oldLang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings, LangCode, SharedSettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { oldSetLanguage } from '../../../util/oldLangProvider';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ItemPicker, { type ItemPickerOption } from '../../common/pickers/ItemPicker';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n} & Pick<AccountSettings, 'canTranslate' | 'canTranslateChats' | 'doNotTranslate'>\n& Pick<SharedSettings, 'language' | 'languages'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  languages,\n  language,\n  canTranslate,\n  canTranslateChats,\n  doNotTranslate,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    setSettingOption,\n    setSharedSettingOption,\n    openPremiumModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const canTranslateChatsEnabled = isCurrentUserPremium && canTranslateChats;\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (!languages?.length) {\n      loadLanguages();\n    }\n  }, [languages]);\n\n  const handleChange = useLastCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void oldSetLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSharedSettingOption({ language: langCode as LangCode });\n    });\n  });\n\n  const options = useMemo(() => {\n    if (!languages) return undefined;\n    const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n    const shortLangCode = currentLangCode.substr(0, 2);\n\n    return languages.map(({ langCode, nativeName, name }) => ({\n      value: langCode,\n      label: nativeName,\n      subLabel: name,\n      isLoading: langCode === selectedLanguage && isLoading,\n    } satisfies ItemPickerOption)).sort((a) => {\n      return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n    });\n  }, [isLoading, languages, selectedLanguage]);\n\n  const handleShouldTranslateChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  });\n\n  const handleShouldTranslateChatsChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslateChats: newValue });\n  });\n\n  const handleShouldTranslateChatsClick = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'translations',\n      });\n    }\n  });\n\n  const doNotTranslateText = useMemo(() => {\n    if (!IS_TRANSLATION_SUPPORTED || !doNotTranslate.length) {\n      return undefined;\n    }\n\n    if (doNotTranslate.length === 1) {\n      const originalNames = new Intl.DisplayNames([language], { type: 'language' });\n      return originalNames.of(doNotTranslate[0])!;\n    }\n\n    return lang('Languages', doNotTranslate.length);\n  }, [doNotTranslate, lang, language]);\n\n  const handleDoNotSelectOpen = useLastCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.DoNotTranslate });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      {IS_TRANSLATION_SUPPORTED && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('ShowTranslateButton')}\n            checked={canTranslate}\n            onCheck={handleShouldTranslateChange}\n          />\n          <Checkbox\n            label={lang('ShowTranslateChatButton')}\n            checked={canTranslateChatsEnabled}\n            disabled={!isCurrentUserPremium}\n            rightIcon={!isCurrentUserPremium ? 'lock' : undefined}\n            onClickLabel={handleShouldTranslateChatsClick}\n            onCheck={handleShouldTranslateChatsChange}\n          />\n          {(canTranslate || canTranslateChatsEnabled) && (\n            <ListItem\n              narrow\n              onClick={handleDoNotSelectOpen}\n            >\n              {lang('DoNotTranslate')}\n              <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n            </ListItem>\n          )}\n          <p className=\"settings-item-description mb-0 mt-1\">\n            {lang('lng_translate_settings_about')}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item settings-item-picker\">\n        <h4 className=\"settings-item-header\">\n          {lang('Localization.InterfaceLanguage')}\n        </h4>\n        {options ? (\n          <ItemPicker\n            items={options}\n            selectedValue={selectedLanguage}\n            forceRenderAllItems\n            onSelectedValueChange={handleChange}\n            itemInputType=\"radio\"\n            className=\"settings-picker\"\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      canTranslate, canTranslateChats, doNotTranslate,\n    } = global.settings.byKey;\n    const { language, languages } = selectSharedSettings(global);\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      isCurrentUserPremium,\n      languages,\n      language,\n      canTranslate,\n      canTranslateChats,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarsAmount } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { FAQ_URL, PRIVACY_URL } from '../../../config';\nimport { formatStarsAmount } from '../../../global/helpers/payments';\nimport {\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectIsPremiumPurchaseBlocked,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport ChatExtra from '../../common/profile/ChatExtra';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUserId?: string;\n  canBuyPremium?: boolean;\n  isGiveawayAvailable?: boolean;\n  starsBalance?: ApiStarsAmount;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentUserId,\n  sessionCount,\n  canBuyPremium,\n  isGiveawayAvailable,\n  starsBalance,\n  onReset,\n}) => {\n  const {\n    loadMoreProfilePhotos,\n    openPremiumModal,\n    openSupportChat,\n    openUrl,\n    openGiftRecipientPicker,\n    openStarsBalanceModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const [isSupportDialogOpen, openSupportDialog, closeSupportDialog] = useFlag(false);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (currentUserId) {\n      loadMoreProfilePhotos({ peerId: currentUserId, isPreload: true });\n    }\n  }, [currentUserId]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleOpenSupport = useLastCallback(() => {\n    openSupportChat();\n    closeSupportDialog();\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu self-profile\">\n        {currentUserId && (\n          <ProfileInfo\n            peerId={currentUserId}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUserId && (\n          <ChatExtra\n            chatOrUserId={currentUserId}\n            isInSettings\n          />\n        )}\n      </div>\n      <div className=\"settings-main-menu\">\n        <ListItem\n          icon=\"settings\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.General })}\n        >\n          {lang('TelegramGeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"animations\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Performance })}\n        >\n          {lang('MenuAnimations')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Notifications })}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.DataStorage })}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Privacy })}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Folders })}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.ActiveSessions })}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Language })}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.languageInfo.nativeName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Stickers })}\n        >\n          {lang('MenuStickers')}\n        </ListItem>\n      </div>\n      <div className=\"settings-main-menu\">\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n            narrow\n\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n        <ListItem\n          leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"gold\" size=\"big\" />}\n          narrow\n\n          onClick={() => openStarsBalanceModal({})}\n        >\n          {lang('MenuStars')}\n          {Boolean(starsBalance) && (\n            <span className=\"settings-item__current-value\">\n              {formatStarsAmount(lang, starsBalance)}\n            </span>\n          )}\n        </ListItem>\n        {isGiveawayAvailable && (\n          <ListItem\n            icon=\"gift\"\n            narrow\n\n            onClick={() => openGiftRecipientPicker()}\n          >\n            {lang('MenuSendGift')}\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-main-menu\">\n        <ListItem\n          icon=\"ask-support\"\n          narrow\n          onClick={openSupportDialog}\n        >\n          {lang('AskAQuestion')}\n        </ListItem>\n        <ListItem\n          icon=\"help\"\n          narrow\n\n          onClick={() => openUrl({ url: FAQ_URL })}\n        >\n          {lang('MenuTelegramFaq')}\n        </ListItem>\n        <ListItem\n          icon=\"privacy-policy\"\n          narrow\n\n          onClick={() => openUrl({ url: PRIVACY_URL })}\n        >\n          {lang('MenuPrivacyPolicy')}\n        </ListItem>\n      </div>\n      <ConfirmDialog\n        isOpen={isSupportDialogOpen}\n        confirmLabel={lang('OK')}\n        title={lang('AskAQuestion')}\n        textParts={lang('MenuAskText', undefined, { withNodes: true, renderTextFilters: ['br'] })}\n        confirmHandler={handleOpenSupport}\n        onClose={closeSupportDialog}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const starsBalance = global.stars?.balance;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUserId,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isGiveawayAvailable,\n      starsBalance,\n    };\n  },\n)(SettingsMain));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiNotifyPeerType, ApiPeerNotifySettings } from '../../../api/types';\n\nimport {\n  checkIfNotificationsSupported,\n  checkIfOfflinePushFailed,\n  playNotifySound,\n} from '../../../util/notifications';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  notifyDefaults?: Record<ApiNotifyPeerType, ApiPeerNotifySettings>;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  notifyDefaults,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const areNotificationsSupported = checkIfNotificationsSupported();\n  const areOfflineNotificationsSupported = areNotificationsSupported && !checkIfOfflinePushFailed();\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: ApiNotifyPeerType,\n    setting: 'mute' | 'showPreviews',\n  ) => {\n    const currentIsMuted = Boolean(notifyDefaults?.[peerType]?.mutedUntil);\n    const currentShouldShowPreviews = Boolean(notifyDefaults?.[peerType]?.shouldShowPreviews);\n\n    updateNotificationSettings({\n      peerType,\n      isMuted: setting === 'mute' ? !e.target.checked : currentIsMuted,\n      shouldShowPreviews: setting === 'showPreviews' ? e.target.checked : currentShouldShowPreviews,\n    });\n  }, [notifyDefaults]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const isEnabled = e.target.checked;\n    updateWebNotificationSettings({\n      hasWebNotifications: isEnabled,\n      ...(!isEnabled && { hasPushNotifications: false }),\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'users', 'mute');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'users', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'groups', 'mute');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'groups', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'channels', 'mute');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'channels', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('NotificationsWeb')}\n        </h4>\n        <Checkbox\n          label={lang('NotificationsWeb')}\n          subLabel={lang(hasWebNotifications ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={hasWebNotifications}\n          disabled={!areNotificationsSupported}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label={lang('NotificationsOffline')}\n          disabled={!hasWebNotifications || !areOfflineNotificationsSupported}\n          subLabel={areOfflineNotificationsSupported\n            ? lang(hasPushNotifications ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')\n            : lang('SettingsOfflineNotificationUnsupported')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label={lang('NotificationsSound')}\n            min={0}\n            max={10}\n            disabled={!areNotificationsSupported}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          subLabel={lang(notifyDefaults?.users?.mutedUntil\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.users?.mutedUntil)}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!notifyDefaults?.users?.mutedUntil}\n          subLabel={lang(notifyDefaults?.users?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.users?.shouldShowPreviews)}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(notifyDefaults?.groups?.mutedUntil\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.groups?.mutedUntil)}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!notifyDefaults?.groups?.mutedUntil}\n          subLabel={lang(notifyDefaults?.groups?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.groups?.shouldShowPreviews)}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          subLabel={lang(notifyDefaults?.channels?.mutedUntil\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.channels?.mutedUntil)}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!notifyDefaults?.channels?.mutedUntil}\n          subLabel={lang(notifyDefaults?.channels?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.channels?.shouldShowPreviews)}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, PerformanceType, PerformanceTypeKey } from '../../../types';\nimport type { RegularLangKey } from '../../../types/language';\n\nimport {\n  ANIMATION_LEVEL_CUSTOM, ANIMATION_LEVEL_MAX, ANIMATION_LEVEL_MED, ANIMATION_LEVEL_MIN,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectPerformanceSettings } from '../../../global/selectors';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { IS_BACKDROP_BLUR_SUPPORTED, IS_SNAP_EFFECT_SUPPORTED } from '../../../util/browser/windowEnvironment';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype PerformanceSection = [RegularLangKey, PerformanceOption[]];\ntype PerformanceOption = {\n  key: PerformanceTypeKey;\n  label: RegularLangKey;\n  disabled?: boolean;\n};\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  performanceSettings: PerformanceType;\n};\n\nconst ANIMATION_LEVEL_OPTIONS: RegularLangKey[] = [\n  'SettingsPerformanceSliderLow',\n  'SettingsPerformanceSliderMedium',\n  'SettingsPerformanceSliderHigh',\n];\n\nconst ANIMATION_LEVEL_CUSTOM_OPTIONS: RegularLangKey[] = [\n  'SettingsPerformanceSliderLow',\n  'SettingsPerformanceSliderCustom',\n  'SettingsPerformanceSliderHigh',\n];\n\nconst PERFORMANCE_OPTIONS: PerformanceSection[] = [\n  ['SettingsPerformanceInterfaceAnimations', [\n    { key: 'pageTransitions', label: 'SettingsPerformancePageTransitions' },\n    { key: 'messageSendingAnimations', label: 'SettingsPerformanceSending' },\n    { key: 'mediaViewerAnimations', label: 'SettingsPerformanceMediaViewer' },\n    { key: 'messageComposerAnimations', label: 'SettingsPerformanceComposer' },\n    { key: 'contextMenuAnimations', label: 'SettingsPerformanceContextAnimation' },\n    { key: 'contextMenuBlur', label: 'SettingsPerformanceContextBlur', disabled: !IS_BACKDROP_BLUR_SUPPORTED },\n    { key: 'rightColumnAnimations', label: 'SettingsPerformanceRightColumn' },\n    { key: 'snapEffect', label: 'SettingsPerformanceThanos' },\n  ]],\n  ['SettingsPerformanceStickers', [\n    { key: 'animatedEmoji', label: 'SettingsPerformanceAnimatedEmoji' },\n    { key: 'loopAnimatedStickers', label: 'SettingsPerformanceLoopStickers' },\n    { key: 'reactionEffects', label: 'SettingsPerformanceReactionEffects' },\n    { key: 'stickerEffects', label: 'SettingsPerformanceStickerEffects' },\n  ]],\n  ['SettingsPerformanceMediaAutoplay', [\n    { key: 'autoplayGifs', label: 'SettingsPerformanceAutoplayGif' },\n    { key: 'autoplayVideos', label: 'SettingsPerformanceAutoplayVideo' },\n  ]],\n];\n\nfunction SettingsPerformance({\n  isActive,\n  performanceSettings,\n  onReset,\n}: OwnProps & StateProps) {\n  const {\n    setSharedSettingOption,\n    updatePerformanceSettings,\n  } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const lang = useLang();\n  const [sectionExpandedStates, setSectionExpandedStates] = useState<Record<number, boolean>>({});\n\n  const sectionCheckedStates = useMemo(() => {\n    return PERFORMANCE_OPTIONS.reduce((acc, [, options], index) => {\n      acc[index] = options.every(({ key }) => performanceSettings[key]);\n\n      return acc;\n    }, {} as Record<number, boolean>);\n  }, [performanceSettings]);\n\n  const animationLevelState = useMemo(() => {\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MAX)) {\n      return ANIMATION_LEVEL_MAX;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MIN)) {\n      return ANIMATION_LEVEL_MIN;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MID)) {\n      return ANIMATION_LEVEL_MED;\n    }\n\n    return ANIMATION_LEVEL_CUSTOM;\n  }, [performanceSettings]);\n\n  const animationLevelOptions = useMemo(() => {\n    const options = animationLevelState === ANIMATION_LEVEL_CUSTOM\n      ? ANIMATION_LEVEL_CUSTOM_OPTIONS\n      : ANIMATION_LEVEL_OPTIONS;\n\n    return options.map((option) => lang(option));\n  }, [animationLevelState, lang]);\n\n  const handleToggleSection = useCallback((e: React.MouseEvent, index?: string) => {\n    e.preventDefault();\n    const sectionIndex = Number(index);\n\n    setSectionExpandedStates((prev) => ({\n      ...prev,\n      [sectionIndex]: !prev[sectionIndex],\n    }));\n  }, []);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    const performance = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MED ? INITIAL_PERFORMANCE_STATE_MID : INITIAL_PERFORMANCE_STATE_MAX);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performance);\n  }, []);\n\n  const handlePropertyGroupChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n    const perfomanceSection = PERFORMANCE_OPTIONS.find(([sectionName]) => sectionName === name);\n    if (!perfomanceSection) {\n      return;\n    }\n\n    const newSettings = perfomanceSection[1].reduce((acc, { key }) => {\n      acc[key] = checked;\n      return acc;\n    }, {} as Partial<PerformanceType>);\n\n    updatePerformanceSettings(newSettings);\n  }, []);\n\n  const handlePropertyChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n\n    updatePerformanceSettings({ [name as PerformanceTypeKey]: checked });\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsPerformanceSliderTitle')}\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsPerformanceSliderSubtitle')}\n        </p>\n\n        <RangeSlider\n          options={animationLevelOptions}\n          value={animationLevelState === ANIMATION_LEVEL_CUSTOM ? ANIMATION_LEVEL_MED : animationLevelState}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      <div className=\"settings-item-simple settings-item__with-shifted-dropdown\">\n        <h3 className=\"settings-item-header\" dir=\"auto\">Resource-Intensive Processes</h3>\n\n        {PERFORMANCE_OPTIONS.map(([sectionName, options], index) => {\n          return (\n            <div\n              key={sectionName}\n              className=\"settings-dropdown-section\"\n            >\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name={sectionName}\n                  value={index.toString()}\n                  checked={sectionCheckedStates[index]}\n                  label={lang(sectionName)}\n                  rightIcon={sectionExpandedStates[index] ? 'up' : 'down'}\n                  onChange={handlePropertyGroupChange}\n                  onClickLabel={handleToggleSection}\n                />\n              </div>\n              {Boolean(sectionExpandedStates[index]) && (\n                <div className=\"DropdownList DropdownList--open\">\n                  {options.map(({ key, label, disabled }) => {\n                    if (key === 'snapEffect' && !IS_SNAP_EFFECT_SUPPORTED) return undefined;\n                    return (\n                      <Checkbox\n                        key={key}\n                        name={key}\n                        checked={performanceSettings[key]}\n                        label={lang(label)}\n                        disabled={disabled}\n                        onChange={handlePropertyChange}\n                      />\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    performanceSettings: selectPerformanceSettings(global),\n  };\n})(SettingsPerformance));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ACCOUNT_TTL_OPTIONS } from '../../../config.ts';\nimport {\n  selectCanSetPasscode, selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { getClosestEntry } from '../../../util/getClosestEntry.ts';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  canSetPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  shouldChargeForMessages: boolean;\n  canDisplayChatInTitle?: boolean;\n  isCurrentUserFrozen?: boolean;\n  privacy: GlobalState['settings']['privacy'];\n  accountDaysTtl?: number;\n};\n\nconst DAYS_PER_MONTH = 30;\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  shouldNewNonContactPeersRequirePremium,\n  shouldChargeForMessages,\n  canDisplayChatInTitle,\n  canSetPasscode,\n  privacy,\n  onReset,\n  isCurrentUserFrozen,\n  accountDaysTtl,\n}) => {\n  const {\n    openDeleteAccountModal,\n    loadPrivacySettings,\n    loadBlockedUsers,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    setSharedSettingOption,\n    openSettingsScreen,\n    loadAccountDaysTtl,\n  } = getActions();\n\n  useEffect(() => {\n    if (!isCurrentUserFrozen) {\n      loadBlockedUsers();\n      loadPrivacySettings();\n      loadContentSettings();\n      loadWebAuthorizations();\n    }\n  }, [isCurrentUserFrozen]);\n\n  useEffect(() => {\n    if (isActive && !isCurrentUserFrozen) {\n      loadGlobalPrivacySettings();\n      loadAccountDaysTtl();\n    }\n  }, [isActive, isCurrentUserFrozen, loadGlobalPrivacySettings]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSharedSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n  }, []);\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings({ isSensitiveEnabled: isChecked });\n  }, [updateContentSettings]);\n\n  const handleOpenDeleteAccountModal = useLastCallback(() => {\n    if (!accountDaysTtl) return;\n    openDeleteAccountModal({ days: accountDaysTtl });\n  });\n\n  const dayOption = useMemo(() => {\n    if (!accountDaysTtl) return undefined;\n    return getClosestEntry(ACCOUNT_TTL_OPTIONS, accountDaysTtl / DAYS_PER_MONTH).toString();\n  }, [accountDaysTtl]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    if (!setting) return oldLang('Loading');\n\n    const { visibility, shouldAllowPremium, botsPrivacy } = setting;\n\n    const isAllowBots = botsPrivacy === 'allow';\n    const isVisibilityEverybody = visibility === 'everybody';\n    const shouldShowBotsString = isAllowBots && !isVisibilityEverybody;\n\n    const blockCount = setting.blockChatIds.length + setting.blockUserIds.length;\n    const allowCount = setting.allowChatIds.length + setting.allowUserIds.length;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount && !isVisibilityEverybody) total.push(`+${allowCount}`);\n\n    const botPrivacyString = shouldShowBotsString ? lang('PrivacyValueBots') : '';\n    const totalString = lang.conjunction(total);\n\n    const exceptionString = [botPrivacyString, totalString].filter(Boolean).join(' ');\n    if (shouldShowBotsString && !isVisibilityEverybody) return exceptionString;\n\n    if (shouldAllowPremium) {\n      return oldLang(exceptionString ? 'ContactsAndPremium' : 'PrivacyPremium');\n    }\n\n    switch (visibility) {\n      case 'everybody':\n        return `${oldLang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${oldLang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${oldLang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBlockedUsers })}\n        >\n          {oldLang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        {canSetPasscode && (\n          <ListItem\n            icon=\"key\"\n            narrow\n\n            onClick={() => openSettingsScreen({\n              screen: hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n            })}\n          >\n            <div className=\"multiline-item\">\n              <span className=\"title\">{oldLang('Passcode')}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {oldLang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n              </span>\n            </div>\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"lock\"\n          narrow\n\n          onClick={() => openSettingsScreen({\n            screen: hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {oldLang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            narrow\n\n            onClick={() => openSettingsScreen({ screen: SettingsScreens.ActiveWebsites })}\n          >\n            {oldLang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>{oldLang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneNumber })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyLastSeen })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.lastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyProfilePhoto })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.profilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBio })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyBio')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.bio)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBirthday })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyBirthday')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.birthday)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyGifts })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{lang('PrivacyGifts')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.gifts)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyForwarding })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.forwards)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneCall })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          allowDisabledClick\n          rightElement={isCurrentUserPremium && <StarIcon size=\"big\" type=\"premium\" />}\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyVoiceMessages })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyVoiceMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.voiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          rightElement={isCurrentUserPremium && <StarIcon size=\"big\" type=\"premium\" />}\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyMessages })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {shouldChargeForMessages ? lang('PrivacyPaidMessagesValue')\n                : shouldNewNonContactPeersRequirePremium\n                  ? oldLang('PrivacyMessagesContactsAndPremium')\n                  : oldLang('P2PEverybody')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyGroupChats })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.chatInvite)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={oldLang('lng_settings_sensitive_disable_filtering')}\n            subLabel={oldLang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={handleUpdateContentSettings}\n          />\n        </div>\n      )}\n\n      {canDisplayAutoarchiveSetting && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('NewChatsFromNonContacts')}\n          </h4>\n          <Checkbox\n            label={oldLang('ArchiveAndMute')}\n            subLabel={oldLang('ArchiveAndMuteInfo')}\n            checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n            onCheck={handleArchiveAndMuteChange}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {oldLang('lng_settings_window_system')}\n        </h4>\n        <Checkbox\n          label={oldLang('lng_settings_title_chat_name')}\n          checked={Boolean(canDisplayChatInTitle)}\n          onCheck={handleChatInTitleChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {lang('DeleteMyAccount')}\n        </h4>\n        <ListItem\n          narrow\n          onClick={handleOpenDeleteAccountModal}\n        >\n          {lang('DeleteAccountIfAwayFor')}\n          <span className=\"settings-item__current-value\">\n            {lang('Months', { count: dayOption }, { pluralValue: 1 })}\n          </span>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          shouldNewNonContactPeersRequirePremium, nonContactPeersPaidStars,\n        },\n        privacy,\n        accountDaysTtl,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n    } = global;\n\n    const { canDisplayChatInTitle } = selectSharedSettings(global);\n    const shouldChargeForMessages = Boolean(nonContactPeersPaidStars);\n    const isCurrentUserFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: Boolean(appConfig?.canDisplayAutoarchiveSetting),\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      shouldNewNonContactPeersRequirePremium,\n      shouldChargeForMessages,\n      privacy,\n      canDisplayChatInTitle,\n      canSetPasscode: selectCanSetPasscode(global),\n      isCurrentUserFrozen,\n      accountDaysTtl,\n    };\n  },\n)(SettingsPrivacy));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ChatOrUserPicker from '../../common/pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockUser,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterPeersByQuery({ ids: availableContactIds, query: search, type: 'user' })\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    blockUser({ userId });\n    onClose();\n  }, [onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockUser } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((userId: string) => {\n    unblockUser({ userId });\n  }, [unblockUser]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, userId) => {\n      const isPrivate = isUserId(userId);\n      const user = isPrivate ? usersByIds[userId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[userId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = usersByIds[contactId];\n    const chat = chatsByIds[contactId];\n    const peer = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={`blocked_${contactId}`}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar\n          size=\"medium\"\n          peer={peer}\n        />\n        <div className=\"contact-info\" dir=\"auto\">\n          {peer && <FullNameTitle peer={peer} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (\n            <div className=\"contact-username\" dir=\"auto\">\n              @\n              {userMainUsername}\n            </div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container settings-item\">\n              {blockedIds.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        className=\"block-user-button\"\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <Icon name=\"add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { ApiPrivacyKey } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyBio:\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return 'bio';\n    case SettingsScreens.PrivacyBirthday:\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return 'birthday';\n    case SettingsScreens.PrivacyGifts:\n    case SettingsScreens.PrivacyGiftsAllowedContacts:\n    case SettingsScreens.PrivacyGiftsDeniedContacts:\n      return 'gifts';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n    case SettingsScreens.PrivacyAddByPhone:\n      return 'addByPhone';\n    case SettingsScreens.PrivacyNoPaidMessages:\n      return 'noPaidMessages';\n  }\n\n  return undefined;\n}\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiDisallowedGiftsSettings } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport ListItem from '../../ui/ListItem';\nimport Switcher from '../../ui/Switcher';\n\ntype StateProps = {\n  disallowedGifts?: ApiDisallowedGiftsSettings;\n  isCurrentUserPremium: boolean;\n};\n\nconst SettingsAcceptedGift = ({\n  disallowedGifts, isCurrentUserPremium,\n}: StateProps) => {\n  const { showNotification, updateGlobalPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const handleOpenTelegramPremiumModal = useLastCallback(() => {\n    showNotification({\n      message: lang('PrivacySubscribeToTelegramPremium'),\n      action: {\n        action: 'openPremiumModal',\n        payload: {},\n      },\n      actionText: { key: 'Open' },\n      icon: 'star',\n    });\n  });\n\n  const handleLimitedEditionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowLimitedStarGifts: !disallowedGifts?.shouldDisallowLimitedStarGifts || undefined,\n      },\n    });\n  });\n\n  const handleUnlimitedEditionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowUnlimitedStarGifts: !disallowedGifts?.shouldDisallowUnlimitedStarGifts || undefined,\n      },\n    });\n  });\n\n  const handleUniqueChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowUniqueStarGifts: !disallowedGifts?.shouldDisallowUniqueStarGifts || undefined,\n      },\n    });\n  });\n\n  const handlePremiumSubscriptionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowPremiumGifts: !disallowedGifts?.shouldDisallowPremiumGifts || undefined,\n      },\n    });\n  });\n\n  return (\n    <div className=\"settings-item\">\n      <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('PrivacyAcceptedGiftTitle')}\n      </h4>\n      <ListItem onClick={handleLimitedEditionChange}>\n        <span>{lang('PrivacyGiftLimitedEdition')}</span>\n        <Switcher\n          id=\"limited_edition\"\n          label={disallowedGifts?.shouldDisallowLimitedStarGifts ? lang('PrivacyDisableLimitedEditionStarGifts')\n            : lang('PrivacyEnableLimitedEditionStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowLimitedStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handleUnlimitedEditionChange}>\n        <span>{lang('PrivacyGiftUnlimited')}</span>\n        <Switcher\n          id=\"unlimited\"\n          label={disallowedGifts?.shouldDisallowUnlimitedStarGifts ? lang('PrivacyDisableUnlimitedStarGifts')\n            : lang('PrivacyEnableUnlimitedStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowUnlimitedStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handleUniqueChange}>\n        <span>{lang('PrivacyGiftUnique')}</span>\n        <Switcher\n          id=\"unique\"\n          label={disallowedGifts?.shouldDisallowUniqueStarGifts ? lang('PrivacyDisableUniqueStarGifts')\n            : lang('PrivacyEnableUniqueStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowUniqueStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handlePremiumSubscriptionChange}>\n        <span>{lang('PrivacyGiftPremiumSubscription')}</span>\n        <Switcher\n          id=\"premium_subscription\"\n          label={disallowedGifts?.shouldDisallowPremiumGifts ? lang('PrivacyDisablePremiumGifts')\n            : lang('PrivacyEnablePremiumGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowPremiumGifts}\n        />\n      </ListItem>\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('PrivacyAcceptedGiftInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          disallowedGifts,\n        },\n      },\n    } = global;\n\n    return {\n      disallowedGifts,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(SettingsAcceptedGift));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { PrivacyVisibility } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium, selectShouldHideReadMarks } from '../../../global/selectors';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  visibility?: PrivacyVisibility;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n  shouldHideReadMarks: boolean;\n};\n\nconst SettingsPrivacyLastSeen = ({\n  isCurrentUserPremium, shouldHideReadMarks, visibility,\n}: OwnProps & StateProps) => {\n  const { updateGlobalPrivacySettings, openPremiumModal } = getActions();\n  const lang = useOldLang();\n  const canShowHideReadTime = visibility === 'nobody' || visibility === 'contacts';\n\n  const handleChangeShouldHideReadMarks = useLastCallback(\n    (isEnabled) => updateGlobalPrivacySettings({ shouldHideReadMarks: isEnabled }),\n  );\n\n  const handleOpenPremiumModal = useLastCallback(() => {\n    openPremiumModal({\n      initialSection: 'last_seen',\n    });\n  });\n\n  return (\n    <>\n      {canShowHideReadTime && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('HideReadTime')}\n            checked={shouldHideReadMarks}\n            onCheck={handleChangeShouldHideReadMarks}\n          />\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('HideReadTimeInfo'), ['br'])}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item\">\n        <ListItem\n          leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n          onClick={handleOpenPremiumModal}\n        >\n          {isCurrentUserPremium ? lang('PrivacyLastSeenPremiumForPremium') : lang('PrivacyLastSeenPremium')}\n        </ListItem>\n        <p\n          className=\"settings-item-description-larger premium-info\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          {isCurrentUserPremium\n            ? lang('PrivacyLastSeenPremiumInfoForPremium')\n            : lang('PrivacyLastSeenPremiumInfo')}\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldHideReadMarks: Boolean(selectShouldHideReadMarks(global)),\n    };\n  },\n)(SettingsPrivacyLastSeen));\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"Qvhl9Jjv\",\"fallbackPhoto\":\"Qvhl9Jjv\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPhoto } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  const inputRef = useRef<HTMLInputElement>();\n\n  useEffect(() => {\n    if (!hasCurrentUserFullInfo) {\n      loadFullUser({ userId: currentUserId });\n    }\n  }, [hasCurrentUserFullInfo, currentUserId, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: currentUserFallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, currentUserFallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        narrow\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(currentUserFallbackPhoto\n          ? 'Privacy.ProfilePhoto.UpdatePublicPhoto'\n          : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {currentUserFallbackPhoto && (\n        <ListItem\n          narrow\n          leftElement={<Avatar photo={currentUserFallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(currentUserFallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiPrivacySettings, BotsPrivacyType } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectUserFullInfo } from '../../../global/selectors';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Switcher from '../../ui/Switcher';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\nimport SettingsAcceptedGift from './SettingsAcceptedGift';\nimport SettingsPrivacyLastSeen from './SettingsPrivacyLastSeen';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n  primaryPrivacy?: ApiPrivacySettings;\n  secondaryPrivacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n  shouldDisplayGiftsButton?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  primaryPrivacy,\n  secondaryPrivacy,\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n  isPremiumRequired,\n  onReset,\n  shouldDisplayGiftsButton,\n  isCurrentUserPremium,\n}) => {\n  const { updateGlobalPrivacySettings, showNotification } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleShowGiftIconInChats = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      showNotification({\n        message: lang('PrivacySubscribeToTelegramPremium'),\n        action: {\n          action: 'openPremiumModal',\n          payload: {},\n        },\n        actionText: { key: 'Open' },\n        icon: 'star',\n      });\n      return;\n    }\n    updateGlobalPrivacySettings({\n      shouldDisplayGiftsButton: !shouldDisplayGiftsButton,\n    });\n  });\n\n  const secondaryScreen = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneP2P;\n      case SettingsScreens.PrivacyPhoneNumber: {\n        return primaryPrivacy?.visibility === 'nobody' ? SettingsScreens.PrivacyAddByPhone : undefined;\n      }\n      default:\n        return undefined;\n    }\n  }, [primaryPrivacy, screen]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {screen === SettingsScreens.PrivacyGifts && (\n        <div className=\"settings-item\">\n          <ListItem onClick={handleShowGiftIconInChats}>\n            <span>{lang('PrivacyDisplayGiftsButton')}</span>\n            <Switcher\n              id=\"gift\"\n              disabled={!isCurrentUserPremium}\n              label={shouldDisplayGiftsButton ? lang('HideGiftsButton') : lang('DisplayGiftsButton')}\n              checked={shouldDisplayGiftsButton}\n            />\n          </ListItem>\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('PrivacyDisplayGiftIconInChats', {\n              icon: <Icon name=\"gift\" className=\"gift-icon\" />,\n              gift: lang('PrivacyDisplayGift'),\n            }, {\n              withNodes: true,\n            })}\n          </p>\n        </div>\n      )}\n      <PrivacySubsection\n        screen={screen}\n        privacy={primaryPrivacy}\n        isPremiumRequired={isPremiumRequired}\n      />\n      {screen === SettingsScreens.PrivacyProfilePhoto && primaryPrivacy?.visibility !== 'everybody' && (\n        <SettingsPrivacyPublicProfilePhoto\n          currentUserId={currentUserId}\n          hasCurrentUserFullInfo={hasCurrentUserFullInfo}\n          currentUserFallbackPhoto={currentUserFallbackPhoto}\n        />\n      )}\n      {screen === SettingsScreens.PrivacyLastSeen && (\n        <SettingsPrivacyLastSeen visibility={primaryPrivacy?.visibility} />\n      )}\n      {screen === SettingsScreens.PrivacyGifts && (\n        <SettingsAcceptedGift />\n      )}\n      {Boolean(secondaryScreen) && (\n        <PrivacySubsection\n          screen={secondaryScreen}\n          privacy={secondaryPrivacy}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction PrivacySubsection({\n  screen,\n  privacy,\n  isPremiumRequired,\n}: {\n  screen: SettingsScreens;\n  privacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n}) {\n  const { setPrivacyVisibility, openSettingsScreen } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    const hasNobody = screen !== SettingsScreens.PrivacyAddByPhone;\n    const options = [\n      { value: 'everybody', label: oldLang('P2PEverybody') },\n      {\n        value: 'contacts',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={oldLang('P2PContacts')} />\n        ) : (\n          oldLang('P2PContacts')\n        ),\n        hidden: isPremiumRequired,\n      },\n    ];\n\n    if (hasNobody) {\n      options.push({\n        value: 'nobody',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={oldLang('P2PNobody')} />\n        ) : (\n          oldLang('P2PNobody')\n        ),\n        hidden: isPremiumRequired,\n      });\n    }\n    return options;\n  }, [oldLang, screen, isPremiumRequired]);\n\n  const primaryExceptionLists = useMemo(() => {\n    if (screen === SettingsScreens.PrivacyAddByPhone) {\n      return {\n        shouldShowDenied: false,\n        shouldShowAllowed: false,\n      };\n    }\n\n    return {\n      shouldShowDenied: privacy?.visibility !== 'nobody',\n      shouldShowAllowed: privacy?.visibility !== 'everybody',\n    };\n  }, [privacy, screen]);\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyGifts:\n        return lang('PrivacyGiftsInfo');\n      case SettingsScreens.PrivacyLastSeen:\n        return oldLang('CustomHelp');\n      case SettingsScreens.PrivacyAddByPhone: {\n        return privacy?.visibility === 'everybody' ? oldLang('PrivacyPhoneInfo') : oldLang('PrivacyPhoneInfo3');\n      }\n      case SettingsScreens.PrivacyVoiceMessages:\n        return oldLang('PrivacyVoiceMessagesInfo');\n      default:\n        return undefined;\n    }\n  }, [oldLang, lang, screen, privacy]);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return oldLang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyAddByPhone:\n        return oldLang('PrivacyPhoneTitle2');\n      case SettingsScreens.PrivacyLastSeen:\n        return oldLang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return oldLang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyBio:\n        return oldLang('PrivacyBioTitle');\n      case SettingsScreens.PrivacyBirthday:\n        return oldLang('PrivacyBirthdayTitle');\n      case SettingsScreens.PrivacyGifts:\n        return lang('PrivacyGiftsTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return oldLang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return oldLang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return oldLang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return oldLang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return oldLang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [oldLang, lang, screen]);\n\n  const prepareSubtitle = useLastCallback(\n    (userIds?: string[], chatIds?: string[], shouldAllowPremium?: boolean, botsPrivacy?: BotsPrivacyType) => {\n      const userIdsCount = userIds?.length || 0;\n      const chatIdsCount = chatIds?.length || 0;\n      const isAllowBots = botsPrivacy === 'allow';\n      const hasPeers = userIdsCount || chatIdsCount;\n\n      if (!hasPeers && !isAllowBots) {\n        return shouldAllowPremium ? oldLang('PrivacyPremium') : oldLang('EditAdminAddUsers');\n      } else if (shouldAllowPremium) {\n        return oldLang('ContactsAndPremium');\n      }\n\n      const userCountString = userIdsCount > 0 ? oldLang('Users', userIdsCount) : undefined;\n      const chatCountString = chatIdsCount > 0 ? oldLang('Chats', chatIdsCount) : undefined;\n\n      const botPrivacyString = isAllowBots ? lang('PrivacyValueBots') : '';\n      const peersString = lang.conjunction([userCountString, chatCountString].filter(Boolean));\n\n      return [botPrivacyString, peersString].filter(Boolean).join(' ');\n    },\n  );\n\n  const allowedString = useMemo(() => {\n    return prepareSubtitle(\n      privacy?.allowUserIds,\n      privacy?.allowChatIds,\n      privacy?.shouldAllowPremium,\n      privacy?.botsPrivacy,\n    );\n  }, [privacy]);\n\n  const blockString = useMemo(() => {\n    return prepareSubtitle(privacy?.blockUserIds, privacy?.blockChatIds);\n  }, [privacy]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioAllowedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayAllowedContacts;\n      case SettingsScreens.PrivacyGifts:\n        return SettingsScreens.PrivacyGiftsAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioDeniedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayDeniedContacts;\n      case SettingsScreens.PrivacyGifts:\n        return SettingsScreens.PrivacyGiftsDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={privacy?.visibility}\n        />\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={oldLang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n      {!isPremiumRequired && (primaryExceptionLists.shouldShowAllowed || primaryExceptionLists.shouldShowDenied) && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('PrivacyExceptions')}\n          </h4>\n          {primaryExceptionLists.shouldShowAllowed && (\n            <ListItem\n              narrow\n              icon=\"add-user\"\n\n              onClick={() => {\n                openSettingsScreen({ screen: allowedContactsScreen });\n              }}\n            >\n              <div className=\"multiline-item full-size\">\n                <span className=\"title\">{oldLang('AlwaysAllow')}</span>\n                <span className=\"subtitle\">{allowedString}</span>\n              </div>\n            </ListItem>\n          )}\n          {primaryExceptionLists.shouldShowDenied && (\n            <ListItem\n              narrow\n              icon=\"delete-user\"\n\n              onClick={() => {\n                openSettingsScreen({ screen: deniedContactsScreen });\n              }}\n            >\n              <div className=\"multiline-item full-size\">\n                <span className=\"title\">{oldLang('NeverAllow')}</span>\n                <span className=\"subtitle\">{blockString}</span>\n              </div>\n            </ListItem>\n          )}\n        </div>\n      )}\n      {isPremiumRequired && <PremiumStatusItem />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let primaryPrivacy: ApiPrivacySettings | undefined;\n    let secondaryPrivacy: ApiPrivacySettings | undefined;\n\n    const {\n      currentUserId,\n      settings: {\n        privacy,\n        byKey: {\n          shouldDisplayGiftsButton,\n        },\n      },\n    } = global;\n\n    const currentUserFullInfo = selectUserFullInfo(global, currentUserId!);\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        primaryPrivacy = privacy.phoneNumber;\n        secondaryPrivacy = privacy.addByPhone;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        primaryPrivacy = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        primaryPrivacy = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyBio:\n        primaryPrivacy = privacy.bio;\n        break;\n\n      case SettingsScreens.PrivacyBirthday:\n        primaryPrivacy = privacy.birthday;\n        break;\n\n      case SettingsScreens.PrivacyGifts:\n        primaryPrivacy = privacy.gifts;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyPhoneCall:\n        primaryPrivacy = privacy.phoneCall;\n        secondaryPrivacy = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        primaryPrivacy = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        primaryPrivacy = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        primaryPrivacy = privacy.chatInvite;\n        break;\n    }\n\n    if (!primaryPrivacy) {\n      return {\n        currentUserId: currentUserId!,\n        hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n        currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      };\n    }\n\n    return {\n      primaryPrivacy,\n      secondaryPrivacy,\n      currentUserId: currentUserId!,\n      hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n      currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      isPremiumRequired: screen === SettingsScreens.PrivacyVoiceMessages && !selectIsCurrentUserPremium(global),\n      shouldDisplayGiftsButton,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { CustomPeerType, UniqueCustomPeer } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  isChatChannel, isDeletedUser,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport { CUSTOM_PEER_PREMIUM } from '../../../util/objects/customPeer';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  withPremiumCategory?: boolean;\n  withMiniAppsCategory?: boolean;\n  usersOnly?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst PREMIUM_CATEGORY = [CUSTOM_PEER_PREMIUM];\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  withPremiumCategory,\n  withMiniAppsCategory,\n  screen,\n  isActive,\n  currentUserId,\n  settings,\n  usersOnly = false,\n  onReset,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const customPeerBots: UniqueCustomPeer = useMemo(() => {\n    return {\n      isCustomPeer: true,\n      type: 'bots',\n      title: lang('PrivacyValueBots'),\n      avatarIcon: 'bots',\n      isAvatarSquare: true,\n      peerColorId: 6,\n    };\n  }, [lang]);\n\n  const miniAppsCategory = useMemo(() => {\n    return [customPeerBots];\n  }, [customPeerBots]);\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const selectedCategoryTypes = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n    if (settings.shouldAllowPremium) {\n      return [CUSTOM_PEER_PREMIUM.type];\n    }\n    if (settings.botsPrivacy === 'allow' && isAllowList) {\n      return [customPeerBots.type];\n    }\n    return [];\n  }, [settings, isAllowList, customPeerBots]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n  const [newSelectedCategoryTypes, setNewSelectedCategoryTypes] = useState<CustomPeerType[]>(selectedCategoryTypes);\n\n  // Reset selected contact ids on change from other client when screen is not active\n  useEffect(() => {\n    if (!isActive) {\n      setNewSelectedContactIds(selectedContactIds);\n      setNewSelectedCategoryTypes(selectedCategoryTypes);\n    }\n  }, [isActive, selectedCategoryTypes, selectedContactIds]);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n        const user = usersById[chatId];\n        const isDeleted = user && isDeletedUser(user);\n        const isChannel = chat && isChatChannel(chat);\n        return (!usersOnly || user)\n          && chatId !== currentUserId\n          && chatId !== SERVICE_NOTIFICATIONS_USER_ID\n          && !isChannel && !isDeleted;\n      });\n\n    const filteredChats = filterPeersByQuery({ ids: chatIds, query: searchQuery });\n\n    // Show only relevant items\n    if (searchQuery) return filteredChats;\n\n    return unique([\n      ...selectedContactIds,\n      ...chatIds,\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, searchQuery, currentUserId, usersOnly]);\n\n  const handleSelectedCategoriesChange = useCallback((value: CustomPeerType[]) => {\n    setNewSelectedCategoryTypes(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      updatedIds: newSelectedContactIds,\n      isPremiumAllowed: newSelectedCategoryTypes.includes(CUSTOM_PEER_PREMIUM.type) || undefined,\n      botsPrivacy: (!withMiniAppsCategory) ? 'none'\n        : (newSelectedCategoryTypes.includes(customPeerBots.type) ? 'allow' : 'disallow'),\n    });\n\n    onReset();\n  }, [\n    isAllowList,\n    withMiniAppsCategory,\n    newSelectedCategoryTypes,\n    newSelectedContactIds,\n    onReset,\n    screen,\n    customPeerBots,\n  ]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function getCustomCategory() {\n    if (withPremiumCategory) return PREMIUM_CATEGORY;\n    if (withMiniAppsCategory && isAllowList) return miniAppsCategory;\n    return undefined;\n  }\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <PeerPicker\n        categories={getCustomCategory()}\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        selectedCategories={newSelectedCategoryTypes}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? oldLang('AlwaysAllowPlaceholder') : oldLang('NeverAllowPlaceholder')}\n        categoryPlaceholderKey=\"PrivacyUserTypes\"\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onSelectedCategoriesChange={handleSelectedCategoriesChange}\n        onFilterChange={setSearchQuery}\n        allowMultiple\n        itemInputType=\"checkbox\"\n        withDefaultPadding\n        withStatus\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? oldLang('AlwaysAllow') : oldLang('NeverAllow')}\n      >\n        <Icon name=\"check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return privacy.bio;\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return privacy.birthday;\n    case SettingsScreens.PrivacyGiftsAllowedContacts:\n    case SettingsScreens.PrivacyGiftsDeniedContacts:\n      return privacy.gifts;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n    case SettingsScreens.PrivacyNoPaidMessages:\n      return privacy.noPaidMessages;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { type: 'emoji', emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n        withIcon\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { config, reactions } = global;\n\n    return {\n      availableReactions: reactions.availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type { AccountSettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<AccountSettings, (\n    'shouldSuggestStickers' | 'shouldUpdateStickerSetOrder'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n    canPlayAnimatedEmojis: boolean;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldUpdateStickerSetOrder,\n  availableReactions,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n    openSettingsScreen,\n  } = getActions();\n  const lang = useOldLang();\n\n  const stickerSettingsRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickerSetOrderChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldUpdateStickerSetOrder: newValue });\n  }, [setSettingOption]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <ListItem\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.CustomEmoji })}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            narrow\n\n            onClick={() => openSettingsScreen({ screen: SettingsScreens.QuickReaction })}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('InstalledStickers.DynamicPackOrder')}\n        </h4>\n        <Checkbox\n          label={lang('InstalledStickers.DynamicPackOrder')}\n          checked={shouldUpdateStickerSetOrder}\n          onCheck={handleSuggestStickerSetOrderChange}\n        />\n        <p className=\"settings-item-description mt-3\" dir=\"auto\">\n          {lang('InstalledStickers.DynamicPackOrderInfo')}\n        </p>\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldUpdateStickerSetOrder',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.reactions.availableReactions,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsStickers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.Privacy });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji, selectTabState } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n  recoveryEmail: string;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n  recoveryEmail,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n        {recoveryEmail && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('TwoStepAuth.ConfirmEmailDescription', recoveryEmail)}\n          </p>\n        )}\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  const tabState = selectTabState(global);\n  const recoveryEmail = tabState.recoveryEmail;\n\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n    recoveryEmail,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"edit\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordCurrent })}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaTurnOff })}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCurrentPassword })}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useFlag from '../../../../hooks/useFlag';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Button from '../../../ui/Button';\nimport InputText from '../../../ui/InputText';\nimport Modal from '../../../ui/Modal';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n        {type === 'email' && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('RecoveryEmailSubtitle')}\n          </p>\n        )}\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  errorKey,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n    openSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmailCode });\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCode });\n      }\n    }\n  }, [currentScreen, waitingEmailCodeLength, openSettingsScreen]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPassword });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordConfirm });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordHint });\n  }, [openSettingsScreen]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmail });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updatePassword, openSettingsScreen]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordNew });\n      },\n    });\n  }, [checkPassword, dispatch, openSettingsScreen]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordConfirm });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordHint });\n  }, [openSettingsScreen]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updatePassword, openSettingsScreen]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.Privacy });\n      },\n    });\n  }, [clearPassword, openSettingsScreen]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmail });\n      },\n    });\n  }, [checkPassword, dispatch, openSettingsScreen]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updateRecoveryEmail, openSettingsScreen]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={oldLang('PleaseEnterPassword')}\n          submitLabel={oldLang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={oldLang('PleaseReEnterPassword')}\n          submitLabel={oldLang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={oldLang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          placeholder={oldLang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={oldLang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={oldLang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={oldLang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={oldLang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { LAYERS_ANIMATION_NAME } from '../../../util/browser/windowEnvironment';\n\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMarkScrolled from '../../../hooks/useMarkScrolled/useMarkScrolled';\n\nimport Transition from '../../ui/Transition';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport PrivacyMessages from './PrivacyMessages';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsExperimental from './SettingsExperimental';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsMain from './SettingsMain';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPerformance from './SettingsPerformance';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersEditFolderInvites,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n  SettingsScreens.FoldersShare,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_BIO_SCREENS = [\n  SettingsScreens.PrivacyBioAllowedContacts,\n  SettingsScreens.PrivacyBioDeniedContacts,\n];\n\nconst PRIVACY_BIRTHDAY_SCREENS = [\n  SettingsScreens.PrivacyBirthdayAllowedContacts,\n  SettingsScreens.PrivacyBirthdayDeniedContacts,\n];\n\nconst PRIVACY_GIFTS_SCREENS = [\n  SettingsScreens.PrivacyGiftsAllowedContacts,\n  SettingsScreens.PrivacyGiftsDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nconst PRIVACY_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyNoPaidMessages,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const { closeShareChatFolderModal, openSettingsScreen } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  useMarkScrolled({\n    containerRef,\n    selector: '.settings-content',\n  }, [currentScreen]);\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    const isFromSettings = selectTabState(getGlobal()).shareFolderScreen?.isFromSettings;\n\n    if (currentScreen === SettingsScreens.FoldersShare) {\n      closeShareChatFolderModal();\n    }\n\n    if (forceReturnToChatList === true || (isFromSettings !== undefined && !isFromSettings)) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n      } else {\n        openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n      }\n      return;\n    }\n\n    onReset();\n  });\n\n  function renderCurrentSectionContent(isScreenActive: boolean, activeScreen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBio]: PRIVACY_BIO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBirthday]: PRIVACY_BIRTHDAY_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyGifts]: PRIVACY_GIFTS_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyMessages]: PRIVACY_MESSAGES_SCREENS.includes(activeScreen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(activeScreen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(activeScreen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(activeScreen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(activeScreen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).map(Number).includes(activeScreen)\n      || Object.values(privacyAllowScreens).includes(true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            isActive={isScreenActive\n              || activeScreen === SettingsScreens.GeneralChatBackgroundColor\n              || activeScreen === SettingsScreens.GeneralChatBackground\n              || activeScreen === SettingsScreens.QuickReaction\n              || activeScreen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || activeScreen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            isActive={isScreenActive || activeScreen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyBio:\n      case SettingsScreens.PrivacyBirthday:\n      case SettingsScreens.PrivacyGifts:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyGiftsAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      case SettingsScreens.PrivacyNoPaidMessages:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            usersOnly={currentScreen === SettingsScreens.PrivacyNoPaidMessages}\n            withPremiumCategory={currentScreen === SettingsScreens.PrivacyGroupChatsAllowedContacts}\n            withMiniAppsCategory={currentScreen === SettingsScreens.PrivacyGiftsAllowedContacts}\n            screen={currentScreen}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyGiftsDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyMessages:\n        return (\n          <PrivacyMessages\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n      case SettingsScreens.FoldersShare:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={activeScreen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Performance:\n        return (\n          <SettingsPerformance\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(\n    isScreenActive: boolean,\n    _isFrom: boolean,\n    _currentKey: SettingsScreens,\n    activeKey: SettingsScreens,\n  ) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, activeKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      ref={containerRef}\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n      shouldWrap\n      withSwipeControl\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { sortUserIds } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterPeersByQuery({ ids: contactIds, query: filter, type: 'user' });\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable contact-list-item\"\n            onClick={() => handleClick(id)}\n          >\n            <PrivateChatInfo\n              userId={id}\n              forceShowSelf\n              avatarSize=\"large\"\n              withStory\n              storyViewerOrigin={StoryViewerOrigin.ChatList}\n              ripple={!isMobile}\n            />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <Icon name=\"add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { isUserBot } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localPeerIds?: string[];\n  globalPeerIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localPeerIds,\n  globalPeerIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, []);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds\n      ? filterPeersByQuery({ ids: localContactIds, query: searchQuery, type: 'user' }) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localPeerIds || []),\n        ...(globalPeerIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        return user && !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, searchQuery, localPeerIds, globalPeerIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    setGlobalSearchQuery({ query: '' });\n    onNextStep();\n  }, [onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          isSearchable\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n          withDefaultPadding\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <Icon name=\"arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { peerIds: globalPeerIds } = globalResults || {};\n    const { peerIds: localPeerIds } = localResults || {};\n\n    return {\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalPeerIds,\n      localPeerIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectTabState } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst MAX_MEMBERS_FOR_GENERATE_CHAT_NAME = 4;\n\nconst NewChatStep2: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  useEffect(() => {\n    if (isChannel) {\n      return;\n    }\n    if (!memberIds.length || memberIds.length > MAX_MEMBERS_FOR_GENERATE_CHAT_NAME) {\n      setTitle('');\n      return;\n    }\n    const global = getGlobal();\n    const usersById = global.users.byId;\n    const memberFirstNames = [global.currentUserId!, ...memberIds]\n      .map((userId) => getUserFirstOrLastName(usersById[userId]))\n      .filter(Boolean);\n    const generatedChatName = memberFirstNames.slice(0, -1).join(', ')\n      + lang('CreateGroup.PeersTitleLastDelimeter')\n      + memberFirstNames[memberFirstNames.length - 1];\n    setTitle(generatedChatName);\n  }, [isChannel, memberIds, lang]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n      isChannel: true,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/browser/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onReset,\n}) => {\n  const { openLeftColumnContent, setGlobalSearchQuery } = getActions();\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    openLeftColumnContent({\n      contentKey: isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2,\n    });\n  }, [isChannel]);\n\n  const changeSelectedMemberIdsHandler = useLastCallback((ids: string[]) => {\n    const isSelection = ids.length > newChatMemberIds.length;\n\n    setNewChatMemberIds(ids);\n    if (isSelection) {\n      setGlobalSearchQuery({ query: '' });\n    }\n  });\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={changeSelectedMemberIdsHandler}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","// extracted by mini-css-extract-plugin\nexport default {\"name\":\"BDZrSTO_\",\"root\":\"QOz6fQFU\",\"avatar\":\"dXSy0i2c\",\"avatarHidden\":\"n0vJEdNW\",\"ghost\":\"E1IeDpeb\",\"ghostAnimateName\":\"HMp3KTKQ\",\"ghostRevealName\":\"unYkDic1\",\"ghostLast\":\"dZJGfaXC\"};","import { ANIMATION_END_DELAY } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { applyStyles } from '../../../util/animation';\nimport stopEvent from '../../../util/stopEvent';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport ribbonStyles from '../StoryRibbon.module.scss';\nimport togglerStyles from '../StoryToggler.module.scss';\n\nexport const ANIMATION_DURATION = 250;\nconst RIBBON_OFFSET = 0.25 * REM;\nconst RIBBON_Z_INDEX = 11;\nconst STROKE_OFFSET = 0.1875 * REM;\nconst CANVAS_OFFSET = 0.125 * REM;\n\nconst callbacks = new Set<NoneToVoidFunction>();\n\nexport function animateOpening(isArchived?: boolean) {\n  cancelDelayedCallbacks();\n\n  const {\n    container, toggler, leftMainHeader, ribbonPeers, toggleAvatars,\n  } = getHTMLElements(isArchived);\n\n  if (!toggler || !toggleAvatars || !ribbonPeers || !container || !leftMainHeader) {\n    return;\n  }\n\n  const { bottom: headerBottom, right: headerRight } = leftMainHeader.getBoundingClientRect();\n  const toTop = headerBottom + RIBBON_OFFSET;\n\n  // Toggle avatars are in the reverse order\n  const lastToggleAvatar = toggleAvatars[0];\n  const firstToggleAvatar = toggleAvatars[toggleAvatars.length - 1];\n  const lastId = getPeerId(lastToggleAvatar);\n\n  Array.from(ribbonPeers).reverse().forEach((peer, index, { length }) => {\n    const id = getPeerId(peer);\n    if (!id) return;\n    const isLast = id === lastId;\n    let toggleAvatar = selectByPeerId(toggler, id);\n    let zIndex = RIBBON_Z_INDEX + index + 1;\n    if (!toggleAvatar) {\n      const isSelf = index === length - 1;\n\n      // Self story should appear from the first toggle avatar\n      toggleAvatar = isSelf ? firstToggleAvatar : lastToggleAvatar;\n      zIndex = RIBBON_Z_INDEX;\n    }\n\n    if (!toggleAvatar) return;\n\n    let {\n\n      top: fromTop,\n      left: fromLeft,\n      width: fromWidth,\n    } = toggleAvatar.getBoundingClientRect();\n\n    const {\n      left: toLeft,\n      width: toWidth,\n    } = peer.getBoundingClientRect();\n\n    if (toLeft > headerRight) {\n      return;\n    }\n\n    fromLeft -= STROKE_OFFSET;\n    fromWidth += 2 * STROKE_OFFSET;\n\n    const fromTranslateX = fromLeft - toLeft;\n    const fromTranslateY = fromTop - toTop;\n    const fromScale = fromWidth / toWidth;\n\n    fromTop -= STROKE_OFFSET;\n\n    const toTranslateX = toLeft - fromLeft + 2 * STROKE_OFFSET;\n    const toTranslateY = toTop - fromTop + STROKE_OFFSET;\n    const toScale = toWidth / (fromWidth + 2 * STROKE_OFFSET);\n\n    requestMutation(() => {\n      if (!toggleAvatar) return;\n      const ghost = createGhost(peer);\n\n      let ghost2: HTMLElement | undefined;\n\n      // If this is a toogle avatar we create a second ghost and do crossfade animation\n      if (zIndex > RIBBON_Z_INDEX) {\n        ghost2 = createGhost(toggleAvatar);\n        if (isLast) {\n          ghost2.classList.add(togglerStyles.ghostLast);\n        }\n      } else {\n        // Else we animate only name\n        ghost.classList.add(togglerStyles.ghostAnimateName);\n      }\n\n      applyStyles(ghost, {\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        zIndex: String(zIndex),\n        opacity: ghost2 ? '0' : '',\n        transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScale})`,\n      });\n\n      if (ghost2) {\n        applyStyles(ghost2, {\n          top: `${fromTop}px`,\n          left: `${fromLeft}px`,\n          zIndex: String(zIndex),\n        });\n      }\n\n      container.appendChild(ghost);\n      if (ghost2) {\n        container.appendChild(ghost2);\n      }\n      toggleAvatar.classList.add('animating');\n      peer.classList.add('animating');\n\n      requestMutation(() => {\n        applyStyles(ghost, {\n          opacity: '',\n          transform: '',\n        });\n\n        if (ghost2) {\n          applyStyles(ghost2, {\n            opacity: '0',\n            transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScale})`,\n          });\n        } else {\n          ghost.classList.add(togglerStyles.ghostRevealName);\n        }\n\n        const cb = createDelayedCallback(() => {\n          requestMutation(() => {\n            if (container.contains(ghost)) {\n              container.removeChild(ghost);\n            }\n            if (ghost2 && container.contains(ghost2)) {\n              container.removeChild(ghost2);\n            }\n            toggleAvatar?.classList.remove('animating');\n            peer.classList.remove('animating');\n\n            callbacks.delete(cb);\n          });\n        }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n\n        callbacks.add(cb);\n      });\n    });\n  });\n}\n\nexport function animateClosing(isArchived?: boolean) {\n  cancelDelayedCallbacks();\n\n  const {\n    container,\n    toggler,\n    toggleAvatars,\n    ribbonPeers,\n    leftMainHeader,\n  } = getHTMLElements(isArchived);\n\n  if (!toggler || !toggleAvatars || !ribbonPeers || !container || !leftMainHeader) {\n    return;\n  }\n  const { right: headerRight } = leftMainHeader.getBoundingClientRect();\n\n  // Toggle avatars are in the reverse order\n  const lastToggleAvatar = toggleAvatars[0];\n  const firstToggleAvatar = toggleAvatars[toggleAvatars.length - 1];\n  const lastId = getPeerId(lastToggleAvatar);\n\n  Array.from(ribbonPeers).reverse().forEach((peer, index, { length }) => {\n    const id = getPeerId(peer);\n    if (!id) return;\n    const isLast = id === lastId;\n    let toggleAvatar = selectByPeerId(toggler, id);\n    let zIndex = RIBBON_Z_INDEX + index + 1;\n    if (!toggleAvatar) {\n      const isSelf = index === length - 1;\n\n      // Self story should appear from the first toggle avatar\n      toggleAvatar = isSelf ? firstToggleAvatar : lastToggleAvatar;\n      zIndex = RIBBON_Z_INDEX;\n    }\n\n    if (!toggleAvatar) return;\n\n    const {\n      top: fromTop,\n      left: fromLeft,\n      width: fromWidth,\n    } = peer.getBoundingClientRect();\n\n    let {\n      left: toLeft,\n      width: toWidth,\n      top: toTop,\n    } = toggleAvatar.getBoundingClientRect();\n\n    if (fromLeft > headerRight) {\n      return;\n    }\n\n    toLeft -= STROKE_OFFSET;\n    toWidth += 2 * STROKE_OFFSET;\n\n    const toTranslateX = toLeft - fromLeft;\n    const toTranslateY = toTop - fromTop - CANVAS_OFFSET;\n    const toScale = toWidth / fromWidth;\n\n    toTop -= STROKE_OFFSET;\n\n    const fromTranslateX = fromLeft - toLeft + 2 * STROKE_OFFSET;\n    const fromTranslateY = fromTop - toTop + STROKE_OFFSET;\n    const fromScale = fromWidth / (toWidth + 2 * STROKE_OFFSET);\n\n    requestMutation(() => {\n      const ghost = createGhost(peer);\n      let ghost2: HTMLElement | undefined;\n\n      if (zIndex > RIBBON_Z_INDEX) {\n        ghost2 = createGhost(toggleAvatar);\n        if (isLast) {\n          ghost2.classList.add(togglerStyles.ghostLast);\n        }\n      } else {\n        ghost.classList.add(togglerStyles.ghostAnimateName, togglerStyles.ghostRevealName);\n      }\n\n      applyStyles(ghost, {\n        top: `${fromTop}px`,\n        left: `${fromLeft}px`,\n        width: `${fromWidth}px`,\n        zIndex: String(zIndex),\n      });\n\n      if (ghost2) {\n        applyStyles(ghost2, {\n          top: `${toTop}px`,\n          left: `${toLeft}px`,\n          zIndex: String(zIndex),\n          opacity: '0',\n          transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScale})`,\n        });\n      }\n\n      peer.classList.add('animating');\n      toggleAvatar.classList.add('animating');\n\n      container.appendChild(ghost);\n      if (ghost2) {\n        container.appendChild(ghost2);\n      }\n\n      requestMutation(() => {\n        applyStyles(ghost, {\n          opacity: ghost2 ? '0' : '',\n          transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScale})`,\n        });\n\n        if (ghost2) {\n          applyStyles(ghost2, {\n            opacity: '',\n            transform: '',\n          });\n        } else {\n          ghost.classList.remove(togglerStyles.ghostRevealName);\n        }\n\n        const cb = createDelayedCallback(() => {\n          requestMutation(() => {\n            if (container.contains(ghost)) {\n              container.removeChild(ghost);\n            }\n            if (ghost2 && container.contains(ghost2)) {\n              container.removeChild(ghost2);\n            }\n            peer.classList.remove('animating');\n            toggleAvatar.classList.remove('animating');\n          });\n\n          callbacks.delete(cb);\n        }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n\n        callbacks.add(cb);\n      });\n    });\n  });\n}\n\nfunction getHTMLElements(isArchived?: boolean) {\n  let container = document.getElementById('LeftColumn');\n  if (container && isArchived) {\n    container = container.querySelector<HTMLElement>('.ArchivedChats');\n  }\n  if (!container) return {};\n  const toggler = container.querySelector<HTMLElement>('#StoryToggler');\n  const ribbon = container.querySelector<HTMLElement>('#StoryRibbon');\n  const leftMainHeader = container.querySelector<HTMLElement>('.left-header');\n  const ribbonPeers = ribbon?.querySelectorAll<HTMLElement>(`.${ribbonStyles.peer}`);\n  const toggleAvatars = toggler?.querySelectorAll<HTMLElement>('.Avatar');\n\n  return {\n    container,\n    toggler,\n    leftMainHeader,\n    ribbonPeers,\n    toggleAvatars,\n  };\n}\n\nfunction createGhost(sourceEl: HTMLElement) {\n  const ghost = sourceEl.cloneNode(true) as HTMLElement;\n  ghost.classList.add(togglerStyles.ghost);\n\n  // Avoid source animating class being copied to the ghost\n  ghost.classList.remove('animating');\n\n  ghost.draggable = false;\n  ghost.oncontextmenu = stopEvent;\n\n  const sourceCanvas = sourceEl.querySelector('canvas');\n  if (sourceCanvas) {\n    const canvas = ghost.querySelector('canvas');\n    canvas?.getContext('2d')?.drawImage(sourceCanvas, 0, 0);\n  }\n\n  return ghost;\n}\n\nfunction getPeerId(el: HTMLElement) {\n  return el?.getAttribute('data-peer-id');\n}\n\nfunction selectByPeerId(el: HTMLElement, id: string) {\n  return el?.querySelector<HTMLElement>(`[data-peer-id=\"${id}\"]`);\n}\n\nfunction createDelayedCallback(callback: NoneToVoidFunction, ms: number) {\n  const timeout = setTimeout(callback, ms);\n\n  return () => {\n    clearTimeout(timeout);\n    callback();\n  };\n}\n\nfunction cancelDelayedCallbacks() {\n  callbacks.forEach((cb) => cb());\n  callbacks.clear();\n}\n","import type React from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPeer } from '../../api/types';\nimport { StoryViewerOrigin } from '../../types';\n\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useStoryPreloader from './hooks/useStoryPreloader';\n\nimport Avatar from '../common/Avatar';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './StoryRibbon.module.scss';\n\ninterface OwnProps {\n  peer: ApiPeer;\n  isArchived?: boolean;\n}\n\nfunction StoryRibbonButton({ peer, isArchived }: OwnProps) {\n  const {\n    openChat,\n    openChatWithInfo,\n    openStoryViewer,\n    toggleStoriesHidden,\n  } = getActions();\n\n  const lang = useOldLang();\n  const ref = useRef<HTMLDivElement>();\n\n  const isSelf = 'isSelf' in peer && peer.isSelf;\n  const isChannel = !isUserId(peer.id);\n\n  useStoryPreloader(peer.id);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.story-peer-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const handleClick = useLastCallback(() => {\n    if (isContextMenuOpen) return;\n\n    openStoryViewer({ peerId: peer.id, origin: StoryViewerOrigin.StoryRibbon });\n  });\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleSavedStories = useLastCallback(() => {\n    openChatWithInfo({ id: peer.id, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  const handleArchivedStories = useLastCallback(() => {\n    openChatWithInfo({ id: peer.id, shouldReplaceHistory: true, profileTab: 'storiesArchive' });\n  });\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: peer.id, shouldReplaceHistory: true });\n  });\n\n  const handleOpenProfile = useLastCallback(() => {\n    openChatWithInfo({ id: peer.id, shouldReplaceHistory: true });\n  });\n\n  const handleArchivePeer = useLastCallback(() => {\n    toggleStoriesHidden({ peerId: peer.id, isHidden: !isArchived });\n  });\n\n  return (\n    <div\n      ref={ref}\n      role=\"button\"\n      data-peer-id={peer.id}\n      tabIndex={0}\n      className={styles.peer}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      <Avatar\n        peer={peer}\n        withStory\n        storyViewerOrigin={StoryViewerOrigin.StoryRibbon}\n        storyViewerMode=\"full\"\n      />\n      <div className={buildClassName(styles.name, peer.hasUnreadStories && styles.name_hasUnreadStory)}>\n        {isSelf ? lang('MyStory') : getPeerTitle(lang, peer)}\n      </div>\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className={buildClassName('story-peer-context-menu', styles.contextMenu)}\n          autoClose\n          withPortal\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {isSelf ? (\n            <>\n              <MenuItem onClick={handleSavedStories} icon=\"play-story\">\n                {lang('StoryList.Context.SavedStories')}\n              </MenuItem>\n              <MenuItem onClick={handleArchivedStories} icon=\"archive\">\n                {lang('StoryList.Context.ArchivedStories')}\n              </MenuItem>\n            </>\n          ) : (\n            <>\n              {!isChannel && (\n                <MenuItem onClick={handleOpenChat} icon=\"message\">\n                  {lang('SendMessageTitle')}\n                </MenuItem>\n              )}\n              {isChannel ? (\n                <MenuItem onClick={handleOpenProfile} icon=\"channel\">\n                  {lang('ChatList.ContextOpenChannel')}\n                </MenuItem>\n              ) : (\n                <MenuItem onClick={handleOpenProfile} icon=\"user\">\n                  {lang('StoryList.Context.ViewProfile')}\n                </MenuItem>\n              )}\n              <MenuItem\n                onClick={handleArchivePeer}\n                icon={isArchived ? 'unarchive' : 'archive'}\n              >\n                {lang(isArchived ? 'StoryList.Context.Unarchive' : 'StoryList.Context.Archive')}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(StoryRibbonButton);\n","import { memo, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiUser } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StoryRibbonButton from './StoryRibbonButton';\n\nimport styles from './StoryRibbon.module.scss';\n\ninterface OwnProps {\n  isArchived?: boolean;\n  className?: string;\n  isClosing?: boolean;\n}\n\ninterface StateProps {\n  orderedPeerIds: string[];\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n}\n\nfunction StoryRibbon({\n  isArchived,\n  className,\n  orderedPeerIds,\n  usersById,\n  chatsById,\n  isClosing,\n}: OwnProps & StateProps) {\n  const lang = useOldLang();\n  const fullClassName = buildClassName(\n    styles.root,\n    !orderedPeerIds.length && styles.hidden,\n    isClosing && styles.closing,\n    className,\n    'no-scrollbar',\n  );\n\n  const ref = useRef<HTMLDivElement>();\n\n  useHorizontalScroll(ref, getIsMobile());\n\n  return (\n    <div\n      ref={ref}\n      id=\"StoryRibbon\"\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {orderedPeerIds.map((peerId) => {\n        const peer = usersById[peerId] || chatsById[peerId];\n\n        if (!peer) {\n          return undefined;\n        }\n\n        return (\n          <StoryRibbonButton\n            key={peerId}\n            peer={peer}\n            isArchived={isArchived}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isArchived }): StateProps => {\n    const { orderedPeerIds: { active, archived } } = global.stories;\n    const usersById = global.users.byId;\n    const chatsById = global.chats.byId;\n\n    return {\n      orderedPeerIds: isArchived ? archived : active,\n      usersById,\n      chatsById,\n    };\n  },\n)(StoryRibbon));\n","import {\n  beginHeavyAnimation, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiUser } from '../../api/types';\nimport type { GlobalState } from '../../global/types';\n\nimport { ANIMATION_END_DELAY, PREVIEW_AVATAR_COUNT } from '../../config';\nimport { selectIsForumPanelOpen, selectPerformanceSettingsValue, selectTabState } from '../../global/selectors';\nimport { animateClosing, animateOpening, ANIMATION_DURATION } from './helpers/ribbonAnimation';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useStoryPreloader from './hooks/useStoryPreloader';\n\nimport Avatar from '../common/Avatar';\n\nimport styles from './StoryToggler.module.scss';\n\ninterface OwnProps {\n  isArchived?: boolean;\n  canShow?: boolean;\n}\n\ninterface StateProps {\n  currentUserId: string;\n  orderedPeerIds: string[];\n  isShown: boolean;\n  isForumPanelOpen?: boolean;\n  withAnimation?: boolean;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n  peerStories: GlobalState['stories']['byPeerId'];\n}\n\nconst PRELOAD_PEERS = 5;\n\nfunction StoryToggler({\n  currentUserId,\n  orderedPeerIds,\n  usersById,\n  chatsById,\n  canShow,\n  isShown,\n  isForumPanelOpen,\n  isArchived,\n  withAnimation,\n  peerStories,\n}: OwnProps & StateProps) {\n  const { toggleStoryRibbon } = getActions();\n\n  const lang = useOldLang();\n\n  const peers = useMemo(() => {\n    if (orderedPeerIds.length === 1) {\n      return [usersById[orderedPeerIds[0]] || chatsById[orderedPeerIds[0]]];\n    }\n\n    return orderedPeerIds\n      .map((id) => usersById[id] || chatsById[id])\n      .filter((peer) => peer && peer.id !== currentUserId)\n      .slice(0, PREVIEW_AVATAR_COUNT)\n      .reverse();\n  }, [currentUserId, orderedPeerIds, usersById, chatsById]);\n\n  const closeFriends = useMemo(() => {\n    if (!peers?.length) return {};\n    return peers.reduce((acc, peer) => {\n      const stories = peerStories[peer.id];\n      if (!stories) return acc;\n\n      const isCloseFriend = stories.orderedIds.some((id) => {\n        const story = stories.byId[id];\n        if (!story || !('isForCloseFriends' in story)) return false;\n        const isRead = stories.lastReadId && story.id <= stories.lastReadId;\n        return story.isForCloseFriends && !isRead;\n      });\n\n      acc[peer.id] = isCloseFriend;\n      return acc;\n    }, {} as Record<string, boolean>);\n  }, [peerStories, peers]);\n\n  const preloadPeerIds = useMemo(() => {\n    return orderedPeerIds.slice(0, PRELOAD_PEERS);\n  }, [orderedPeerIds]);\n\n  useStoryPreloader(preloadPeerIds);\n\n  const isVisible = canShow && isShown;\n  // For some reason, setting 'slow' here also fixes scroll freezes on iOS when collapsing Story Ribbon\n  const { ref, shouldRender } = useShowTransition<HTMLButtonElement>({\n    isOpen: isVisible,\n    className: 'slow',\n    withShouldRender: true,\n  });\n\n  useEffect(() => {\n    if (!withAnimation || isForumPanelOpen) return;\n    if (isVisible) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(isArchived);\n    } else {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(isArchived);\n    }\n  }, [isArchived, isVisible, withAnimation, isForumPanelOpen]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <button\n      ref={ref}\n      type=\"button\"\n      id=\"StoryToggler\"\n      className={styles.root}\n      aria-label={lang('Chat.Context.Peer.OpenStory')}\n      onClick={() => toggleStoryRibbon({ isShown: true, isArchived })}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {peers.map((peer) => (\n        <Avatar\n          key={peer.id}\n          peer={peer}\n          size=\"tiny\"\n          className={styles.avatar}\n          withStorySolid\n          forceFriendStorySolid={closeFriends[peer.id]}\n        />\n      ))}\n    </button>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { isArchived }): StateProps => {\n  const { orderedPeerIds: { archived, active }, byPeerId } = global.stories;\n  const { storyViewer: { isRibbonShown, isArchivedRibbonShown } } = selectTabState(global);\n  const isForumPanelOpen = selectIsForumPanelOpen(global);\n  const withAnimation = selectPerformanceSettingsValue(global, 'storyRibbonAnimations');\n\n  return {\n    currentUserId: global.currentUserId!,\n    orderedPeerIds: isArchived ? archived : active,\n    isShown: isArchived ? !isArchivedRibbonShown : !isRibbonShown,\n    isForumPanelOpen,\n    withAnimation,\n    usersById: global.users.byId,\n    chatsById: global.chats.byId,\n    peerStories: byPeerId,\n  };\n})(StoryToggler));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { ANIMATION_DURATION } from '../story/helpers/ribbonAnimation';\n\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../common/icons/Icon';\nimport StoryRibbon from '../story/StoryRibbon';\nimport StoryToggler from '../story/StoryToggler';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  foldersDispatch: FolderEditDispatch;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  isStoryRibbonShown,\n  onReset,\n  onTopicSearch,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useLastCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  });\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransitionDeprecated(!isForumPanelOpen, undefined, undefined, false);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransitionDeprecated(\n    isStoryRibbonShown, undefined, undefined, '', false, ANIMATION_DURATION + ANIMATION_END_DELAY,\n  );\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className={buildClassName('left-header', !shouldRenderStoryRibbon && 'left-header-shadow')}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelVisible && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        <div className=\"story-toggler-wrapper\">\n          <StoryToggler canShow isArchived />\n        </div>\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'chat-list-wrapper',\n          shouldRenderStoryRibbon && 'with-story-ribbon',\n          storyRibbonClassNames,\n        )}\n      >\n        {shouldRenderStoryRibbon && (\n          <StoryRibbon isArchived className=\"left-header-shadow\" isClosing={isStoryRibbonClosing} />\n        )}\n        <ChatList\n          folderType=\"archived\"\n          isActive={isActive}\n          isForumPanelOpen={isForumPanelVisible}\n          isMainList\n          foldersDispatch={foldersDispatch}\n          archiveSettings={archiveSettings}\n        />\n      </div>\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import { useRef } from '../../../../lib/teact/teact';\n\nimport useForceUpdate from '../../../../hooks/useForceUpdate';\nimport usePreviousDeprecated from '../../../../hooks/usePreviousDeprecated';\n\nexport default function useLeftHeaderButtonRtlForumTransition(shouldHideSearch?: boolean) {\n  const forceUpdate = useForceUpdate();\n  const shouldDisableDropdownMenuTransitionRef = useRef(shouldHideSearch);\n  const prevShouldHideSearch = usePreviousDeprecated(shouldHideSearch);\n\n  function handleDropdownMenuTransitionEnd() {\n    shouldDisableDropdownMenuTransitionRef.current = Boolean(shouldHideSearch);\n    forceUpdate();\n  }\n\n  if (shouldHideSearch === false && prevShouldHideSearch !== shouldHideSearch) {\n    shouldDisableDropdownMenuTransitionRef.current = false;\n  }\n\n  return { shouldDisableDropdownMenuTransitionRef, handleDropdownMenuTransitionEnd };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\nimport Modal from '../ui/Modal';\n\nimport styles from './ChatFolderModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useOldLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID)\n      .map((folderId) => {\n        const folder = foldersById ? foldersById[folderId] : undefined;\n        const label = folder ? renderTextWithEntities({\n          text: folder.title.text,\n          entities: folder.title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }) : '';\n        return {\n          label,\n          value: String(folderId),\n        };\n      }) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className={buildClassName(styles.root, 'delete')}\n      contentClassName={styles.modalContent}\n      title={lang('FilterAddTo')}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')}>\n        <CheckboxGroup\n          options={folders}\n          selected={selectedFolderIds}\n          onChange={setSelectedFolderIds}\n        />\n      </div>\n      <div className={styles.footer}>\n        <div className=\"dialog-buttons\">\n          <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n            {lang('FilterAddTo')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalContent\":\"EG5lPWY1\",\"root\":\"_fJBBCCE\",\"main\":\"heYMHiUt\",\"footer\":\"_jtqAaUU\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { MAX_INT_32 } from '../../config';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  topicId?: number;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nenum MuteDuration {\n  OneHour = '3600',\n  FourHours = '14400',\n  EightHours = '28800',\n  OneDay = '86400',\n  ThreeDays = '259200',\n  Forever = '-1',\n}\n\nconst MuteChatModal: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  topicId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [muteUntilOption, setMuteUntilOption] = useState(MuteDuration.Forever);\n  const { updateChatMutedState, updateTopicMutedState } = getActions();\n\n  const lang = useOldLang();\n\n  const muteForOptions = useMemo(() => [\n    { label: lang('MuteFor.Hours', 1), value: MuteDuration.OneHour },\n    { label: lang('MuteFor.Hours', 4), value: MuteDuration.FourHours },\n    { label: lang('MuteFor.Hours', 8), value: MuteDuration.EightHours },\n    { label: lang('MuteFor.Days', 1), value: MuteDuration.OneDay },\n    { label: lang('MuteFor.Days', 3), value: MuteDuration.ThreeDays },\n    { label: lang('MuteFor.Forever'), value: MuteDuration.Forever },\n  ], [lang]);\n\n  const handleSubmit = useCallback(() => {\n    let mutedUntil: number;\n    if (muteUntilOption === MuteDuration.Forever) {\n      mutedUntil = MAX_INT_32;\n    } else {\n      mutedUntil = Math.floor(Date.now() / 1000) + Number(muteUntilOption);\n    }\n    if (topicId) {\n      updateTopicMutedState({ chatId, topicId, mutedUntil });\n    } else {\n      updateChatMutedState({ chatId, mutedUntil });\n    }\n    onClose();\n  }, [chatId, muteUntilOption, onClose, topicId]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('Notifications')}\n    >\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"muteFor\"\n        options={muteForOptions}\n        selected={muteUntilOption}\n        onChange={setMuteUntilOption as any}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('Common.Done')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(MuteChatModal);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectPeerPaidMessagesStars,\n  selectShouldSchedule,\n  selectStickerSet,\n  selectThreadInfo,\n  selectTopic,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport renderText from './helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useSchedule from '../../hooks/useSchedule';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport Loading from '../ui/Loading';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldUpdateStickerSetOrder?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  shouldUpdateStickerSetOrder,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePreviousDeprecated(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (!currentMessageList) {\n      return;\n    }\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          messageList: currentMessageList, sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({\n        messageList: currentMessageList,\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && isAdded,\n      });\n      onClose();\n    }\n  }, [currentMessageList, shouldSchedule, requestCalendar, onClose, shouldUpdateStickerSetOrder, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    const fullClassName = buildClassName('modal-header', !shouldHideTopBorder && 'with-top-border');\n\n    return (\n      <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('StickerSetModal', isEmoji && 'custom-emoji')}\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\" onScroll={handleContentScroll}>\n            <div className=\"shared-canvas-container stickers-grid\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat, chatFullInfo) : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = chatId && threadId ? selectTopic(global, chatId, threadId) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo)\n      && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n    const paidMessagesStars = chatId ? selectPeerPaidMessagesStars(global, chatId) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: !paidMessagesStars && selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldUpdateStickerSetOrder: global.settings.byKey.shouldUpdateStickerSetOrder,\n      currentMessageList,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nZYT4vJ3\",\"sets\":\"JzkmXjFF\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiSticker } from '../../api/types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSetIds,\n  canPlayAnimatedEmojis,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n  const lang = useOldLang();\n\n  const customEmojiSets = useMemo(() => {\n    return customEmojiSetIds?.map((id) => getGlobal().stickers.setsById[id]);\n  }, [customEmojiSetIds]);\n\n  const customEmojiModalRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({\n    rootRef: customEmojiModalRef, isDisabled: !customEmojiSets,\n  });\n\n  const prevCustomEmojiSets = usePreviousDeprecated(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useLastCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('lng_custom_emoji_used_sets')}\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef} teactFastList>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => {\n          return (\n            <StickerSetCard\n              key={customEmojiSet.id}\n              className={styles.setCard}\n              stickerSet={customEmojiSet}\n              onClick={handleSetClick}\n              observeIntersection={observeIntersectionForCovers}\n              noPlay={!canPlayAnimatedEmojis}\n            />\n          );\n        })}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotCommand, ApiChat, ApiDisallowedGifts,\n} from '../../api/types';\nimport type { IAnchorPosition, ThreadId } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  getCanAddContact,\n  getCanDeleteChat,\n  getCanManageTopic,\n  getHasAdminRight,\n  getIsSavedDialog,\n  isChatChannel,\n  isChatGroup,\n  isSystemBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport { getIsChatMuted } from '../../global/helpers/notifications';\nimport {\n  selectBot,\n  selectCanGift,\n  selectCanManage,\n  selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsRightColumnShown,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectTabState,\n  selectTopic,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport { disableScrolling } from '../../util/scrollLock';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport MuteChatModal from '../left/MuteChatModal.async';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport Portal from '../ui/Portal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: IconName; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canViewBoosts?: boolean;\n  canViewMonetization?: boolean;\n  canShowBoostModal?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  canTranslate?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  botPrivacyPolicyUrl?: string;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  isForumAsMessages?: true;\n  canAddContact?: boolean;\n  canDeleteChat?: boolean;\n  canReportChat?: boolean;\n  canGift?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n  isRightColumnShown?: boolean;\n  canManage?: boolean;\n  canTranslate?: boolean;\n  isBlocked?: boolean;\n  isBot?: boolean;\n  isChatWithSelf?: boolean;\n  savedDialog?: ApiChat;\n  disallowedGifts?: ApiDisallowedGifts;\n  isAccountFrozen?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  botPrivacyPolicyUrl,\n  withForumActions,\n  isTopic,\n  isForum,\n  isForumAsMessages,\n  isChatInfoShown,\n  canStartBot,\n  canSubscribe,\n  canReportChat,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canViewMonetization,\n  canViewBoosts,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  canGift,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  canManage,\n  isRightColumnShown,\n  canTranslate,\n  isBlocked,\n  isBot,\n  isChatWithSelf,\n  savedDialog,\n  canShowBoostModal,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n  disallowedGifts,\n  isAccountFrozen,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    openFrozenAccountModal,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openMonetizationStatistics,\n    openBoostStatistics,\n    openGiftModal,\n    openThreadWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n    openUrl,\n    toggleManagement,\n    togglePeerTranslations,\n    blockUser,\n    unblockUser,\n    setViewForumAsMessages,\n    openBoostModal,\n    reportMessages,\n    showNotification,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [shouldCloseFast, setShouldCloseFast] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isMuteModalOpen, setIsMuteModalOpen] = useState(false);\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n  const { x, y } = anchor;\n\n  useShowTransitionDeprecated(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const areAllGiftsDisallowed = useMemo(() => {\n    if (!disallowedGifts) {\n      return undefined;\n    }\n    return Object.values(disallowedGifts).every(Boolean);\n  }, [disallowedGifts]);\n\n  const closeMuteModal = useLastCallback(() => {\n    setIsMuteModalOpen(false);\n    onClose();\n  });\n\n  const handleReport = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      setIsMenuOpen(false);\n      reportMessages({ chatId, messageIds: [] });\n    }\n    onClose();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      onClose();\n    } else {\n      setIsDeleteModalOpen(true);\n    }\n    setIsMenuOpen(false);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const handleViewGroupInfo = useLastCallback(() => {\n    openThreadWithInfo({ chatId, threadId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      sendBotCommand({ command: '/start' });\n    }\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      restartBot({ chatId });\n    }\n  });\n\n  const handleUnmuteClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      updateChatMutedState({ chatId, isMuted: false });\n    }\n    closeMenu();\n  });\n\n  const handleMuteClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      closeMenu();\n    } else {\n      markRenderMuteModal();\n      setIsMuteModalOpen(true);\n    }\n    setIsMenuOpen(false);\n  });\n\n  const handleCreateTopicClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openCreateTopicPanel({ chatId });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleEditClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      toggleManagement({ force: true });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleEditTopicClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openEditTopicPanel({ chatId, topicId: Number(threadId) });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleViewAsTopicsClick = useLastCallback(() => {\n    openChat({ id: undefined });\n    setViewForumAsMessages({ chatId, isEnabled: false });\n    closeMenu();\n  });\n\n  const handleEnterVoiceChatClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  });\n\n  const handleLinkedChatClick = useLastCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  });\n\n  const handleGiftClick = useLastCallback(() => {\n    if (areAllGiftsDisallowed && chat) {\n      showNotification({ message: lang('SendDisallowError') });\n      return;\n    }\n    openGiftModal({ forUserId: chatId });\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openGiftModal({ forUserId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleAddContactClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openAddContactDialog({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSubscribe = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      onSubscribeChannel();\n    }\n    closeMenu();\n  });\n\n  const handleVideoCall = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    }\n    closeMenu();\n  });\n\n  const handleCall = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      requestMasterAndRequestCall({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSearch = useLastCallback(() => {\n    onSearchClick();\n    closeMenu();\n  });\n\n  const handleStatisticsClick = useLastCallback(() => {\n    toggleStatistics();\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleMonetizationClick = useLastCallback(() => {\n    openMonetizationStatistics({ chatId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleBoostClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else if (canViewBoosts) {\n      openBoostStatistics({ chatId });\n      setShouldCloseFast(!isRightColumnShown);\n    } else {\n      openBoostModal({ chatId });\n    }\n    closeMenu();\n  });\n\n  const handleEnableTranslations = useLastCallback(() => {\n    togglePeerTranslations({ chatId, isEnabled: true });\n    closeMenu();\n  });\n\n  const handleSelectMessages = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      enterMessageSelectMode();\n    }\n    closeMenu();\n  });\n\n  const handleOpenAsMessages = useLastCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  });\n\n  const handleBlock = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      blockUser({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      unblockUser({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  useEffect(disableScrolling, []);\n\n  const botButtons = useMemo(() => {\n    const commandButtons = botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n\n          onClick={handleClick}\n        >\n          {oldLang(cmd.label)}\n        </MenuItem>\n      );\n    });\n\n    const hasPrivacyCommand = botCommands?.some(({ command }) => command === 'privacy');\n\n    const privacyButton = isBot && (\n      <MenuItem\n        icon=\"privacy-policy\"\n\n        onClick={() => {\n          if (hasPrivacyCommand && !botPrivacyPolicyUrl) {\n            sendBotCommand({ command: '/privacy' });\n          } else {\n            openUrl({ url: botPrivacyPolicyUrl || oldLang('BotDefaultPrivacyPolicy') });\n          }\n          closeMenu();\n        }}\n      >\n        {oldLang('BotPrivacyPolicy')}\n      </MenuItem>\n    );\n\n    return [...commandButtons || [], privacyButton].filter(Boolean);\n  }, [botCommands, oldLang, botPrivacyPolicyUrl, isBot]);\n\n  const deleteTitle = useMemo(() => {\n    if (!chat) return undefined;\n\n    if (savedDialog) {\n      return oldLang('Delete');\n    }\n\n    if (isPrivate) {\n      return oldLang('DeleteChatUser');\n    }\n\n    if (canDeleteChat) {\n      return oldLang('GroupInfo.DeleteAndExit');\n    }\n\n    if (isChannel) {\n      return oldLang('LeaveChannel');\n    }\n\n    return oldLang('Group.LeaveGroup');\n  }, [canDeleteChat, chat, isChannel, isPrivate, savedDialog, oldLang]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n          shouldCloseFast={shouldCloseFast}\n        >\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {oldLang('Search')}\n            </MenuItem>\n          )}\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {oldLang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? oldLang('lng_context_view_topic') : oldLang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canManage && !canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditClick}\n            >\n              {oldLang('Edit')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {oldLang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {oldLang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && !isForumAsMessages && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {oldLang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {oldLang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {oldLang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canShowBoostModal && !canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {oldLang(isChannel ? 'BoostingBoostChannelMenu' : 'BoostingBoostGroupMenu')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {oldLang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {oldLang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {oldLang('VideoCall')}\n            </MenuItem>\n          )}\n          {canMute && (isMuted ? (\n            <MenuItem\n              icon=\"unmute\"\n              onClick={handleUnmuteClick}\n            >\n              {oldLang('ChatsUnmute')}\n            </MenuItem>\n          )\n            : (\n              <MenuItem\n                icon=\"mute\"\n                onClick={handleMuteClick}\n              >\n                {oldLang('ChatsMute')}\n                ...\n              </MenuItem>\n            )\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {oldLang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {oldLang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {oldLang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {oldLang('Boosts')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {oldLang('Statistics')}\n            </MenuItem>\n          )}\n          {isChannel && canViewMonetization && (\n            <MenuItem\n              icon=\"cash-circle\"\n              onClick={handleMonetizationClick}\n            >\n              {oldLang('lng_channel_earn_title')}\n            </MenuItem>\n          )}\n          {canTranslate && (\n            <MenuItem\n              icon=\"language\"\n              onClick={handleEnableTranslations}\n            >\n              {oldLang('lng_context_translate')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {oldLang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGift && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftClick}\n            >\n              {oldLang('ProfileSendAGift')}\n            </MenuItem>\n          )}\n          {isBot && (\n            <MenuItem\n              icon={isBlocked ? 'bots' : 'hand-stop'}\n              onClick={isBlocked ? handleRestartBot : handleBlock}\n            >\n              {isBlocked ? oldLang('BotRestart') : oldLang('Bot.Stop')}\n            </MenuItem>\n          )}\n          {isPrivate && !isChatWithSelf && !isBot && (\n            <MenuItem\n              icon={isBlocked ? 'user' : 'hand-stop'}\n              onClick={isBlocked ? handleUnblock : handleBlock}\n            >\n              {isBlocked ? oldLang('Unblock') : oldLang('BlockUser')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {deleteTitle}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={savedDialog || chat}\n            isSavedDialog={Boolean(savedDialog)}\n          />\n        )}\n        {canMute && shouldRenderMuteModal && chat?.id && (\n          <MuteChatModal\n            isOpen={isMuteModalOpen}\n            onClose={closeMuteModal}\n            onCloseAnimationEnd={unmarkRenderMuteModal}\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n    const canReportChat = isMainThread && !user && (isChatChannel(chat) || isChatGroup(chat));\n\n    const chatBot = !isSystemBot(chatId) ? selectBot(global, chatId) : undefined;\n    const userFullInfo = isPrivate ? selectUserFullInfo(global, chatId) : undefined;\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, chatId) : undefined;\n    const fullInfo = userFullInfo || chatFullInfo;\n    const canGift = selectCanGift(global, chatId);\n\n    const topic = selectTopic(global, chatId, threadId);\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n    const canManage = selectCanManage(global, chatId);\n    // Context menu item should only be displayed if user hid translation panel\n    const canTranslate = selectCanTranslateChat(global, chatId) && fullInfo?.isTranslationDisabled;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const savedDialog = isSavedDialog ? selectChat(global, String(threadId)) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      chat,\n      isMuted: getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      isForumAsMessages: chat?.isForumAsMessages,\n      canAddContact,\n      canDeleteChat: getCanDeleteChat(chat),\n      canReportChat,\n      canGift,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      botCommands: chatBot ? userFullInfo?.botInfo?.commands : undefined,\n      botPrivacyPolicyUrl: chatBot ? userFullInfo?.botInfo?.privacyPolicyUrl : undefined,\n      isChatInfoShown: selectTabState(global).isChatInfoShown\n        && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n      canManage,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      canTranslate,\n      isBlocked: userFullInfo?.isBlocked,\n      isBot: Boolean(chatBot),\n      isChatWithSelf,\n      savedDialog,\n      disallowedGifts: userFullInfo?.disallowedGifts,\n      isAccountFrozen,\n    };\n  },\n)(HeaderMenuContainer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vv5ppXel\",\"active\":\"FVgqrSSK\",\"info\":\"DboxqiZd\",\"topRow\":\"Ymu2m1PR\",\"meta\":\"A2rsvUBm\",\"subtitle\":\"qUzmwaIn\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\n\nimport { getMessageSenderName } from '../../../global/helpers/peers';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport LastMessageMeta from '../../common/LastMessageMeta';\nimport MessageSummary from '../../common/MessageSummary';\n\nimport styles from './MiddleSearchResult.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  message: ApiMessage;\n  senderPeer?: ApiPeer;\n  messageChat?: ApiChat;\n  shouldShowChat?: boolean;\n  query?: string;\n  className?: string;\n  onClick: (message: ApiMessage) => void;\n};\n\nconst TRUNCATE_LENGTH = 200;\n\nconst MiddleSearchResult = ({\n  isActive,\n  message,\n  senderPeer,\n  messageChat,\n  shouldShowChat,\n  query,\n  className,\n  onClick,\n}: OwnProps) => {\n  const lang = useOldLang();\n  const hiddenForwardTitle = message.forwardInfo?.hiddenUserName;\n\n  const peer = shouldShowChat ? messageChat : senderPeer;\n\n  const senderName = shouldShowChat && senderPeer ? getMessageSenderName(lang, message.chatId, senderPeer) : undefined;\n\n  const handleClick = useLastCallback(() => {\n    onClick(message);\n  });\n\n  return (\n    <div\n      role=\"button\"\n      tabIndex={0}\n      className={buildClassName(styles.root, isActive && styles.active, className)}\n      onClick={handleClick}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={peer}\n        text={hiddenForwardTitle}\n        size=\"medium\"\n      />\n      <div className={styles.info}>\n        <div className={styles.topRow}>\n          {(peer && <FullNameTitle peer={peer} withEmojiStatus />) || hiddenForwardTitle}\n          <LastMessageMeta className={styles.meta} message={message} />\n        </div>\n        <div className={styles.subtitle} dir=\"auto\">\n          {senderName && (\n            <>\n              <span className=\"sender-name\">{renderText(senderName)}</span>\n              <span className=\"colon\">:</span>\n            </>\n          )}\n          <MessageSummary message={message} highlight={query} truncateLength={TRUNCATE_LENGTH} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MiddleSearchResult);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"FTMljUuX\",\"header\":\"OvmjSMwA\",\"active\":\"DEIUzXQd\",\"avatar\":\"mp1PmoMq\",\"input\":\"z2K8Q7ib\",\"mobile\":\"u0fb78AA\",\"focused\":\"dqF8dYNx\",\"withDropdown\":\"AqhBggrp\",\"adaptSearchBorders\":\"Q9RZQaTu\",\"dropdown\":\"MFGvbICO\",\"dropdownHidden\":\"Alee0CKy\",\"results\":\"RtfTOE72\",\"placeholder\":\"O1HoZFge\",\"separator\":\"_Yy43QLl\",\"savedTags\":\"BcvAfv1E\",\"wrap\":\"JkESCST6\",\"searchTags\":\"rO3pH3LI\",\"savedSearchTag\":\"qA4gov4D\",\"hash\":\"q5NOmUAM\",\"searchTypes\":\"rVYZG__K\",\"searchType\":\"nE1Xwoo7\",\"selectedType\":\"i29dP8iT\",\"footer\":\"jyS1l9yn\",\"keyboard-visible\":\"ao05jKHW\",\"keyboardVisible\":\"ao05jKHW\",\"counter\":\"NmmL_cO3\",\"mobileNavigation\":\"dLO1hlHU\",\"navigationButton\":\"Z4vLAlsu\",\"navigationDisabled\":\"IqA7R2xO\",\"jumpIn\":\"n9kXbTu6\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiReaction, ApiReactionKey, ApiSavedReactionTag,\n} from '../../../api/types';\nimport type {\n  CustomPeer, MiddleSearchParams, MiddleSearchType, ThreadId,\n} from '../../../types';\n\nimport { ANONYMOUS_USER_ID } from '../../../config';\nimport { requestMeasure, requestMutation, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog, getReactionKey, isSameReaction, isSystemBot,\n} from '../../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectSender,\n  selectTabState,\n} from '../../../global/selectors';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport { getSearchResultKey, parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { debounce, fastRaf } from '../../../util/schedulers';\n\nimport { useClickOutside } from '../../../hooks/events/useOutsideClick';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport SearchInput from '../../ui/SearchInput';\nimport SavedTagButton from '../message/reactions/SavedTagButton';\nimport MiddleSearchResult from './MiddleSearchResult';\n\nimport styles from './MiddleSearch.module.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  threadId?: ThreadId;\n  requestedQuery?: string;\n  savedTags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  savedTag?: ApiReaction;\n  totalCount?: number;\n  lastSearchQuery?: string;\n  foundIds?: SearchResultKey[];\n  isHistoryCalendarOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n  isSavedMessages?: boolean;\n  fetchingQuery?: string;\n  isHashtagQuery?: boolean;\n  searchType?: MiddleSearchType;\n  currentUserId?: string;\n};\n\nconst CHANNELS_PEER: CustomPeer = {\n  isCustomPeer: true,\n  avatarIcon: 'channel-filled',\n  titleKey: 'SearchPublicPosts',\n};\nconst FOCUSED_SEARCH_TRIGGER_OFFSET = 5;\nconst HIDE_TIMEOUT = 200;\nconst RESULT_ITEM_CLASS_NAME = 'MiddleSearchResult';\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MiddleSearch: FC<StateProps> = ({\n  isActive,\n  chat,\n  threadId,\n  requestedQuery,\n  savedTags,\n  savedTag,\n  totalCount,\n  lastSearchQuery,\n  foundIds,\n  isHistoryCalendarOpen,\n  isCurrentUserPremium,\n  isSavedMessages,\n  fetchingQuery,\n  isHashtagQuery,\n  searchType = 'chat',\n  currentUserId,\n}) => {\n  const {\n    updateMiddleSearch,\n    resetMiddleSearch,\n    performMiddleSearch,\n    focusMessage,\n    closeMiddleSearch,\n    openHistoryCalendar,\n    openPremiumModal,\n    loadSavedReactionTags,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const inputRef = useRef<HTMLInputElement>();\n  const containerRef = useRef<HTMLDivElement>();\n  const shouldCancelSearchRef = useRef(false);\n\n  const { isMobile } = useAppLayout();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [query, setQuery] = useState(requestedQuery || '');\n  const [focusedIndex, setFocusedIndex] = useState(0);\n  const canFocusNewer = foundIds && focusedIndex > 0;\n  const canFocusOlder = foundIds && focusedIndex < foundIds.length - 1;\n\n  const [isFullyHidden, setIsFullyHidden] = useState(!isActive);\n  const hiddenTimerRef = useRef<number>();\n  const maybeLongPressActiveRef = useRef(true);\n\n  const [isFocused, markFocused, markBlurred] = useFlag();\n  const [isViewAsList, setIsViewAsList] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleClickOutside = useLastCallback((event: MouseEvent) => {\n    if (maybeLongPressActiveRef.current) return;\n    // Ignore clicks inside modals\n    if ((event.target as HTMLElement).closest('.Modal')) return;\n    markBlurred();\n  });\n  useClickOutside([ref], handleClickOutside);\n\n  const hasResultsContainer = Boolean((query && foundIds) || isHashtagQuery);\n  const isOnlyHash = isHashtagQuery && !query;\n  const areResultsEmpty = Boolean(query && foundIds && !foundIds.length && !isLoading && !isOnlyHash);\n  const hasResultsPlaceholder = areResultsEmpty || isOnlyHash;\n  const isNonFocusedDropdownForced = searchType === 'myChats' || searchType === 'channels';\n  const hasResultsDropdown = isActive && (isViewAsList || !isMobile) && (isFocused || isNonFocusedDropdownForced)\n    && Boolean(\n      hasResultsContainer || hasResultsPlaceholder || savedTags,\n    );\n\n  const hasQueryData = Boolean((query && !isOnlyHash) || savedTag);\n  const hasNavigationButtons = searchType === 'chat' && Boolean(foundIds?.length);\n\n  const handleClose = useLastCallback(() => {\n    closeMiddleSearch();\n  });\n\n  const focusInput = useLastCallback(() => {\n    requestMeasure(() => {\n      inputRef.current?.focus();\n    });\n  });\n\n  const blurInput = useLastCallback(() => {\n    inputRef.current?.blur();\n  });\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n\n        requestMutation(() => {\n          mainEl.style.transform = `translateY(${pageTop}px)`;\n          mainEl.style.height = `${height}px`;\n          document.documentElement.scrollTop = pageTop;\n        });\n      } else {\n        requestMutation(() => {\n          mainEl.style.transform = '';\n          mainEl.style.height = '';\n        });\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Reset focus on query result\n  useEffect(() => {\n    setFocusedIndex(-1);\n  }, [lastSearchQuery]);\n\n  // Disable native up/down buttons on iOS\n  useLayoutEffect(() => {\n    if (!IS_IOS) return;\n\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n      setIsViewAsList(true);\n      setFocusedIndex(0);\n      setQuery('');\n      hiddenTimerRef.current = window.setTimeout(() => setIsFullyHidden(true), HIDE_TIMEOUT);\n    } else {\n      setIsFullyHidden(false);\n      clearTimeout(hiddenTimerRef.current);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (!requestedQuery || !chat?.id) return;\n    setQuery(requestedQuery);\n    updateMiddleSearch({ chatId: chat.id, threadId, update: { requestedQuery: undefined } });\n    setIsLoading(true);\n\n    requestNextMutation(() => {\n      const input = inputRef.current;\n      if (!input) return;\n      focusEditableElement(input, true, true);\n      markFocused();\n    });\n  }, [chat?.id, requestedQuery, threadId]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (isActive !== prevIsActive && !query && lastSearchQuery) {\n      setQuery(lastSearchQuery); // Restore query when returning back\n    }\n  }, [isActive, lastSearchQuery, query]);\n\n  useEffectWithPrevDeps(([prevIsCalendarOpen]) => {\n    if (!isActive || prevIsCalendarOpen === isHistoryCalendarOpen) return;\n    if (isHistoryCalendarOpen) {\n      blurInput();\n      markBlurred();\n    } else {\n      focusInput();\n    }\n  }, [isHistoryCalendarOpen, isActive]);\n\n  const handleReset = useLastCallback(() => {\n    if (!query?.length && !savedTag) {\n      handleClose();\n      return;\n    }\n\n    setQuery('');\n    setIsLoading(false);\n    resetMiddleSearch();\n    focusInput();\n  });\n\n  useEffect(() => (isActive ? captureEscKeyListener(handleReset) : undefined), [isActive, handleClose]);\n\n  const savedTagsArray = useMemo(() => {\n    if (!savedTags) return undefined;\n    return Object.values(savedTags);\n  }, [savedTags]);\n\n  const hasSavedTags = Boolean(savedTagsArray?.length);\n  const areSavedTagsDisabled = hasSavedTags && !isCurrentUserPremium;\n\n  useEffect(() => {\n    if (isSavedMessages && isActive) loadSavedReactionTags();\n  }, [isSavedMessages, isActive]);\n\n  const handleSearch = useLastCallback(() => {\n    const chatId = chat?.id;\n    if (!chatId) {\n      return;\n    }\n\n    runDebouncedForSearch(() => {\n      if (shouldCancelSearchRef.current) return;\n      performMiddleSearch({ chatId, threadId, query });\n    });\n  });\n\n  const handleQueryChange = useLastCallback((newQuery: string) => {\n    shouldCancelSearchRef.current = false;\n\n    if (newQuery.startsWith('#') && !isHashtagQuery) {\n      updateMiddleSearch({ chatId: chat!.id, threadId, update: { isHashtag: true } });\n      setQuery(newQuery.slice(1));\n      handleSearch();\n      return;\n    }\n\n    setQuery(newQuery);\n\n    if (!newQuery) {\n      setIsLoading(false);\n      resetMiddleSearch();\n      shouldCancelSearchRef.current = true;\n    }\n  });\n\n  useEffect(() => {\n    if (query) {\n      handleSearch();\n    }\n  }, [query]);\n\n  useEffect(() => {\n    setIsLoading(Boolean(fetchingQuery));\n  }, [fetchingQuery]);\n\n  useEffect(() => {\n    if (!foundIds?.length) return;\n    const isClose = foundIds.length - focusedIndex < FOCUSED_SEARCH_TRIGGER_OFFSET;\n    if (isClose) {\n      handleSearch();\n    }\n  }, [focusedIndex, foundIds?.length]);\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    maybeLongPressActiveRef.current = true;\n\n    function focus() {\n      inputRef.current?.focus();\n      markFocused();\n\n      fastRaf(() => {\n        maybeLongPressActiveRef.current = false;\n      });\n    }\n\n    function removeListeners() {\n      window.removeEventListener('touchend', focus);\n      window.removeEventListener('mouseup', focus);\n\n      fastRaf(() => {\n        maybeLongPressActiveRef.current = false;\n      });\n    }\n\n    window.addEventListener('touchend', focus);\n    window.addEventListener('mouseup', focus);\n\n    window.addEventListener('touchstart', removeListeners);\n    window.addEventListener('mousedown', removeListeners);\n\n    return () => {\n      removeListeners();\n      window.removeEventListener('touchstart', removeListeners);\n      window.removeEventListener('mousedown', removeListeners);\n    };\n  }, [isActive]);\n\n  useHistoryBack({\n    isActive,\n    onBack: handleClose,\n  });\n\n  const [viewportIds, getMore, viewportOffset = 0] = useInfiniteScroll(handleSearch, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if ((!query && !savedTag) || !viewportIds?.length) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const global = getGlobal();\n\n    return viewportIds.map((searchResultKey) => {\n      const [chatId, id] = parseSearchResultKey(searchResultKey);\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return undefined;\n      }\n\n      const originalSender = (isSavedMessages || isSystemBot(chatId) || chatId === ANONYMOUS_USER_ID)\n        ? selectForwardedSender(global, message) : undefined;\n      const messageSender = selectSender(global, message);\n      const messageChat = selectChat(global, message.chatId);\n\n      const senderPeer = originalSender || messageSender;\n\n      return {\n        searchResultKey,\n        message,\n        messageChat,\n        senderPeer,\n      };\n    }).filter(Boolean);\n  }, [query, savedTag, viewportIds, isSavedMessages]);\n\n  const handleMessageClick = useLastCallback((message: ApiMessage) => {\n    const searchResultKey = getSearchResultKey(message);\n    const index = foundIds?.indexOf(searchResultKey) || 0;\n    const realIndex = index + viewportOffset;\n    setFocusedIndex(realIndex);\n\n    if (searchType === 'chat') {\n      setIsViewAsList(false);\n    }\n\n    focusMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      threadId: !isHashtagQuery ? threadId : undefined,\n    });\n\n    markBlurred();\n  });\n\n  const handleTriggerViewStyle = useLastCallback(() => {\n    setIsViewAsList((prev) => !prev);\n    markFocused();\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, hasResultsContainer, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      handleMessageClick(foundResult.message);\n      setFocusedIndex(index + viewportOffset);\n    }\n  }, `.${RESULT_ITEM_CLASS_NAME}`, true);\n\n  const updateSearchParams = useLastCallback((update: Partial<MiddleSearchParams>) => {\n    updateMiddleSearch({ chatId: chat!.id, threadId, update });\n\n    handleSearch();\n  });\n\n  const activateSearchTag = useLastCallback((tag: ApiReaction) => {\n    if (areSavedTagsDisabled) {\n      openPremiumModal({\n        initialSection: 'saved_tags',\n      });\n      return;\n    }\n\n    updateSearchParams({ savedTag: tag });\n  });\n\n  const removeSearchSavedTag = useLastCallback(() => {\n    updateSearchParams({ savedTag: undefined });\n  });\n\n  const handleDeleteTag = useLastCallback(() => {\n    if (isHashtagQuery) {\n      updateSearchParams({ isHashtag: false });\n      return;\n    }\n\n    if (savedTag) {\n      removeSearchSavedTag();\n    }\n  });\n\n  const handleChangeSearchType = useLastCallback((type: MiddleSearchType) => {\n    updateSearchParams({ type });\n    setIsViewAsList(true);\n  });\n\n  const handleFocusOlder = useLastCallback(() => {\n    if (searchType !== 'chat') return;\n    markBlurred();\n    blurInput();\n    if (foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      const [chatId, messageId] = parseSearchResultKey(foundIds[newFocusIndex]);\n      focusMessage({ chatId, messageId, threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleFocusNewer = useLastCallback(() => {\n    if (searchType !== 'chat') return;\n    markBlurred();\n    blurInput();\n    if (foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      const [chatId, messageId] = parseSearchResultKey(foundIds[newFocusIndex]);\n      focusMessage({ chatId, messageId, threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  function renderTypeTag(type: MiddleSearchType, isForTag?: boolean) {\n    const isSelected = !isForTag && searchType === type;\n    switch (type) {\n      case 'chat':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            peerId={chat?.id}\n            title={oldLang('SearchThisChat')}\n            clickArg=\"chat\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n      case 'myChats':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            peerId={currentUserId}\n            forceShowSelf\n            title={oldLang('SearchMyMessages')}\n            clickArg=\"myChats\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n      case 'channels':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            customPeer={CHANNELS_PEER}\n            title={oldLang('SearchPublicPosts')}\n            clickArg=\"channels\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n    }\n    return undefined;\n  }\n\n  function renderDropdown() {\n    return (\n      <div className={buildClassName(styles.dropdown, !hasResultsDropdown && styles.dropdownHidden)}>\n        {!isMobile && <div className={styles.separator} />}\n        {hasSavedTags && !isHashtagQuery && (\n          <div\n            className={buildClassName(\n              styles.savedTags,\n              !isMobile && styles.wrap,\n              'no-scrollbar',\n            )}\n          >\n            {savedTagsArray.map((tag) => {\n              const isChosen = isSameReaction(tag.reaction, savedTag);\n              return (\n                <SavedTagButton\n                  containerId=\"local-search\"\n                  key={getReactionKey(tag.reaction)}\n                  reaction={tag.reaction}\n                  tag={tag}\n                  withCount\n                  isDisabled={areSavedTagsDisabled}\n                  isChosen={isChosen}\n                  onClick={isChosen ? removeSearchSavedTag : activateSearchTag}\n                />\n              );\n            })}\n          </div>\n        )}\n        {isHashtagQuery && (\n          <div\n            className={buildClassName(styles.searchTypes, 'no-scrollbar')}\n          >\n            {renderTypeTag('chat')}\n            {renderTypeTag('myChats')}\n            {renderTypeTag('channels')}\n          </div>\n        )}\n        {hasResultsContainer && (\n          <InfiniteScroll\n            ref={containerRef}\n            className={buildClassName(styles.results, 'custom-scroll')}\n            items={viewportResults}\n            itemSelector={`.${RESULT_ITEM_CLASS_NAME}`}\n            preloadBackwards={0}\n            onLoadMore={getMore}\n            onKeyDown={handleKeyDown}\n          >\n            {areResultsEmpty && (\n              <span key=\"nothing\" className={styles.placeholder}>\n                {oldLang('NoResultFoundFor', query)}\n              </span>\n            )}\n            {isOnlyHash && (\n              <span key=\"enterhash\" className={styles.placeholder}>\n                {oldLang('HashtagSearchPlaceholder')}\n              </span>\n            )}\n            {viewportResults?.map(({\n              message, senderPeer, messageChat, searchResultKey,\n            }, i) => (\n              <MiddleSearchResult\n                key={searchResultKey}\n                teactOrderKey={-message.date}\n                className={RESULT_ITEM_CLASS_NAME}\n                query={query}\n                message={message}\n                senderPeer={senderPeer}\n                messageChat={messageChat}\n                shouldShowChat={isHashtagQuery}\n                isActive={focusedIndex - viewportOffset === i}\n                onClick={handleMessageClick}\n              />\n            ))}\n          </InfiniteScroll>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      id=\"MiddleSearch\"\n      className={buildClassName(\n        styles.root,\n        isActive && styles.active,\n        !isActive && isFullyHidden && 'visually-hidden', // `display: none` would prevent focus on iOS\n        isFocused && styles.focused,\n        isMobile && styles.mobile,\n      )}\n      ref={ref}\n    >\n      <div className={styles.header}>\n        {!isMobile && (\n          <Avatar\n            className={styles.avatar}\n            peer={chat}\n            size=\"medium\"\n            isSavedMessages={isSavedMessages}\n          />\n        )}\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          className={buildClassName(\n            styles.input,\n            hasResultsDropdown && styles.withDropdown,\n            hasResultsDropdown && !isMobile && styles.adaptSearchBorders,\n          )}\n          canClose={!isMobile}\n          isLoading={isLoading}\n          resultsItemSelector={`.${styles.results} .${RESULT_ITEM_CLASS_NAME}`}\n          hasUpButton={hasNavigationButtons && !isMobile}\n          hasDownButton={hasNavigationButtons && !isMobile}\n          placeholder={isHashtagQuery ? oldLang('SearchHashtagsHint') : oldLang('Search')}\n          teactExperimentControlled\n          onChange={handleQueryChange}\n          onStartBackspace={handleDeleteTag}\n          onReset={handleReset}\n          withBackIcon={isMobile}\n          onFocus={markFocused}\n          focused={isFocused}\n          onUpClick={canFocusOlder ? handleFocusOlder : undefined}\n          onDownClick={canFocusNewer ? handleFocusNewer : undefined}\n        >\n          <div className={styles.searchTags}>\n            {savedTag && (\n              <SavedTagButton\n                containerId=\"local-search-tags\"\n                className={styles.savedSearchTag}\n                reaction={savedTag}\n                tag={savedTags![getReactionKey(savedTag)]}\n                onClick={removeSearchSavedTag}\n              />\n            )}\n            {isHashtagQuery && <div className={styles.hash}>#</div>}\n          </div>\n          {!isMobile && renderDropdown()}\n        </SearchInput>\n        {!isMobile && (\n          <div className={styles.icons}>\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel={oldLang('JumpToDate')}\n            >\n              <Icon name=\"calendar\" />\n            </Button>\n          </div>\n        )}\n      </div>\n      {isMobile && renderDropdown()}\n      {isMobile && (\n        <div className={styles.footer}>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n\n            onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n            ariaLabel={oldLang('JumpToDate')}\n          >\n            <Icon name=\"calendar\" />\n          </Button>\n          <div className={styles.counter}>\n            {hasQueryData && (\n              foundIds?.length ? (\n                oldLang('Of', [Math.max(focusedIndex + 1, 1), totalCount])\n              ) : foundIds && !foundIds.length && (\n                oldLang('NoResult')\n              )\n            )}\n          </div>\n          {searchType === 'chat' && Boolean(foundIds?.length) && (\n            <Button\n              className={styles.viewStyle}\n              size=\"smaller\"\n              isText\n              fluid\n              noForcedUpperCase\n              onClick={handleTriggerViewStyle}\n            >\n              {isViewAsList ? oldLang('SearchAsChat') : oldLang('SearchAsList')}\n            </Button>\n          )}\n          {hasNavigationButtons && !hasResultsDropdown && (\n            <div className={styles.mobileNavigation}>\n              <Button\n                className={buildClassName(styles.navigationButton, !canFocusOlder && styles.navigationDisabled)}\n                round\n                size=\"smaller\"\n                color=\"secondary\"\n                onClick={handleFocusOlder}\n                nonInteractive={!canFocusOlder}\n                ariaLabel={lang('AriaSearchOlderResult')}\n              >\n                <Icon name=\"up\" />\n              </Button>\n              <Button\n                className={buildClassName(styles.navigationButton, !canFocusNewer && styles.navigationDisabled)}\n                round\n                size=\"smaller\"\n                color=\"secondary\"\n                onClick={handleFocusNewer}\n                nonInteractive={!canFocusNewer}\n                ariaLabel={lang('AriaSearchNewerResult')}\n              >\n                <Icon name=\"down\" />\n              </Button>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n    const { chatId, threadId } = currentMessageList;\n\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const {\n      requestedQuery, savedTag, results, fetchingQuery, isHashtag, type,\n    } = selectCurrentMiddleSearch(global) || {};\n    const { totalCount, foundIds, query: lastSearchQuery } = results || {};\n\n    const currentUserId = global.currentUserId;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    const savedTags = isSavedMessages && !isSavedDialog ? global.savedReactionTags?.byKey : undefined;\n\n    return {\n      chat,\n      requestedQuery,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n      savedTags,\n      savedTag,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isSavedMessages,\n      fetchingQuery,\n      isHashtagQuery: isHashtag,\n      currentUserId,\n      searchType: type,\n      lastSearchQuery,\n    };\n  },\n)(MiddleSearch));\n","import type { ElementRef } from '../../lib/teact/teact';\nimport { useEffect } from '../../lib/teact/teact';\n\nimport useLastCallback from '../useLastCallback';\n\n// Fragile\nexport function useClickOutside(\n  refs: ElementRef<HTMLElement>[], callback: (event: MouseEvent) => void,\n) {\n  const handleClickOutside = useLastCallback((event: MouseEvent) => {\n    const clickedOutside = refs.every((ref) => {\n      return ref.current && !ref.current.contains(event.target as Node);\n    });\n\n    if (clickedOutside) callback(event);\n  });\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside);\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [handleClickOutside]);\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent, ThreadId } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  EFFECT_EMOJIS_SET_ID,\n  EFFECT_STICKERS_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport {\n  selectChat, selectChatFullInfo, selectIsChatWithSelf, selectIsCurrentUserPremium, selectShouldLoopStickers,\n} from '../../../global/selectors';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { pickTruthy } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { useStickerPickerObservers } from '../../common/hooks/useStickerPickerObservers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from '../../common/StickerSet';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport StickerSetCover from './StickerSetCover';\n\nimport styles from './StickerPicker.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  className: string;\n  isHidden?: boolean;\n  isTranslucent?: boolean;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  noContextMenus?: boolean;\n  idPrefix: string;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  isForEffects?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  effectStickers?: ApiSticker[];\n  effectEmojis?: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  chatStickerSetId?: string;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  isHidden,\n  isTranslucent,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  effectStickers,\n  effectEmojis,\n  addedSetIds,\n  stickerSetsById,\n  chatStickerSetId,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noContextMenus,\n  idPrefix,\n  onStickerSelect,\n  isForEffects,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const sendMessageAction = useSendMessageAction(chat?.id, threadId);\n\n  const prefix = `${idPrefix}-sticker-set`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const lang = useOldLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (isForEffects && effectStickers) {\n      const effectSets: StickerSetOrReactionsSetOrRecent[] = [];\n      if (effectEmojis?.length) {\n        effectSets.push({\n          id: EFFECT_EMOJIS_SET_ID,\n          accessHash: '0',\n          title: '',\n          stickers: effectEmojis,\n          count: effectEmojis.length,\n          isEmoji: true,\n        });\n      }\n      if (effectStickers?.length) {\n        effectSets.push({\n          id: EFFECT_STICKERS_SET_ID,\n          accessHash: '0',\n          title: lang('StickerEffects'),\n          stickers: effectStickers,\n          count: effectStickers.length,\n        });\n      }\n      return effectSets;\n    }\n\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    const userSetIds = [...(addedSetIds || [])];\n    if (chatStickerSetId) {\n      userSetIds.unshift(chatStickerSetId);\n    }\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, userSetIds));\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds,\n    stickerSetsById,\n    favoriteStickers,\n    recentStickers,\n    chatStickerSetId,\n    lang,\n    effectStickers,\n    isForEffects,\n    effectEmojis,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents\n    && !noPopulatedSets && (canSendStickers || isForEffects);\n\n  useHorizontalScroll(headerRef, !shouldRenderContents || !headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  });\n\n  const handleStickerUnfave = useLastCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  });\n\n  const handleStickerFave = useLastCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  });\n\n  const handleMouseMove = useLastCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  });\n\n  const handleRemoveRecentSticker = useLastCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  });\n\n  if (!chat) return undefined;\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(styles.stickerCover, index === activeSetIndex && styles.activated);\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <Icon name=\"recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <Icon name=\"favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar peer={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n              forcePlayback\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noPlay={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          withTranslucentThumb={isTranslucent}\n          onClick={selectStickerSet}\n          clickArg={index}\n          forcePlayback\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName(styles.root, className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers && !isForEffects ? (\n          <div className={styles.pickerDisabled}>{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className={styles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    styles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && styles.headerWithBorder,\n  );\n\n  return (\n    <div className={fullClassName}>\n      {!isForEffects && (\n        <div ref={headerRef} className={headerClassName}>\n          <div className=\"shared-canvas-container\">\n            <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n            {allSets.map(renderCover)}\n          </div>\n        </div>\n      )}\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        onScroll={handleContentScroll}\n        className={\n          buildClassName(\n            styles.main,\n            IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n            !isForEffects && styles.hasHeader,\n          )\n        }\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            noContextMenus={noContextMenus}\n            index={i}\n            idPrefix={prefix}\n            observeIntersection={observeIntersectionForSet}\n            observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n            observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n            isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n            isTranslucent={isTranslucent}\n            isChatStickerSet={stickerSet.id === chatStickerSetId}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n            forcePlayback\n            shouldHideHeader={stickerSet.id === EFFECT_EMOJIS_SET_ID}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      effect,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatStickerSetId = !isUserId(chatId) ? selectChatFullInfo(global, chatId)?.stickerSet?.id : undefined;\n\n    return {\n      chat,\n      effectStickers: effect?.stickers,\n      effectEmojis: effect?.emojis,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: selectShouldLoopStickers(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      chatStickerSetId,\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo, useRef,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiMessage,\n  ApiReaction,\n  ApiReactionWithPaid,\n} from '../../../../api/types';\n\nimport {\n  getReactionKey, sortReactions,\n} from '../../../../global/helpers';\nimport { selectChatFullInfo } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nimport ReactionEmoji from '../../../common/reactions/ReactionEmoji';\n\nimport styles from './ReactionPickerLimited.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  loadAndPlay: boolean;\n  selectedReactionIds?: string[];\n  message?: ApiMessage;\n  onReactionSelect: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n};\n\ntype StateProps = {\n  enabledReactions?: ApiChatReactions;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions: ApiReaction[];\n  isWithPaidReaction?: boolean;\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  reactionsLimit?: number;\n  isCurrentUserPremium?: boolean;\n};\n\nconst REACTION_SIZE = 36;\nconst GRID_GAP_THRESHOLD = 600;\nconst MODAL_PADDING_SIZE_REM = 0.5;\nconst MODAL_MAX_HEIGHT_REM = 18;\nconst MODAL_MAX_WIDTH_REM = 26.25;\nconst GRID_GAP_DESKTOP_REM = 0.625;\nconst GRID_GAP_MOBILE_REM = 0.5;\n\nconst ReactionPickerLimited: FC<OwnProps & StateProps> = ({\n  loadAndPlay,\n  enabledReactions,\n  availableReactions,\n  topReactions,\n  selectedReactionIds,\n  isWithPaidReaction,\n  message,\n  reactionsLimit,\n  onReactionSelect,\n  onReactionContext,\n}) => {\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n  const { width: windowWidth } = useWindowSize();\n  const { isTouchScreen } = useAppLayout();\n\n  const currentReactions = message?.reactions?.results;\n\n  const shouldUseCurrentReactions = reactionsLimit && currentReactions\n    && currentReactions.length >= reactionsLimit;\n\n  const allAvailableReactions = useMemo(() => {\n    if (shouldUseCurrentReactions) {\n      const reactions = currentReactions.map(({ reaction }) => reaction);\n      if (isWithPaidReaction) {\n        reactions.unshift({ type: 'paid' });\n      }\n      return reactions;\n    }\n\n    if (!enabledReactions) {\n      return [];\n    }\n\n    if (enabledReactions.type === 'all') {\n      const reactionsToSort: ApiReactionWithPaid[] = (availableReactions || []).map(({ reaction }) => reaction);\n      if (isWithPaidReaction) {\n        reactionsToSort.unshift({ type: 'paid' });\n      }\n      return sortReactions(reactionsToSort, topReactions);\n    }\n\n    const reactionsToSort: ApiReactionWithPaid[] = enabledReactions.allowed.slice();\n    if (isWithPaidReaction) {\n      reactionsToSort.unshift({ type: 'paid' });\n    }\n\n    return sortReactions(reactionsToSort, topReactions);\n  }, [\n    availableReactions, enabledReactions, topReactions, shouldUseCurrentReactions, currentReactions, isWithPaidReaction,\n  ]);\n\n  const pickerHeight = useMemo(() => {\n    const pickerWidth = Math.min(MODAL_MAX_WIDTH_REM * REM, windowWidth);\n    const gapWidth = (windowWidth > GRID_GAP_THRESHOLD ? GRID_GAP_DESKTOP_REM : GRID_GAP_MOBILE_REM) * REM;\n    const availableWidth = pickerWidth - MODAL_PADDING_SIZE_REM * REM;\n\n    const itemsInRow = Math.floor((availableWidth + gapWidth) / (REACTION_SIZE + gapWidth));\n    const rowsCount = Math.ceil(allAvailableReactions.length / itemsInRow);\n\n    const pickerMaxHeight = rowsCount * REACTION_SIZE + (rowsCount - 1) * gapWidth + MODAL_PADDING_SIZE_REM * REM * 2;\n\n    return Math.min(MODAL_MAX_HEIGHT_REM * REM, pickerMaxHeight);\n  }, [allAvailableReactions.length, windowWidth]);\n\n  return (\n    <div className={styles.root} style={`height: ${pickerHeight}px`}>\n      <div className={buildClassName(styles.wrapper, isTouchScreen ? 'no-scrollbar' : 'custom-scroll')}>\n        <div className=\"symbol-set-container shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allAvailableReactions.map((reaction) => {\n            const reactionId = getReactionKey(reaction);\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <ReactionEmoji\n                key={reactionId}\n                reaction={reaction}\n                isSelected={isSelected}\n                loadAndPlay={loadAndPlay}\n                availableReactions={availableReactions}\n                onClick={onReactionSelect}\n                onContextMenu={onReactionContext}\n                sharedCanvasRef={sharedCanvasRef}\n                sharedCanvasHqRef={sharedCanvasHqRef}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { availableReactions, topReactions } = global.reactions;\n\n    const { maxUniqueReactions } = global.appConfig || {};\n    const { enabledReactions, isPaidReactionAvailable } = selectChatFullInfo(global, chatId) || {};\n\n    return {\n      enabledReactions,\n      availableReactions,\n      topReactions,\n      reactionsLimit: maxUniqueReactions,\n      isWithPaidReaction: isPaidReactionAvailable,\n    };\n  },\n)(ReactionPickerLimited));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"MhpiTAwi\",\"wrapper\":\"NIaqmosK\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiAvailableEffect,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiReaction,\n  ApiReactionWithPaid,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n} from '../../../../api/types';\nimport type { IAnchorPosition } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\n\nimport { getReactionKey, getStoryKey } from '../../../../global/helpers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectIsContextMenuTranslucent,\n  selectIsCurrentUserPremium,\n  selectPeerStory,\n  selectTabState,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { isUserId } from '../../../../util/entities/ids';\nimport parseHtmlAsFormattedText from '../../../../util/parseHtmlAsFormattedText';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { buildCustomEmojiHtml } from '../../composer/helpers/customEmoji';\n\nimport { getIsMobile } from '../../../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../../../common/CustomEmojiPicker';\nimport Menu from '../../../ui/Menu';\nimport StickerPicker from '../../composer/StickerPicker';\nimport ReactionPickerLimited from './ReactionPickerLimited';\n\nimport styles from './ReactionPicker.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  shouldUseFullPicker?: boolean;\n  message?: ApiMessage;\n  story?: ApiStory | ApiStorySkipped;\n  isCurrentUserPremium?: boolean;\n  position?: IAnchorPosition;\n  isTranslucent?: boolean;\n  sendAsMessage?: boolean;\n  chatId?: string;\n  isForEffects?: boolean;\n  availableEffectById: Record<string, ApiAvailableEffect>;\n}\n\nconst FULL_PICKER_SHIFT_DELTA = { x: -23, y: -64 };\nconst LIMITED_PICKER_SHIFT_DELTA = { x: -21, y: -10 };\nconst REACTION_SELECTOR_WIDTH = 16.375 * REM;\n\nconst ReactionPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  message,\n  story,\n  position,\n  isTranslucent,\n  isCurrentUserPremium,\n  shouldUseFullPicker,\n  sendAsMessage,\n  chatId,\n  isForEffects,\n  availableEffectById,\n}) => {\n  const {\n    toggleReaction, closeReactionPicker, sendMessage, showNotification, sendStoryReaction, saveEffectInDraft,\n    requestEffectInComposer, addLocalPaidReaction, openPaidReactionModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderedMessageId = useCurrentOrPrev(message?.id, true);\n  const renderedChatId = useCurrentOrPrev(message?.chatId, true);\n  const renderedStoryPeerId = useCurrentOrPrev(story?.peerId, true);\n  const renderedStoryId = useCurrentOrPrev(story?.id);\n  const storedPosition = useCurrentOrPrev(position, true);\n  const menuRef = useRef<HTMLDivElement>();\n  const renderingPosition = useMemo((): IAnchorPosition | undefined => {\n    if (!storedPosition) {\n      return undefined;\n    }\n\n    if (renderedStoryId) {\n      return storedPosition;\n    }\n\n    return {\n      x: storedPosition.x + (shouldUseFullPicker ? FULL_PICKER_SHIFT_DELTA.x : LIMITED_PICKER_SHIFT_DELTA.x),\n      y: storedPosition.y + (shouldUseFullPicker ? FULL_PICKER_SHIFT_DELTA.y : LIMITED_PICKER_SHIFT_DELTA.y),\n    };\n  }, [renderedStoryId, storedPosition, shouldUseFullPicker]);\n\n  const getMenuElement = useLastCallback(() => menuRef.current);\n  const getLayout = useLastCallback(() => ({\n    withPortal: true,\n    isDense: !renderedStoryPeerId,\n    deltaX: !getIsMobile() && menuRef.current\n      ? -(menuRef.current.offsetWidth - REACTION_SELECTOR_WIDTH) / 2 - FULL_PICKER_SHIFT_DELTA.x / 2\n      : 0,\n  }));\n\n  const handleToggleCustomReaction = useLastCallback((sticker: ApiSticker) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n    const reaction: ApiReaction = sticker.isCustomEmoji\n      ? { type: 'custom', documentId: sticker.id }\n      : { type: 'emoji', emoticon: sticker.emoji! };\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReactionWithPaid) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n\n    if (reaction.type === 'paid') {\n      addLocalPaidReaction({\n        chatId: renderedChatId, messageId: renderedMessageId, count: 1,\n      });\n    } else {\n      toggleReaction({\n        chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n      });\n    }\n    closeReactionPicker();\n  });\n\n  const handleReactionContextMenu = useLastCallback((reaction: ApiReactionWithPaid) => {\n    if (reaction.type !== 'paid') return;\n\n    openPaidReactionModal({\n      chatId: renderedChatId!,\n      messageId: renderedMessageId!,\n    });\n    closeReactionPicker();\n  });\n\n  const handleStoryReactionSelect = useLastCallback((item: ApiReactionWithPaid | ApiSticker) => {\n    if ('type' in item && item.type === 'paid') return; // Not supported for stories\n\n    const reaction = 'id' in item ? { type: 'custom', documentId: item.id } as const : item;\n\n    const sticker = 'type' in item && item.type === 'custom' ? getGlobal().customEmojis.byId[item.documentId]\n      : 'id' in item ? item : undefined;\n\n    if (sticker && !sticker.isFree && !isCurrentUserPremium) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n\n      closeReactionPicker();\n\n      return;\n    }\n\n    if (!sendAsMessage) {\n      sendStoryReaction({\n        peerId: renderedStoryPeerId!,\n        storyId: renderedStoryId!,\n        containerId: getStoryKey(renderedStoryPeerId!, renderedStoryId!),\n        reaction,\n        shouldAddToRecent: true,\n      });\n      closeReactionPicker();\n      return;\n    }\n\n    let text: string | undefined;\n    let entities: ApiMessageEntity[] | undefined;\n\n    if ('type' in item && item.type === 'emoji') {\n      text = item.emoticon;\n    } else {\n      const customEmojiMessage = parseHtmlAsFormattedText(buildCustomEmojiHtml(sticker!));\n      text = customEmojiMessage.text;\n      entities = customEmojiMessage.entities;\n    }\n\n    sendMessage({ text, entities, isReaction: true });\n    closeReactionPicker();\n  });\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker) => {\n    const availableEffects = Object.values(availableEffectById);\n    const effectId = availableEffects.find((effect) => effect.effectStickerId === sticker.id)?.id;\n\n    if (chatId) saveEffectInDraft({ chatId, threadId: MAIN_THREAD_ID, effectId });\n\n    if (effectId) requestEffectInComposer({});\n    closeReactionPicker();\n  });\n\n  const selectedReactionIds = useMemo(() => {\n    return (message?.reactions?.results || []).reduce<string[]>((acc, { chosenOrder, reaction }) => {\n      if (chosenOrder !== undefined) {\n        acc.push(getReactionKey(reaction));\n      }\n\n      return acc;\n    }, []);\n  }, [message?.reactions?.results]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      ref={menuRef}\n      className={buildClassName(styles.menu, 'ReactionPicker')}\n      bubbleClassName={buildClassName(\n        styles.menuContent,\n        !shouldUseFullPicker && !renderedStoryId && styles.onlyReactions,\n        renderedStoryId && styles.storyMenu,\n      )}\n      withPortal\n      noCompact\n      anchor={renderingPosition}\n      positionY={story && 'bottom'}\n      getTriggerElement={getTriggerElement}\n      getRootElement={getRootElement}\n      getMenuElement={getMenuElement}\n      getLayout={getLayout}\n      backdropExcludedSelector=\".Modal.confirm\"\n      onClose={closeReactionPicker}\n    >\n      {isForEffects && chatId ? (\n        <StickerPicker\n          className=\"\"\n          isHidden={!isOpen}\n          loadAndPlay={Boolean(isOpen && shouldUseFullPicker)}\n          idPrefix=\"message-effect\"\n          canSendStickers={false}\n          noContextMenus={false}\n          chatId={chatId}\n          isTranslucent={isTranslucent}\n          onStickerSelect={handleStickerSelect}\n          isForEffects={isForEffects}\n        />\n      ) : (\n        <>\n          <CustomEmojiPicker\n            chatId={renderedChatId}\n            idPrefix=\"message-emoji-set-\"\n            isHidden={!isOpen || !(shouldUseFullPicker || renderedStoryId)}\n            loadAndPlay={Boolean(isOpen && shouldUseFullPicker)}\n            isReactionPicker\n            className={!shouldUseFullPicker && !renderedStoryId ? styles.hidden : undefined}\n            selectedReactionIds={selectedReactionIds}\n            isTranslucent={isTranslucent}\n            onCustomEmojiSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleCustomReaction}\n            onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n            onReactionContext={handleReactionContextMenu}\n          />\n          {!shouldUseFullPicker && Boolean(renderedChatId) && (\n            <ReactionPickerLimited\n              chatId={renderedChatId}\n              loadAndPlay={isOpen}\n              onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n              onReactionContext={handleReactionContextMenu}\n              selectedReactionIds={selectedReactionIds}\n              message={message}\n            />\n          )}\n        </>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const state = selectTabState(global);\n  const availableEffectById = global.availableEffectById;\n  const {\n    chatId, messageId, storyPeerId, storyId, position, sendAsMessage, isForEffects,\n  } = state.reactionPicker || {};\n  const story = storyPeerId && storyId\n    ? selectPeerStory(global, storyPeerId, storyId) as ApiStory | ApiStorySkipped\n    : undefined;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n  const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n  const isPrivateChat = isUserId(chatId || storyPeerId || '');\n  const areSomeReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'some';\n  const { maxUniqueReactions } = global.appConfig || {};\n  const areAllReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'all'\n    && chatFullInfo?.enabledReactions?.areCustomAllowed;\n\n  const currentReactions = message?.reactions?.results;\n  const shouldUseCurrentReactions = Boolean(maxUniqueReactions && currentReactions\n    && currentReactions.length >= maxUniqueReactions);\n\n  return {\n    message,\n    story,\n    position,\n    shouldUseFullPicker: (chat?.isForbidden || areSomeReactionsAllowed || shouldUseCurrentReactions) ? false\n      : (areAllReactionsAllowed || isPrivateChat),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    sendAsMessage,\n    isForEffects,\n    chatId,\n    availableEffectById,\n  };\n})(ReactionPicker));\n\nfunction getTriggerElement(): HTMLElement | null {\n  return document.querySelector('body');\n}\n\nfunction getRootElement() {\n  return document.querySelector('body');\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"gBh4WvBC\",\"menuContent\":\"qSfKwMzX\",\"storyMenu\":\"srpBMrqr\",\"onlyReactions\":\"dRNSqkOC\",\"hidden\":\"KVwgF6DG\"};","import { fixImageContent } from '../../../../util/parseHtmlAsFormattedText';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QucaiGVU\",\"preview\":\"SHoF85Vw\",\"duration\":\"nI2M1SBH\",\"single\":\"FjrnqGba\",\"no-grouping\":\"g0cTsM9d\",\"noGrouping\":\"g0cTsM9d\",\"file\":\"B6f6GcvN\",\"overlay\":\"bX7LdgxW\",\"action-item\":\"Zo7u5epf\",\"actionItem\":\"Zo7u5epf\",\"delete-file\":\"CYJwy9T_\",\"deleteFile\":\"CYJwy9T_\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { SUPPORTED_PHOTO_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport File from '../../common/File';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useLastCallback(() => {\n    onToggleSpoiler?.(index);\n  });\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'photo':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <Icon\n                name=\"delete\"\n                className={buildClassName(styles.actionItem, styles.deleteFile)}\n\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          <Icon\n            name={attachment.shouldSendAsSpoiler ? 'spoiler-disable' : 'spoiler'}\n            className={styles.actionItem}\n            onClick={handleSpoilerClick}\n          />\n          {onDelete && (\n\n            <Icon name=\"delete\" className={styles.actionItem} onClick={() => onDelete(index)} />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport function getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_PHOTO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'photo';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","export default function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","import { type ElementRef } from '../lib/teact/teact';\n\nimport isFullyVisible from './visibility/isFullyVisible';\nimport animateScroll from './animateScroll';\nimport findInViewport from './findInViewport';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: ElementRef<HTMLElement>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    animateScroll({\n      container,\n      element: allElements[index],\n      position,\n      margin: SCROLL_MARGIN,\n    });\n  }\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useLastCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  });\n\n  const handleArrowKey = useLastCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  });\n\n  const handleItemSelect = useLastCallback((e: KeyboardEvent) => {\n    // Prevent action on key combinations\n    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) return false;\n    if (!isActive) return false;\n\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  });\n\n  useEffect(() => {\n    if (!isActive) setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n  }, [isActive, shouldRemoveSelectionOnReset]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useLastCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent, id: string) => {\n    e.preventDefault();\n\n    handleUserSelect(id);\n  });\n\n  const handleSelectMention = useLastCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  });\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePreviousDeprecated(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item smaller-icon\"\n          onClick={handleClick}\n          clickArg={id}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"a27O2Qlr\",\"mobile\":\"khvUZbGZ\",\"symbolMenuOpen\":\"ir5kkMy1\",\"header-border\":\"Pc1k8G8s\",\"headerBorder\":\"Pc1k8G8s\",\"sendButtonStar\":\"C1OOt81o\",\"attachments\":\"_bxSIFgj\",\"attachments-bottom-padding\":\"RPVunBe2\",\"attachmentsBottomPadding\":\"RPVunBe2\",\"caption-wrapper\":\"EtmiUn2k\",\"captionWrapper\":\"EtmiUn2k\",\"caption-top-border\":\"FjjSKMYe\",\"captionTopBorder\":\"FjjSKMYe\",\"caption\":\"Te7lIfpB\",\"dropTarget\":\"AT_d9l0W\",\"dropOutlineContainer\":\"d9O65j_I\",\"dropOutline\":\"jzCBDWMw\",\"outline\":\"xjNY3Z8u\",\"hovered\":\"AnO3BgVv\",\"send-wrapper\":\"wDqWK9MD\",\"sendWrapper\":\"wDqWK9MD\",\"send\":\"kNlWmBJI\",\"is-pointer-env\":\"rYZmraWo\",\"isPointerEnv\":\"rYZmraWo\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAttachment, ApiChatMember, ApiMessage, ApiSticker,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getAttachmentMediaType } from '../../../global/helpers';\nimport { selectChatFullInfo, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { validateFiles } from '../../../util/files';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { removeAllSelections } from '../../../util/selection';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useFlag from '../../../hooks/useFlag';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport MentionTooltip from './MentionTooltip';\nimport MessageInput from './MessageInput';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  attachments: ApiAttachment[];\n  editingMessage?: ApiMessage;\n  messageListType?: MessageListType;\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady: boolean;\n  isForMessage?: boolean;\n  shouldSchedule?: boolean;\n  shouldSuggestCompression?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  forceDarkTheme?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n  canScheduleUntilOnline?: boolean;\n  canSchedule?: boolean;\n  onSendWhenOnline?: NoneToVoidFunction;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  editingMessage?: ApiMessage;\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst ATTACHMENT_MODAL_INPUT_ID = 'caption-input-text';\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  editingMessage,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  isForMessage,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldSuggestCompression,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  forceDarkTheme,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n  canScheduleUntilOnline,\n  canSchedule,\n  onSendWhenOnline,\n  paidMessagesStars,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const svgRef = useRef<SVGSVGElement>();\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const mainButtonRef = useRef<HTMLButtonElement>();\n  const inputRef = useRef<HTMLDivElement>();\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePreviousDeprecated(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const isEditing = editingMessage && Boolean(editingMessage);\n  const isInAlbum = editingMessage && editingMessage?.groupedId;\n  const isEditingMessageFile = isEditing && attachments?.length && getAttachmentMediaType(attachments[0]);\n  const notEditingFile = isEditingMessageFile !== 'file';\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const [shouldSendCompressed, setShouldSendCompressed] = useState(\n    shouldSuggestCompression ?? attachmentSettings.shouldCompress,\n  );\n  const isSendingCompressed = Boolean(\n    (shouldSendCompressed || shouldForceCompression || isInAlbum) && !shouldForceAsFile,\n  );\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n  const isInvertedMedia = attachmentSettings.isInvertedMedia;\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n      updateAttachmentSettings({ isInvertedMedia: undefined });\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendCompressed(shouldSuggestCompression ?? attachmentSettings.shouldCompress);\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n    }\n  }, [attachmentSettings, isOpen, shouldSuggestCompression]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      updateAttachmentSettings({ isInvertedMedia: undefined });\n    }\n  }, [updateAttachmentSettings, isOpen, shouldSuggestCompression]);\n\n  function setIsInvertedMedia(value?: true) {\n    updateAttachmentSettings({ isInvertedMedia: value });\n  }\n\n  useEffect(() => {\n    if (isOpen && isMobile) {\n      removeAllSelections();\n    }\n  }, [isMobile, isOpen]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useLastCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = ((shouldSchedule || shouldSendScheduled) && isForMessage && !editingMessage) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped, isInvertedMedia);\n      updateAttachmentSettings({\n        shouldCompress: shouldSuggestCompression === undefined ? isSendingCompressed : undefined,\n        shouldSendGrouped,\n        isInvertedMedia,\n      });\n    }\n  });\n\n  const handleSendSilent = useLastCallback(() => {\n    sendAttachments(true);\n  });\n\n  const handleSendClick = useLastCallback(() => {\n    sendAttachments();\n  });\n\n  const handleScheduleClick = useLastCallback(() => {\n    sendAttachments(false, true);\n  });\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useLastCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  });\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useLastCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  });\n\n  const handleDocumentSelect = useLastCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  });\n\n  const handleDelete = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  });\n\n  const handleEnableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({\n      ...a,\n      shouldSendAsSpoiler: true,\n    })));\n  });\n\n  const handleDisableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  });\n\n  const handleToggleSpoiler = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  });\n\n  const handleResize = useLastCallback(() => {\n    const svg = svgRef.current;\n    if (!svg) {\n      return;\n    }\n\n    const { width, height } = svg.getBoundingClientRect();\n    svg.viewBox.baseVal.width = width;\n    svg.viewBox.baseVal.height = height;\n  });\n\n  // Can't listen for SVG resize\n  useResizeObserver(ref, handleResize);\n\n  useEffectOnce(handleResize);\n\n  useEffect(() => {\n    const mainButton = mainButtonRef.current;\n    const input = document.getElementById(ATTACHMENT_MODAL_INPUT_ID);\n\n    if (!mainButton || !input) return;\n\n    const { width } = mainButton.getBoundingClientRect();\n\n    requestMutation(() => {\n      input.style.setProperty('--margin-for-scrollbar', `${width}px`);\n    });\n  }, [oldLang, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_PHOTO_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio];\n  }, [renderingAttachments, isQuickGallery]);\n\n  const hasAnySpoilerable = useMemo(() => {\n    if (!renderingAttachments) return false;\n    return renderingAttachments.some((a) => !SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n  }, [renderingAttachments]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  const canInvertMedia = (() => {\n    if (isEditing) return false;\n    if (!hasMedia) return false;\n    if (!shouldForceAsFile && !shouldForceCompression && !isSendingCompressed) return false;\n    if (isMultiple && shouldSendGrouped) return false;\n    return true;\n  })();\n\n  let title = '';\n  const attachmentsLength = renderingAttachments.length;\n  if (areAllPhotos) {\n    title = oldLang(isEditing ? 'EditMessageReplacePhoto' : 'PreviewSender.SendPhoto', attachmentsLength, 'i');\n  } else if (areAllVideos) {\n    title = oldLang(isEditing ? 'EditMessageReplaceVideo' : 'PreviewSender.SendVideo', attachmentsLength, 'i');\n  } else if (areAllAudios) {\n    title = oldLang(isEditing ? 'EditMessageReplaceAudio' : 'PreviewSender.SendAudio', attachmentsLength, 'i');\n  } else {\n    title = oldLang(isEditing ? 'EditMessageReplaceFile' : 'PreviewSender.SendFile', attachmentsLength, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        {notEditingFile && !isInAlbum\n          && (\n            <DropdownMenu\n              className=\"attachmeneditingMessaget-modal-more-menu with-menu-transitions\"\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              {Boolean(!editingMessage) && (\n                <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{oldLang('Add')}</MenuItem>\n              )}\n              {hasMedia && (\n                <>\n                  {\n                    canInvertMedia && (!isInvertedMedia ? (\n\n                      <MenuItem icon=\"move-caption-up\" onClick={() => setIsInvertedMedia(true)}>\n                        {oldLang('PreviewSender.MoveTextUp')}\n                      </MenuItem>\n                    ) : (\n\n                      <MenuItem icon=\"move-caption-down\" onClick={() => setIsInvertedMedia(undefined)}>\n                        {oldLang(('PreviewSender.MoveTextDown'))}\n                      </MenuItem>\n                    ))\n                  }\n                  {\n                    !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n\n                      <MenuItem icon=\"document\" onClick={() => setShouldSendCompressed(false)}>\n                        {oldLang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                      </MenuItem>\n                    ) : (\n\n                      <MenuItem icon=\"photo\" onClick={() => setShouldSendCompressed(true)}>\n                        {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                      </MenuItem>\n                    ))\n                  }\n                  {isSendingCompressed && hasAnySpoilerable && Boolean(!editingMessage) && (\n                    hasSpoiler ? (\n                      <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                        {oldLang('Attachment.DisableSpoiler')}\n                      </MenuItem>\n                    ) : (\n                      <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                        {oldLang('Attachment.EnableSpoiler')}\n                      </MenuItem>\n                    )\n                  )}\n                </>\n              )}\n              {isMultiple && (\n                shouldSendGrouped ? (\n                  <MenuItem\n                    icon=\"grouped-disable\"\n\n                    onClick={() => setShouldSendGrouped(false)}\n                  >\n                    Ungroup All Media\n                  </MenuItem>\n                ) : (\n\n                  <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                    Group All Media\n                  </MenuItem>\n                )\n              )}\n            </DropdownMenu>\n          )}\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n  const buttonSendCaption = paidMessagesStars ? formatStarsAsIcon(lang,\n    attachmentsLength * paidMessagesStars,\n    {\n      className: styles.sendButtonStar,\n      asFont: true,\n    }) : oldLang('Send');\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n        forceDarkTheme && 'component-theme-dark',\n      )}\n      noBackdropClose\n      isLowStackPriority\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={oldLang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <svg className={styles.dropOutlineContainer}>\n          <rect className={styles.dropOutline} x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" rx=\"8\" />\n        </svg>\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n              idPrefix=\"attachment\"\n              forceDarkTheme={forceDarkTheme}\n            />\n            <MessageInput\n              ref={inputRef}\n              id={ATTACHMENT_MODAL_INPUT_ID}\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              customEmojiPrefix=\"attachment\"\n              isReady={isReady}\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={oldLang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {shouldSchedule && !editingMessage ? oldLang('Next')\n                  : editingMessage ? oldLang('Save') : buttonSendCaption}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  canSchedule={canSchedule && isForMessage}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                  onSendWhenOnline={onSendWhenOnline}\n                  canScheduleUntilOnline={canScheduleUntilOnline}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { shouldSuggestCustomEmoji } = global.settings.byKey;\n    const { language } = selectSharedSettings(global);\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chatFullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent } from 'react';\nimport type { ElementRef, FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport TextArea from '../../ui/TextArea';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  const questionInputRef = useRef<HTMLInputElement>();\n  const optionsListRef = useRef<HTMLDivElement>();\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useOldLang();\n\n  const handleSolutionChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setSolution(e.target.value);\n  });\n\n  const focusInput = useLastCallback((ref: ElementRef<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  const addNewOption = useLastCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n\n    requestNextMutation(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      requestMeasure(() => {\n        list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n      });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const isNoCorrectOptionError = isQuizMode && (correctOption === undefined || !options[correctOption].trim());\n\n    const answers = options\n      .map((text, index) => {\n        text = text.trim();\n\n        if (!text) return undefined;\n\n        return {\n          text: {\n            text,\n          },\n          option: String(index),\n          ...(index === correctOption && { correct: true }),\n        };\n      }).filter(Boolean);\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    if (!questionTrimmed || answers.length < 2) {\n      setQuestion(questionTrimmed);\n      if (answers.length) {\n        const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter(Boolean);\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isNoCorrectOptionError) {\n      setHasErrors(true);\n      return;\n    }\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: {\n          text: questionTrimmed,\n        },\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseHtmlAsFormattedText(solution.substring(0, MAX_SOLUTION_LENGTH)))\n        || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  });\n\n  const updateOption = useLastCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  });\n\n  const removeOption = useLastCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestNextMutation(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleCorrectOptionChange = useLastCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  });\n\n  const handleIsAnonymousChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  });\n\n  const handleMultipleAnswersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  });\n\n  const handleQuizModeChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  });\n\n  const handleQuestionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  });\n\n  const getQuestionError = useLastCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  });\n\n  const getOptionsError = useLastCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          maxLength={MAX_OPTION_LENGTH}\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n\n            onClick={() => removeOption(index)}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: !options[index].trim() }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        <div className=\"dialog-checkbox-group\">\n          {!shouldBeAnonymous && (\n            <Checkbox\n              label={lang('PollAnonymous')}\n              checked={isAnonymous}\n              onChange={handleIsAnonymousChange}\n            />\n          )}\n          <Checkbox\n            label={lang('PollMultiple')}\n            checked={isMultipleAnswers}\n            disabled={isQuizMode}\n            onChange={handleMultipleAnswersChange}\n          />\n          <Checkbox\n            label={lang('PollQuiz')}\n            checked={isQuizMode}\n            disabled={isMultipleAnswers || isQuiz !== undefined}\n            onChange={handleQuizModeChange}\n          />\n        </div>\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <TextArea\n              value={solution}\n              onChange={handleSolutionChange}\n              noReplaceNewlines\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport { BASE_URL, IS_PACKAGED_ELECTRON } from '../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji/emoji';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `${IS_PACKAGED_ELECTRON ? BASE_URL : '.'}/img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n          draggable={false}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 0.625 * REM;\nconst EMOJI_VERTICAL_MARGIN = 0.25 * REM;\nconst EMOJI_VERTICAL_MARGIN_MOBILE = 0.5 * REM;\nconst MOBILE_CONTAINER_PADDING = 0.5 * REM;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransitionDeprecated(shouldRender);\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor(\n      (windowSize.get().width - MOBILE_CONTAINER_PADDING + EMOJI_MARGIN) / (EMOJI_SIZE_PICKER + EMOJI_MARGIN),\n    )\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow)\n    * (EMOJI_SIZE_PICKER + (isMobile ? EMOJI_VERTICAL_MARGIN_MOBILE : EMOJI_VERTICAL_MARGIN));\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { IconName } from '../../../types/icons';\nimport type {\n  EmojiData,\n  EmojiModule,\n  EmojiRawData,\n} from '../../../util/emoji/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport animateScroll from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { uncompressEmoji } from '../../../util/emoji/emoji';\nimport { pick } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, IconName> = {\n  recent: 'recent',\n  people: 'smile',\n  nature: 'animals',\n  foods: 'eats',\n  activity: 'sport',\n  places: 'car',\n  objects: 'lamp',\n  symbols: 'language',\n  flags: 'flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\nconst SMOOTH_SCROLL_DISTANCE = 100;\nconst FOCUS_MARGIN = 3.25 * REM;\nconst HEADER_BUTTON_WIDTH = 2.625 * REM; // Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule> | undefined;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = categoryIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveCategoryIndex(minIntersectingIndex);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    animateHorizontalScroll(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useOldLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useLastCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector<HTMLElement>(`#emoji-category-${index}`)!;\n    animateScroll({\n      container: containerRef.current!,\n      element: categoryEl,\n      position: 'start',\n      margin: FOCUS_MARGIN,\n      maxDistance: SMOOTH_SCROLL_DISTANCE,\n    });\n  });\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  });\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <Icon name={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    'EmojiPicker-header',\n    !shouldHideTopBorder && 'with-top-border',\n  );\n\n  return (\n    <div className={containerClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={buildClassName('EmojiPicker-main', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { getVideoMediaHash, getVideoPreviewMediaHash } from '../../global/helpers';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Spinner from '../ui/Spinner';\nimport Icon from './icons/Icon';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewHash = !gif.hasVideoPreview && gif.thumbnail && getVideoMediaHash(gif, 'pictogram');\n  const previewBlobUrl = useMedia(previewHash, !loadAndPlay);\n\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n\n  const videoHash = getVideoPreviewMediaHash(gif) || getVideoMediaHash(gif, 'full');\n  const videoData = useMedia(videoHash, !loadAndPlay);\n\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.gif-context-menu .bubble'));\n\n  const handleClick = useLastCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  });\n\n  const handleUnsaveClick = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  });\n\n  const handleContextDelete = useLastCallback(() => {\n    onUnsaveClick?.(gif);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  });\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          noFastClick\n          onClick={handleUnsaveClick}\n        >\n          <Icon name=\"close\" className=\"gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n          draggable={false}\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport GifButton from '../../common/GifButton';\nimport Loading from '../../ui/Loading';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useLastCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  });\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div>\n      <div\n        ref={containerRef}\n        className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {!canSendGifs ? (\n          <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n        ) : canRenderContents && savedGifs && savedGifs.length ? (\n          savedGifs.map((gif) => (\n            <GifButton\n              key={gif.id}\n              gif={gif}\n              observeIntersection={observeIntersection}\n              isDisabled={!loadAndPlay}\n              onClick={canSendGifs ? onGifSelect : undefined}\n              onUnsaveClick={handleUnsaveClick}\n              isSavedMessages={isSavedMessages}\n            />\n          ))\n        ) : canRenderContents && savedGifs ? (\n          <div className=\"picker-disabled\">No saved GIFs.</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  canSearch?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  Emoji,\n  CustomEmoji,\n  Stickers,\n  GIFs,\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText, canSearch,\n}) => {\n  const lang = useOldLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={buildClassName('icon', SYMBOL_MENU_TAB_ICONS[tab])} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useLastCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  });\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && canSearch && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <Icon name=\"search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <Icon name=\"delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\nimport type { ThreadId } from '../../../types';\nimport type { MenuPositionOptions } from '../../ui/Menu';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectIsContextMenuTranslucent, selectTabState } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport GifPicker from './GifPicker';\nimport StickerPicker from './StickerPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\nconst STICKERS_TAB_INDEX = 2;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  isMessageComposer?: boolean;\n  idPrefix: string;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n}\n& MenuPositionOptions;\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isBackgroundTranslucent?: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isMessageComposer,\n  isLeftColumnShown,\n  idPrefix,\n  isAttachmentModal,\n  canSendPlainText,\n  className,\n  isBackgroundTranslucent,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n  ...menuPositionOptions\n}) => {\n  const [activeTab, setActiveTab] = useState<SymbolMenuTabs>(SymbolMenuTabs.Emoji);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, onClose, false, false);\n\n  const lang = useOldLang();\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(STICKERS_TAB_INDEX);\n  }, [canSendPlainText]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || !isOpen || isAttachmentModal) {\n      return undefined;\n    }\n\n    document.body.classList.add('enable-symbol-menu-transforms');\n    document.body.classList.add('is-symbol-menu-open');\n\n    return () => {\n      document.body.classList.remove('is-symbol-menu-open');\n\n      setTimeout(() => {\n        requestMutation(() => {\n          document.body.classList.remove('enable-symbol-menu-transforms');\n        });\n      }, ANIMATION_DURATION);\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  });\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleSearch = useLastCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  });\n\n  const handleStickerSelect = useLastCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, canUpdateStickerSetsOrder);\n  });\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            idPrefix={idPrefix}\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            chatId={chatId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            idPrefix={idPrefix}\n            canSendStickers={canSendStickers}\n            noContextMenus={!isMessageComposer}\n            chatId={chatId}\n            threadId={threadId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition\n            name=\"slide\"\n            activeKey={activeTab}\n            renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}\n          >\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        canSearch={isMessageComposer}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n      isMessageComposer && 'in-middle-column',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n\n      {...(isAttachmentModal ? menuPositionOptions : {\n        positionX: 'left',\n        positionY: 'bottom',\n      })}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isBackgroundTranslucent: selectIsContextMenuTranslucent(global),\n    };\n  },\n)(SymbolMenu));\n","import { memo } from '../../../lib/teact/teact';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatCommand.scss';\n\ntype OwnProps<T = undefined> = {\n  command: string;\n  description: string;\n  peer?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  clickArg: T;\n  onClick: (arg: T) => void;\n};\n\nconst ChatCommand = <T,>({\n  withAvatar,\n  focus,\n  command,\n  description,\n  peer,\n  clickArg,\n  onClick,\n}: OwnProps<T>) => {\n  const handleClick = useLastCallback(() => {\n    onClick(clickArg);\n  });\n\n  return (\n    <ListItem\n      key={command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      onClick={handleClick}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" peer={peer} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">\n          /\n          {command}\n        </span>\n        <span className=\"subtitle\">{renderText(description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(ChatCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiBotCommand, ApiMessage, ApiQuickReply, ApiUser,\n} from '../../../api/types';\nimport type { Signal } from '../../../util/signals';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport freezeWhenClosed from '../../../util/hoc/freezeWhenClosed';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ChatCommand from './ChatCommand';\n\nimport styles from './ChatCommandTooltip.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  quickReplies?: ApiQuickReply[];\n  quickReplyMessages?: Record<number, ApiMessage>;\n  self: ApiUser;\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype QuickReplyWithDescription = {\n  id: number;\n  command: string;\n  description: string;\n};\n\nconst ChatCommandTooltip: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  withUsername,\n  botCommands,\n  quickReplies,\n  quickReplyMessages,\n  self,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand, sendQuickReply } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useLastCallback(({ botId, command }: ApiBotCommand) => {\n    // No need for expensive global updates on users and chats, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const bot = usersById[botId];\n\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${getMainUsername(bot)}` : ''}`,\n    });\n    onClick();\n  });\n\n  const handleSendQuickReply = useLastCallback((id: number) => {\n    sendQuickReply({ chatId, quickReplyId: id });\n    onClick();\n  });\n\n  const quickRepliesWithDescription = useMemo(() => {\n    if (!quickReplies?.length || !quickReplyMessages) return undefined;\n    return quickReplies.map((reply) => {\n      const message = quickReplyMessages[reply.topMessageId];\n      return {\n        id: reply.id,\n        command: reply.shortcut,\n        description: message?.content.text?.text || '',\n      } satisfies QuickReplyWithDescription;\n    });\n  }, [quickReplies, quickReplyMessages]);\n\n  const handleKeyboardSelect = useLastCallback((item: ApiBotCommand | QuickReplyWithDescription) => {\n    if (!item.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    if ('id' in item) {\n      handleSendQuickReply(item.id);\n    } else {\n      handleSendCommand(item);\n    }\n\n    return true;\n  });\n\n  const keyboardNavigationItems = useMemo(() => {\n    if (!botCommands && !quickRepliesWithDescription) return undefined;\n    return ([] as (ApiBotCommand | QuickReplyWithDescription)[])\n      .concat(quickRepliesWithDescription || [], botCommands || []);\n  }, [botCommands, quickRepliesWithDescription]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: keyboardNavigationItems,\n    onSelect: handleKeyboardSelect,\n    onClose,\n  });\n\n  const isEmpty = (botCommands && !botCommands.length) || (quickReplies && !quickReplies.length);\n\n  useEffect(() => {\n    if (isEmpty) {\n      onClose();\n    }\n  }, [isEmpty, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  if (!shouldRender || isEmpty) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {quickRepliesWithDescription?.map((reply, index) => (\n        <ChatCommand\n          key={`quickReply_${reply.id}`}\n          command={reply.command}\n          description={reply.description}\n          peer={self}\n          withAvatar\n          clickArg={reply.id}\n          onClick={handleSendQuickReply}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n      {botCommands?.map((command, index) => (\n        <ChatCommand\n          key={`${command.botId}_${command.command}`}\n          command={command.command}\n          description={command.description}\n          // No need for expensive global updates on users and chats, so we avoid them\n          peer={getGlobal().users.byId[command.botId]}\n          withAvatar\n          clickArg={command}\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex + (quickRepliesWithDescription?.length || 0) === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(freezeWhenClosed(ChatCommandTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iaTB59vy\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport ChatCommand from './ChatCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useLastCallback((command: string) => {\n    sendBotCommand({\n      command: `/${command}`,\n    });\n    onClose();\n  });\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <ChatCommand\n          key={botCommand.command}\n          command={botCommand.command}\n          description={botCommand.description}\n          clickArg={botCommand.command}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ThreadId } from '../../../types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const prevStickers = usePreviousDeprecated(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"_8sFuAomM\",\"emojiButton\":\"crWzZ2jr\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  noPlay?: boolean;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noPlay,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const prevStickers = usePreviousDeprecated(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useLastCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  });\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n            noPlay={noPlay}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport ReactionSelector from '../message/reactions/ReactionSelector';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  canSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onSendWhenOnline?: NoneToVoidFunction;\n  onRemoveEffect?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  chatId?: string;\n  withEffects?: boolean;\n  hasCurrentEffect?: boolean;\n  effectReactions?: ApiReaction[];\n  allAvailableReactions?: ApiAvailableReaction[];\n  onToggleReaction?: (reaction: ApiReaction) => void;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n  isInSavedMessages?: boolean;\n  isInStoryViewer?: boolean;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst ANIMATION_DURATION = 200;\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  canSchedule,\n  canScheduleUntilOnline,\n  onSendSilent,\n  onSendSchedule,\n  onSendWhenOnline,\n  onRemoveEffect,\n  onClose,\n  onCloseAnimationEnd,\n  chatId,\n  withEffects,\n  hasCurrentEffect,\n  effectReactions,\n  allAvailableReactions,\n  onToggleReaction,\n  canBuyPremium,\n  isCurrentUserPremium,\n  isInSavedMessages,\n  isInStoryViewer,\n  canPlayAnimatedEmojis,\n}) => {\n  const {\n    openEffectPicker,\n  } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const [displayScheduleUntilOnline, setDisplayScheduleUntilOnline] = useState(false);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [areItemsHidden, hideItems, showItems] = useFlag();\n\n  useEffectWithPrevDeps(([prevIsOpen]) => {\n    // Avoid context menu item shuffling when opened\n    if (isOpen && !prevIsOpen) {\n      showItems();\n      setDisplayScheduleUntilOnline(Boolean(canScheduleUntilOnline));\n    }\n  }, [isOpen, canScheduleUntilOnline]);\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n\n  const handleOpenMessageEffectsPicker = useLastCallback((position: IAnchorPosition) => {\n    hideItems();\n    if (chatId) openEffectPicker({ chatId, position });\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className={buildClassName(\n        'CustomSendMenu', 'fluid', 'with-menu-transitions', withEffects && 'with-effects',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n\n      {withEffects && !isInStoryViewer && (\n        <ReactionSelector\n          allAvailableReactions={allAvailableReactions}\n          effectReactions={effectReactions}\n          currentReactions={undefined}\n          onToggleReaction={onToggleReaction!}\n          isPrivate\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n          isInSavedMessages={isInSavedMessages}\n          isForEffects\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n          onShowMore={handleOpenMessageEffectsPicker}\n          onClose={onClose}\n          className={buildClassName(areItemsHidden && 'ReactionSelector-hidden')}\n        />\n      )}\n\n      <div\n        className={buildClassName(\n          'CustomSendMenu_items',\n          areItemsHidden && 'CustomSendMenu_items-hidden',\n        )}\n        dir={oldLang.isRtl ? 'rtl' : undefined}\n      >\n        {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{oldLang('SendWithoutSound')}</MenuItem>}\n        {canSchedule && onSendSchedule && (\n          <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n            {oldLang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n        )}\n        {canSchedule && onSendSchedule && displayScheduleUntilOnline && (\n          <MenuItem icon=\"user-online\" onClick={onSendWhenOnline}>\n            {oldLang('SendWhenOnline')}\n          </MenuItem>\n        )}\n        {withEffects && hasCurrentEffect && (\n          <MenuItem icon=\"delete\" onClick={onRemoveEffect}>\n            {lang('RemoveEffect')}\n          </MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { IAnchorPosition } from '../../../types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../config';\nimport { ensureProtocol } from '../../../util/browser/url';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getKeyFromEvent from '../../../util/getKeyFromEvent';\nimport stopEvent from '../../../util/stopEvent';\nimport { INPUT_CUSTOM_EMOJI_SELECTOR } from './helpers/customEmoji';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport useVirtualBackdrop from '../../../hooks/useVirtualBackdrop';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport './TextFormatter.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  anchorPosition?: IAnchorPosition;\n  selectedRange?: Range;\n  setSelectedRange: (range: Range) => void;\n  onClose: () => void;\n};\n\ninterface ISelectedTextFormats {\n  bold?: boolean;\n  italic?: boolean;\n  underline?: boolean;\n  strikethrough?: boolean;\n  monospace?: boolean;\n  spoiler?: boolean;\n}\n\nconst TEXT_FORMAT_BY_TAG_NAME: Record<string, keyof ISelectedTextFormats> = {\n  B: 'bold',\n  STRONG: 'bold',\n  I: 'italic',\n  EM: 'italic',\n  U: 'underline',\n  DEL: 'strikethrough',\n  CODE: 'monospace',\n  SPAN: 'spoiler',\n};\nconst fragmentEl = document.createElement('div');\n\nconst TextFormatter: FC<OwnProps> = ({\n  isOpen,\n  anchorPosition,\n  selectedRange,\n  setSelectedRange,\n  onClose,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const linkUrlInputRef = useRef<HTMLInputElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen);\n  const [isLinkControlOpen, openLinkControl, closeLinkControl] = useFlag();\n  const [linkUrl, setLinkUrl] = useState('');\n  const [isEditingLink, setIsEditingLink] = useState(false);\n  const [inputClassName, setInputClassName] = useState<string | undefined>();\n  const [selectedTextFormats, setSelectedTextFormats] = useState<ISelectedTextFormats>({});\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n  useVirtualBackdrop(\n    isOpen,\n    containerRef,\n    onClose,\n    true,\n  );\n\n  useEffect(() => {\n    if (isLinkControlOpen) {\n      linkUrlInputRef.current!.focus();\n    } else {\n      setLinkUrl('');\n      setIsEditingLink(false);\n    }\n  }, [isLinkControlOpen]);\n\n  useEffect(() => {\n    if (!shouldRender) {\n      closeLinkControl();\n      setSelectedTextFormats({});\n      setInputClassName(undefined);\n    }\n  }, [closeLinkControl, shouldRender]);\n\n  useEffect(() => {\n    if (!isOpen || !selectedRange) {\n      return;\n    }\n\n    const selectedFormats: ISelectedTextFormats = {};\n    let { parentElement } = selectedRange.commonAncestorContainer;\n    while (parentElement && parentElement.id !== EDITABLE_INPUT_ID) {\n      const textFormat = TEXT_FORMAT_BY_TAG_NAME[parentElement.tagName];\n      if (textFormat) {\n        selectedFormats[textFormat] = true;\n      }\n\n      parentElement = parentElement.parentElement;\n    }\n\n    setSelectedTextFormats(selectedFormats);\n  }, [isOpen, selectedRange, openLinkControl]);\n\n  const restoreSelection = useLastCallback(() => {\n    if (!selectedRange) {\n      return;\n    }\n\n    const selection = window.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(selectedRange);\n    }\n  });\n\n  const updateSelectedRange = useLastCallback(() => {\n    const selection = window.getSelection();\n    if (selection) {\n      setSelectedRange(selection.getRangeAt(0));\n    }\n  });\n\n  const getSelectedText = useLastCallback((shouldDropCustomEmoji?: boolean) => {\n    if (!selectedRange) {\n      return undefined;\n    }\n    fragmentEl.replaceChildren(selectedRange.cloneContents());\n    if (shouldDropCustomEmoji) {\n      fragmentEl.querySelectorAll(INPUT_CUSTOM_EMOJI_SELECTOR).forEach((el) => {\n        el.replaceWith(el.getAttribute('alt')!);\n      });\n    }\n    return fragmentEl.innerHTML;\n  });\n\n  const getSelectedElement = useLastCallback(() => {\n    if (!selectedRange) {\n      return undefined;\n    }\n\n    return selectedRange.commonAncestorContainer.parentElement;\n  });\n\n  function updateInputStyles() {\n    const input = linkUrlInputRef.current;\n    if (!input) {\n      return;\n    }\n\n    const { offsetWidth, scrollWidth, scrollLeft } = input;\n    if (scrollWidth <= offsetWidth) {\n      setInputClassName(undefined);\n      return;\n    }\n\n    let className = '';\n    if (scrollLeft < scrollWidth - offsetWidth) {\n      className = 'mask-right';\n    }\n    if (scrollLeft > 0) {\n      className += ' mask-left';\n    }\n\n    setInputClassName(className);\n  }\n\n  function handleLinkUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setLinkUrl(e.target.value);\n    updateInputStyles();\n  }\n\n  function getFormatButtonClassName(key: keyof ISelectedTextFormats) {\n    if (selectedTextFormats[key]) {\n      return 'active';\n    }\n\n    if (key === 'monospace' || key === 'strikethrough') {\n      if (Object.keys(selectedTextFormats).some(\n        (fKey) => fKey !== key && Boolean(selectedTextFormats[fKey as keyof ISelectedTextFormats]),\n      )) {\n        return 'disabled';\n      }\n    } else if (selectedTextFormats.monospace || selectedTextFormats.strikethrough) {\n      return 'disabled';\n    }\n\n    return undefined;\n  }\n\n  const handleSpoilerText = useLastCallback(() => {\n    if (selectedTextFormats.spoiler) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.dataset.entityType !== ApiMessageEntityTypes.Spoiler\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        spoiler: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand(\n      'insertHTML', false, `<span class=\"spoiler\" data-entity-type=\"${ApiMessageEntityTypes.Spoiler}\">${text}</span>`,\n    );\n    onClose();\n  });\n\n  const handleBoldText = useLastCallback(() => {\n    setSelectedTextFormats((selectedFormats) => {\n      // Somehow re-applying 'bold' command to already bold text doesn't work\n      document.execCommand(selectedFormats.bold ? 'removeFormat' : 'bold');\n      Object.keys(selectedFormats).forEach((key) => {\n        if ((key === 'italic' || key === 'underline') && Boolean(selectedFormats[key])) {\n          document.execCommand(key);\n        }\n      });\n\n      updateSelectedRange();\n      return {\n        ...selectedFormats,\n        bold: !selectedFormats.bold,\n      };\n    });\n  });\n\n  const handleItalicText = useLastCallback(() => {\n    document.execCommand('italic');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      italic: !selectedFormats.italic,\n    }));\n  });\n\n  const handleUnderlineText = useLastCallback(() => {\n    document.execCommand('underline');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      underline: !selectedFormats.underline,\n    }));\n  });\n\n  const handleStrikethroughText = useLastCallback(() => {\n    if (selectedTextFormats.strikethrough) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'DEL'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        strikethrough: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand('insertHTML', false, `<del>${text}</del>`);\n    onClose();\n  });\n\n  const handleMonospaceText = useLastCallback(() => {\n    if (selectedTextFormats.monospace) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'CODE'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        monospace: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    document.execCommand('insertHTML', false, `<code class=\"text-entity-code\" dir=\"auto\">${text}</code>`);\n    onClose();\n  });\n\n  const handleLinkUrlConfirm = useLastCallback(() => {\n    const formattedLinkUrl = (ensureProtocol(linkUrl) || '').split('%').map(encodeURI).join('%');\n\n    if (isEditingLink) {\n      const element = getSelectedElement();\n      if (!element || element.tagName !== 'A') {\n        return;\n      }\n\n      (element as HTMLAnchorElement).href = formattedLinkUrl;\n\n      onClose();\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    restoreSelection();\n    document.execCommand(\n      'insertHTML',\n      false,\n      `<a href=${formattedLinkUrl} class=\"text-entity-link\" dir=\"auto\">${text}</a>`,\n    );\n    onClose();\n  });\n\n  const handleKeyDown = useLastCallback((e: KeyboardEvent) => {\n    const HANDLERS_BY_KEY: Record<string, AnyToVoidFunction> = {\n      k: openLinkControl,\n      b: handleBoldText,\n      u: handleUnderlineText,\n      i: handleItalicText,\n      m: handleMonospaceText,\n      s: handleStrikethroughText,\n      p: handleSpoilerText,\n    };\n\n    const handler = HANDLERS_BY_KEY[getKeyFromEvent(e)];\n\n    if (\n      e.altKey\n      || !(e.ctrlKey || e.metaKey)\n      || !handler\n    ) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n    handler();\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      document.addEventListener('keydown', handleKeyDown);\n    }\n\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, handleKeyDown]);\n\n  const lang = useOldLang();\n\n  function handleContainerKeyDown(e: React.KeyboardEvent<HTMLDivElement>) {\n    if (e.key === 'Enter' && isLinkControlOpen) {\n      handleLinkUrlConfirm();\n      e.preventDefault();\n    }\n  }\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'TextFormatter',\n    transitionClassNames,\n    isLinkControlOpen && 'link-control-shown',\n  );\n\n  const linkUrlConfirmClassName = buildClassName(\n    'TextFormatter-link-url-confirm',\n    Boolean(linkUrl.length) && 'shown',\n  );\n\n  const style = anchorPosition\n    ? `left: ${anchorPosition.x}px; top: ${anchorPosition.y}px;--text-formatter-left: ${anchorPosition.x}px;`\n    : '';\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      style={style}\n      onKeyDown={handleContainerKeyDown}\n      // Prevents focus loss when clicking on the toolbar\n      onMouseDown={stopEvent}\n    >\n      <div className=\"TextFormatter-buttons\">\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Spoiler text\"\n          className={getFormatButtonClassName('spoiler')}\n          onClick={handleSpoilerText}\n        >\n          <Icon name=\"eye-crossed\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Bold text\"\n          className={getFormatButtonClassName('bold')}\n          onClick={handleBoldText}\n        >\n          <Icon name=\"bold\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Italic text\"\n          className={getFormatButtonClassName('italic')}\n          onClick={handleItalicText}\n        >\n          <Icon name=\"italic\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Underlined text\"\n          className={getFormatButtonClassName('underline')}\n          onClick={handleUnderlineText}\n        >\n          <Icon name=\"underlined\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Strikethrough text\"\n          className={getFormatButtonClassName('strikethrough')}\n          onClick={handleStrikethroughText}\n        >\n          <Icon name=\"strikethrough\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Monospace text\"\n          className={getFormatButtonClassName('monospace')}\n          onClick={handleMonospaceText}\n        >\n          <Icon name=\"monospace\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button color=\"translucent\" ariaLabel={lang('TextFormat.AddLinkTitle')} onClick={openLinkControl}>\n          <Icon name=\"link\" />\n        </Button>\n      </div>\n\n      <div className=\"TextFormatter-link-control\">\n        <div className=\"TextFormatter-buttons\">\n          <Button color=\"translucent\" ariaLabel={lang('Cancel')} onClick={closeLinkControl}>\n            <Icon name=\"arrow-left\" />\n          </Button>\n          <div className=\"TextFormatter-divider\" />\n\n          <div\n            className={buildClassName('TextFormatter-link-url-input-wrapper', inputClassName)}\n          >\n            <input\n              ref={linkUrlInputRef}\n              className=\"TextFormatter-link-url-input\"\n              type=\"text\"\n              value={linkUrl}\n              placeholder=\"Enter URL...\"\n              autoComplete=\"off\"\n              inputMode=\"url\"\n              dir=\"auto\"\n              onChange={handleLinkUrlChange}\n              onScroll={updateInputStyles}\n            />\n          </div>\n\n          <div className={linkUrlConfirmClassName}>\n            <div className=\"TextFormatter-divider\" />\n            <Button\n              color=\"translucent\"\n              ariaLabel={lang('Save')}\n              className=\"color-primary\"\n              onClick={handleLinkUrlConfirm}\n            >\n              <Icon name=\"check\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(TextFormatter);\n","export default function getKeyFromEvent(e: KeyboardEvent) {\n  const key = e.key || e.code;\n\n  return key.startsWith('Key') ? key.slice(3).toLowerCase() : key;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/visibility/isFullyVisible';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport CustomEmojiButton from './CustomEmojiButton';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    animateHorizontalScroll(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useLastCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  });\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const handleSelect = useLastCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  });\n\n  const handleClick = useLastCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  });\n\n  const handleCustomEmojiClick = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    shouldRemoveSelectionOnReset: true,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffectWithPrevDeps(([prevSelectedIndex]) => {\n    if (prevSelectedIndex === undefined || prevSelectedIndex === -1) {\n      return;\n    }\n\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getWebDocumentHash } from '../../../../global/helpers';\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? getWebDocumentHash(thumbnail) : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult;\n  onClick: (result: ApiBotInlineResult | ApiBotInlineMediaResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, description,\n  } = inlineResult;\n\n  const url = 'url' in inlineResult ? inlineResult.url : undefined;\n  const webThumbnail = 'webThumbnail' in inlineResult ? inlineResult.webThumbnail : undefined;\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiVideo } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineMediaResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useLastCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  });\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport { getPhotoMediaHash, getWebDocumentHash } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../../hooks/useMediaTransitionDeprecated';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineMediaResult | ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailBlobUrl = useMedia(getWebDocumentHash(webThumbnail));\n  const mediaBlobUrl = useMedia(photo && getPhotoMediaHash(photo, 'pictogram'));\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl || thumbnailBlobUrl);\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailBlobUrl} alt=\"\" draggable={false} />\n        <img\n          src={mediaBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      thumbUrl={mediaBlobUrl || thumbnail?.dataUri}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineMediaResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm, ApiBotInlineSwitchWebview,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport MediaResult from './inlineResults/MediaResult';\nimport StickerResult from './inlineResults/StickerResult';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  switchWebview?: ApiBotInlineSwitchWebview;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean,\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  switchWebview,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n    requestSimpleWebView,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useLastCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  });\n\n  const handleOpenWebview = useLastCallback(() => {\n    const theme = extractCurrentThemeParams();\n\n    requestSimpleWebView({\n      botId: botId!,\n      url: switchWebview!.url,\n      buttonText: switchWebview!.text,\n      theme,\n      isFromSwitchWebView: true,\n    });\n  });\n\n  const prevInlineBotResults = usePreviousDeprecated(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderSwitchWebview() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleOpenWebview}>\n        <span className=\"title\">{switchWebview!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n        case 'voice':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {switchWebview && renderSwitchWebview()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\nimport Menu from '../../ui/Menu';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useLastCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  });\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = usersById[id];\n        const chat = chatsById[id];\n        const peer = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        const avatarClassName = buildClassName(selectedSendAsId === id && 'selected');\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium\n              && <Icon name=\"lock-badge\" className=\"send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              peer={peer}\n              className={avatarClassName}\n            />\n            <div className=\"info\">\n              {peer && <FullNameTitle peer={peer} noFake />}\n              <span className=\"subtitle\">\n                {user\n                  ? lang('VoipGroupPersonalAccount')\n                  : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerButton from '../common/StickerButton';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noPlay={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { throttle } from '../../util/schedulers';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiVideo } from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentMessageList,\n  selectIsChatWithBot,\n  selectIsChatWithSelf, selectThreadInfo,\n  selectTopic,\n} from '../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport GifButton from '../common/GifButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n  currentMessageList?: MessageList;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  chatFullInfo,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, chatFullInfo, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (!currentMessageList) {\n        return;\n      }\n\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({\n            messageList: currentMessageList,\n            gif,\n            scheduledAt,\n            isSilent,\n          });\n        });\n      } else {\n        sendMessage({ messageList: currentMessageList, gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, currentMessageList, requestCalendar]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = chatId && threadId ? selectTopic(global, chatId, threadId) : undefined;\n    const canPostInChat = Boolean(chat) && Boolean(threadId)\n      && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(GifSearch));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OAKzmAva\",\"withImage\":\"BQ6HUOqN\",\"imageContainer\":\"TmJvv2A6\",\"image\":\"U96CW2I7\",\"round\":\"yxjDeIct\",\"circle\":\"cdfiLmXo\",\"withStoryCircle\":\"BOfHPv20\",\"summary\":\"vXi2JQlj\",\"title\":\"bi3fL59p\",\"info\":\"GUK4ajPK\",\"meta\":\"YH6jeZIh\",\"metaWithIcon\":\"q1LnuIUn\",\"metaIcon\":\"PJZzyVLK\",\"date\":\"C7NpG5Y9\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { StatisticsMessageInteractionCounter, StatisticsStoryInteractionCounter } from '../../../api/types';\n\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\ninterface OwnProps {\n  postStatistic: StatisticsStoryInteractionCounter | StatisticsMessageInteractionCounter;\n}\n\nfunction StatisticsRecentPostMeta({ postStatistic }: OwnProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  return (\n    <div className={styles.meta}>\n      {postStatistic.reactionsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"heart-outline\" className={styles.metaIcon} />\n          {formatIntegerCompact(lang, postStatistic.reactionsCount)}\n        </span>\n      )}\n\n      {postStatistic.forwardsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"forward\" className={styles.metaIcon} />\n          {formatIntegerCompact(lang, postStatistic.forwardsCount)}\n        </span>\n      )}\n\n      {!postStatistic.forwardsCount && !postStatistic.reactionsCount\n        && oldLang('ChannelStats.SharesCount_ZeroValueHolder')}\n    </div>\n  );\n}\n\nexport default memo(StatisticsRecentPostMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsMessageInteractionCounter } from '../../../api/types';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageRoundVideo,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  postStatistic: StatisticsMessageInteractionCounter;\n  message: ApiMessage;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ postStatistic, message }) => {\n  const lang = useOldLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        Boolean(mediaBlobUrl || mediaThumbnail) && styles.withImage,\n      )}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className={styles.meta}>\n          {lang('ChannelStats.ViewsCount', postStatistic.viewsCount, 'i')}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: OldLangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span>\n      <img\n        src={blobUrl}\n        alt=\"\"\n        draggable={false}\n        className={buildClassName(styles.image, isRoundVideo && styles.round)}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiTypeStory,\n  StatisticsStoryInteractionCounter,\n} from '../../../api/types';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport { getStoryMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  story?: ApiTypeStory;\n  postStatistic: StatisticsStoryInteractionCounter;\n};\n\nfunction StatisticsRecentStory({ chat, story, postStatistic }: OwnProps) {\n  const lang = useOldLang();\n  const { toggleStoryStatistics } = getActions();\n  const isLoaded = story && 'content' in story;\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const mediaThumbnail = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  const handleClick = useLastCallback(() => {\n    toggleStoryStatistics({ storyId: postStatistic.storyId });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, styles.withImage)}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, chat, imgBlobUrl || mediaThumbnail)}\n        </div>\n        <div className={styles.meta}>\n          {lang('ChannelStats.ViewsCount', postStatistic.viewsCount, 'i')}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {isLoaded && Boolean(story.date) && formatDateTimeToString(story.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n}\n\nfunction renderSummary(lang: OldLangFn, chat: ApiChat, blobUrl?: string) {\n  return (\n    <span>\n      {blobUrl ? (\n        <span className={styles.imageContainer}>\n          <img\n            src={blobUrl}\n            alt=\"\"\n            draggable={false}\n            className={buildClassName(styles.image, styles.circle, styles.withStoryCircle)}\n          />\n        </span>\n      ) : (\n        <Avatar\n          peer={chat}\n          size=\"small\"\n          className={styles.image}\n          withStorySolid\n          forceUnreadStorySolid\n        />\n      )}\n\n      {lang('Story')}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentStory);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"T1l_4J8z\",\"pie-slim-in\":\"EgyLOizu\",\"pieSlimIn\":\"EgyLOizu\",\"pie-slim-out\":\"TBiNdFb4\",\"pieSlimOut\":\"TBiNdFb4\",\"messages\":\"suY9dEIz\",\"publicForwards\":\"S1x1ovkC\",\"messages-title\":\"evQIkAqx\",\"messagesTitle\":\"evQIkAqx\",\"publicForwards-title\":\"WxL3i5PM\",\"publicForwardsTitle\":\"WxL3i5PM\",\"ready\":\"aUrozL5_\",\"graph\":\"QQHwjG88\",\"hidden\":\"QGctP1Nk\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChannelStatistics,\n  ApiChat,\n  ApiGroupStatistics,\n  ApiMessage,\n  ApiTypeStory,\n} from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStories,\n  selectStatistics,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\nimport StatisticsRecentStory from './StatisticsRecentStory';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n  reactionsByEmotionGraph: 'ChannelStats.Graph.Reactions',\n  storyInteractionsGraph: 'ChannelStats.Graph.Stories',\n  storyReactionsByEmotionGraph: 'ChannelStats.Graph.StoriesReactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  chat?: ApiChat;\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n  messagesById: Record<string, ApiMessage>;\n  storiesById?: Record<string, ApiTypeStory>;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  statistics,\n  dcId,\n  isGroup,\n  messagesById,\n  storiesById,\n}) => {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll', isReady && styles.ready)}>\n      {statistics && (\n        <StatisticsOverview\n          statistics={statistics}\n          type={isGroup ? 'group' : 'channel'}\n          title={lang('StatisticOverview')}\n        />\n      )}\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics)?.recentPosts?.length) && (\n        <div className={styles.messages}>\n          <h2 className={styles.messagesTitle}>{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentPosts.map((postStatistic) => {\n            if ('msgId' in postStatistic) {\n              const message = messagesById[postStatistic.msgId];\n              if (!message || !('content' in message)) return undefined;\n\n              return (\n                <StatisticsRecentMessage\n                  key={`statistic_message_${postStatistic.msgId}`}\n                  message={message}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            if ('storyId' in postStatistic && chat) {\n              const story = storiesById?.[postStatistic.storyId];\n\n              return (\n                <StatisticsRecentStory\n                  key={`statistic_story_${postStatistic.storyId}`}\n                  chat={chat}\n                  story={story}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            return undefined;\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n    const messagesById = selectChatMessages(global, chatId);\n    const storiesById = selectPeerStories(global, chatId)?.byId;\n\n    return {\n      statistics, dcId, isGroup, chat, messagesById, storiesById,\n    };\n  },\n)(Statistics));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oXLpD4Y4\",\"title\":\"paQ2VBe_\",\"views\":\"WvFuOAIf\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsMessagePublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useOldLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => (data.chat ? getMainUsername(data.chat) : undefined), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={data.chat} />\n\n      <div>\n        <div className={styles.title}>\n          {data.title}\n        </div>\n\n        <div className={styles.views}>\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsMessagePublicForward);\n","import {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessagePublicForward,\n  ApiPostStatistics,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { STATISTICS_PUBLIC_FORWARDS_LIMIT } from '../../../config';\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nfunction Statistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}: OwnProps & StateProps) {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadMessagePublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards && messageId) {\n      loadMessagePublicForwards({ chatId, messageId });\n    }\n  });\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <StatisticsOverview statistics={statistics} type=\"message\" title={lang('StatisticOverview')} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName(styles.graph, !loadedCharts.current.includes(graph) && styles.hidden)} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            preloadBackwards={STATISTICS_PUBLIC_FORWARDS_LIMIT}\n            noFastList\n          >\n            {(statistics.publicForwardsData as ApiMessagePublicForward[]).map((item) => (\n              <StatisticsMessagePublicForward key={item.messageId} data={item} />\n            ))}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat, ApiStoryPublicForward, ApiUser,\n} from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiStoryPublicForward;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nfunction StatisticsMessagePublicForward({ data, chatsById, usersById }: OwnProps) {\n  const lang = useOldLang();\n  const { openChat } = getActions();\n  const user = usersById[data.peerId];\n  const chat = chatsById[data.peerId];\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: user.id });\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={user || chat} withStorySolid forceUnreadStorySolid />\n\n      <div>\n        <div className={styles.title}>\n          {user ? getUserFullName(user) : getChatTitle(lang, chat)}\n        </div>\n\n        <div className={styles.views}>\n          {data.viewsCount ? lang('ChannelStats.ViewsCount', data.viewsCount, 'i') : lang('NoViews')}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(StatisticsMessagePublicForward);\n","import {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiPostStatistics,\n  ApiUser,\n  StatisticsGraph,\n} from '../../../api/types';\n\nimport { STATISTICS_PUBLIC_FORWARDS_LIMIT } from '../../../config';\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsStoryPublicForward from './StatisticsStoryPublicForward';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.StoryInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  storyId?: number;\n  dcId?: number;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n};\n\nfunction StoryStatistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  storyId,\n  chatsById,\n  usersById,\n}: OwnProps & StateProps) {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStoryStatistics, loadStoryPublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (storyId) {\n      loadStoryStatistics({ chatId, storyId });\n    }\n  }, [chatId, storyId]);\n\n  useEffect(() => {\n    if (!isActive || storyId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, storyId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, storyId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!storyId) return;\n\n    loadStoryPublicForwards({ chatId, storyId });\n  });\n\n  if (!isReady || !statistics || !storyId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <StatisticsOverview statistics={statistics} type=\"story\" title={lang('StatisticOverview')} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName(styles.graph, !loadedCharts.current.includes(graph) && styles.hidden)} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            preloadBackwards={STATISTICS_PUBLIC_FORWARDS_LIMIT}\n            noFastList\n          >\n            {statistics.publicForwardsData!.map((item) => {\n              if ('messageId' in item) {\n                return (\n                  <StatisticsMessagePublicForward key={`message_${item.messageId}`} data={item} />\n                );\n              }\n\n              return (\n                <StatisticsStoryPublicForward\n                  key={`story_${item.storyId}`}\n                  data={item}\n                  chatsById={chatsById}\n                  usersById={usersById}\n                />\n              );\n            })}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentStory;\n    const storyId = tabState.statistics.currentStoryId;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      statistics, dcId, storyId, usersById, chatsById,\n    };\n  },\n)(StoryStatistics));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport ShowMoreButton from '../ui/ShowMoreButton';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePreviousDeprecated<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useOldLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n\n              onClick={() => handleMemberClick(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo\n                  avatarSize=\"tiny\"\n                  userId={id}\n                  forceShowSelf\n                  noStatusOrTyping\n                />\n              ) : (\n                <GroupChatInfo\n                  avatarSize=\"tiny\"\n                  chatId={id}\n                  noStatusOrTyping\n                />\n              )}\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">\n          {renderTextWithEntities({\n            text: text.text,\n            entities: text.entities,\n          })}\n        </span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}\n          %\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiPoll } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectPollFromMessage, selectTabState,\n} from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Loading from '../ui/Loading';\nimport PollAnswerResults from './PollAnswerResults';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  poll?: ApiPoll;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  message,\n  poll,\n  onClose,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !poll || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = poll;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">\n        {renderTextWithEntities({\n          text: summary.question.text,\n          entities: summary.question.entities,\n        })}\n      </h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${poll.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n    const poll = message && selectPollFromMessage(global, message);\n\n    return {\n      chat,\n      message,\n      poll,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xrnUE4e6\",\"content\":\"z7kF7tij\",\"section\":\"T6wFpdQO\",\"general\":\"YftUWqqw\",\"top\":\"CWsWIKQ1\",\"bottom\":\"KBl0ycLl\",\"iconWrapper\":\"iJ1U9kDD\",\"icon\":\"Rk6PT_yc\",\"clickable\":\"K1CTKtBS\",\"heading\":\"qlo3vSEw\",\"icon-picker\":\"r06zwL42\",\"iconPicker\":\"r06zwL42\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getTopicColors } from '../../util/forumColors';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useOldLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoomFade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            isHidden={!isActive}\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            pickerListClassName=\"fab-padding-bottom\"\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport {\n  selectChat, selectIsCurrentUserPremium, selectTabState, selectTopic,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Loading from '../ui/Loading';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useOldLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top, isGeneral && styles.general)}>\n              <span className={styles.heading}>{lang(isGeneral ? 'CreateGeneralTopicTitle' : 'CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoomFade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  isHidden={!isActive}\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  pickerListClassName=\"fab-padding-bottom\"\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.chatId && editTopicPanel?.topicId\n      ? selectTopic(global, editTopicPanel.chatId, editTopicPanel.topicId) : undefined;\n\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotInfo, ApiUser } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  getChatAvatarHash, getMainUsername, getUserFirstOrLastName,\n} from '../../../global/helpers';\nimport {\n  selectBot,\n  selectTabState,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  userId?: string;\n  user?: ApiUser;\n  chatBot?: ApiBotInfo;\n  currentBio?: string;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  maxBioLength: number;\n};\n\nconst ERROR_NAME_MISSING = 'Please provide name';\n\nconst ManageBot: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  onClose,\n  currentBio,\n  isActive,\n  maxBioLength,\n}) => {\n  const {\n    setBotInfo,\n    uploadProfilePhoto,\n    uploadContactProfilePhoto,\n    startBotFatherConversation,\n  } = getActions();\n\n  const [isFieldTouched, markFieldTouched, unmarkProfileTouched] = useFlag(false);\n  const [isAvatarTouched, markAvatarTouched, unmarkAvatarTouched] = useFlag(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useOldLang();\n\n  const username = useMemo(() => (user ? getMainUsername(user) : undefined), [user]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentName = user ? getUserFirstOrLastName(user) : '';\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [name, setName] = useState(currentName || '');\n  const [bio, setBio] = useState(currentBio || '');\n\n  const currentAvatarHash = user && getChatAvatarHash(user);\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  useEffect(() => {\n    unmarkProfileTouched();\n    unmarkAvatarTouched();\n  }, [userId]);\n\n  useEffect(() => {\n    setName(currentName || '');\n    setBio(currentBio || '');\n  }, [currentName, currentBio, user]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkProfileTouched();\n      unmarkAvatarTouched();\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleNameChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n    markFieldTouched();\n\n    if (error === ERROR_NAME_MISSING) {\n      setError(undefined);\n    }\n  });\n\n  const handleBioChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    markFieldTouched();\n  });\n\n  const handlePhotoChange = useLastCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n    markAvatarTouched();\n  });\n\n  const handleProfileSave = useLastCallback(() => {\n    const trimmedName = name.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedName.length) {\n      setError(ERROR_NAME_MISSING);\n      return;\n    }\n\n    setBotInfo({\n      ...(isFieldTouched && {\n        bot: user,\n        name: trimmedName,\n        description: trimmedBio,\n      }),\n    });\n\n    if (photo) {\n      uploadProfilePhoto({\n        file: photo,\n        ...(isAvatarTouched && { bot: user }),\n      });\n    }\n  });\n\n  const handleChangeEditIntro = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-intro` });\n  });\n\n  const handleChangeEditCommands = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-commands` });\n  });\n\n  const handleChangeSettings = useLastCallback(() => {\n    startBotFatherConversation({ param: username! });\n  });\n\n  const inputRef = useRef<HTMLInputElement>();\n  const isSuggestRef = useRef(false);\n\n  const handleSelectAvatar = useLastCallback((file: File) => {\n    markAvatarTouched();\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  });\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title={lang('ChatSetPhotoOrVideo')}\n            disabled={isLoading}\n          />\n          <InputText\n            id=\"user-name\"\n            label={lang('PaymentCheckoutName')}\n            onChange={handleNameChange}\n            value={name}\n            error={error === ERROR_NAME_MISSING ? error : undefined}\n            teactExperimentControlled\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('DescriptionPlaceholder')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n        </div>\n        <div className=\"section\">\n          <div className=\"dialog-buttons\">\n            <ListItem icon=\"bot-commands-filled\" ripple onClick={handleChangeEditIntro}>\n              <span>{lang('BotEditIntro')}</span>\n            </ListItem>\n            <ListItem icon=\"bot-command\" ripple onClick={handleChangeEditCommands}>\n              <span>{lang('BotEditCommands')}</span>\n            </ListItem>\n            <ListItem icon=\"bots\" ripple onClick={handleChangeSettings}>\n              <span>{lang('BotChangeSettings')}</span>\n            </ListItem>\n            <div className=\"section-info section-info_push\">\n              {renderText(lang('BotManageInfo'), ['links'])}\n            </div>\n          </div>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isFieldTouched || isAvatarTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectBot(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    return {\n      userId,\n      user,\n      progress,\n      currentBio: userFullInfo?.bio,\n      maxBioLength,\n    };\n  },\n)(ManageBot));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    updateChat,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chatFullInfo?.about || '';\n  const hasLinkedChat = Boolean(chatFullInfo?.linkedChatId);\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!canInvite) return;\n    loadExportedChatInvites({ chatId });\n    loadExportedChatInvites({ chatId, isRevoked: true });\n    loadChatJoinRequests({ chatId });\n  }, [chatId, canInvite]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n  const removedUsersCount = chatFullInfo?.kickedMembers?.length || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength ? `${enabledLength} / ${totalLength}` : enabledLength.toString();\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"channel-title\"\n              label={lang('EnterChannelName')}\n              onChange={handleTitleChange}\n              value={title}\n              error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n              disabled={!canChangeInfo}\n            />\n            <TextArea\n              id=\"channel-about\"\n              label={lang('DescriptionPlaceholder')}\n              onChange={handleAboutChange}\n              value={about}\n              maxLength={CHANNEL_MAX_DESCRIPTION}\n              maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n              disabled={!canChangeInfo}\n              noReplaceNewlines\n            />\n          </div>\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{formatInteger(chat.membersCount!)}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const { invites } = management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      chatFullInfo: selectChatFullInfo(global, chatId),\n      progress,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      availableReactions: global.reactions.availableReactions,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageChannel));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { partition } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  isChannel?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  isChannel,\n  currentUserId,\n  adminMembersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n}) => {\n  const { toggleSignatures } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const areSignaturesEnabled = Boolean(chat?.areSignaturesShown);\n  const areProfilesEnabled = Boolean(chat?.areProfilesShown);\n\n  const canAddNewAdmins = Boolean(chat?.isCreator || (chat && getHasAdminRight(chat, 'addAdmins')));\n  const canToggleSignatures = isChannel && getHasAdminRight(chat!, 'postMessages');\n\n  const adminMembers = useMemo(() => {\n    if (!adminMembersById) {\n      return [];\n    }\n\n    const [owner, admins] = partition(Object.values(adminMembersById), (member) => member.isOwner);\n\n    return [...owner, ...admins];\n  }, [adminMembersById]);\n\n  const handleAdminMemberClick = useLastCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  });\n\n  const handleToggleSignatures = useLastCallback(() => {\n    toggleSignatures({\n      chatId: chat!.id,\n      areProfilesEnabled,\n      areSignaturesEnabled: !areSignaturesEnabled,\n    });\n  });\n\n  const handleToggleProfiles = useLastCallback(() => {\n    toggleSignatures({\n      chatId: chat!.id,\n      areProfilesEnabled: !areProfilesEnabled,\n      areSignaturesEnabled,\n    });\n  });\n\n  const handleAddAdminClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  });\n\n  const getMemberStatus = useLastCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  });\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            disabled\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"section-help\" dir=\"auto\">\n            {lang(isChannel\n              ? 'Channel.Management.AddModeratorHelp'\n              : 'Group.Management.AddModeratorHelp')}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <Icon name=\"add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n\n        {canToggleSignatures && (\n          <div className=\"section\">\n            <div className=\"ListItem narrow\">\n              <Checkbox\n                checked={areSignaturesEnabled}\n                label={lang('ChannelSignMessages')}\n                onChange={handleToggleSignatures}\n              />\n            </div>\n            {areSignaturesEnabled && (\n              <>\n                <div className=\"ListItem narrow\">\n                  <Checkbox\n                    checked={areProfilesEnabled}\n                    label={lang('ChannelSignMessagesWithProfile')}\n                    onChange={handleToggleProfiles}\n                  />\n                </div>\n                <p className=\"section-info section-info_push\">\n                  {lang('ChannelSignProfilesInfo')}\n                </p>\n              </>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: chat && isChatChannel(chat),\n      adminMembersById: selectChatFullInfo(global, chatId)?.adminMembersById,\n    };\n  },\n)(ManageChatAdministrators));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo,\n  selectManagement, selectTabState,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Spinner from '../../ui/Spinner';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n  privateInviteLink?: string;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  privateInviteLink,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n    resetManagementError,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateInviteLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateInviteLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n\n    if (error) {\n      resetManagementError({\n        chatId: chat.id,\n      });\n    }\n  }, [chat.id, error]);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? (editableUsername || '') : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '', shouldDisableUsernames: true });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useOldLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 0;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available'))\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateInviteLink ? (\n              <>\n                <LinkField link={privateInviteLink} className=\"invite-link\" />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <div className=\"settings-input\">\n              <UsernameInput\n                asLink\n                currentUsername={currentUsername}\n                isLoading={isLoading}\n                isUsernameAvailable={isUsernameAvailable}\n                checkedUsername={checkedUsername}\n                onChange={handleUsernameChange}\n              />\n            </div>\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info section-info_push\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId);\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n      privateInviteLink: selectChatFullInfo(global, chatId)?.inviteLink,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId) && selectManagement(global, chatId));\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChatFullInfo } from '../../../global/selectors';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ChatOrUserPicker from '../../common/pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatMembers?: ApiChatMember[];\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  chatMembers,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chatMembers || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    return filterPeersByQuery({ ids: availableMemberIds, query: search, type: 'user' });\n  }, [chatMembers, currentUserId, search]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chat }): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      currentUserId,\n      chatMembers: selectChatFullInfo(global, chat.id)?.members,\n    };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  removedMembers: ApiChatMember[];\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  removedMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useOldLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember): MenuItemContextAction[] | undefined => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"section-help\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <Icon name=\"add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      removedMembers: selectChatFullInfo(global, chatId)?.kickedMembers || MEMO_EMPTY_ARRAY,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Avatar from '../../common/Avatar';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(Boolean(linkedChat?.isJoinToSend));\n  const [isJoinRequest, setIsJoinRequest] = useState(Boolean(linkedChat?.isJoinRequest));\n  const lang = useOldLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId! });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    if (isChatPublic(linkedGroup)) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line @stylistic/max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  const handleNewGroupClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.NewDiscussionGroup);\n  });\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            className=\"create-item\"\n            withPrimaryColor\n            teactOrderKey={0}\n            onClick={handleNewGroupClick}\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <div className=\"ListItem narrow\">\n              <Checkbox\n                checked={isJoinToSend}\n                onCheck={handleJoinToSendCheck}\n                label={lang('ChannelSettingsJoinToSend')}\n              />\n            </div>\n            {isJoinToSend && (\n              <div className=\"ListItem narrow\">\n                <Checkbox\n                  checked={isJoinRequest}\n                  onCheck={handleJoinRequestCheck}\n                  label={lang('ChannelSettingsJoinRequest')}\n                />\n              </div>\n            )}\n            <p className=\"section-info section-info_push\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { linkedChatId } = selectChatFullInfo(global, chatId) || {};\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = linkedChatId ? selectChat(global, linkedChatId) : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { debounce } from '../../../util/schedulers';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst runDebounced = debounce((cb) => cb(), 500, false);\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chatFullInfo?.about || '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const [isForumEnabled, setIsForumEnabled] = useState(chat.isForum);\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => isChatPublic(chat), [chat]);\n  const lang = useOldLang();\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, canInvite]);\n\n  // Resetting `isForum` switch on flood wait error\n  useEffect(() => {\n    setIsForumEnabled(Boolean(chat.isForum));\n  }, [chat.isForum]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  });\n\n  const handleClickDiscussion = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  });\n\n  const handleClickReactions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  });\n\n  const handleClickPermissions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  });\n\n  const handleClickAdministrators = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  });\n\n  const handleClickInvites = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  });\n\n  const handleClickRequests = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  });\n\n  const handleSetPhoto = useLastCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleAboutChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleUpdateGroup = useLastCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  });\n\n  const handleClickMembers = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  });\n\n  const handleTogglePreHistory = useLastCallback(() => {\n    if (!chatFullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chatFullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  });\n\n  const handleForumToggle = useLastCallback(() => {\n    setIsForumEnabled((current) => {\n      const newIsForumEnabled = !current;\n\n      runDebounced(() => {\n        toggleForum({ chatId, isEnabled: newIsForumEnabled });\n      });\n\n      return newIsForumEnabled;\n    });\n  });\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chatFullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chatFullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : enabledLength.toString();\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => {\n        if (key === 'manageTopics' && !isForumEnabled) return false;\n        return !chat.defaultBannedRights![key];\n      },\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat.defaultBannedRights, isForumEnabled]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useLastCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  });\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={isForumEnabled}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"group-title\"\n              label={lang('GroupName')}\n              onChange={handleTitleChange}\n              value={title}\n              error={error === GROUP_TITLE_EMPTY ? error : undefined}\n              disabled={!canChangeInfo}\n            />\n            <TextArea\n              id=\"group-about\"\n              label={lang('DescriptionPlaceholder')}\n              maxLength={GROUP_MAX_DESCRIPTION}\n              maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n              onChange={handleAboutChange}\n              value={about}\n              disabled={!canChangeInfo}\n              noReplaceNewlines\n            />\n          </div>\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}\n              /\n              {TOTAL_PERMISSIONS_COUNT - (isForumEnabled ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={isForumEnabled}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && !hasLinkedChannel && Boolean(chatFullInfo) && (\n            <div className=\"ListItem narrow\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chatFullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                subLabel={\n                  chatFullInfo.isPreHistoryHidden ? lang('ChatHistoryHiddenInfo2') : lang('ChatHistoryVisibleInfo')\n                }\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chatFullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n    const canChangeInfo = chat.isCreator || getHasAdminRight(chat, 'changeInfo');\n    const canBanUsers = chat.isCreator || getHasAdminRight(chat, 'banUsers');\n    const canInvite = chat.isCreator || getHasAdminRight(chat, 'inviteUsers');\n\n    return {\n      chat,\n      chatFullInfo,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo,\n      canBanUsers,\n      canInvite,\n      exportedInvites: invites,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.reactions.availableReactions,\n      canEditForum,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiChatAdminRights, ApiChatMember, ApiUser,\n} from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  adminMembersById?: Record<string, ApiChatMember>;\n  hasFullInfo: boolean;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isActive,\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  chat,\n  usersById,\n  currentUserId,\n  adminMembersById,\n  hasFullInfo,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (hasFullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"postStories\"\n              checked={Boolean(permissions.postStories)}\n              label={lang('EditAdminPostStories')}\n              blocking\n              disabled={getControlIsDisabled('postStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"editStories\"\n              checked={Boolean(permissions.editStories)}\n              label={lang('EditAdminEditStories')}\n              blocking\n              disabled={getControlIsDisabled('editStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteStories\"\n              checked={Boolean(permissions.deleteStories)}\n              label={lang('EditAdminDeleteStories')}\n              blocking\n              disabled={getControlIsDisabled('deleteStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n      hasFullInfo: Boolean(fullInfo),\n      adminMembersById: fullInfo?.adminMembersById,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens, NewChatMembersProgress } from '../../../types';\n\nimport {\n  getHasAdminRight, isChatBasicGroup,\n  isChatChannel, isUserBot, isUserRightBanned, sortUserIds,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport usePeerStoriesPolling from '../../../hooks/polling/usePeerStoriesPolling';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Switcher from '../../ui/Switcher';\nimport DeleteMemberModal from '../DeleteMemberModal';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  canAddMembers?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  areParticipantsHidden?: boolean;\n  canHideParticipants?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  canAddMembers,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  areParticipantsHidden,\n  canHideParticipants,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement,\n    toggleParticipantsHidden, setNewChatMembersDialogState, toggleManagement,\n  } = getActions();\n  const lang = useOldLang();\n  const inputRef = useRef<HTMLInputElement>();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  usePeerStoriesPolling(memberIds);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterPeersByQuery({ ids: localContactIds, query: searchQuery, type: 'user' }) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  });\n\n  const handleFilterChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  const handleToggleParticipantsHidden = useLastCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    toggleManagement();\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"panel-content custom-scroll\">\n        {canHideParticipants && !isChannel && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                  withPortalForMenu\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf withStory />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const { members, adminMembersById, areParticipantsHidden } = selectChatFullInfo(global, chatId) || {};\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n    const hiddenMembersMinCount = global.appConfig?.hiddenMembersMinCount;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    const canHideParticipants = canDeleteMembers && !isChatBasicGroup(chat) && chat.membersCount !== undefined\n      && hiddenMembersMinCount !== undefined && chat.membersCount >= hiddenMembersMinCount;\n\n    const canAddMembers = chat && ((getHasAdminRight(chat, 'inviteUsers')\n      || (!isChannel && !isUserRightBanned(chat, 'inviteUsers')))\n    || chat.isCreator\n    );\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      areParticipantsHidden: Boolean(chat && areParticipantsHidden),\n      members,\n      canAddMembers,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      canHideParticipants,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport {\n  DEFAULT_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport Icon from '../../common/icons/Icon';\nimport PaidMessagePrice from '../../common/paidMessage/PaidMessagePrice';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport PermissionCheckboxList from '../../main/PermissionCheckboxList';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  progress?: ManagementProgress;\n  currentUserId?: string;\n  removedUsersCount: number;\n  members?: ApiChatMember[];\n  arePaidMessagesAvailable?: boolean;\n  groupPeersPaidStars: number;\n  canChargeForMessages?: boolean;\n};\n\nconst ITEM_HEIGHT = 48;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  progress,\n  currentUserId,\n  removedUsersCount,\n  members,\n  onClose,\n  isActive,\n  arePaidMessagesAvailable,\n  canChargeForMessages,\n  groupPeersPaidStars,\n}) => {\n  const { updateChatDefaultBannedRights, updatePaidMessagesPrice } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n\n  const [isPriceForMessagesChanged, markPriceForMessagesChanged, unmarkPriceForMessagesChanged] = useFlag();\n  const [isPriceForMessagesOpen, setIsPriceForMessagesOpen] = useState(canChargeForMessages);\n  const [chargeForMessages, setChargeForMessages] = useState<number>(groupPeersPaidStars);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkPriceForMessagesChanged();\n    }\n  }, [progress]);\n\n  const handleSavePermissions = useLastCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  });\n\n  const handleUpdatePaidMessagesPrice = useLastCallback(() => {\n    if (!chat) return;\n    updatePaidMessagesPrice({\n      chatId: chat?.id,\n      paidMessagesStars: isPriceForMessagesOpen ? chargeForMessages : 0,\n    });\n  });\n\n  const handleUpdatePermissions = useLastCallback(() => {\n    if (isPriceForMessagesChanged) {\n      handleUpdatePaidMessagesPrice();\n    }\n    if (havePermissionChanged) {\n      handleSavePermissions();\n    }\n  });\n\n  const exceptionMembers = useMemo(() => {\n    if (!members) {\n      return [];\n    }\n\n    return members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [members]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = oldLang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, oldLang]);\n\n  const handleChargeStarsForMessages = useLastCallback(() => {\n    setIsPriceForMessagesOpen(!isPriceForMessagesOpen);\n    markPriceForMessagesChanged();\n  });\n\n  const handleChargeForMessagesChange = useLastCallback((value: number) => {\n    setChargeForMessages(value);\n    markPriceForMessagesChanged();\n  });\n\n  const arePermissionsChanged = isPriceForMessagesChanged || havePermissionChanged;\n  const arePermissionsLoading = progress === ManagementProgress.InProgress || isLoading;\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n          <PermissionCheckboxList\n            chatId={chat?.id}\n            isMediaDropdownOpen={isMediaDropdownOpen}\n            setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n            handlePermissionChange={handlePermissionChange}\n            permissions={permissions}\n            dropdownClassName=\"DropdownListTrap\"\n            className={buildClassName(\n              'DropdownList',\n              isMediaDropdownOpen && 'DropdownList--open',\n            )}\n            shiftedClassName={buildClassName('part', isMediaDropdownOpen && 'shifted')}\n          />\n        </div>\n\n        {arePaidMessagesAvailable && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem onClick={handleChargeStarsForMessages}>\n              <span>{lang('GroupMessagesChargePrice')}</span>\n              <Switcher\n                id=\"charge_for_messages\"\n                label={lang('GroupMessagesChargePrice')}\n                checked={isPriceForMessagesOpen}\n              />\n            </ListItem>\n            <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('RightsChargeStarsAbout')}\n            </p>\n          </div>\n        )}\n\n        {isPriceForMessagesOpen && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <PaidMessagePrice\n              canChangeChargeForMessages\n              isGroupChat\n              chargeForMessages={chargeForMessages}\n              onChange={handleChargeForMessagesChange}\n            />\n          </div>\n        )}\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={arePermissionsChanged}\n        onClick={handleUpdatePermissions}\n        ariaLabel={lang('Save')}\n        disabled={arePermissionsLoading}\n      >\n        {arePermissionsLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { progress } = selectTabState(global).management;\n\n    const paidMessagesStars = chat?.paidMessagesStars;\n    const configStarsPaidMessageCommissionPermille = global.appConfig?.starsPaidMessageCommissionPermille;\n\n    return {\n      chat,\n      progress,\n      currentUserId: global.currentUserId,\n      removedUsersCount: fullInfo?.kickedMembers?.length || 0,\n      members: fullInfo?.members,\n      arePaidMessagesAvailable: Boolean(fullInfo?.arePaidMessagesAvailable && configStarsPaidMessageCommissionPermille),\n      canChargeForMessages: Boolean(paidMessagesStars && configStarsPaidMessageCommissionPermille),\n      groupPeersPaidStars: paidMessagesStars || DEFAULT_CHARGE_FOR_MESSAGES,\n    };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport PermissionCheckboxList from '../../main/PermissionCheckboxList';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasFullInfo?: boolean;\n  members?: ApiChatMember[];\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 48;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  hasFullInfo,\n  members,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!members) {\n      return undefined;\n    }\n\n    return members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [members, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (hasFullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{oldLang('UserRestrictionsCanDo')}</h3>\n          <PermissionCheckboxList\n            chatId={chat?.id}\n            isMediaDropdownOpen={isMediaDropdownOpen}\n            setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n            handlePermissionChange={handlePermissionChange}\n            permissions={permissions}\n            className={buildClassName(\n              'DropdownList',\n              isMediaDropdownOpen && 'DropdownList--open',\n            )}\n            dropdownClassName=\"DropdownListTrap\"\n            shiftedClassName={buildClassName('part', isMediaDropdownOpen && 'shifted')}\n            getControlIsDisabled={getControlIsDisabled}\n          />\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {oldLang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={oldLang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text={lang('GroupManagementBanUserConfirm')}\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      isFormFullyDisabled,\n      hasFullInfo: Boolean(fullInfo),\n      members: fullInfo?.members,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { isChatChannel, sortUserIds } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = selectChatFullInfo(global, chatId)?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { formatFullDate, formatTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"section-help hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-heading\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)}\n              {' '}\n              {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"section-help hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-heading\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"section-help hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <Icon name=\"check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId] || {};\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport LinkField from '../../common/LinkField';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n};\n\nconst BULLET = '\\u2022';\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useOldLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p className=\"section-heading\">{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"section-help\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => {\n            const joinTime = formatMediaDateTime(lang, importer.date * 1000, true);\n            const status = importer.isFromChatList ? `${joinTime} ${BULLET} ${lang('JoinedViaFolder')}` : joinTime;\n            return (\n              <ListItem\n                className=\"chat-item-clickable scroll-item small-icon\"\n\n                onClick={() => openChat({ id: importer.userId })}\n              >\n                <PrivateChatInfo\n                  userId={importer.userId}\n                  status={status}\n                  forceShowSelf\n                />\n              </ListItem>\n            );\n          })}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p className=\"section-heading\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"section-help\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"panel-content custom-scroll\">\n        {!invite && (\n          <p className=\"section-help\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <LinkField title={invite.title} link={invite.link} className=\"invite-link\" />\n              {Boolean(expireDate) && (\n                <p className=\"section-help\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p className=\"section-heading\">{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId] || {};\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport NothingFound from '../../common/NothingFound';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(forceUpdate, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.hasUsername ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.hasUsername, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: oldLang('LinkCopied'),\n    });\n  }, [oldLang, showNotification]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = oldLang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = oldLang('PeopleJoined', usage);\n    } else {\n      text = oldLang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${oldLang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${oldLang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${oldLang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = expireDate - getServerTime();\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += oldLang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += oldLang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${oldLang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions: MenuItemContextAction[] = [];\n    actions.push({\n      title: oldLang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: oldLang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: oldLang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: oldLang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"section-help\">{isChannel ? oldLang('PrimaryLinkHelpChannel') : oldLang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <LinkField\n              className=\"settings-input\"\n              link={primaryInviteLink}\n              withShare\n              onRevoke={!chat?.usernames ? handlePrimaryRevoke : undefined}\n              title={chat?.usernames ? oldLang('PublicLink') : oldLang('lng_create_permanent_link_title')}\n            />\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <ListItem icon=\"add\" withPrimaryColor key=\"create\" className=\"create-item\" onClick={handleCreateNewClick}>\n            {oldLang('CreateNewLink')}\n          </ListItem>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<Icon name=\"link\" className={`link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"section-help hint\" key=\"links-hint\">{oldLang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"section-help\" key=\"title\">{oldLang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{oldLang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<Icon name=\"link\" className={`link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={oldLang('DeleteAllRevokedLinks')}\n        text={oldLang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={oldLang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={oldLang('RevokeLink')}\n        text={oldLang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={oldLang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={oldLang('DeleteLink')}\n        text={oldLang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={oldLang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId] || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useOldLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            peer={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { isUserId } from '../../../util/entities/ids';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport JoinRequest from './JoinRequest';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"section-help\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport {\n  MAX_UNIQUE_REACTIONS,\n} from '../../../config';\nimport { isChatChannel, isSameReaction } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions: number;\n  reactionsLimit?: number;\n  isChannel?: boolean;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n  maxUniqueReactions,\n  reactionsLimit,\n  isChannel,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useOldLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  const [localReactionsLimit, setLocalReactionsLimit] = useState(reactionsLimit);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n      reactionsLimit: localReactionsLimit,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions, localReactionsLimit]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n    setLocalReactionsLimit(reactionsLimit);\n  }, [enabledReactions, reactionsLimit]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  useEffect(() => {\n    if (localReactionsLimit !== undefined && localReactionsLimit !== reactionsLimit) {\n      setIsTouched(true);\n      return;\n    }\n\n    if (localEnabledReactions?.type === 'some') {\n      const isReactionsDisabled = enabledReactions?.type !== 'all' && enabledReactions?.type !== 'some';\n\n      if (isReactionsDisabled && localEnabledReactions.allowed.length === 0) {\n        setIsTouched(false);\n        return;\n      }\n    }\n\n    if (localEnabledReactions?.type !== enabledReactions?.type) {\n      setIsTouched(true);\n      return;\n    }\n\n    if (localEnabledReactions?.type === 'some' && enabledReactions?.type === 'some') {\n      const localAllowedReactions = localEnabledReactions.allowed;\n      const enabledAllowedReactions = enabledReactions?.allowed;\n\n      if (localAllowedReactions.length !== enabledAllowedReactions.length\n        || localAllowedReactions.reverse().some(\n          (localReaction) => !enabledAllowedReactions.find(\n            (enabledReaction) => isSameReaction(localReaction, enabledReaction),\n          ),\n        )) {\n        setIsTouched(true);\n        return;\n      }\n    }\n\n    setIsTouched(false);\n  }, [\n    localReactionsLimit,\n    reactionsLimit,\n    localEnabledReactions,\n    enabledReactions,\n  ]);\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n      setLocalReactionsLimit(reactionsLimit);\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n      setLocalReactionsLimit(reactionsLimit);\n    } else {\n      setLocalEnabledReactions(undefined);\n      setLocalReactionsLimit(undefined);\n    }\n  }, [enabledReactions, reactionsLimit]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  const handleReactionsLimitChange = useCallback((value: number) => {\n    setLocalReactionsLimit(value);\n  }, []);\n\n  const renderReactionsMaxCountValue = useCallback((value: number) => {\n    return lang('PeerInfo.AllowedReactions.MaxCountValue', value);\n  }, [lang]);\n\n  const shouldShowReactionsLimit = isChannel\n    && (localEnabledReactions?.type === 'all' || localEnabledReactions?.type === 'some');\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        {Boolean(localReactionsLimit && shouldShowReactionsLimit) && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('MaximumReactionsHeader')}\n            </h3>\n            <RangeSlider\n              min={1}\n              max={maxUniqueReactions}\n              value={localReactionsLimit!}\n              onChange={handleReactionsLimitChange}\n              renderValue={renderReactionsMaxCountValue}\n              isCenteredLayout\n            />\n            <p className=\"section-info section-info_push\">\n              {lang('ChannelReactions.MaxCount.Info')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info section-info_push\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section section-with-fab\">\n            <h3 className=\"section-heading\">\n              {lang('OnlyAllowThisReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  withIcon\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { maxUniqueReactions = MAX_UNIQUE_REACTIONS } = global.appConfig || {};\n\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const reactionsLimit = chatFullInfo?.reactionsLimit || maxUniqueReactions;\n    const isChannel = isChatChannel(chat);\n\n    return {\n      enabledReactions: chatFullInfo?.enabledReactions,\n      availableReactions: global.reactions.availableReactions,\n      chat,\n      maxUniqueReactions,\n      reactionsLimit,\n      isChannel,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageReactions));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { isUserBot } from '../../../global/helpers';\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectChat,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  personalPhoto?: ApiPhoto;\n  notPersonalPhoto?: ApiPhoto;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n  personalPhoto,\n  notPersonalPhoto,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n\n    if (error === ERROR_FIRST_NAME_MISSING) {\n      setError(undefined);\n    }\n  }, [error]);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  const inputRef = useRef<HTMLInputElement>();\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            noStatusOrTyping\n            noEmojiStatus\n            withFullInfo\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"user-first-name\"\n              label={lang('UserInfo.FirstNamePlaceholder')}\n              onChange={handleFirstNameChange}\n              value={firstName}\n              error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n            />\n            <InputText\n              id=\"user-last-name\"\n              label={lang('UserInfo.LastNamePlaceholder')}\n              onChange={handleLastNameChange}\n              value={lastName}\n            />\n          </div>\n          <div className=\"ListItem narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SuggestPhoto', user.firstName)}</span>\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SetCustomPhoto', user.firstName)}</span>\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    peer={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"section-help\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id));\n    const personalPhoto = userFullInfo?.personalPhoto;\n    const notPersonalPhoto = userFullInfo?.profilePhoto || userFullInfo?.fallbackPhoto;\n\n    return {\n      user, progress, isMuted, personalPhoto, notPersonalPhoto,\n    };\n  },\n)(ManageUser));\n","import type { FC } from '../../../lib/teact/teact.ts';\nimport type React from '../../../lib/teact/teact.ts';\nimport { useState } from '../../../lib/teact/teact.ts';\nimport { memo } from '../../../lib/teact/teact.ts';\n\nimport type { ApiChat } from '../../../api/types/index.ts';\nimport type { ManagementScreens } from '../../../types/index.ts';\nimport { ChatCreationProgress } from '../../../types/index.ts';\n\nimport { getActions, withGlobal } from '../../../global/index.ts';\nimport { selectChat, selectTabState } from '../../../global/selectors/index.ts';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack.ts';\nimport useLang from '../../../hooks/useLang.ts';\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\n\nimport Icon from '../../common/icons/Icon.tsx';\nimport AvatarEditable from '../../ui/AvatarEditable.tsx';\nimport FloatingActionButton from '../../ui/FloatingActionButton.tsx';\nimport InputText from '../../ui/InputText.tsx';\nimport Spinner from '../../ui/Spinner.tsx';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\nconst NewDiscussionGroup: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  creationProgress,\n  creationError,\n}) => {\n  const { createChannel } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const [title, setTitle] = useState(lang('NewDiscussionChatTitle', { name: chat?.title }));\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.trimStart();\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  });\n\n  const renderedError = (creationError && lang('NewChatTitleEmptyError')) || (\n    error !== lang('NewChatTitleEmptyError') && error !== lang('NewChannelTitleEmptyError')\n      ? error\n      : undefined\n  );\n\n  const handleCreateGroup = useLastCallback(() => {\n    if (!title.length) {\n      setError(lang('NewChatTitleEmptyError'));\n      return;\n    }\n    if (!chat) return;\n\n    createChannel({\n      discussionChannelId: chat.id,\n      title,\n      photo,\n      isSuperGroup: true,\n    });\n  });\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"NewChat\">\n          <div className=\"NewChat-inner step-2\">\n            <AvatarEditable\n              onChange={setPhoto}\n              title={lang('AddPhoto')}\n            />\n            <InputText\n              value={title}\n              onChange={handleTitleChange}\n              label={lang('GroupName')}\n              error={error === lang('NewChatTitleEmptyError')\n                || error === lang('NewChannelTitleEmptyError') ? error : undefined}\n            />\n\n            {renderedError && (\n              <p className=\"error\">{renderedError}</p>\n            )}\n          </div>\n\n          <FloatingActionButton\n            isShown={title.length !== 0}\n            onClick={handleCreateGroup}\n            disabled={isLoading}\n            ariaLabel={lang('DiscussionCreateGroup')}\n          >\n            {isLoading ? (\n              <Spinner color=\"white\" />\n            ) : (\n              <Icon name=\"arrow-right\" />\n            )}\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      creationProgress,\n      creationError,\n    };\n  },\n)(NewDiscussionGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageBot from './ManageBot';\nimport ManageChannel from './ManageChannel';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvite from './ManageInvite';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageInvites from './ManageInvites';\nimport ManageJoinRequests from './ManageJoinRequests';\nimport ManageReactions from './ManageReactions';\nimport ManageUser from './ManageUser';\nimport NewDiscussionGroup from './NewDiscussionGroup.tsx';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'bot':\n          return (\n            <ManageBot\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.NewDiscussionGroup:\n      return (\n        <NewDiscussionGroup\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType] || '';\n}\n","import type { RegularLangFnParameters } from '../../util/localization';\nimport type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Partial<Record<string, RegularLangFnParameters>>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormState, FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"maC_9u6e\",\"description\":\"zQ6lEVJ2\",\"checkout-picture\":\"JgWvLdK2\",\"checkoutPicture\":\"JgWvLdK2\",\"text\":\"T2pYH395\",\"checkout-title\":\"HadolzeF\",\"checkoutTitle\":\"HadolzeF\",\"checkout-description\":\"oZW7mUNP\",\"checkoutDescription\":\"oZW7mUNP\",\"price-info\":\"P618Q3yr\",\"priceInfo\":\"P618Q3yr\",\"price-info-item\":\"XNNG_ajy\",\"priceInfoItem\":\"XNNG_ajy\",\"price-info-item-main\":\"D9gYNLVk\",\"priceInfoItemMain\":\"D9gYNLVk\",\"price-info-item-title\":\"NtY5Aah7\",\"priceInfoItemTitle\":\"NtY5Aah7\",\"tipsList\":\"WHO341eB\",\"tipsItem\":\"ksLlzBxw\",\"tipsItem_active\":\"J4yem62L\",\"tipsItemActive\":\"J4yem62L\",\"invoice-info\":\"U2IBOLP1\",\"invoiceInfo\":\"U2IBOLP1\",\"provider\":\"kqWcdro1\",\"stripe\":\"xKztZrna\",\"smartglocal\":\"X_Ge1o4u\",\"checkout-info-item-info-title\":\"ysWuPklS\",\"checkoutInfoItemInfoTitle\":\"ysWuPklS\",\"checkout-info-item-info-data\":\"MpC_P8_c\",\"checkoutInfoItemInfoData\":\"MpC_P8_c\",\"tos-checkbox\":\"OrRb0xG7\",\"tosCheckbox\":\"OrRb0xG7\",\"list\":\"l_wfiFG0\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type {\n  ApiInvoice,\n  ApiLabeledPrice,\n  ApiPaymentCredentials,\n  ApiWebDocument,\n} from '../../api/types';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { IconName } from '../../types/icons';\nimport type { LangFn } from '../../util/localization';\nimport { PaymentStep } from '../../types';\n\nimport { getWebDocumentHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport SafeLink from '../common/SafeLink';\nimport Checkbox from '../ui/Checkbox';\nimport ListItem from '../ui/ListItem';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  title: string;\n  description: string;\n  photo?: ApiWebDocument;\n  invoice: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: ApiLabeledPrice[];\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  title,\n  description,\n  photo,\n  invoice,\n  shippingPrices,\n  checkoutInfo,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    termsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const ref = useMediaTransition<HTMLImageElement>(photoUrl);\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(lang, tipAmount!, invoice.currency)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(lang, tip, invoice.currency, { shouldOmitFractions: true })}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = oldLang('PaymentCheckoutAcceptRecurrent', botName);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, oldLang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && (\n          <img\n            ref={ref}\n            className={styles.checkoutPicture}\n            src={photoUrl}\n            draggable={false}\n            width={photo!.dimensions?.width}\n            height={photo!.dimensions?.height}\n            alt=\"\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {description && (\n            <div className={styles.checkoutDescription}>\n              {renderText(description, ['br', 'links', 'emoji'])}\n            </div>\n          )}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {invoice.prices.map((item) => (\n          renderPaymentItem(lang, item.label, item.amount, invoice.currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang, item.label, item.amount, invoice.currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang, oldLang('Checkout.TotalAmount'), totalPrice, invoice.currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {!isPaymentFormUrl && renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: oldLang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: oldLang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || (!isInteractive && shippingAddress)) && renderCheckoutItem({\n          title: shippingAddress,\n          label: oldLang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: oldLang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: oldLang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || (!isInteractive && shippingMethod)) && renderCheckoutItem({\n          title: shippingMethod,\n          label: oldLang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {termsUrl && renderTos(termsUrl)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  lang: LangFn, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(lang, value, currency)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title: string | undefined;\n  label: string | undefined;\n  icon?: IconName;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  const isMultiline = Boolean(title && label !== title);\n\n  return (\n    <ListItem\n      className={styles.list}\n      narrow\n      multiline={isMultiline}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n      leftElement={customIcon && <i className={buildClassName('icon', customIcon)} />}\n    >\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n  onPaymentFormSubmit?: (eventData: PaymentFormSubmitEvent['eventData']) => void;\n};\n\nexport interface PaymentFormSubmitEvent {\n  eventType: 'payment_form_submit';\n  eventData: {\n    credentials: {\n      token: string;\n      type: string;\n    };\n    title: string;\n  };\n}\n\ninterface WebAppOpenTgLinkEvent {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full?: string;\n  };\n}\n\ntype IframeCallbackEvent = PaymentFormSubmitEvent | WebAppOpenTgLinkEvent;\n\nconst ConfirmPayment: FC<OwnProps> = ({\n  url, noRedirect, onClose, onPaymentFormSubmit,\n}) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useOldLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n      switch (eventType) {\n        case 'web_app_open_tg_link':\n          if (!noRedirect) {\n            const linkUrl = TME_LINK_PREFIX + eventData.path_full!;\n            openTelegramLink({ url: linkUrl });\n          }\n          onClose();\n          break;\n        case 'payment_form_submit':\n          if (onPaymentFormSubmit) {\n            onPaymentFormSubmit(eventData);\n          }\n          break;\n        default:\n          onClose();\n          break;\n      }\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink, onPaymentFormSubmit]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { RegularLangFnParameters } from '../../util/localization';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport PasswordForm from '../common/PasswordForm';\nimport PasswordMonkey from '../common/PasswordMonkey';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  errorKey?: RegularLangFnParameters;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  errorKey,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={errorKey && lang.withRegular(errorKey)}\n        hint={passwordHint}\n        description={oldLang('PaymentConfirmationMessage', cardName)}\n        placeholder={oldLang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { payment } = selectTabState(global);\n  return {\n    errorKey: payment.error?.messageKey,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.form?.type === 'regular' ? payment.form.savedCredentials : undefined,\n  };\n})(PasswordConfirm));\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect } from '../lib/teact/teact';\n\nimport { requestMeasure } from '../lib/fasterdom/fasterdom';\nimport { IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\n\nconst DEFAULT_DURATION = 300;\n\nexport default function useFocusAfterAnimation(\n  ref: ElementRef<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      requestMeasure(() => {\n        ref.current?.focus();\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { CardType, detectCardType } from '../common/helpers/detectCardType';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport mirIconPath from '../../assets/mir.svg';\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 19;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput: FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useOldLang();\n  const cardNumberRef = useRef<HTMLInputElement>();\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} draggable={false} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} draggable={false} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} draggable={false} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput: FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useOldLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport CardInput from './CardInput';\nimport ExpiryInput from './ExpiryInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  const selectCountryRef = useRef<HTMLSelectElement>();\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{oldLang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber && lang.withRegular(formErrors.cardNumber)}\n        />\n        {needCardholderName && (\n          <InputText\n            label={oldLang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder && lang.withRegular(formErrors.cardholder)}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry && lang.withRegular(formErrors.expiry)}\n          />\n          <InputText\n            label={oldLang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv && lang.withRegular(formErrors.cvv)}\n            teactExperimentControlled\n          />\n        </section>\n        {needCountry || needZip ? (\n          <h5>{oldLang('PaymentBillingAddress')}</h5>\n        ) : undefined}\n        <section className=\"inline-inputs\">\n          {needCountry && (\n            <Select\n              label={oldLang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.billingCountry}\n              hasArrow={Boolean(true)}\n              id=\"billing-country\"\n              error={formErrors.billingCountry && lang.withRegular(formErrors.billingCountry)}\n              tabIndex={0}\n              ref={selectCountryRef}\n            >\n              {\n                countryList.map(({ defaultName, name }) => (\n                  <option\n                    value={defaultName}\n                    className=\"county-item\"\n                    selected={defaultName === state.billingCountry}\n                  >\n                    {defaultName || name}\n                  </option>\n                ))\n              }\n            </Select>\n          )}\n          {needZip && (\n            <InputText\n              label={oldLang('PaymentShippingZipPlaceholder')}\n              onChange={handleBillingPostCodeChange}\n              value={state.billingZip}\n              inputMode=\"text\"\n              tabIndex={0}\n              maxLength={12}\n              error={formErrors.billingZip && lang.withRegular(formErrors.billingZip)}\n            />\n          )}\n        </section>\n        <div className=\"checkbox\">\n          <Checkbox\n            label={oldLang('PaymentCardSavePaymentInformation')}\n            checked={canSaveCredentials ? state.saveCredentials : false}\n            tabIndex={0}\n            subLabel={oldLang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n            onChange={handleChangeSaveCredentials}\n            disabled={!canSaveCredentials}\n          />\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useOldLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\n\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(lang, amount, currency),\n    value,\n  }))), [shippingOptions, currency, lang]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{oldLang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const phoneRef = useRef<HTMLInputElement>();\n  const selectCountryRef = useRef<HTMLSelectElement>();\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{oldLang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={oldLang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1 && lang.withRegular(formErrors.streetLine1)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2 && lang.withRegular(formErrors.streetLine2)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city && lang.withRegular(formErrors.city)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state && lang.withRegular(formErrors.state)}\n            />\n            <Select\n              label={oldLang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2 && lang.withRegular(formErrors.countryIso2)}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={oldLang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode && lang.withRegular(formErrors.postCode)}\n            />\n          </div>\n        ) : undefined}\n        {needName || needEmail || needPhone ? (\n          <h5>{oldLang('PaymentShippingReceiver')}</h5>\n        ) : undefined}\n        {needName && (\n          <InputText\n            label={oldLang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName && lang.withRegular(formErrors.fullName)}\n          />\n        )}\n        {needEmail && (\n          <InputText\n            label={oldLang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email && lang.withRegular(formErrors.email)}\n          />\n        )}\n        {needPhone && (\n          <InputText\n            label={oldLang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone && lang.withRegular(formErrors.phone)}\n            ref={phoneRef}\n          />\n        )}\n        <Checkbox\n          label={oldLang('PaymentShippingSave')}\n          subLabel={oldLang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiCountry, ApiInvoice, ApiLabeledPrice, ApiPaymentCredentials, ApiPaymentFormRegular,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { ShippingOption } from '../../types';\nimport type { PaymentFormSubmitEvent } from './ConfirmPayment';\nimport { PaymentStep } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { selectChat, selectTabState, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatCurrencyAsString } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\n\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport Checkout from './Checkout';\nimport ConfirmPayment from './ConfirmPayment';\nimport PasswordConfirm from './PasswordConfirm';\nimport PaymentInfo from './PaymentInfo';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport Shipping from './Shipping';\nimport ShippingInfo from './ShippingInfo';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst DONATE_PROVIDER_URL = 'https://payment.smart-glocal.com';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  step?: PaymentStep;\n  chat?: ApiChat;\n  nativeProvider?: string;\n  invoice?: ApiInvoice;\n  form?: ApiPaymentFormRegular;\n  error?: TabState['payment']['error'];\n  prices?: ApiLabeledPrice[];\n  isProviderError?: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions?: boolean;\n  shippingOptions?: ShippingOption[];\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  form,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n    setSmartGlocalCardInfo,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n  const prevStep = usePreviousDeprecated(step, true);\n  const prevRequestId = usePreviousDeprecated(requestId);\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error, requestId]);\n\n  // When payment verification occurs and the `step` does not change, the card details must be requested\n  useEffect(() => {\n    if (\n      step === PaymentStep.Checkout\n      && step === prevStep\n      && requestId !== prevRequestId\n      && !paymentState.savedCredentialId\n      && !paymentState.cardNumber\n    ) {\n      setStep(PaymentStep.PaymentInfo);\n    }\n  }, [paymentState.cardNumber, paymentState.savedCredentialId, prevRequestId, prevStep, requestId, setStep, step]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.messageKey,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (form?.savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = form.savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [form, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(invoice?.prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, invoice?.prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.descriptionKey ? lang.withRegular(error.descriptionKey) : lang('ErrorUnspecified')}</h4>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {oldLang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handlePaymentFormSubmit = useCallback((eventData: PaymentFormSubmitEvent['eventData']) => {\n    const { credentials } = eventData;\n    setSmartGlocalCardInfo(credentials);\n    sendForm();\n  }, [sendForm]);\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            title={form!.title}\n            description={form!.description}\n            photo={form!.photo}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice!}\n            checkoutInfo={checkoutInfo}\n            isPaymentFormUrl={isPaymentFormUrl}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(invoice?.isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n            botName={botName}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!form!.isPasswordMissing && form!.canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(invoice?.isShippingAddressRequested)}\n            needEmail={Boolean(invoice?.isEmailRequested || invoice?.isEmailSentToProvider)}\n            needPhone={Boolean(invoice?.isPhoneRequested || invoice?.isPhoneSentToProvider)}\n            needName={Boolean(invoice?.isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={invoice!.currency}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onPaymentFormSubmit={handlePaymentFormSubmit}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const handleButtonClick = useLastCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (isPaymentFormUrl) {\n          setIsLoading(true);\n          setStep(PaymentStep.ConfirmPayment);\n          return;\n        }\n\n        if (form?.savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (invoice?.isEmailRequested && !email)\n          || (invoice?.isPhoneRequested && !phone)\n          || (invoice?.isNameRequested && !fullName);\n\n        if ((invoice?.isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (invoice?.isShippingAddressRequested && !paymentState.shipping && shippingOptions?.length) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  });\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return oldLang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return oldLang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return oldLang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return oldLang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return oldLang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return oldLang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return oldLang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, oldLang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? oldLang('Checkout.PayPrice', formatCurrencyAsString(totalPrice, invoice!.currency, oldLang.code))\n    : lang('PaymentInfoDone');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.termsUrl) && !isTosAccepted;\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram Web A doesn&apos;t support payments with this provider yet.\n          {' '}\n          <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {oldLang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <Icon name={step === PaymentStep.Checkout ? 'close' : 'arrow-left'} />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition\n          name=\"slide\"\n          activeKey={step}\n          shouldCleanup\n          cleanupOnlyKey={PaymentStep.ConfirmPayment}\n        >\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            className=\"button-text\"\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      form,\n      step,\n      shippingOptions,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n      url,\n    } = selectTabState(global).payment;\n\n    const { invoice, nativeParams, nativeProvider } = form || {};\n    const countryList = global.countryList.general;\n\n    let providerName = form?.nativeProvider;\n    if (!providerName && url) {\n      providerName = url.startsWith(DONATE_PROVIDER_URL) ? DONATE_PROVIDER : undefined;\n    }\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!providerName || !SUPPORTED_PROVIDERS.has(providerName)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const bot = form?.botId ? selectUser(global, form.botId) : undefined;\n    const botName = getUserFullName(bot);\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      nativeProvider: providerName,\n      isProviderError,\n      form,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl: confirmPaymentUrl ?? url,\n      isPaymentFormUrl: Boolean(!nativeProvider && url),\n      countryList,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n      botName,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: ApiLabeledPrice[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiReceiptRegular, ApiShippingAddress } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Checkout from './Checkout';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  receipt?: ApiReceiptRegular;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  receipt,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const prevReceipt = usePrevious(receipt);\n  const renderingReceipt = receipt || prevReceipt;\n\n  const checkoutInfo = useMemo(() => {\n    if (!renderingReceipt) return undefined;\n    return getCheckoutInfo(renderingReceipt.credentialsTitle, renderingReceipt.info, renderingReceipt.shippingMethod);\n  }, [renderingReceipt]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      {renderingReceipt && (\n        <>\n          <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            <Button\n              className=\"close-button\"\n              color=\"translucent\"\n              round\n              size=\"smaller\"\n              onClick={closeModal}\n              ariaLabel=\"Close\"\n            >\n              <Icon name=\"close\" />\n            </Button>\n            <h3>\n              {' '}\n              {lang('PaymentReceipt')}\n              {' '}\n            </h3>\n          </div>\n          <div className=\"receipt-content custom-scroll\">\n            <Checkout\n              shippingPrices={renderingReceipt.shippingPrices}\n              totalPrice={renderingReceipt.totalAmount}\n              tipAmount={renderingReceipt.tipAmount}\n              invoice={renderingReceipt.invoice}\n              checkoutInfo={checkoutInfo}\n              title={renderingReceipt.title}\n              description={renderingReceipt.description}\n              photo={renderingReceipt.photo}\n            />\n          </div>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = selectTabState(global).payment;\n\n    return {\n      receipt,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?: {\n    phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"n8eENbaR\",\"closeButton\":\"smosGkw9\",\"contentText\":\"Qo4PtFZI\",\"title\":\"wtfpombl\",\"separator\":\"UoMeVIyC\",\"userPicker\":\"nEYyTS_m\",\"sendInvites\":\"Ttkq3nqt\",\"avatarList\":\"Nc3SOtKd\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback,\n  useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { partition } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\n\nimport styles from './InviteViaLinkModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['inviteViaLinkModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst InviteViaLinkModal: FC<OwnProps & StateProps> = ({\n  modal,\n  chat,\n}) => {\n  const { sendInviteMessages, closeInviteViaLinkModal, openPremiumModal } = getActions();\n  const { missingUsers } = modal || {};\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n\n  const userIds = useMemo(() => missingUsers?.map((user) => user.id) || MEMO_EMPTY_ARRAY, [missingUsers]);\n  const [unselectableIds, selectableIds] = useMemo(() => {\n    if (!missingUsers?.length) return [[], []];\n    const [requirePremiumIds, regularIds] = partition(missingUsers, (user) => user.isRequiringPremiumToMessage);\n    return [requirePremiumIds.map((user) => user.id), regularIds.map((user) => user.id)];\n  }, [missingUsers]);\n\n  const invitableWithPremiumIds = useMemo(() => {\n    return missingUsers?.filter((user) => user.isRequiringPremiumToInvite || user.isRequiringPremiumToMessage)\n      .map((user) => user.id);\n  }, [missingUsers]);\n\n  const isEveryPremiumBlocksPm = useMemo(() => {\n    if (!missingUsers) return undefined;\n    return !missingUsers.some((user) => user.isRequiringPremiumToInvite && !user.isRequiringPremiumToMessage);\n  }, [missingUsers]);\n\n  const topListPeers = useMemo(() => {\n    const users = getGlobal().users.byId;\n    return invitableWithPremiumIds?.map((id) => users[id]);\n  }, [invitableWithPremiumIds]);\n\n  useEffect(() => {\n    setSelectedMemberIds(selectableIds);\n  }, [selectableIds]);\n\n  const handleClose = useLastCallback(() => closeInviteViaLinkModal());\n\n  const handleSendInviteLink = useCallback(() => {\n    sendInviteMessages({ chatId: chat!.id, userIds: selectedMemberIds });\n    closeInviteViaLinkModal();\n  }, [selectedMemberIds, chat]);\n\n  const handleOpenPremiumModal = useCallback(() => {\n    openPremiumModal();\n  }, []);\n\n  const canSendInviteLink = useMemo(() => {\n    if (!chat) return undefined;\n    return Boolean(chat?.isCreator || chat?.adminRights?.inviteUsers);\n  }, [chat]);\n\n  const inviteSectionText = useMemo(() => {\n    return canSendInviteLink\n      ? lang(missingUsers?.length === 1 ? 'InviteBlockedOneMessage' : 'InviteBlockedManyMessage')\n      : lang('InviteRestrictedUsers2', missingUsers?.length);\n  }, [canSendInviteLink, lang, missingUsers?.length]);\n\n  const premiumSectionText = useMemo(() => {\n    if (!invitableWithPremiumIds?.length || !topListPeers?.length) return undefined;\n    const prefix = isEveryPremiumBlocksPm ? 'InviteMessagePremiumBlocked' : 'InvitePremiumBlocked';\n    let langKey = `${prefix}One`;\n    let params = [getUserFullName(topListPeers[0])];\n    if (invitableWithPremiumIds.length === 2) {\n      langKey = `${prefix}Two`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1])];\n    } else if (invitableWithPremiumIds.length === 3) {\n      langKey = `${prefix}Three`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1]), getUserFullName(topListPeers[2])];\n    } else if (invitableWithPremiumIds.length > 3) {\n      langKey = `${prefix}Many`;\n      params = [\n        getUserFullName(topListPeers[0]),\n        getUserFullName(topListPeers[1]),\n        (invitableWithPremiumIds.length - 2).toString(),\n      ];\n    }\n\n    return lang(langKey, params, undefined, topListPeers.length);\n  }, [invitableWithPremiumIds, isEveryPremiumBlocksPm, lang, topListPeers]);\n\n  const hasPremiumSection = Boolean(topListPeers?.length);\n  const hasSelectableSection = Boolean(selectableIds?.length);\n\n  return (\n    <Modal\n      isOpen={Boolean(userIds && chat)}\n      contentClassName={styles.content}\n      onClose={handleClose}\n      isSlim\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      {premiumSectionText && (\n        <>\n          <AvatarList\n            className={styles.avatarList}\n            peers={topListPeers}\n            size=\"large\"\n          />\n          <h3 className={styles.title}>\n            {canSendInviteLink ? lang('InvitePremiumBlockedTitle') : lang('ChannelInviteViaLinkRestricted')}\n          </h3>\n          <p className={styles.contentText}>\n            {renderText(premiumSectionText, ['simple_markdown'])}\n          </p>\n          <Button\n            withPremiumGradient\n            isShiny\n            size=\"smaller\"\n            onClick={handleOpenPremiumModal}\n          >\n            {lang('InvitePremiumBlockedSubscribe')}\n          </Button>\n        </>\n      )}\n      {hasPremiumSection && hasSelectableSection && (\n        <Separator className={styles.separator}>\n          {lang('InvitePremiumBlockedOr')}\n        </Separator>\n      )}\n      {hasSelectableSection && (\n        <>\n          <h3 className={styles.title}>{lang('InviteBlockedTitle')}</h3>\n          <p className={styles.contentText}>\n            {inviteSectionText}\n          </p>\n          <PeerPicker\n            className={styles.userPicker}\n            itemIds={userIds}\n            selectedIds={selectedMemberIds}\n            lockedUnselectedIds={unselectableIds}\n            lockedUnselectedSubtitle={lang('InvitePremiumBlockedUser')}\n            onSelectedIdsChange={setSelectedMemberIds}\n            isViewOnly={!canSendInviteLink}\n            allowMultiple\n            withStatus\n            itemInputType=\"checkbox\"\n          />\n          {canSendInviteLink && (\n            <Button\n              className={styles.sendInvites}\n              size=\"smaller\"\n              onClick={handleSendInviteLink}\n              disabled={!selectedMemberIds.length}\n            >\n              {lang('SendInviteLink.ActionInvite')}\n            </Button>\n          )}\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal?.chatId ? selectChat(global, modal.chatId) : undefined;\n\n    return {\n      chat,\n    };\n  },\n)(InviteViaLinkModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c3xMWwzW\",\"fade-in-opacity\":\"cHb04cFv\",\"fadeInOpacity\":\"cHb04cFv\",\"closing\":\"_0HkZ8ITm\",\"voice\":\"VLiJWMs0\",\"video\":\"ML2YEpGq\",\"footer\":\"VWy1qXJL\",\"closeBtn\":\"FfMrCmD9\"};","import { memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { isOwnMessage } from '../../../global/helpers';\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Audio from '../../common/Audio';\nimport RoundVideo from '../../middle/message/RoundVideo';\nimport Button from '../../ui/Button';\n\nimport styles from './OneTimeMediaModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['oneTimeMediaModal'];\n};\n\nconst OneTimeMediaModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    closeOneTimeMediaModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  const message = useCurrentOrPrev(modal?.message, true);\n\n  const {\n    shouldRender,\n    transitionClassNames,\n  } = useShowTransitionDeprecated(Boolean(modal));\n\n  const handlePlayVoice = useLastCallback(() => {\n    return undefined;\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeOneTimeMediaModal();\n  });\n\n  if (!shouldRender || !message) {\n    return undefined;\n  }\n\n  const isOwn = isOwnMessage(message);\n  const theme = selectTheme(getGlobal());\n  const closeBtnTitle = isOwn ? lang('Chat.Voice.Single.Close') : lang('Chat.Voice.Single.DeleteAndClose');\n\n  function renderMedia() {\n    if (!message?.content) {\n      return undefined;\n    }\n    const { voice, video } = message.content;\n    if (voice) {\n      return (\n        <Audio\n          className={styles.voice}\n          theme={theme}\n          message={message}\n          origin={AudioOrigin.OneTimeModal}\n          autoPlay\n          onPlay={handlePlayVoice}\n          onPause={handleClose}\n        />\n      );\n    } else if (video?.isRound) {\n      return (\n        <RoundVideo\n          className={styles.video}\n          message={message}\n          origin=\"oneTimeModal\"\n          onStop={handleClose}\n        />\n      );\n    }\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, transitionClassNames)}>\n      {renderMedia()}\n      <div className={styles.footer}>\n        <Button\n          faded\n          onClick={handleClose}\n          pill\n          size=\"smaller\"\n          color={theme === 'dark' ? 'dark' : 'secondary'}\n          className={styles.closeBtn}\n        >\n          {closeBtnTitle}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(OneTimeMediaModal);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport Modal from '../ui/Modal';\n\ntype OwnProps = {\n  isOpen: boolean;\n};\n\nconst WebAppsCloseConfirmationModal: FC<OwnProps> = ({\n  isOpen,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { closeWebAppsCloseConfirmationModal, closeWebAppModal } = getActions();\n\n  const [shouldSkipInFuture, setShouldSkipInFuture] = useState(false);\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const onClose = useCallback(() => {\n    closeWebAppsCloseConfirmationModal({ shouldSkipInFuture });\n  }, [shouldSkipInFuture]);\n\n  const confirmHandler = useCallback(() => {\n    closeWebAppModal({ shouldSkipConfirmation: true });\n    closeWebAppsCloseConfirmationModal({ shouldSkipInFuture });\n  }, [shouldSkipInFuture]);\n\n  const handleSelectWithEnter = useCallback((index: number) => {\n    if (index === -1) confirmHandler();\n  }, [confirmHandler]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, handleSelectWithEnter, '.Button');\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      title={lang('CloseMiniApps')}\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <p>{lang('AreYouSureCloseMiniApps')}</p>\n      <Checkbox\n        className=\"dialog-checkbox\"\n        label={lang('DoNotAskAgain')}\n        checked={shouldSkipInFuture}\n        onCheck={setShouldSkipInFuture}\n      />\n      <div\n        className=\"dialog-buttons mt-2\"\n        ref={containerRef}\n        onKeyDown={handleKeyDown}\n      >\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={confirmHandler}\n          color=\"danger\"\n        >\n          {oldLang('Confirm')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>\n          {oldLang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(WebAppsCloseConfirmationModal);\n","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport formatUsername from '../../common/helpers/formatUsername';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport TableAboutModal, { type TableAboutData } from '../common/TableAboutModal';\n\nimport styles from './FrozenAccountModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['isFrozenAccountModalOpen'];\n};\n\ntype StateProps = {\n  freezeAppealUrl?: string;\n  botFreezeAppealUsername?: string;\n  freezeUntilDate?: number;\n};\n\nconst FrozenAccountModal = ({\n  modal,\n  freezeUntilDate,\n  freezeAppealUrl,\n  botFreezeAppealUsername,\n}: OwnProps & StateProps) => {\n  const {\n    closeFrozenAccountModal,\n    openUrl,\n  } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n\n  const handleClose = useLastCallback(() => {\n    closeFrozenAccountModal();\n  });\n\n  const handleAppeal = useLastCallback(() => {\n    closeFrozenAccountModal();\n    if (freezeAppealUrl) {\n      openUrl({ url: freezeAppealUrl });\n    }\n  });\n\n  const header = useMemo(() => {\n    return (\n      <div className={styles.header}>\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.BannedDuck}\n          noLoop\n        />\n        <div className={styles.title}>\n          {lang('FrozenAccountModalTitle')}\n        </div>\n      </div>\n    );\n  }, [lang]);\n\n  const footer = useMemo(() => {\n    if (!isOpen) return undefined;\n    return (\n      <div className={styles.footer}>\n        <Button\n          className={styles.buttonAppeal}\n          size=\"smaller\"\n          onClick={handleAppeal}\n          noForcedUpperCase\n        >\n          {lang('ButtonAppeal')}\n        </Button>\n        <Button\n          isText\n          size=\"smaller\"\n          onClick={handleClose}\n          noForcedUpperCase\n        >\n          {lang('ButtonUnderstood')}\n        </Button>\n      </div>\n    );\n  }, [lang, isOpen]);\n\n  if (!freezeUntilDate || !botFreezeAppealUsername) return undefined;\n\n  const date = new Date(freezeUntilDate * 1000);\n\n  const botLink = (\n    <Link onClick={handleAppeal} isPrimary>\n      {formatUsername(botFreezeAppealUsername)}\n    </Link>\n  );\n\n  const listItemData = [\n    ['hand-stop', lang('FrozenAccountViolationTitle'), lang('FrozenAccountViolationSubtitle')],\n    ['lock', lang('FrozenAccountReadOnlyTitle'), lang('FrozenAccountReadOnlySubtitle')],\n    ['frozen-time', lang('FrozenAccountAppealTitle'),\n      lang('FrozenAccountAppealSubtitle', {\n        botLink,\n        date: formatDateToString(date, lang.code),\n      }, {\n        withNodes: true,\n      })],\n  ] satisfies TableAboutData;\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={header}\n      listItemData={listItemData}\n      footer={footer}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const freezeUntilDate = global.appConfig?.freezeUntilDate;\n    const freezeAppealUrl = global.appConfig?.freezeAppealUrl;\n    const botFreezeAppeal = global.botFreezeAppealId ? selectUser(global, global.botFreezeAppealId) : undefined;\n    const botFreezeAppealUsername = botFreezeAppeal && getMainUsername(botFreezeAppeal);\n\n    return {\n      freezeUntilDate,\n      freezeAppealUrl,\n      botFreezeAppealUsername,\n    };\n  },\n)(FrozenAccountModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"cW2rtp6M\",\"title\":\"qLSm0uyC\",\"footer\":\"Vj3QQ_JQ\",\"buttonAppeal\":\"anvg3JaY\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"KYHkJ9Qf\",\"title\":\"AwnUe4Qk\",\"value\":\"JGH6P9Az\",\"table\":\"DFRB0Ad4\",\"noFooter\":\"cSamlkt9\",\"cell\":\"Cnh5ENvm\",\"fullWidth\":\"UssCZwgy\",\"avatar\":\"SHQbPR5Y\",\"chatItem\":\"aS9U4hiQ\"};","import { memo, type TeactNode } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './TableInfoModal.module.scss';\n\ntype ChatItem = { chatId: string; withEmojiStatus?: boolean };\n\nexport type TableData = [TeactNode | undefined, TeactNode | ChatItem][];\n\ntype OwnProps = {\n  isOpen?: boolean;\n  title?: string;\n  tableData?: TableData;\n  headerAvatarPeer?: ApiPeer | CustomPeer;\n  header?: TeactNode;\n  modalHeader?: TeactNode;\n  footer?: TeactNode;\n  buttonText?: string;\n  className?: string;\n  hasBackdrop?: boolean;\n  onClose: NoneToVoidFunction;\n  onButtonClick?: NoneToVoidFunction;\n  withBalanceBar?: boolean;\n  isLowStackPriority?: true;\n};\n\nconst TableInfoModal = ({\n  isOpen,\n  title,\n  tableData,\n  headerAvatarPeer,\n  header,\n  modalHeader,\n  footer,\n  buttonText,\n  className,\n  hasBackdrop,\n  onClose,\n  onButtonClick,\n  withBalanceBar,\n  isLowStackPriority,\n}: OwnProps) => {\n  const { openChat } = getActions();\n  const handleOpenChat = useLastCallback((peerId: string) => {\n    openChat({ id: peerId });\n    onClose();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton={Boolean(title)}\n      hasAbsoluteCloseButton={!title}\n      absoluteCloseButtonColor={hasBackdrop ? 'translucent-white' : undefined}\n      isSlim\n      header={modalHeader}\n      title={title}\n      className={className}\n      contentClassName={styles.content}\n      onClose={onClose}\n      withBalanceBar={withBalanceBar}\n      isLowStackPriority={isLowStackPriority}\n    >\n      {headerAvatarPeer && (\n        <Avatar peer={headerAvatarPeer} size=\"jumbo\" className={styles.avatar} />\n      )}\n      {header}\n      <div className={styles.table}>\n        {tableData?.map(([label, value]) => (\n          <>\n            {Boolean(label) && <div className={buildClassName(styles.cell, styles.title)}>{label}</div>}\n            <div className={buildClassName(styles.cell, styles.value, !label && styles.fullWidth)}>\n              {typeof value === 'object' && 'chatId' in value ? (\n                <PeerChip\n                  peerId={value.chatId}\n                  className={styles.chatItem}\n                  forceShowSelf\n                  withEmojiStatus={value.withEmojiStatus}\n                  clickArg={value.chatId}\n                  onClick={handleOpenChat}\n                />\n              ) : value}\n            </div>\n          </>\n        ))}\n      </div>\n      {footer}\n      {buttonText && (\n        <Button\n          className={!footer ? styles.noFooter : undefined}\n          size=\"smaller\"\n          onClick={onButtonClick || onClose}\n        >\n          {buttonText}\n        </Button>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(TableInfoModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"hyRfEyRz\",\"top\":\"p_Ny8jqJ\",\"badge\":\"QRrryqp4\",\"text\":\"I5jdPgFL\"};","import { memo } from '../../lib/teact/teact';\n\nimport type { ApiPeer, ApiWebDocument } from '../../api/types';\nimport type { CustomPeer } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\n\nimport Avatar, { type AvatarSize } from './Avatar';\nimport Icon from './icons/Icon';\n\nimport styles from './PeerBadge.module.scss';\n\ntype OwnProps = {\n  peer?: ApiPeer | CustomPeer;\n  avatarWebPhoto?: ApiWebDocument;\n  avatarSize?: AvatarSize;\n  text?: string;\n  badgeText?: string;\n  badgeIcon?: IconName;\n  className?: string;\n  badgeClassName?: string;\n  badgeIconClassName?: string;\n  textClassName?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst PeerBadge = ({\n  peer: avatarPeer,\n  avatarWebPhoto,\n  avatarSize,\n  text,\n  badgeText,\n  badgeIcon,\n  className,\n  badgeClassName,\n  badgeIconClassName,\n  textClassName,\n  onClick,\n}: OwnProps) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, onClick && styles.clickable, className)}\n      onClick={onClick}\n    >\n      <div className={styles.top}>\n        <Avatar size={avatarSize} peer={avatarPeer} webPhoto={avatarWebPhoto} />\n        {badgeText && (\n          <div className={buildClassName(styles.badge, badgeClassName)} dir={lang.isRtl ? 'rtl' : 'ltr'}>\n            {badgeIcon && <Icon name={badgeIcon} className={badgeIconClassName} />}\n            {badgeText}\n          </div>\n        )}\n      </div>\n      {text && <p className={buildClassName(styles.text, textClassName)}>{text}</p>}\n    </div>\n  );\n};\n\nexport default memo(PeerBadge);\n"],"names":["memo","StarTopupOptionList","isActive","className","options","selectedStarOption","selectedStarCount","starsNeeded","onClick","oldLang","useOldLang","lang","useLang","areOptionsExtended","markOptionsExtended","unmarkOptionsExtended","useFlag","useEffect","renderingOptions","canExtend","useMemo","undefined","maxOption","reduce","max","option","stars","forceShowAll","result","currentStackedStarsCount","canExtendOptions","forEach","index","isExtended","push","starsCount","Math","min","isWide","length","_jsxs","buildClassName","styles","children","map","isOdd","isActiveOption","perUserStarCount","winner","winners","find","opt","users","perUserStars","wideOption","active","optionTop","formatInteger","_jsx","stackedStars","dir","isRtl","Array","from","StarIcon","stackedStar","type","size","optionBottom","formatCurrency","amount","currency","Boolean","renderText","Button","moreOptions","isText","noForcedUpperCase","Icon","iconDown","name","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","PasswordMonkey","isPasswordVisible","isBig","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","isMobile","useAppLayout","stikerSize","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","useTimeout","handleFirstMonkeyLoad","useCallback","id","AnimatedSticker","STICKER_SIZE_TWO_FA","tgsUrl","LOCAL_TGS_URLS","MonkeyClose","playSegment","noLoop","onLoad","MonkeyPeek","TableAboutModal","isOpen","listItemData","headerIconName","header","footer","buttonText","hasBackdrop","withSeparator","onClose","onButtonClick","contentClassName","Modal","hasAbsoluteCloseButton","absoluteCloseButtonColor","icon","title","subtitle","ListItem","isStatic","multiline","iconClassName","Separator","getPointerPosition","e","x","touches","clientX","y","clientY","PickerModal","confirmButtonText","isConfirmDisabled","shouldAdaptToSearch","withFixedHeight","onConfirm","withPremiumGradient","modalProps","hasButton","isSlim","headerClassName","color","disabled","getViewableMedia","params","media","mediaIndex","isSingle","avatar","profilePhotos","photos","action","document","photo","video","webPage","paidMedia","getMessageContent","message","isDocumentPhoto","isDocumentVideo","webPagePhoto","webPageVideo","webPageDocument","isDocumentMedia","extendedMedia","extendedPhoto","extendedVideo","isGif","createGhost","source","origin","ghost","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","ProfileAvatar","SettingsAvatar","profileInfo","querySelector","cloneNode","getNodes","containerSelector","mediaSelector","Album","ScheduledAlbum","getMessageHtmlId","PreviewMedia","SharedMedia","SearchResult","MiddleHeaderAvatar","ChannelAvatar","SuggestedAvatar","StarsTransaction","SponsoredMessage","MESSAGE_CONTENT_SELECTOR","ScheduledInline","Inline","container","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","style","objectFit","signal","createSignal","setIsPictureInPicture","getSetPresentationMode","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","FALLBACK_DIMENSIONS","AVATAR_FULL_DIMENSIONS","useMediaProps","isAvatar","delay","isPhotoAvatar","mediaType","isVideo","isVideoAvatar","isDocument","isRound","isPhoto","isFromSharedMedia","isFromSearch","getMediaOrAvatarHash","isFull","getVideoProfilePhotoMediaHash","getMediaHash","getProfilePhotoMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","BlobUrl","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","onload","blurredDataUri","clear","set","window","setTimeout","useBlur","useBlurSync","getMediaThumbUri","bestData","mediaSize","getMediaFileSize","isLocal","dimensions","VIDEO_AVATAR_FULL_DIMENSIONS","getPhotoFullDimensions","getVideoDimensions","ReportAvatarModal","peerId","onCloseAnimationEnd","reportProfilePhoto","getActions","selectedReason","setSelectedReason","useState","description","setDescription","handleReport","useLastCallback","chatId","reason","handleSelectReason","value","handleDescriptionChange","target","REPORT_OPTIONS","label","onEnter","RadioGroup","onChange","selected","InputText","getZoomChange","setZoomChange","useZoomChange","useUnmountCleanup","DeleteProfilePhotoModal","profileId","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","isUserId","withGlobal","global","item","canUpdateMedia","tabState","selectTabState","mediaViewer","avatarOwner","avatarPhoto","chat","selectCurrentChat","currentMessageList","selectCurrentMessageList","threadId","isProtected","selectIsMessageProtected","activeDownloads","selectActiveDownloads","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","selectAllowedMessageActionsSlow","isCurrentAvatar","avatarPhotoId","canDeleteAvatar","canUpdate","messageListType","MediaViewerActions","canReportAvatar","onReportAvatar","onReport","onCloseMediaViewer","onBeforeDelete","onForward","isDeleteModalOpen","openDeleteModal","closeDeleteModal","downloadMedia","cancelMediaDownload","updateProfilePhoto","updateChatPhoto","openMediaViewer","openDeleteMessageModal","isMessage","fileName","getMediaFilename","isDownloading","getIsDownloading","downloadProgress","handleDownloadClick","originMessage","handleZoomOut","zoomChange","handleZoomIn","handleUpdate","isAvatarView","forceOnHeavyAnimation","MenuButton","onTrigger","round","ariaLabel","renderDeleteModal","openDeleteModalHandler","messageIds","isSchedule","menuItems","isForwardingAllowed","content","href","download","destructive","DropdownMenu","trigger","positionX","MenuItem","ProgressSpinner","progress","noCross","renderDownloadButton","useSignalRef","getValue","ref","useEffectOnce","subscribe","getControlsVisible","setControlsVisible","getIsLocked","setIsLocked","useControlsSignal","useDerivedSignal","getCurrentTime","setCurrentTime","useCurrentTimeSignal","MediaViewerFooter","text","isForVideo","handleSponsoredClick","isForceMobileVersion","isMultiline","setIsMultiline","getIsVisible","isHidden","useDerivedState","IS_TOUCH_ENV","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","stopPropagation","isRectangular","getIsVideoWaiting","setIsVideoWaiting","useVideoWaitingSignal","IS_MOBILE","IS_ANDROID","IS_IOS","PREVIEW_SIZE_RATIO","MAX_FRAMES","PREVIEW_MAX_SIDE","connections","launchMediaWorkers","videoPreview","VideoPreview","frames","currentTime","constructor","url","this","connector","request","args","MAX_WORKERS","onFrame","time","frame","render","clearCache","close","requestMutation","drawImage","destroy","worker","async","messageId","data","callApi","mediaFormat","Progressive","arrayBuffer","postMessage","cancelAnimation","SeekLine","duration","bufferedRanges","isReady","posterSize","playbackRate","isPlaying","isPreviewDisabled","onSeek","onSeekStart","seekerRef","getCurrentTimeSignal","getIsWaiting","useThrottledSignal","getSelectedTime","setSelectedTime","useSignal","getPreviewOffset","setPreviewOffset","getPreviewTime","setPreviewTime","isLockedRef","isPreviewVisible","setPreviewVisible","isSeeking","setIsSeeking","previewCanvasRef","previewRef","progressRef","previewTimeRef","previewSize","ratio","getPreviewDimensions","setPreview","floor","renderVideoPreview","createVideoPreviews","remaining","animateNumber","to","onUpdate","useLayoutEffect","left","innerText","formatMediaDuration","seeker","seekerSize","getBoundingClientRect","offset","getPreviewProps","pageX","t","clamp","preview","clientWidth","stopAnimation","handleStopSeek","cleanup","captureEvents","onCapture","handleStartSeek","onRelease","onDrag","handleSeekMouseMove","handleSeekMouseLeave","ShowTransition","start","end","PLAYBACK_RATES","renderTime","VideoPlayerControls","bufferedProgress","fileSize","isFullscreenSupported","isFullscreen","isBuffered","volume","isMuted","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","onSeekingChange","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","trunc","getIsSeeking","closeTimeoutRef","setVisibility","isVisible","body","remove","handleSeek","position","handleSeekStart","volumeIcon","ripple","RangeSlider","bold","formatFileSize","Menu","positionY","autoClose","rate","VideoPlayer","posterData","isMediaViewerOpen","noPlay","shouldCloseOnClick","isClickDisabled","isSponsoredMessage","timestamp","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setFullscreen","exitFullscreen","useFullscreen","isLooped","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","elRef","onLeave","isSupported","setIsSupported","setIsActive","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","toggleControls","lockControls","lastMousePosition","updateMousePosition","checkMousePositionAndToggleControls","bounds","right","top","bottom","handleVideoMove","handleVideoLeave","handleSeekingChange","bufferingHandlers","useBuffering","isUnsupported","useUnsupportedMedia","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransitionDeprecated","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","readyState","handleEnded","handleFullscreenChange","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","rewind","newTime","Number","isFinite","handleKeyDown","key","preventDefault","wrapperStyle","videoStyle","shouldToggleControls","onMouseMove","onMouseLeave","onContextMenu","onDoubleClick","autoPlay","controlsList","playsInline","loop","onWaiting","onPlay","onEnded","onPause","onTimeUpdate","join","sponsoredMessage","textMessage","maxTimestamp","selectMessageTimestampableDuration","MediaViewerContent","withAnimation","isMoving","onFooterClick","updateLastPlaybackTimestamp","toggleControlsOnMove","updatePlaybackTimestamp","useThrottledCallback","MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION","isInAlbum","newTimestamp","PLAYBACK_SAVE_INTERVAL","useSignalEffect","calculateMediaViewerDimensions","ARE_WEBCODECS_SUPPORTED","renderPhoto","textParts","renderMessageText","forcePlayback","isForMediaViewer","hasFooter","shouldForceMobileVersion","imageSize","canDrag","alt","Spinner","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelZoomAnimation","SwipeDirection","MediaViewerSlides","isLoadingMoreMedia","isSynced","loadMoreItemsIfNeeded","getNextItem","selectItem","containerRef","activeSlideRef","leftSlideRef","rightSlideRef","lastTransformRef","scale","swipeDirectionRef","initialContentRectRef","isReleasedRef","prevZoomChangeRef","useFullscreenStatus","isMouseDown","setIsMouseDown","getTransform","setTransform","transformRef","getActiveItem","setActiveItem","activeItemRef","isScaled","activeItem","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","selectItemDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","transform","getTransformStyle","lastTransform","lastDragOffset","lastZoomCenter","panDelta","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","cActiveItem","nextItem","timing","changeSlideOnClick","closest","calculateOffsetBoundaries","offsetTop","initialContentRect","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","maxOffsetX","isBetween","minOffsetY","maxOffsetY","absX","abs","absY","s1","scaleFactor","x1","y1","k","Vx","Vy","dirX","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","withWheelDrag","checkIfControlTarget","event","captureEvent","dragOffsetX","dragOffsetY","cancelDrag","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","SWIPE_DIRECTION_THRESHOLD","SWIPE_DIRECTION_TOLERANCE","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","includes","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","hasZoomChanged","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","prevItem","hasPrev","hasNext","toFixed","element","selector","matches","messageSender","selectSender","owner","SenderInfo","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","isFallbackAvatar","fallbackPhoto","isPersonalAvatar","personalPhoto","date","formattedDate","formatMediaDateTime","count","currentIndex","countText","parts","isChannel","isChatChannel","isGroup","isChatGroup","senderTitle","getPeerTitle","Avatar","peer","shouldSkipHistoryAnimations","withDynamicLoading","standaloneMedia","selectPerformanceSettingsValue","currentUserId","isChatWithSelf","selectIsChatWithSelf","selectPeer","isChatAdmin","selectPeerPhotos","isLoading","chatMessages","selectScheduledMessage","selectChatMessage","selectSponsoredMessage","selectChatScheduledMessages","selectChatMessages","isOriginInline","isOriginAlbum","collectedMessageIds","currentSearch","selectCurrentChatMediaSearch","foundIds","currentSegment","selectCurrentSharedMediaSearch","resultsByType","selectOutlyingListByMessageId","selectListedIds","MediaViewer","openForwardMenu","searchChatMediaMessages","loadMoreProfilePhotos","clickSponsored","openUrl","animationKey","senderId","prevSenderId","usePreviousDeprecated","headerAnimation","isGhostAnimation","isReportAvatarModalOpen","openReportAvatarModal","closeReportAvatarModal","currentItem","getMediaViewerItem","info","messageMediaIds","getChatMediaMessageIds","getIsPictureInPicture","disableDirectTextInput","stopPriorityPlayback","dispatchPriorityPlaybackEvent","enableDirectTextInput","toggle","headerRef","useElectronDrag","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","prevMessage","prevIsHidden","prevOrigin","prevBestImageData","shouldAnimateOpening","beginHeavyAnimation","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","applyStyles","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","imageEl","messageListElement","getOffsetToContainer","scrollTop","offsetHeight","isMessageImageFullyVisible","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","handleFooterClick","HTMLElement","isFromMedia","isMedia","randomId","handleForward","fromChatId","captureEscKeyListener","stopCurrentAudio","currentMediaMessageId","fromMedia","fromMediaIndex","nextIndex","fromAvatarOwner","fromProfilePhotos","fromSponsoredMessage","fromSponsoredMessageIndex","fromMessage","getMessagePaidMedia","indexOf","nextMessageId","nextMessage","openMediaViewerItem","itemChatId","itemMessageId","itemStandaloneMedia","handleBeforeDelete","prevMedia","shouldAnimateFirstRender","noCloseTransition","Transition","activeKey","avatarOwnerId","OFFSET_BOTTOM","MOBILE_OFFSET","hasBlur","isGhost2","ctx","alpha","IS_CANVAS_FILTER_SUPPORTED","filter","RADIUS","userId","getPeerStoryHtmlId","StoryViewerOrigin","StoryRibbon","storyRibbonStyles","ChatList","calculateOffsetX","slideAmount","isActiveSlideSize","isMoveThroughActiveSlide","isBackward","mainOffset","additionalOffset","totalOffset","roundToNearestEven","useSlideSizes","baseWidth","baseHeight","newWidth","newHeight","widthScale","heightScale","calculateScale","activeSlideWidth","slideWidth","activeSlide","slide","toActiveScale","fromActiveScale","calculateSlideSizes","useStoryProps","story","isCurrentUserPremium","isDropdownMenuOpen","isLoadedStory","isDeletedStory","hasText","hasMessageText","hasForwardInfo","forwardInfo","thumbnail","previewHash","getStoryMediaHash","noSound","fullMediaHash","fullMediaData","altMediaHash","altMediaData","hasFullData","hasThumb","canDownload","noForwards","downloadHash","downloadMediaData","storyViewer","isStealthModalOpen","stealthMode","stories","selectIsCurrentUserPremium","StealthModeModal","toggleStealthModal","activateStealthMode","showNotification","openPremiumModal","isOnCooldown","setIsOnCooldown","serverTime","getServerTime","cooldownUntil","handleTimerEnds","handleActivate","initialSection","inactive","leftElement","isShiny","TextTimer","langKey","endsAt","onEnd","deleteStory","openNextStory","handleDeleteStoryClick","storyId","ConfirmDialog","confirmLabel","confirmHandler","confirmIsDestructive","contactListIds","selectedIds","lockedIds","onSelect","searchQuery","setSearchQuery","displayedIds","contactIds","unique","filterPeersByQuery","ids","query","PeerPicker","itemIds","MEMO_EMPTY_ARRAY","lockedSelectedIds","filterValue","filterPlaceholder","searchInputId","isSearchable","withDefaultPadding","forceShowSelf","onSelectedIdsChange","onFilterChange","allowMultiple","withStatus","itemInputType","usersById","saveCloseFriends","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","closeFriendIds","isCloseFriend","useEffectWithPrevDeps","prevIsActive","handleSelectedContactIdsChange","handleSubmit","userIds","_Fragment","FloatingActionButton","isShown","OPTIONS","actions","Screens","selectPeerStory","visibility","contactList","byId","editStoryPrivacy","toggleStoryInProfile","isOpenModal","openModal","closeModal","privacy","setPrivacy","isPinned","setIsPinned","isInProfile","setActiveKey","editingBlockingCategory","setEditingBlockingCategory","isBackButton","allowList","allowUserIds","selectedBlockedIds","blockUserIds","handleAllowUserIdsChange","newIds","handleDenyUserIdsChange","handleCloseButtonClick","handleIsPinnedToggle","modal","noBackdrop","closeButton","headerTitle","closeFriends","denyList","renderHeaderContent","slideClassName","storyLifeTime","getHours","expireDate","section","list","checked","input","handleVisibilityChange","newVisibility","teactExperimentControlled","optionContent","option_name","tabIndex","role","handleActionClick","actionInner","getUserFullName","Switcher","submit","renderPrivacyList","CloseFriends","AllowDenyList","PRIMARY_VIDEO_MIME","bufferCache","sizeCache","pendingRequests","makeProgressiveLoader","chunkSize","match","cacheKey","finally","delete","fullSize","checkIfStreamingSupported","mimeType","IS_SAFARI","getMediaSource","isTypeSupported","appendBuffer","sourceBuffer","buffer","error","warn","endOfStream","mediaSource","ManagedMediaSource","MediaSource","preloadedStories","canPreload","aroundStoryId","isArray","getGlobal","byPeerId","orderedIds","mediaHashes","hash","format","isStream","loader","getProgressiveUrl","cachedSize","chunk","byteLength","preloadStream","mediaLoader","then","head","preload","autoplay","disableRemotePlayback","display","load","unloadVideo","preloadProgressive","preloadImage","preloadHashes","peerStories","selectPeerStories","preloadIds","currentId","slice","findIdsAroundCurrentId","currentStoryId","has","altVideos","Set","getPreloadMediaHashes","sender","fromPeerId","EmbeddedStoryForward","openStoryViewer","loadPeerStoriesByIds","openChat","storyIds","fromName","openOriginalStory","isDeleted","isSingleStory","handleMouseDown","useFastClick","PeerColorWrapper","getPeerColorClass","onMouseDown","backgroundEmojiId","EmojiIconBackground","emojiDocumentId","renderTextWithEntities","renderTextContent","renderSender","isExpanded","onExpand","onFold","contentRef","textRef","showMoreButtonRef","renderingStory","useCurrentOrPrev","caption","hasOverflow","setHasOverflow","prevIsExpanded","usePrevDuringAnimation","isInExpandedState","addExtraClass","removeExtraClass","canExpand","shouldRenderShowMore","requestMeasure","button","offsetWidth","setProperty","requestForcedReflow","textContainer","textOffsetTop","lineHeight","totalLines","calcTextLineHeightAndCount","isOverflowing","overflowShift","scrollTo","fullClassName","MessageText","messageOrStory","withTranslucentThumbs","StoryFooter","openStoryViewModal","sendStoryReaction","views","isOut","sentReaction","viewsCount","forwardsCount","reactionsCount","isSentStoryReactionHeart","isSameReaction","HEART_REACTION","canForward","isPublic","containerId","getStoryKey","recentViewers","recentViewerIds","handleOpenStoryViewModal","handleForwardClick","handleLikeStory","reaction","AvatarList","peers","nonInteractive","ReactionAnimatedEmoji","withEffectOnly","getReactionKey","isViewed","isPaused","onImageComplete","handleAnimationEnd","animationName","onAnimationEnd","VIDEO_MIN_READY_STATE","appConfig","user","selectUser","selectChat","userFullInfo","selectUserFullInfo","viewModal","isPrivacyModalOpen","storyList","forwardMessages","forwardedStoryId","premiumModal","safeLinkModalUrl","mapModal","reportModal","giftInfoModal","isPaymentMessageConfirmDialogOpen","isPremiumModalOpen","shouldForcePause","reactionPicker","mediaAreas","forwardSenderId","area","channelId","forwardSender","withHeaderAnimation","fromPeer","fromId","paidMessagesStars","selectPeerPaidMessagesStars","isAccountFrozen","selectIsCurrentUserFrozen","storyIdsByPeerId","storyChangelogUserId","viewersExpirePeriod","storyExpirePeriod","storyViewersExpirePeriod","isChatExist","arePeerSettingsLoaded","settings","isArchivedStories","isPrivateStories","getIsAnimating","onDelete","viewStory","setStoryViewerMuted","openPreviousStory","loadPeerSkippedStories","copyStoryLink","openStoryPrivacyEditor","loadPeerSettings","fetchChat","loadStoryViews","isComposerHasFocus","markComposerHasFocus","unmarkComposerHasFocus","isStoryPlaybackRequested","playStory","pauseStory","isStoryPlaying","markStoryPlaying","unmarkStoryPlaying","isAppFocused","markAppFocused","unmarkAppFocused","isCaptionExpanded","expandCaption","foldCaption","isPausedBySpacebar","setIsPausedBySpacebar","isPausedByLongPress","markIsPausedByLongPress","unmarkIsPausedByLongPress","markDropdownMenuOpen","unmarkDropdownMenuOpen","isChangelog","isUserStory","isChatStory","isChannelStory","canPinToProfile","canUnpinFromProfile","areViewsExpired","forwardSenderTitle","canCopyLink","hasUsername","canShare","canPlayStory","shouldShowComposer","shouldShowFooter","shouldRenderSkeleton","skeletonTransitionClassNames","mediaTransitionClassNames","thumbRef","useCanvasBlur","previewTransitionClassNames","useMediaTransitionDeprecated","shouldRenderComposer","composerAppearanceAnimationClassNames","shouldRenderCaptionBackdrop","captionBackdropTransitionClassNames","appearanceAnimationClassNames","shouldRenderCaption","captionAppearanceAnimationClassNames","isStreamingSupported","MediaSourceClass","onSourceOpen","addSourceBuffer","next","done","once","URL","createObjectURL","revokeObjectURL","useStreaming","useStoryPreloader","canWrite","handlePauseStory","handlePlayStory","handleLongPressStart","handleLongPressEnd","handleDropdownMenuOpen","handleDropdownMenuClose","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","hasAllData","useBackgroundMode","keyCode","prevIsComposerHasFocus","prevIsCaptionExpanded","prevShouldForcePause","prevIsAppFocused","prevIsPausedByLongPress","handleOpenChat","handleForwardPeerClick","handleFromPeerClick","handleOpenPrevStory","handleOpenNextStory","handleVideoStoryTimeUpdate","captureKeyboardListeners","onRight","onLeft","handleCopyStoryLink","handlePinClick","handleUnpinClick","handleReportStoryClick","handleInfoPrivacyEdit","handleInfoPrivacyClick","isForContacts","isForCloseFriends","myName","handleOpenStealthModal","activeUntil","diff","handleDownload","inputPlaceholder","formatStarsAsIcon","asFont","withNodes","StoryProgress","formatRelativePastTime","isEdited","privacyIcon","gradient","renderStoryPrivacyButton","onOpen","Skeleton","OptimizedVideo","canPlay","isPriority","MediaAreaOverlay","withStory","storyViewerMode","StoryCaption","Composer","MAIN_THREAD_ID","getIsMobile","editableInputCssSelector","EDITABLE_STORY_INPUT_CSS_SELECTOR","editableInputId","EDITABLE_STORY_INPUT_ID","inputId","onFocus","onBlur","lastViewedByPeerId","lastViewedByPeerIds","lastViewedId","storyIdsForViewer","lastReadId","hasUnreadStories","previewIndexId","isLoaded","imageHash","thumbUrl","currentPeerId","isSinglePeer","isPrivate","isArchive","orderedPeerIds","peerIds","selectIsStoryViewerOpen","stopActiveReaction","renderingPeerId","setRenderingPeerId","renderingStoryId","setRenderingStoryId","prevPeerId","renderingIsArchive","renderingIsPrivate","renderingIsSinglePeer","renderingIsSingleStory","slideSizes","rendersRef","setIsAnimating","setRef","renderingPeerIds","renderingPeerPosition","currentPeerPosition","calculateTransformX","transformX","getCurrentStoryRef","composer","focusEditableElement","disableScrolling","enableScrolling","Object","entries","String","handleTransitionEnd","Story","onTransitionEnd","buildStyle","renderStory","StoryPreview","renderStoryPreview","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","scrollHeight","DEFAULT_REACTION_SIZE","storyView","availableReactions","reactions","StoryView","closeStoryViewer","unblockUser","blockUser","deleteContact","updateStoryView","closeStoryViewModal","contextActions","areStoriesBlocked","isUserBlocked","isContact","fullName","handler","isOnlyStories","statusIcon","shouldColorStatus","status","isModified","formatDateAtTime","opacityFadeIn","blocked","rightElement","ReactionStaticEmoji","viewReaction","withIconHeart","withPortalForMenu","menuBubbleClassName","menuBubble","PrivateChatInfo","withColoredStatus","noStatusOrTyping","GroupChatInfo","nextOffset","loadStoryViewList","clearStoryViews","areJustContacts","markJustContacts","unmarkJustContacts","areReactionsFirst","markReactionsFirst","unmarkReactionsFirst","setQuery","isExpired","shouldShowJustContacts","STORY_VIEWS_MIN_CONTACTS_FILTER","shouldShowSortByReactions","STORY_MIN_REACTIONS_SORT","shouldShowSearch","STORY_VIEWS_MIN_SEARCH","hasHeader","refetchViews","sortedViews","sort","a","b","reactionA","reactionB","prepareComparator","placeholderCount","notAllAvailable","handleLoadMore","MoreMenuButton","isMenuOpen","fluid","sortButton","topButton","faded","iconSort","viewsList","contactFilter","check","SearchInput","search","topScrolled","onScroll","centeredInfo","InfiniteScroll","items","onLoadMore","view","additionalKeyId","_","i","PlaceholderChatInfo","bottomInfo","closeStoryPrivacyEditor","reportStory","storyToDelete","setStoryToDelete","isPrevOpen","handleOpenDeleteModal","s","handleCloseDeleteModal","openMessageReport","thumb","safeAreaBottom","getComputedStyle","documentElement","getPropertyValue","parseFloat","toTranslateX","toTranslateY","toScaleX","toScaleY","ghost2","ghost2Top","StorySlides","StoryDeleteConfirmModal","StoryViewModal","StorySettings","TOPIC_ICON_SIZE","ITEM_CLASS_NAME","ChatOrUserPicker","chatOrUserIds","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","isLowStackPriority","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","selectTopicsById","selectTopics","forumTopicsById","useSelector","topicIds","topics","chatsById","chats","chatFullInfoById","fullInfoById","searchTitle","toLowerCase","values","acc","topic","getCanPostInChat","keys","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","renderChatItem","isSelf","isApiPeerChat","subtitleClassName","getGroupStatus","userStatus","selectUserStatus","getUserStatus","isUserOnline","getSubtitle","PickerItem","FullNameTitle","isSavedMessages","avatarElement","PEER_PICKER_ITEM_HEIGHT_PX","onKeyDown","placeholder","withAbsolutePositioning","maxHeight","Loading","topicId","TopicIcon","letterClassName","itemSelector","listIds","orderedPinnedIds","activeListIds","archivedListIds","archived","pinnedIds","RecipientPicker","API_CHAT_TYPES","onSelectRecipient","setSearch","priorityIds","isDeletedUser","chatFullInfo","selectChatFullInfo","sorted","sortChatIds","filterChatIdsByType","renderingIds","isForwarding","isManyMessages","isStory","ForwardRecipientPicker","openChatOrTopicWithReplyInDraft","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","forwardStory","renderingIsStory","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","toChatId","getUserFirstOrLastName","getChatTitle","DraftRecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","AttachBotRecipientPicker","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","isSlowMode","hasErrorKey","dialogs","Dialogs","dismissDialog","sendMessage","isModalOpen","dialog","contactRequest","handleConfirm","contact","messageList","getReadableErrorText","pick","Notifications","notifications","notification","Notification","localId","SafeLinkModal","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","withMarkdown","OpenMapModal","closeMapModal","point","geoPoint","googleUrl","bingUrl","appleUrl","osmUrl","google","prepareMapUrl","bing","osm","handleGoogleClick","handleBingClick","handleAppleClick","handleOsmClick","IS_MAC_OS","currentUser","UrlAuthModal","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","isWriteAllowed","handleLoginChecked","Checkbox","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","padStart","formatDay","CalendarModal","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","handleDateSelect","inputMode","historyCalendarSelectedAt","HistoryCalendar","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","phoneCodeList","countryList","phoneCodes","NewContactModal","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","ResizeHandleType","resizeHandleSelectorsMap","Top","Bottom","Left","Right","topLeft","TopLeft","topRight","TopRight","bottomLeft","BottomLeft","bottomRight","BottomRight","resizeHandleSelectors","resizeTimeout","FULLSCREEN_POSITION","webApps","selectActiveWebApp","modalState","openedWebApps","isMinimizedState","activeTabBot","MinimizedWebAppModal","changeWebAppModalState","closeWebAppModal","openedWebAppsValues","openedTabsCount","activeTabBotId","app","handleCloseClick","handleExpandClick","state","activeTabName","botName","pluralValue","renderTitle","isPopularApp","requestMainWebView","theme","extractCurrentThemeParams","activeUserCount","botActiveUsers","badgeText","formatIntegerCompact","PeerBadge","avatarContainer","textClassName","badgeClassName","userCountBadge","badgeIconClassName","userBadgeIcon","badgeIcon","runThrottled","cb","globalSearch","popularBotApps","fetchingStatus","botApps","recentBotIds","topBotApps","MoreAppsTabContent","shouldShowMoreMine","setShouldShowMoreMine","searchPopularBotApps","handleToggleShowMoreMine","prev","filteredFoundIds","LoadMoreDirection","Backwards","handleSearchInputReset","root","noFastList","preloadBackwards","onReset","sectionTitle","showMoreLink","sectionContent","WebAppGridItem","FULLSCREEN_BUTTONS_AREA_HEIGHT","MAIN_BUTTON_ANIMATION_TIME","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","activeWebApp","activeWebAppKey","selectWebApp","activeBotId","attachBot","attachMenu","bots","botAppSettings","botInfo","appSettings","selectTheme","isPaymentModalOpen","regularPaymentStatus","payment","starsPaymentStatus","inputInvoice","starsInputInvoice","starsPayment","botAppPermissions","selectBotAppPermissions","paymentStatus","WebAppModalTabContent","webApp","registerSendEventCallback","registerReloadFrameCallback","isTransforming","isMultiTabSupported","onContextMenuButtonClick","modalHeight","closeActiveWebApp","sendWebViewData","toggleAttachBot","openTelegramLink","setWebAppPaymentSlug","switchBotInline","sharePhoneWithBot","updateWebApp","resetPaymentStatus","openChatWithInfo","openEmojiStatusAccessModal","openLocationAccessModal","openPreparedInlineMessageModal","mainButton","setMainButton","secondaryButton","setSecondaryButton","markLoaded","markUnloaded","popupParameters","setPopupParameters","isRequestingPhone","setIsRequestingPhone","isRequestingWriteAccess","setIsRequestingWriteAccess","requestedFileDownload","setRequestedFileDownload","bottomBarColor","setBottomBarColor","unlockPopupsAt","handlePopupOpened","handlePopupClosed","setUnlockPopupsAt","sequentialCalls","lastClosedDate","usePopupLimit","headerButtonRef","headerButtonCaptionRef","exitFullScreenCallback","fullscreenElementRef","activeWebAppName","appName","isBackButtonVisible","placeholderPath","isCloseModalOpen","isRemoveModalOpen","webAppKey","getWebAppKey","isAvailable","IS_GEOLOCATION_SUPPORTED","isAccessRequested","geolocation","isAccessGranted","updateCurrentWebApp","updatedPartialWebApp","update","themeParams","secondary_bg_color","themeBackgroundColor","bg_color","backgroundColorFromEvent","setBackgroundColorFromEvent","backgroundColorFromSettings","backgroundColor","backgroundDarkColor","themeHeaderColor","headerColorFromEvent","setHeaderColorFromEvent","headerColorFromSettings","headerColor","headerDarkColor","frameRef","isSimple","reloadFrame","sendEvent","sendFullScreenChanged","sendViewport","sendSafeArea","sendTheme","useWebAppFrame","isSimpleView","onEvent","openInvoice","closeWebApp","openSuggestedStatusModal","isReloadSupported","reloadTimeout","ignoreEventsRef","lastFrameSizeRef","handleLoad","contentWindow","JSON","stringify","eventType","eventData","is_fullscreen","forceReloadFrame","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","skipClosingConfirmation","scrollbarColor","reload_supported","req_id","slug","linkUrl","available","custom_emoji_id","BigInt","customEmojiId","plannedEvents","getIsWebAppsFullscreenSupported","exitIfFullscreenCallback","TME_LINK_PREFIX","path_full","shouldIgnoreCache","force_request","is_visible","isSettingsButtonVisible","validateHexColor","color_key","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","shouldConfirmClosing","buttons","handleAppPopupClose","chat_types","convertToApiChatType","isSamePeer","handleRejectPhone","handleRejectWriteAccess","handleRequestWriteAccess","method","requestId","parameters","customMethod","handleInvokeCustomMethod","handleRejectFileDownload","fileUrl","handleCheckDownloadFile","file_name","access_requested","access_granted","geolocationData","getGeolocationStatus","accessRequested","accessGranted","latitude","longitude","altitude","course","heading","speed","horizontal_accuracy","accuracy","vertical_accuracy","altitudeAccuracy","handleRequestLocation","isMainButtonVisible","isSecondaryButtonVisible","handleHideCloseModal","handleConfirmCloseModal","handleHideRemoveModal","handleMainButtonClick","handleSecondaryButtonClick","buttonId","button_id","handleAppPopupModalClose","sendThemeCallback","setFullscreenCallback","checkIfFullscreen","sendFullScreenChangedCallback","visibilityChangedCallBack","prevModalState","prevIsPaymentModalOpen","handleRemoveAttachBot","isEnabled","handleAcceptPhone","shouldCloseActive","handleAcceptWriteAccess","handleDownloadFile","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","secondaryButtonCurrentPosition","secondaryButtonCurrentColor","secondaryButtonCurrentTextColor","secondaryButtonCurrentIsActive","secondaryButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideMainButton","setShouldHideMainButton","shouldHideSecondaryButton","setShouldHideSecondaryButton","shouldShowMainButton","setShouldShowMainButton","shouldShowSecondaryButton","setShouldShowSecondaryButton","shouldShowAppNameInFullscreen","setShouldShowAppNameInFullscreen","backButtonTextWidth","setBackButtonTextWidth","isVerticalLayout","rowsCount","hideDirection","mainButtonChangeTimeout","mainButtonFastTimeout","secondaryButtonChangeTimeout","secondaryButtonFastTimeout","appNameDisplayTimeout","frameStyle","handleBackClick","handleCollapseClick","handleShowContextMenu","backIconClass","backButtonCaption","hasHeaderElement","viewBox","renderDefaultPlaceholder","sandbox","allow","allowFullScreen","hasCloseButton","filename","MINIMIZED_STATE_SIZE","DEFAULT_MAXIMIZED_STATE_SIZE","MAXIMIZED_STATE_MINIMUM_SIZE","miniAppsCachedPosition","miniAppsCachedSize","selectSharedSettings","cachedPosition","WebAppModal","prolongWebView","openWebAppTab","openMoreAppsTab","closeMoreAppsTab","updateMiniAppCachedPosition","updateMiniAppCachedSize","getMaximizedStateSize","setMaximizedStateSize","getSize","openedOrderedKeys","sessionKeys","isMoreAppsTabActive","tabs","isMaximizedState","isFullScreen","supportMultiTabMode","menuRef","getTriggerElement","getRootElement","getMenuElement","isContextMenuOpen","contextMenuAnchor","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isDraggingEnabled","setIsDraggingEnabled","headerElement","containerElement","isDragging","draggableStyle","dragHandleElementRef","isDragEnabled","originalSize","minimumSize","elementCurrentPosition","setElementCurrentPosition","elementCurrentSize","setElementCurrentSize","getElementPositionOnStartTransform","setElementPositionOnStartTransform","getElementSizeOnStartTransform","setElementSizeOnStartTransform","getTransformStartPoint","setTransformStartPoint","elementPositionOnStartTransform","transformStartPoint","dragHandleElement","isInitiated","setIsInitiated","wasElementShown","setWasElementShown","startDragging","stopDragging","startResizing","stopResizing","isWindowsResizing","startWindowResizing","stopWindowResizing","hitResizeHandle","setHitResizeHandle","getVisibleArea","innerWidth","innerHeight","updateCurrentPosition","getActualPosition","getCenteredPosition","visibleArea","centeredPosition","handleStartDrag","MouseEvent","handleStartResize","targetElement","resizeHandle","RESIZE_HANDLE_SELECTOR","getResizeHandleFromTarget","handleDragRelease","handleResizeRelease","ensurePositionInVisibleArea","visibleAreaWidth","visibleAreaHeight","componentWidth","componentHeight","newX","newY","adjustPositionWithinBounds","newPosition","ensureSizeInVisibleArea","sizeForCheck","newSize","originalWidth","originalHeight","adjustSizeWithinBounds","handleWindowResize","handleDrag","sizeOnStartTransform","pageVisibleX","pageVisibleY","maxX","maxY","newBounds","cleanups","resizeHandler","cursorStyle","actualPosition","useDraggable","getMinimumSize","currentSize","currentWidth","currentHeight","queryId","openTabsCount","useInterval","replyInfo","sendEventCallback","reloadFrameCallback","callback","handleSettingsButtonClick","handleRefreshClick","handleModalClose","handleCloseMoreAppsTab","handleTabClose","handleToggleClick","handleFullscreenClick","handleOpenMoreAppsTabClick","handleTabClick","tab","openBotChat","renderMenuItems","isAttachBot","renderMoreMenu","anchor","backButtonClassName","headerTextVar","r","g","hexToRgb","luma","getColorLuma","renderTabCurveBorder","fill","buildResizeHandleClass","handleClassName","RESIZE_HANDLE_CLASS_NAME","useHorizontalScroll","dialogRef","dialogStyle","dialogContent","shortName","renderActiveTab","noBackdropClose","BotTrustModal","cancelBotTrustRequest","markBotTrusted","setIsWriteAllowed","handleBotTrustAccept","handleBotTrustDecline","AttachBotInstallModal","confirmAttachBotInstall","cancelAttachBotInstall","isTosAccepted","setIsTosAccepted","tosLabel","split","linkText","MINI_APP_TOS_URL","rel","DeleteFolderDialog","folder","closeDeleteChatFolderModal","deleteChatFolder","openDeleteChatFolderModal","renderingFolder","isMyChatlist","hasMyInvites","handleDeleteFolderMessage","folderId","isConfirmedForChatlist","COLORS","PremiumFeatureItem","isFontIcon","newIndex","colorA","colorB","ceil","lerpRgb","buttonClassName","fontIcon","SliderDots","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","isLast","isPreLast","isFirst","isPreFirst","isInvisible","PremiumLimitsCompare","leftValue","rightValue","floatingBadgeIcon","rightStyle","COLOR_START","COLOR_END","PremiumLimitPreview","colorStepProgress","lerp","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","play","isLowPriority","stickers","premium","PremiumFeaturePreviewStickers","setOffset","setSize","renderedStickers","cycleRestrict","STORY_FEATURE_TITLES","stories_order","stories_stealth","stories_views","stories_timer","stories_save","stories_caption","stories_link","STORY_FEATURE_DESCRIPTIONS","STORY_FEATURE_ICONS","STORY_FEATURE_ORDER","CIRCLE_SIZE","AVATAR_SIZES","giant","PremiumFeaturePreviewVideo","circleRef","dpr","useDevicePixelRatio","drawGradientCircle","segmentsCount","readSegmentsCount","readSegmentColor","maxSize","forPremiumPromo","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","wrapper","reverse","down","DeviceFrame","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","translations","saved_tags","last_seen","message_privacy","effects","PREMIUM_FEATURE_DESCRIPTIONS","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","recommendedChannels","moreAccounts","LIMITS_DESCRIPTIONS","PremiumFeatureModal","promo","isPremium","limits","premiumPromoOrder","subscriptionOption","onClickSubscribe","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","PREMIUM_FEATURE_SECTIONS","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","filteredSections","subscriptionButtonText","months","perMonthPrice","price","handleLimitsScroll","scrollContainer","animateHorizontalScroll","handleSelectSlide","currentSection","hasHeaderBackdrop","scrollLeft","scrollLeftOriginal","reverseIndex","prevElement","reverseElement","toString","toggleExtraClass","PREMIUM_LIMITS_ORDER","defaultLimit","premiumLimit","PremiumFeaturePreviewStories","videoSections","videos","PREMIUM_BOTTOM_VIDEOS","PremiumSubscriptionOption","fullMonthlyAmount","isGiveaway","perMonth","isUserCountPlural","discount","handleChange","formatCurrencyAsString","STATUS_EMOJI_SIZE","PREMIUM_FEATURE_COLOR_ICONS","PremiumStatus","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumTranslate","PremiumTags","PremiumLastSeen","PremiumMessagePrivacy","PremiumEffects","fromUser","fromUserId","fromUserStatusEmoji","emojiStatus","customEmojis","documentId","fromUserStatusSet","selectStickerSet","stickerSetInfo","isSuccess","isGift","monthsAmount","toUser","toUserId","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","premiumSlug","premiumInvoiceSlug","premiumBotUsername","PremiumMainModal","closePremiumModal","requestConfetti","loadStickers","openStickerSet","isHeaderHidden","setHeaderHidden","setCurrentSection","selectedSubscriptionOption","setSubscriptionOption","handleOpenSection","handleResetSection","handleClickWithStartParam","handleChangeSubscriptionOption","foundOption","showConfetti","withStars","prevIsPremium","defaultOption","handleOpenStatusSet","monthOption","subscribeButtonText","CustomEmoji","PremiumLogo","template","first","second","emoji","thumbCustomEmojiId","link","getHeaderText","statusText","entities","statusEntities","renderFooterText","ItemPicker","notFoundText","noScrollRestore","isViewOnly","itemClassName","forceRenderAllItems","onDisabledClick","optionalProps","lockedSelectedValues","lockedUnselectedValues","timeoutId","selectedValues","selectedValue","lockedSelectedValuesSet","lockedUnselectedValuesSet","sortedItemValuesList","lockedSelectedBucket","unlockedBucket","lockedUnselectableBucket","concat","handleItemClick","newSelectedValues","splice","onSelectedValuesChange","onSelectedValueChange","viewportValuesList","handleFilterChange","renderItem","itemOption","subLabel","isItemLoading","isAlwaysUnselected","isAlwaysSelected","isLocked","isChecked","inputElement","Radio","onlyInput","pickerList","padded","noResults","CountryPickerModal","selectionLimit","selectedCountryIds","setSelectedCountryIds","noPickerScrollRestore","country","iso2","defaultName","handleSelectedIdsChange","newSelectedIds","pickerSelector","pickerTitle","main","picker","GiveawayChannelPickerModal","giveawayChatId","initialSelectedIds","onSelectedIdsConfirmed","pendingChannelId","setPendingChannelId","isConfirmModalOpen","openConfirmModal","closeConfirmModal","setSelectedIds","channelIds","isChatSuperGroup","displayedChannelIds","foundChannelIds","handleSelectedChannelIdsChange","privateLinkChannelId","isChatPublic","confirmPrivateLinkChannelSelection","handleModalConfirm","GiveawayTypeOption","isLink","onClickAction","userNames","selectedMemberIds","displayText","members","adminMembersById","GiveawayUserPickerModal","memberIds","statusesById","adminIdsSet","sortUserIds","displayedMemberIds","filteredUserIds","isUserBot","handleSelectedMemberIdsChange","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","giveawayModal","gifts","selectedMemberList","selectedChannelList","selectedChannelIds","giveawayBoostPerPremiumLimit","giveawayBoostsPerPremium","isStarsGiftEnabled","userSelectionLimit","giveawayAddPeersMax","countrySelectionLimit","giveawayCountriesMax","general","prepaidGiveaway","starsGiftOptions","starOptions","GiveawayModal","GIVEAWAY_BOOST_PER_PREMIUM","GIVEAWAY_MAX_ADDITIONAL_COUNTRIES","GIVEAWAY_MAX_ADDITIONAL_USERS","closeGiveawayModal","launchPrepaidGiveaway","launchPrepaidStarsGiveaway","isCalendarOpened","openCalendar","closeCalendar","isCountryPickerModalOpen","openCountryPickerModal","closeCountryPickerModal","isUserPickerModalOpen","openUserPickerModal","closeUserPickerModal","isChannelPickerModalOpen","openChannelPickerModal","closeChannelPickerModal","TYPE_OPTIONS","GiftStar","customExpireDate","setCustomExpireDate","selectedRandomUserCount","setSelectedRandomUserCount","selectedGiveawayOption","setGiveawayOption","setSelectedStarOption","selectedSubscriberOption","setSelectedSubscriberOption","selectedMonthOption","setSelectedMonthOption","selectedUserIds","setSelectedUserIds","setSelectedChannelIds","shouldShowWinners","setShouldShowWinners","shouldShowPrizes","setShouldShowPrizes","prizeDescription","setPrizeDescription","dataPrepaidGiveaway","setDataPrepaidGiveaway","dataStarsPrepaidGiveaway","setDataStarsPrepaidGiveaway","isPremiumGiveaway","isStarsGiveaway","selectedUserCount","boostQuantity","boostStarsQuantity","yearlyBoosts","SUBSCRIBER_OPTIONS","monthQuantity","isStarsPrepaidGiveaway","isPremiumPrepaidGiveaway","selectedGift","gift","selectedStarsGift","filteredGifts","STARS_CURRENCY_CODE","basicGift","userCountOptions","winnerCountOptions","quantity","handlePremiumClick","boostChannelId","additionalChannelIds","isOnlyForNewSubscribers","countries","areWinnersVisible","untilDate","confirmLaunchPrepaidGiveaway","giveawayId","paymentPurpose","handleRandomUserCountChange","newValue","handleWinnerCountChange","handlePrizeDescriptionChange","handleChangeSubscriberOption","handleChangeTypeOption","handleExpireDateChange","handleSetCountriesListChange","handleSelectedUserIdsChange","handleShouldShowWinnersChange","handleShouldShowPrizesChange","onClickActionHandler","handleStarClick","renderGiveawayOptionList","filteredChannelIds","deleteParticipantsHandler","subLabelClassName","formatDateTimeToString","boosts","RangeSliderWithMarks","rangeCount","marks","Link","isPrimary","renderPremiumFeaturesLink","GIVEAWAY_MAX_ADDITIONAL_CHANNELS","LIMIT_DESCRIPTION","uploadMaxFileparts","chatlistInvites","chatlistJoined","savedDialogsPinned","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","PremiumLimitReachedModal","closeLimitReachedModal","isClosing","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SLIDE_TRANSITION_DURATION","FOCUS_MARGIN","useStickerPickerObservers","idPrefix","stickerSetIntersectionsRef","activeSetIndex","setActiveSetIndex","observe","observeIntersectionForSet","freeze","freezeForSet","unfreeze","unfreezeForSet","useIntersectionObserver","rootRef","stickerSetIntersections","entry","isIntersecting","minIntersectingIndex","lowestIndex","Infinity","observeIntersectionForShowingItems","freezeForShowingItems","unfreezeForShowingItems","throttleMs","margin","observeIntersectionForPlayingItems","observeIntersectionForCovers","stickerSetEl","isClose","animateScroll","maxDistance","StickerSetCover","stickerSet","STICKER_SIZE_PICKER_HEADER","observeIntersection","sharedCanvasRef","hasThumbnail","hasVideoThumb","hasAnimatedThumb","hasStaticThumb","customEmoji","useCustomEmoji","hasCustomColor","shouldUseTextColor","customColor","useDynamicColorListener","colorFilter","useColorFilter","useIsIntersecting","shouldPlay","shouldFallbackToSticker","IS_WEBM_SUPPORTED","firstStickerHash","getStickerMediaHash","firstStickerMediaData","mediaHash","coords","useCoordsInSharedCanvas","observeIntersectionForPlaying","selectIsAlwaysHighPriorityEmoji","sharedCanvas","sharedCanvasCoords","forceAlways","getFirstLetters","contentForStatusMenuContext","arg","StickerButton","noContextMenu","isStatusPicker","canViewSet","observeIntersectionForShowing","isSelected","shouldIgnorePremium","noShowPremium","withTranslucentThumb","clickArg","onFaveClick","onUnfaveClick","onRemoveRecentClick","onContextMenuOpen","onContextMenuClose","onContextMenuClick","isEffectEmoji","withSparkles","setEmojiStatus","isFree","hasEffect","isCustomEmoji","shouldLoad","isIntesectingForShowing","handleBeforeContextMenu","shouldRenderContextMenu","getLayout","withPortal","shouldAvoidNegativePosition","handleRemoveClick","handleContextRemoveRecent","handleContextUnfave","handleContextFave","handleSendQuiet","handleSendScheduled","handleOpenSet","handleEmojiStatusExpiresClick","until","shouldShowCloseButton","contextMenuItems","preventMessageInputBlurWithBubbling","Sparkles","preset","StickerView","isSmall","shouldLoop","shouldPreloadPreview","noLoad","noVideoOnMobile","withSharedAnimation","noFastClick","ReactionEmoji","loadAndPlay","sharedCanvasHqRef","isCustom","availableReaction","staticIcon","animationId","selectAnimation","getDocumentMediaHash","StarReaction","EMOJI_SIZE_PICKER","AnimatedIconWithPreview","collectibleStatuses","collectibleEmojiStatuses","statuses","StickerSet","isNearActive","favoriteStickers","isReactionPicker","shouldHideHeader","withDefaultTopicIcon","selectedReactionIds","withDefaultStatusIcon","isChatEmojiSet","isChatStickerSet","isTranslucent","noContextMenus","onReactionSelect","onReactionContext","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","clearRecentStickers","clearRecentCustomEmoji","clearRecentReactions","toggleStickerSet","itemsPerRow","setItemsPerRow","getItemsPerRowFallback","stickerMarginPx","emojiMarginPx","emojiVerticalMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isStatusCollectible","COLLECTIBLE_STATUS_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isPopular","POPULAR_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","STICKER_SIZE_PICKER","verticalMargin","calculateItemsPerRow","contentRect","useResizeObserver","accessHash","isInstalled","installedDate","isArchived","canCut","EFFECT_EMOJIS_SET_ID","EFFECT_STICKERS_SET_ID","isCut","expand","itemsBeforeCutout","totalItemsCount","itemHeight","heightWhenCut","favoriteStickerIdsSet","collectibleEmojiIdsSet","withAddSetButton","addSetButtonText","pill","grey","reactionId","isHqEmoji","canvasRef","HEADER_BUTTON_WIDTH","FADED_BUTTON_SET_IDS","STICKER_SET_IDS_WITH_COVER","setsById","stickerSetsById","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","recentReactions","topReactions","defaultTags","addedCustomEmojiIds","added","setIds","canAnimate","selectCanPlayAnimatedEmojis","defaultTopicIconsId","defaultStatusIconsId","chatEmojiSetId","emojiSet","isWithPaidReaction","isPaidReactionAvailable","defaultTagReactions","CustomEmojiPicker","pickerListClassName","withDefaultTopicIcons","onCustomEmojiSelect","handleContentScroll","shouldHideTopBorder","pickTruthy","collectibleStatusEmojis","collectibleStatusEmojiIds","prefix","canLoadAndPlay","areAddedLoaded","allSets","defaultSets","TOP_SYMBOL_SET_ID","topReactionsSlice","unshift","cleanRecentReactions","some","topReaction","cleanAvailableReactions","isInactive","allRecentReactions","defaultStatusIconsPack","uniqueByField","defaultTopicIconsPack","userSetIds","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContent","useAsyncRendering","shouldRenderContent","newLeft","handleEmojiSelect","pickerStyles","listClassName","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","isFaded","areFeaturedStickersLoaded","selectIsContextMenuTranslucent","StatusPickerMenu","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","transformOriginX","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","CUSTOM_EMOJI_SIZE","SuggestedStatusModal","closeSuggestedStatusModal","sendWebAppEvent","renderingModal","mockPeerWithStatus","formatShortDuration","handleSetStatus","expires","referrerWebAppKey","loopLimit","PeerChip","mockPeer","withEmojiStatus","getFirstAvailableBoost","myBoosts","boost","firstBoost","prevBoostedChat","BoostModal","applyBoost","closeBoostModal","loadFullChat","isReplaceModalOpen","openReplaceModal","closeReplaceModal","isWaitDialogOpen","openWaitDialog","closeWaitDialog","isPremiumDialogOpen","openPremiumDialog","closePremiumDialog","chatTitle","boostedChatTitle","isStatusLoaded","isBoosted","leftText","rightText","descriptionText","canBoostMore","boostStatus","hasMyBoost","areBoostsInDifferentChannels","every","currentLevel","hasNextLevel","levelProgress","remainingBoosts","isMaxLevel","getBoostProgressInfo","hasBoost","moreBoosts","modalTitle","boostsLeftToUnrestrict","boostsToUnrestrict","boostsApplied","boostTimes","isBoostDisabled","isReplacingBoost","handleApplyBoost","slots","slot","handleProceedPremium","handleButtonClick","PremiumProgress","floatingBadgeText","isOnlyConfirm","chatMessage","GiftCodeModal","closeGiftCodeModal","applyGiftCode","canUse","toId","usedAt","handleOpenGiveaway","giveawayMessageId","modalData","LinkField","tableData","isFromGiveaway","TableInfoModal","getClosestEntry","arr","curr","selfDestructAccountDays","DeleteAccountModal","closeDeleteAccountModal","setAccountTTL","selectedOption","setSelectedOption","optionToDays","initialSelectedOption","ACCOUNT_TTL_OPTIONS","days","onCloseHandler","withIcon","ChatlistAlready","invite","closeChatlistModal","joinChatlistInvite","selectedPeerIds","setSelectedPeerIds","missingPeerIds","hasChatsToAdd","isNew","alreadyPeerIds","newChatsCount","noCustomEmojiPlayback","noTitleAnimations","handleSelectionToggle","areAllSelected","pickerWrapper","pickerHeader","pickerHeaderInfo","selectionToggle","Badge","buttonBadge","isAlternateColor","ChatlistDelete","suggestedPeerIds","leaveChatlist","ChatlistNew","joinedIds","isNotJoined","selectedCount","removal","selectChatFolder","ChatlistInviteModal","renderingInfo","renderingFolderTitle","folderTabNumber","renderContent","folderTitle","foldersWrapper","folders","Tab","badgeCount","isBadgeActive","ChatInviteModal","acceptChatInvite","closeChatInviteModal","participantsRef","prevModal","usePrevious","inviteInfo","about","isBroadcast","participantIds","participantsCount","isRequestNeeded","handleAccept","acceptLangKey","requestToJoinLangKey","customPeer","getCustomPeerFromInvite","participants","withVideo","participantCount","participant","minLevelToRestrictAds","channelRestrictAdsLevelMin","AboutAdsModal","closeAboutAdsModal","moreMenuRef","canReport","additionalInfo","sponsorInfo","isMonetizationSharing","renderingIsNewDesign","regularAdContent","SafeLink","SponsoredMessageContextMenuContainer","triggerRef","shouldSkipAbout","onItemClick","AboutMonetizationModal","blockchainText","monetizationTitle","specialReplacement","twoFaSettings","hint","passwordHint","VerificationMonetizationModal","closeMonetizationVerificationModal","clearMonetizationVerificationError","processMonetizationRevenueWithdrawalUrl","shouldShowPassword","setShouldShowPassword","password","currentPassword","handleClearError","PasswordForm","shouldShowSubmit","errorKey","withRegular","clearError","shouldResetValue","onChangePasswordVisibility","EmojiStatusAccessModal","closeEmojiStatusAccessModal","toggleUserEmojiStatusPermission","loadDefaultStatusIcons","currentStatusIndex","setCurrentStatusIndex","totalCount","prevIndex","renderPickerItem","chatItem","itemName","isBotAccessEmojiGranted","renderStatusText","LocationAccessModal","closeLocationAccessModal","toggleUserLocationPermission","renderInfo","ReportAdModal","reportSponsored","closeReportAdModal","openPreviousReportAdModal","transitionRef","handleOptionClick","renderingSection","renderingDepth","sectionDepth","sections","bottomText","hasSubtitle","ACTIVE_SLIDE_CLASS_NAME","handleAnimationStart","TO_SLIDE_CLASS_NAME","narrow","secondaryIcon","ReportModal","reportMessages","closeReportModal","openPreviousReportModal","setText","subject","handleTextChange","closeReportMessageModalHandler","sendMessageReportHandler","Report","TextArea","isOptional","maxLengthIndicator","noReplaceNewlines","isBlurred","isBackgroundBlurred","patternColor","background","customBackground","selectThemeValues","PreparedMessageModal","closePreparedInlineMessageModal","openSharePreparedMessageModal","customBackgroundValue","useCustomBackground","handleOpenClick","localMessage","getMockPreparedMessageFromResult","bgClassName","inert","Message","noComments","noReplies","appearanceOrder","isJustAdded","isFirstInGroup","isLastInGroup","isLastInList","isFirstInDocumentGroup","isLastInDocumentGroup","starsBalance","balance","isStarsBalanceModalOpen","starsBalanceModal","SharePreparedMessageModal","closeSharePreparedMessageModal","sendInlineBotResult","updateSharePreparedMessageModalSendArgs","pendingSendArgs","starsForSendMessage","closeConfirmDialog","closeConfirmModalPayForMessage","dialogHandler","paymentMessageConfirmDialogHandler","shouldAutoApprove","shouldPaidMessageAutoApprove","setAutoApprove","setShouldPaidMessageAutoApprove","handleWithConfirmation","handleActionWithPaymentConfirmation","usePaidMessageConfirmation","handleSend","handleSendWithPaymentConfirmation","handleClosePaymentMessageConfirmDialog","peerName","PaymentMessageConfirmDialog","userName","messagePriceInStars","messagesCount","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","useManagePermissions","defaultPermissions","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","setIsLoading","handlePermissionChange","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","sendGifs","checkMedia","mediaPermissions","v","sendMedia","assign","embedLinks","sendPlain","sendMessages","resetPermissions","permissionKeyList","fullInfo","hasLinkedChat","linkedChatId","PermissionCheckboxList","isMediaDropdownOpen","setIsMediaDropdownOpen","shiftedClassName","dropdownClassName","withCheckbox","getControlIsDisabled","permissionGroup","shouldDisablePermissionForPublicGroup","countCheckedPermissions","handleOpenMediaDropdown","handleDisabledClick","blocking","labelText","rightIcon","onClickLabel","sendPhotos","sendVideos","sendStickers","sendAudios","sendDocs","sendVoices","sendRoundvideos","sendPolls","inviteUsers","pinMessages","changeInfo","manageTopics","deleteMessageModal","canDeleteForAll","selectCanDeleteSelectedMessages","isSuperGroup","contactName","getPrivateChatUserId","chatBot","isSystemBot","selectBot","canBanUsers","getHasAdminRight","isCreator","isChatWithBot","selectIsChatWithBot","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","DeleteMessageModal","closeDeleteMessageModal","deleteMessages","reportChannelSpam","deleteChatMember","deleteScheduledMessages","exitMessageSelectMode","updateChatMemberBannedRights","deleteParticipantHistory","defaultBannedRights","peerIdsToDeleteAll","setPeerIdsToDeleteAll","peerIdsToBan","setPeerIdsToBan","peerIdsToReportSpam","setPeerIdsToReportSpam","isAdditionalOptionsVisible","setIsAdditionalOptionsVisible","shouldDeleteForAll","setShouldDeleteForAll","peerList","senderArray","getSendersFromSelectedMessages","buildNestedOptionListWithAvatars","member","peerListToDeleteAll","peerListToReportSpam","peerListToBan","isCurrentUserInList","isAdmin","shouldShowOption","peerNames","buildCollectionByCallback","ACTION_SPAM_OPTION","nestedOptions","ACTION_DELETE_OPTION","ACTION_BAN_OPTION","toggleAdditionalOptions","filterMessageIdByPeerId","selectedMessageIdList","msgId","selectSenderFromMessage","handleReportSpam","userMessagesMap","messageIdList","participantId","handleDeleteMessages","filteredMessageIdList","handleDeleteAllPeerMessages","peerIdList","handleDeleteMember","filteredUserIdList","handleUpdateChatMemberBannedRights","bannedRights","handleDeleteMessageList","isNaN","CheckboxGroup","nestedCheckbox","isPrivateChat","canPinForAll","PinMessageModal","pinMessage","shouldPinForAll","setShouldPinForAll","handlePinMessage","isUnpin","isOneSide","isSilent","UnpinAllMessagesModal","pinnedMessagesCount","onUnpin","shouldWarnAboutSvg","selectCanReportSelectedMessages","selectCanDownloadSelectedMessages","selectedMessageIds","selectedMessages","hasProtectedMessage","selectHasProtectedMessage","selectCanForwardMessages","hasSvgs","selectHasSvg","isShareMessageModalOpen","isShareMessageModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","MessageSelectToolbar","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","setSharedSettingOption","handleCopy","useHotkeys","useCopySelectedMessages","isSvgDialogOpen","openSvgDialog","closeSvgDialog","shouldNotWarnAboutSvg","setShouldNotWarnAboutSvg","handleExitMessageSelectMode","handleDelete","onBackspace","onEsc","handleMessageDownload","handleSvgConfirm","prevSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","seenByDates","closeSeenByModal","renderingSeenByDates","leftId","rightId","handleCloseSeenByModal","CLOSE_ANIMATION_DURATION","isReadDate","privacySettingsNoticeModal","PrivacySettingsNoticeModal","updateGlobalPrivacySettings","closePrivacySettingsNoticeModal","setPrivacyVisibility","loadUser","handleShowReadTime","shouldHideReadMarks","handleShowLastSeen","privacyKey","onSuccess","handleOpenPremium","ReadTime","LastSeen","reactorModal","reactors","ReactorListModal","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","allReactions","uniqueReactions","seenByUserIds","flatMap","peerReactions","reactor","seenByUser","addedDate","avatarSize","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","EmojiInteractionAnimation","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","endHeavyAnimation","effectHash","effectTgsUrl","startSize","isReversed","quality","chatLanguageModal","currentLanguageCode","selectLanguageCode","activeTranslationLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","ChatLanguageModal","requestMessageTranslation","closeChatLanguageModal","setSettingOption","requestChatTranslation","handleSelect","langCode","toLanguageCode","translationLanguage","handleSearch","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","highlight","CollectibleInfoModal","closeCollectibleInfoModal","isUsername","handleOpenUrl","shouldSkipModal","formatUsername","collectible","copyTextToClipboard","formattedCollectible","purchaseDate","cryptoCurrency","cryptoAmount","Mention","Fragment","chip","createMapStateToProps","props","currentType","isVoice","byChatId","globalMessagesByChatId","messages","searchChatId","AudioResults","searchMessagesGlobal","openAudioPlayer","foundMessages","parseSearchResultKey","handleMessageFocus","handlePlayAudio","canRenderContents","NothingFound","shouldDrawDateDivider","toYearMonth","getMessageDownloadableMedia","formatMonthAndYear","Audio","AudioOrigin","Search","getSenderName","onDateClick","buttonRef","activeElement","selectIsChatPinned","getIsChatMuted","selectNotifyDefaults","selectNotifyException","canChangeFolder","chatFolders","LeftSearchResultChat","withUsername","withOpenAppButton","isMuteModalOpen","openMuteModal","closeMuteModal","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","shouldRenderChatFolderModal","markRenderChatFolderModal","unmarkRenderChatFolderModal","shouldRenderMuteModal","markRenderMuteModal","unmarkRenderMuteModal","handleChatFolderChange","handleMute","useChatContextActions","handleOpenApp","useSelectWithEnter","storyViewerOrigin","hasMainMiniApp","MuteChatModal","ChatFolderModal","BotAppResults","recentSet","withoutRecent","handleChatClick","shouldReplaceHistory","renderSummary","isRoundVideo","renderMessageSummary","isSpoiler","getMessageIsSpoiler","getMessageVideo","privateChatUserId","privateChatUser","ChatMessage","mediaThumbnail","getMessageSticker","getMessageMediaThumbDataUri","mediaBlobUrl","getMessageMediaHash","getMessageRoundVideo","formatPastTimeShort","DateSuggest","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","selectTopic","LeftSearchResultTopic","foundTopicIds","ChatMessageResults","dateSearchQuery","onSearchDateSelect","openThread","handleTopicClick","nothingFound","LeftSearchResultSponsored","sponsoredPeer","viewSponsored","useOnIntersect","intersectionRatio","handleBadgeClick","handleBadgeMouseDown","BadgeButton","topUserIds","topPeers","recentlyFoundChatIds","RecentContacts","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","handleClearRecentlyFoundChats","isChannelList","globalResults","localResults","globalPeerIds","accountPeerIds","similarChannelIds","selectSimilarChannelIds","GLOBAL_SUGGESTED_CHANNELS_ID","suggestedChannelIds","ChatResults","setGlobalSearchChatId","loadChannelRecommendations","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","searchContext","setSearchContext","context","handlePickerItemClick","getSearchContextCaption","handleClickContext","itemPlaceholderClass","startsWith","filteredChatIds","getOrderedIds","ALL_FOLDER_ID","localChatIds","contactIdsWithMe","localPeerIds","filteredIds","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","handleClickShowMoreLocal","handleClickShowMoreGlobal","actualFoundIds","isMessagesFetching","shouldRenderTopPeers","shouldRenderMessagesSection","noScrollRestoreOnTop","customIcon","shouldCleanup","CURRENT_TYPE","FileResults","observeIntersectionForMedia","getMessageDocument","Document","withDate","datetime","smaller","LinkResults","WebLink","onMessageClick","MediaResults","handleSelectMedia","isMediaGrid","isMessageList","Media","TABS","GlobalSearchContent","ChannelList","BotApps","Links","Files","Music","Voice","CHAT_TABS","currentContent","LeftSearch","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","handleSearchDateSelect","TabList","onSwitchTab","renderCount","INITIAL_STATE","email","twoFaReducer","payload","maxChats","selectCurrentLimit","SettingsFoldersChatFilters","mode","dispatch","onSaveFilter","openLimitReachedModal","chatFilter","selectedChatIds","selectedChatTypes","selectChatFilters","chatTypes","CUSTOM_PEER_INCLUDED_CHAT_TYPES","CUSTOM_PEER_EXCLUDED_CHAT_TYPES","isTouched","setIsTouched","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","shouldHideChatTypes","isChatList","chatIds","newFilter","includeFilters","includedChatIds","excludeFilters","excludedChatIds","handleSelectedChatTypesChange","newFilters","categories","selectedCategories","categoryPlaceholderKey","withPeerTypes","onSelectedCategoriesChange","ERROR_NO_TITLE","ERROR_NO_CHATS","invites","chatListCount","el","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","maxInviteLinks","maxChatLists","SettingsFoldersEdit","onAddIncludedChats","onAddExcludedChats","onShareFolder","onOpenInvite","isOnlyInvites","onSaveFolder","loadChatlistInvites","isCreating","isEditingChatList","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","includedChatTypes","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","handleCreateInviteClick","selectCanShareFolder","handleEditInviteClick","renderChats","visibleChatIds","leftChatsCount","clickHandler","chatType","typeKey","renderChatType","STICKER_SIZE_FOLDER_SETTINGS","FoldersNew","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","SettingsFoldersMain","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","sortChatFolders","setState","orderedFolderIds","dragOrderIds","draggedIndex","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","getFolderDescriptionText","handleCreateFolderFromRecommended","translation","handleDragEnd","canCreateNewFolder","FoldersAll","isBlocked","isDragged","draggedTop","Draggable","onDragEnd","knobStyle","allowSelection","shareFolderScreen","SettingsShareChatlist","createChatlistInvite","deleteChatlistInvite","editChatlistInvite","handleRevoke","pinnedChatIds","unlockedIds","partition","selectCanInviteToChat","isFirstRenderRef","prevUrl","handleClickDisabled","chatsCount","AnimatedIcon","FoldersShare","withShare","onRevoke","lockedUnselectedIds","SettingsFolders","currentScreen","shownScreen","openShareChatFolderModal","editChatFolder","openSettingsScreen","handleReset","SettingsScreens","FoldersCreateFolder","FoldersEditFolder","FoldersEditFolderFromChatList","FoldersEditFolderInvites","FoldersIncludedChats","FoldersExcludedChats","screen","saveState","newState","folderUpdate","handleSaveFolder","handleSaveFilter","handleEditFolder","handleAddIncludedChats","FoldersIncludedChatsFromChatList","handleAddExcludedChats","FoldersExcludedChatsFromChatList","handleShareFolder","noRequestNextScreen","handleOpenInvite","Folders","SettingsPasswordForm","shouldDisablePasswordManager","expectedPassword","validationError","setValidationError","newPassword","SettingsPasscodeCongratulations","fullReset","STICKER_SIZE_PASSCODE","Congratulations","SettingsPasscodeEnabled","Lock","previewUrl","lockPreviewUrl","PasscodeChangePasscodeCurrent","PasscodeTurnOff","SettingsPasscodeStart","passcode","SettingsPasscode","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","handleStartWizard","PasscodeNewPasscode","handleNewPassword","PasscodeNewPasscodeConfirm","handleNewPasswordConfirm","PasscodeCongratulations","handleChangePasswordCurrent","currentPasscode","decryptSession","PasscodeChangePasscodeNew","handleChangePasswordNew","PasscodeChangePasscodeConfirm","handleTurnOff","Privacy","PasscodeDisabled","SettingsPasscodeForm","PasscodeEnabled","DEFAULT_POINTS","getProgress","points","pointIndex","findIndex","prevPoint","nextPoint","pointValue","PaidMessageSlider","readOnly","canChangeChargeForMessages","mainClassName","number","formatStarsAsText","step","starsUsdWithdrawRateX1000","starsUsdWithdrawRate","configStarsPaidMessageCommissionPermille","starsPaidMessageCommissionPermille","starsPaidMessageAmountMax","DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES","isGroupChat","chargeForMessages","handleChargeForMessagesChange","handleUnlockWithPremium","MINIMUM_CHARGE_FOR_MESSAGES","percent","formatPercent","premiumSection","handleOpenPremiumModal","nonContactPeersPaidStars","selectNonContactPeersPaidStars","noPaidReactionsForUsersCount","noPaidMessages","shouldNewNonContactPeersRequirePremium","selectNewNoncontactPeersRequirePremium","shouldChargeForMessages","DEFAULT_CHARGE_FOR_MESSAGES","canLimitNewMessagesWithoutPremium","canChargeForMessages","starsPaidMessagesAvailable","canChangeForContactsAndPremium","setChargeForMessages","hasShownNotification","setHasShownNotification","prevSelectedValue","chatInvite","PrivacyGroupChats","actionText","phoneCall","PrivacyPhoneCall","PrivacyLockedOption","hidden","isCanCheckedInDisabled","privacyValue","updateGlobalPrivacySettingsWithDebounced","privacyDescription","PaidMessagePrice","itemSubtitle","PrivacyNoPaidMessages","renderSectionNoPaidMessagesForUsers","PremiumStatusItem","getSessionIcon","session","platform","device","deviceModel","systemVersion","getLocation","region","activeSessions","byHash","SettingsActiveSession","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","headerButton","iconDevice","dateActive","box","appVersion","ip","note","actionHeader","actionName","SettingsActiveSessions","orderedHashes","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","activeWebSessions","SettingsActiveWebsite","terminateWebAuthorization","renderingBot","browser","SettingsActiveWebsites","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","clearHelp","StickerSetCard","handleCardClick","CHAT_HEIGHT_PX","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","byKey","customEmojiSetIds","canPlayAnimatedEmojis","SettingsCustomEmoji","shouldSuggestCustomEmoji","stickerSettingsRef","handleStickerSetClick","handleSuggestCustomEmojiChange","customEmojiSets","SettingsDataStorage","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","autoLoadFileMaxSizeMb","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderContentSizeSlider","renderValue","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","doNotTranslate","SettingsDoNotTranslate","language","displayedOptions","setDisplayedOptions","displayedOptionList","currentLanguageOption","otherOptionList","prevLanguage","ManageUsernames","usernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","username","prevUsernameList","orderedUsernames","dragOrderUsernames","handleCopyUsername","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","usernameData","LINK_PREFIX_REGEX","runDebouncedForCheckUsername","UsernameInput","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","MIN_UPDATE_USERNAME_LENGTH","MAX_USERNAME_LENGTH","USERNAME_REGEX","test","handleUsernameChange","newUsername","isUsernameValid","success","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","maxBioLength","currentFirstName","currentLastName","currentUserFullInfo","currentAvatarHash","getChatAvatarHash","currentBio","bio","SettingsEditProfile","loadCurrentUser","updateProfile","firstEditableUsername","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","InProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","Complete","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","renderPurchaseLink","shouldForceHttpTransport","shouldAllowHttpTransport","shouldCollectDebugLogs","shouldDebugExportedSenders","SettingsExperimental","requestWave","snapButtonRef","isSnapButtonAnimating","setIsSnapButtonAnimating","isAutoUpdateEnabled","setIsAutoUpdateEnabled","electron","getIsAutoUpdateEnabled","handleDownloadLog","file","File","getDebugLogs","DEBUG_LOG_FILENAME","handleIsAutoUpdateEnabledChange","handleRequestWave","startX","startY","handleRequestConfetti","handleSnap","animateSnap","Experimental","IS_WAVE_TRANSFORM_SUPPORTED","IS_SNAP_EFFECT_SUPPORTED","IS_ELECTRON","shouldUseSystemTheme","messageSendKeyCombo","messageTextSize","timeFormat","SettingsGeneral","isMobileDevice","timeFormatOptions","appearanceThemeOptions","keyboardSendOptions","handleMessageTextSizeChange","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","isTrayIconEnabled","setIsTrayIconEnabled","getIsTrayIconEnabled","handleIsTrayIconEnabledChange","GeneralChatBackground","IS_WINDOWS","WallpaperTile","wallpaper","localMediaHash","isLoadingRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","loadedWallpapers","SettingsGeneralBackground","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","GeneralChatBackgroundColor","handleResetToDefault","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","SettingsHeader","editedFolderId","signOut","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","currentAmountRef","useMultiClick","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","handleSignOutMessage","forceInitApi","SettingsMenuButton","EditProfile","General","QuickReaction","DataStorage","Language","DoNotTranslate","Stickers","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyForwarding","PrivacyVoiceMessages","PrivacyMessages","PrivacyLastSeenAllowedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyBioAllowedContacts","PrivacyGroupChatsAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioDeniedContacts","PrivacyGroupChatsDeniedContacts","PrivacyPhoneNumberAllowedContacts","PrivacyBirthdayAllowedContacts","PrivacyGiftsAllowedContacts","PrivacyForwardingAllowedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsDeniedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PDeniedContacts","Performance","ActiveSessions","ActiveWebsites","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaNewPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaChangePasswordHint","TwoFaNewPasswordEmail","TwoFaRecoveryEmail","TwoFaNewPasswordEmailCode","TwoFaRecoveryEmailCode","TwoFaCongratulations","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","canTranslate","canTranslateChats","languages","SettingsLanguage","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","canTranslateChatsEnabled","oldSetLanguage","currentLangCode","navigator","shortLangCode","substr","nativeName","handleShouldTranslateChange","handleShouldTranslateChatsChange","handleShouldTranslateChatsClick","doNotTranslateText","IS_TRANSLATION_SUPPORTED","handleDoNotSelectOpen","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","sessionCount","SettingsMain","openSupportChat","openGiftRecipientPicker","openStarsBalanceModal","isSupportDialogOpen","openSupportDialog","closeSupportDialog","isPreload","handleOpenSupport","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","isInSettings","languageInfo","formatStarsAmount","FAQ_URL","PRIVACY_URL","renderTextFilters","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","SettingsNotifications","notifyDefaults","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","areNotificationsSupported","checkIfNotificationsSupported","areOfflineNotificationsSupported","checkIfOfflinePushFailed","handleSettingsChange","peerType","setting","currentIsMuted","mutedUntil","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","groups","ANIMATION_LEVEL_OPTIONS","ANIMATION_LEVEL_CUSTOM_OPTIONS","PERFORMANCE_OPTIONS","IS_BACKDROP_BLUR_SUPPORTED","performanceSettings","selectPerformanceSettings","updatePerformanceSettings","sectionExpandedStates","setSectionExpandedStates","sectionCheckedStates","animationLevelState","areDeepEqual","INITIAL_PERFORMANCE_STATE_MAX","ANIMATION_LEVEL_MAX","INITIAL_PERFORMANCE_STATE_MIN","ANIMATION_LEVEL_MIN","INITIAL_PERFORMANCE_STATE_MID","ANIMATION_LEVEL_MED","ANIMATION_LEVEL_CUSTOM","animationLevelOptions","handleToggleSection","sectionIndex","handleAnimationLevelChange","newLevel","performance","animationLevel","handlePropertyGroupChange","perfomanceSection","sectionName","newSettings","handlePropertyChange","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","accountDaysTtl","hasPasscode","canDisplayChatInTitle","isCurrentUserFrozen","blockedCount","webAuthCount","canDisplayAutoarchiveSetting","canSetPasscode","selectCanSetPasscode","SettingsPrivacy","openDeleteAccountModal","loadPrivacySettings","loadBlockedUsers","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","loadWebAuthorizations","loadAccountDaysTtl","handleArchiveAndMuteChange","handleChatInTitleChange","handleUpdateContentSettings","handleOpenDeleteAccountModal","dayOption","getVisibilityValue","shouldAllowPremium","botsPrivacy","isVisibilityEverybody","shouldShowBotsString","blockCount","blockChatIds","allowCount","allowChatIds","total","exceptionString","conjunction","lastSeen","profilePhoto","birthday","forwards","allowDisabledClick","voiceMessages","blockedIds","localContactIds","userSearch","localUserIds","BlockUserModal","setUserSearchQuery","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","SettingsPrivacyBlockedUsers","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","userMainUsername","renderContact","getPrivacyKey","PrivacyPhoneP2P","PrivacyAddByPhone","disallowedGifts","SettingsAcceptedGift","handleOpenTelegramPremiumModal","handleLimitedEditionChange","shouldDisallowLimitedStarGifts","handleUnlimitedEditionChange","shouldDisallowUnlimitedStarGifts","handleUniqueChange","shouldDisallowUniqueStarGifts","handlePremiumSubscriptionChange","shouldDisallowPremiumGifts","selectShouldHideReadMarks","SettingsPrivacyLastSeen","canShowHideReadTime","handleChangeShouldHideReadMarks","SettingsPrivacyPublicProfilePhoto","hasCurrentUserFullInfo","currentUserFallbackPhoto","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","isFallback","handleConfirmDelete","handleOpenFileSelector","click","SelectAvatar","PrivacySubsection","isPremiumRequired","visibilityOptions","hasNobody","primaryExceptionLists","shouldShowDenied","shouldShowAllowed","headerText","prepareSubtitle","userIdsCount","chatIdsCount","isAllowBots","userCountString","chatCountString","allowedString","blockString","allowedContactsScreen","deniedContactsScreen","primaryPrivacy","secondaryPrivacy","shouldDisplayGiftsButton","addByPhone","phoneP2P","SettingsPrivacyVisibility","handleShowGiftIconInChats","secondaryScreen","PREMIUM_CATEGORY","CUSTOM_PEER_PREMIUM","getCurrentPrivacySettings","SettingsPrivacyVisibilityExceptionList","isAllowList","withPremiumCategory","withMiniAppsCategory","usersOnly","setPrivacySettings","customPeerBots","isCustomPeer","avatarIcon","isAvatarSquare","peerColorId","miniAppsCategory","selectedContactIds","selectedCategoryTypes","newSelectedCategoryTypes","setNewSelectedCategoryTypes","SERVICE_NOTIFICATIONS_USER_ID","filteredChats","handleSelectedCategoriesChange","updatedIds","isPremiumAllowed","config","selectedReaction","defaultReaction","SettingsQuickReaction","setDefaultReaction","emoticon","addedSetIds","SettingsStickers","shouldSuggestStickers","shouldUpdateStickerSetOrder","handleSuggestStickerSetOrderChange","handleSuggestStickersChange","stickerSets","SettingsTwoFaCongratulations","recoveryEmail","animatedEmoji","selectAnimatedEmoji","codeLength","waitingEmailCodeLength","SettingsTwoFaEmailCode","focusDelayTimeoutMs","setValue","handleInputChange","AnimatedIconFromSticker","SettingsTwoFaEnabled","SettingsTwoFaSkippableForm","shouldConfirm","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleSkip","handleSkipConfirm","SettingsTwoFaStart","SettingsTwoFa","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleNewPasswordHint","handleNewPasswordEmail","handleChangePasswordConfirm","handleChangePasswordHint","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaPassword","TRANSITION_RENDER_COUNT","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_BIO_SCREENS","PRIVACY_BIRTHDAY_SCREENS","PRIVACY_GIFTS_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","PRIVACY_MESSAGES_SCREENS","Settings","foldersState","foldersDispatch","shouldSkipTransition","closeShareChatFolderModal","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","useMarkScrolled","forceReturnToChatList","isFromSettings","renderCurrentSectionContent","isScreenActive","activeScreen","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","Main","SettingsGeneralBackgroundColor","SettingsPerformance","LAYERS_ANIMATION_NAME","shouldWrap","withSwipeControl","_isFrom","_currentKey","userStatusesById","ContactList","openNewContactDialog","isSearching","NewChatStep1","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","foundContactIds","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","NewChatStep2","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","memberFirstNames","generatedChatName","handleTitleChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","NewChat","openLeftColumnContent","newChatMemberIds","setNewChatMemberIds","contentKey","NewChannelStep2","NewGroupStep2","changeSelectedMemberIdsHandler","isSelection","isStepActive","NewChannelStep1","NewGroupStep1","RIBBON_OFFSET","RIBBON_Z_INDEX","STROKE_OFFSET","CANVAS_OFFSET","callbacks","getHTMLElements","toggler","ribbon","leftMainHeader","ribbonPeers","ribbonStyles","toggleAvatars","sourceEl","sourceCanvas","getPeerId","getAttribute","selectByPeerId","createDelayedCallback","ms","timeout","cancelDelayedCallbacks","toggleStoriesHidden","isDense","handleSavedStories","profileTab","handleArchivedStories","handleOpenProfile","handleArchivePeer","StoryRibbonButton","isRibbonShown","isArchivedRibbonShown","isForumPanelOpen","selectIsForumPanelOpen","canShow","toggleStoryRibbon","PREVIEW_AVATAR_COUNT","isRead","preloadPeerIds","useShowTransition","withShouldRender","headerRight","lastToggleAvatar","firstToggleAvatar","lastId","toggleAvatar","zIndex","toScale","fromScale","togglerStyles","headerBottom","withStorySolid","forceFriendStorySolid","ArchivedChats","archiveSettings","isStoryRibbonShown","onTopicSearch","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","shouldHideSearch","prevShouldHideSearch","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelVisible","shouldRenderStoryRibbon","storyRibbonClassNames","isStoryRibbonClosing","StoryToggler","folderType","isMainList","ForumPanel","onOpenAnimationStart","folderOrderedIds","editChatFolders","initialSelectedFolderIds","selectedFolderIds","setSelectedFolderIds","idsToRemove","idsToAdd","MuteDuration","muteUntilOption","setMuteUntilOption","Forever","updateChatMutedState","updateTopicMutedState","muteForOptions","OneHour","FourHours","EightHours","OneDay","ThreeDays","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","threadInfo","selectThreadInfo","isMessageThread","isCommentsInfo","fromChannelId","canSendStickers","canScheduleUntilOnline","selectCanScheduleUntilOnline","shouldSchedule","selectShouldSchedule","StickerSetModal","prevStickerSet","renderingStickerSet","isAdded","requestCalendar","calendar","useSchedule","isScheduleRequested","isPreloadedGlobally","scheduledAt","handleCopyLink","suffix","renderHeader","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","CustomEmojiSetsModal","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","sets","teactFastList","customEmojiSet","setCard","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","isMainThread","currentChatId","currentThreadId","canReportChat","canGift","selectCanGift","canCreateTopic","isUserRightBanned","canEditTopic","getCanManageTopic","canManage","selectCanManage","selectCanTranslateChat","isTranslationDisabled","savedDialog","getIsSavedDialog","isTopic","isForumAsMessages","canDeleteChat","getCanDeleteChat","botCommands","commands","botPrivacyPolicyUrl","privacyPolicyUrl","isChatInfoShown","isRightColumnShown","selectIsRightColumnShown","isBot","HeaderMenuContainer","withExtraActions","withForumActions","canStartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","canViewMonetization","canViewBoosts","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","canShowBoostModal","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","openFrozenAccountModal","requestMasterAndRequestCall","toggleStatistics","openMonetizationStatistics","openBoostStatistics","openGiftModal","openThreadWithInfo","openCreateTopicPanel","openEditTopicPanel","toggleManagement","togglePeerTranslations","setViewForumAsMessages","openBoostModal","setIsMenuOpen","shouldCloseFast","setShouldCloseFast","setIsDeleteModalOpen","setIsMuteModalOpen","isViewGroupInfoShown","areAllGiftsDisallowed","closeMenu","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleUnmuteClick","handleMuteClick","handleCreateTopicClick","handleEditClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftClick","forUserId","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleMonetizationClick","handleBoostClick","handleEnableTranslations","handleSelectMessages","handleOpenAsMessages","handleBlock","handleUnblock","botButtons","commandButtons","cmd","hasPrivacyCommand","deleteTitle","MenuSeparator","DeleteChatModal","isSavedDialog","MiddleSearchResult","senderPeer","messageChat","shouldShowChat","hiddenForwardTitle","hiddenUserName","senderName","getMessageSenderName","topRow","LastMessageMeta","meta","MessageSummary","truncateLength","CHANNELS_PEER","titleKey","RESULT_ITEM_CLASS_NAME","runDebouncedForSearch","requestedQuery","savedTag","fetchingQuery","isHashtag","selectCurrentMiddleSearch","lastSearchQuery","savedTags","savedReactionTags","isHistoryCalendarOpen","isHashtagQuery","searchType","MiddleSearch","updateMiddleSearch","resetMiddleSearch","performMiddleSearch","closeMiddleSearch","openHistoryCalendar","loadSavedReactionTags","shouldCancelSearchRef","focusedIndex","setFocusedIndex","canFocusNewer","canFocusOlder","isFullyHidden","setIsFullyHidden","hiddenTimerRef","maybeLongPressActiveRef","isFocused","markFocused","markBlurred","isViewAsList","setIsViewAsList","refs","handleClickOutside","useClickOutside","hasResultsContainer","isOnlyHash","areResultsEmpty","hasResultsDropdown","hasQueryData","hasNavigationButtons","focusInput","blurInput","blur","visualViewport","mainEl","pageTop","requestNextMutation","prevIsCalendarOpen","savedTagsArray","hasSavedTags","areSavedTagsDisabled","handleQueryChange","newQuery","removeListeners","fastRaf","viewportResults","searchResultKey","originalSender","ANONYMOUS_USER_ID","selectForwardedSender","handleMessageClick","getSearchResultKey","handleTriggerViewStyle","foundResult","updateSearchParams","activateSearchTag","tag","removeSearchSavedTag","handleDeleteTag","handleChangeSearchType","handleFocusOlder","newFocusIndex","handleFocusNewer","renderTypeTag","isForTag","selectedType","renderDropdown","dropdown","dropdownHidden","separator","wrap","isChosen","SavedTagButton","withCount","searchTypes","teactOrderKey","focused","mobile","withDropdown","adaptSearchBorders","canClose","resultsItemSelector","hasUpButton","hasDownButton","onStartBackspace","withBackIcon","onUpClick","onDownClick","searchTags","savedSearchTag","icons","getDayStartAt","counter","viewStyle","mobileNavigation","navigationButton","navigationDisabled","recent","favorite","effect","chatStickerSetId","effectStickers","effectEmojis","recentStickers","selectShouldLoopStickers","StickerPicker","isForEffects","loadRecentStickers","addRecentSticker","unfaveSticker","faveSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","effectSets","existingAddedSetIds","shouldRenderContents","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleMouseMove","handleRemoveRecentSticker","CHAT_STICKER_SET_ID","maxUniqueReactions","enabledReactions","reactionsLimit","ReactionPickerLimited","isTouchScreen","currentReactions","shouldUseCurrentReactions","allAvailableReactions","reactionsToSort","sortReactions","allowed","pickerHeight","pickerWidth","gapWidth","itemsInRow","pickerMaxHeight","REACTION_SELECTOR_WIDTH","availableEffectById","storyPeerId","sendAsMessage","areSomeReactionsAllowed","areAllReactionsAllowed","areCustomAllowed","shouldUseFullPicker","isForbidden","ReactionPicker","toggleReaction","closeReactionPicker","saveEffectInDraft","requestEffectInComposer","addLocalPaidReaction","openPaidReactionModal","renderedMessageId","renderedChatId","renderedStoryPeerId","renderedStoryId","storedPosition","renderingPosition","deltaX","FULL_PICKER_SHIFT_DELTA","handleToggleCustomReaction","shouldAddToRecent","handleToggleReaction","handleReactionContextMenu","handleStoryReactionSelect","customEmojiMessage","parseHtmlAsFormattedText","buildCustomEmojiHtml","isReaction","availableEffects","effectId","effectStickerId","chosenOrder","backdropExcludedSelector","div","BLUR_CANVAS_SIZE","AttachmentModalItem","attachment","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","extension","getFileExtension","previewData","shouldSkipGrouping","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","isFullyVisible","isHorizontal","viewportY1","viewportY2","y2","findInViewport","selectorOrElements","shouldContainBottom","allElements","visibleIndexes","isFound","setTooltipItemVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","handleArrowKey","handleItemSelect","altKey","metaKey","shiftKey","isSelectionOutOfRange","onUp","onDown","onTab","MentionTooltip","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","selectedMentionIndex","prevChatMembers","renderedChatMembers","ATTACHMENT_MODAL_INPUT_ID","recentEmojis","attachmentSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","keywords","customEmojiForEmoji","forEmoji","captionLimit","AttachmentModal","attachments","getHtml","editingMessage","canShowCustomSendMenu","isForMessage","shouldSuggestCompression","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","forceDarkTheme","onAttachmentsUpdate","onCaptionUpdate","onSend","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","canSchedule","onSendWhenOnline","svgRef","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isEditing","groupedId","notEditingFile","getAttachmentMediaType","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","setShouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","isInvertedMedia","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","setIsInvertedMedia","removeAllSelections","isCustomSendMenuOpen","sendAttachments","shouldSendScheduled","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleDisableSpoilers","handleToggleSpoiler","svg","baseVal","leftChars","leftCharsBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","hasAnySpoilerable","isMultiple","canInvertMedia","attachmentsLength","isBottomDividerShown","buttonSendCaption","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","rx","uniqueId","EmojiTooltip","CustomEmojiTooltip","SymbolMenuButton","isAttachmentModal","canSendPlainText","MessageInput","isAttachmentModalInput","customEmojiPrefix","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","CustomSendMenu","onSendSchedule","PollModal","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","handleSolutionChange","addNewOption","newOptions","behavior","handleCreate","isNoCorrectOptionError","answers","correct","questionTrimmed","substring","optionsTrimmed","o","summary","multipleChoice","quiz","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","EmojiButton","native","IS_PACKAGED_ELECTRON","BASE_URL","image","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","EMOJI_MARGIN","EMOJI_VERTICAL_MARGIN","EMOJI_VERTICAL_MARGIN_MOBILE","MOBILE_CONTAINER_PADDING","EmojiCategory","category","allEmojis","emojisPerRow","displayedEmoji","ICONS_BY_CATEGORY","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","EmojiPicker","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","allCategories","themeCategories","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","GifButton","gif","onUnsaveClick","hasVideoPreview","getVideoMediaHash","withThumb","videoHash","getVideoPreviewMediaHash","videoData","shouldRenderVideo","isVideoReady","handleUnsaveClick","handleContextDelete","gifs","saved","GifPicker","canSendGifs","onGifSelect","loadSavedGifs","saveGif","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","GIFs","SYMBOL_MENU_TAB_ICONS","SymbolMenuFooter","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","isBackgroundTranslucent","SymbolMenu","isMessageComposer","menuPositionOptions","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","recentEmojisRef","recentCustomEmojisRef","handleCustomEmojiSelect","canUpdateStickerSetsOrder","isFrom","mobileClassName","onMouseEnter","ChatCommand","withAvatar","freezeWhenClosed","ChatCommandTooltip","quickReplies","quickReplyMessages","self","sendQuickReply","handleSendCommand","handleSendQuickReply","quickReplyId","quickRepliesWithDescription","reply","topMessageId","shortcut","handleKeyboardSelect","selectedCommandIndex","isEmpty","BotCommandMenu","botCommand","StickerTooltip","prevStickers","displayedStickers","clearCustomEmojiForEmoji","ce","emojiButton","COMPOSER_EMOJI_SIZE_PICKER","isOpenToBottom","onRemoveEffect","withEffects","hasCurrentEffect","effectReactions","onToggleReaction","isInSavedMessages","isInStoryViewer","openEffectPicker","displayScheduleUntilOnline","setDisplayScheduleUntilOnline","areItemsHidden","hideItems","showItems","markIsReady","unmarkIsReady","handleOpenMessageEffectsPicker","ReactionSelector","onShowMore","TEXT_FORMAT_BY_TAG_NAME","B","STRONG","I","EM","U","DEL","CODE","SPAN","fragmentEl","TextFormatter","anchorPosition","selectedRange","setSelectedRange","linkUrlInputRef","isLinkControlOpen","openLinkControl","closeLinkControl","setLinkUrl","isEditingLink","setIsEditingLink","inputClassName","setInputClassName","selectedTextFormats","setSelectedTextFormats","useVirtualBackdrop","selectedFormats","parentElement","commonAncestorContainer","EDITABLE_INPUT_ID","textFormat","tagName","restoreSelection","selection","getSelection","removeAllRanges","addRange","updateSelectedRange","getRangeAt","getSelectedText","shouldDropCustomEmoji","replaceChildren","cloneContents","INPUT_CUSTOM_EMOJI_SELECTOR","getSelectedElement","updateInputStyles","scrollWidth","getFormatButtonClassName","fKey","monospace","strikethrough","handleSpoilerText","spoiler","entityType","ApiMessageEntityTypes","Spoiler","execCommand","handleBoldText","handleItalicText","italic","handleUnderlineText","underline","handleStrikethroughText","handleMonospaceText","handleLinkUrlConfirm","formattedLinkUrl","encodeURI","u","m","p","getKeyFromEvent","linkUrlConfirmClassName","autoComplete","CustomEmojiButton","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","prevSelectedIndex","setItemVisible","BaseResult","thumbnailDataUrl","getWebDocumentHash","decoding","ArticleResult","inlineResult","webThumbnail","GifResult","_gif","MediaResult","isForGallery","thumbnailBlobUrl","getPhotoMediaHash","StickerResult","STICKER_SIZE_INLINE_BOT_RESULT","InlineBotTooltip","isGallery","inlineBotResults","switchPm","switchWebview","onSelectResult","startBot","requestSimpleWebView","renderedIsGallery","handleSendPm","param","handleOpenWebview","isFromSwitchWebView","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","SendAsMenu","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","avatarClassName","noFake","membersCount","StickerSetResult","areStickersLoaded","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","StickerSearch","loadFeaturedStickers","selectCurrentGifSearch","canPostInChat","GifSearch","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","postStatistic","StatisticsRecentMessage","toggleMessageStatistics","StatisticsRecentPostMeta","forceUnreadStorySolid","toggleStoryStatistics","imgBlobUrl","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","reactionsByEmotionGraph","storyInteractionsGraph","storyReactionsByEmotionGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","statistics","selectStatistics","dcId","statisticsDcId","messagesById","storiesById","Statistics","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","isPercentage","ensureLovelyChart","zoomToken","create","zoomOutLabel","StatisticsOverview","recentPosts","StatisticsRecentStory","StatisticsMessagePublicForward","openChatByUsername","GRAPH_TITLES","viewsGraph","reactionsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","loadMessagePublicForwards","publicForwards","publicForwardsData","STATISTICS_PUBLIC_FORWARDS_LIMIT","currentStory","loadStoryStatistics","loadStoryPublicForwards","StatisticsStoryPublicForward","answer","voters","offsets","pollResults","PollAnswerResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","ShowMoreButton","renderViewMoreButton","poll","selectPollFromMessage","PollResults","resultsByOption","buildCollectionByKey","ICON_SIZE","createTopicPanel","CreateTopic","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","getTopicColors","handleCreateTopic","iconColor","dummyTopic","noLoopLimit","editTopicPanel","EditTopic","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","ERROR_NAME_MISSING","management","ManageBot","setBotInfo","uploadContactProfilePhoto","startBotFatherConversation","isFieldTouched","markFieldTouched","unmarkProfileTouched","isAvatarTouched","markAvatarTouched","unmarkAvatarTouched","currentName","setName","ManagementProgress","handleNameChange","trimmedName","handleChangeEditIntro","handleChangeEditCommands","handleChangeSettings","isSuggestRef","handleSelectAvatar","isSuggest","CHANNEL_TITLE_EMPTY","canChangeInfo","canInvite","exportedInvites","ManageChannel","onScreenSelect","updateChat","closeManagement","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","currentTitle","currentAbout","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isRevoked","adminsCount","removedUsersCount","kickedMembers","handleClickEditType","ManagementScreens","ChatPrivacyType","handleClickDiscussion","Discussion","handleClickReactions","Reactions","handleClickAdministrators","ChatAdministrators","handleClickInvites","Invites","handleClickRequests","JoinRequests","handleSetPhoto","handleAboutChange","handleUpdateChannel","trimmedTitle","trimmedAbout","handleClickSubscribers","ChannelSubscribers","handleRemovedUsersClick","ChannelRemovedUsers","handleDeleteChannel","chatReactionsDescription","enabledLength","totalLength","isChannelPublic","joinRequests","ManageChatAdministrators","onChatMemberSelect","toggleSignatures","areSignaturesEnabled","areSignaturesShown","areProfilesEnabled","areProfilesShown","canAddNewAdmins","canToggleSignatures","adminMembers","admins","isOwner","handleAdminMemberClick","promotedByUserId","ChatAdminRights","handleToggleSignatures","handleToggleProfiles","handleAddAdminClick","GroupAddAdmins","getMemberStatus","promotedByUser","selectManagement","maxPublicLinks","privateInviteLink","inviteLink","ManageChatPrivacyType","updatePublicLink","updatePrivateLink","toggleIsProtected","resetManagementError","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","shouldDisableUsernames","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","chatMembers","RemoveGroupUserModal","loadMoreMembers","usersId","availableMemberIds","canDeleteMembers","removedMembers","ManageChatRemovedUsers","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","forDiscussionIds","linkedChat","ManageDiscussion","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","Initial","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","handleNewGroupClick","NewDiscussionGroup","DiscussionGroups","STICKER_SIZE_DISCUSSION_GROUPS","withPrimaryColor","linkedGroup","renderLinkGroupHeader","renderLinkGroupConfirmText","GROUP_TITLE_EMPTY","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","limitReachedModal","hasLinkedChannel","isBasicGroup","canEditForum","isChannelsPremiumLimitReached","ManageGroup","togglePreHistoryHidden","deleteChat","toggleForum","isForumEnabled","setIsForumEnabled","isPublicGroup","isPreHistoryHiddenCheckboxRef","handleClickPermissions","GroupPermissions","handleUpdateGroup","handleClickMembers","GroupMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","newIsForumEnabled","checkbox","enabledPermissionsCount","handleDeleteGroup","isForForum","isPromotedByCurrentUser","isFormFullyDisabled","defaultRights","adminRights","hasFullInfo","ManageGroupAdminRights","isNewAdmin","selectedUserId","updateChatAdmin","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedChatMember","selectedAdminMember","handleSavePermissions","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","postStories","editStories","deleteStories","banUsers","addAdmins","manageCall","anonymous","areParticipantsHidden","hiddenMembersMinCount","canHideParticipants","canAddMembers","globalUserIds","ManageGroupMembers","noAdmins","toggleParticipantsHidden","setNewChatMembersDialogState","deletingUserId","setDeletingUserId","adminIds","usePeerStoriesPolling","shouldUseSearchResults","listedIds","ChatNewAdminRights","handleDeleteMembersModalClose","handleToggleParticipantsHidden","handleNewMemberDialogOpen","newChatMembersProgress","NewChatMembersProgress","memberId","DeleteMemberModal","arePaidMessagesAvailable","groupPeersPaidStars","ManageGroupPermissions","updateChatDefaultBannedRights","updatePaidMessagesPrice","GroupRemovedUsers","handleAddExceptionClick","GroupUserPermissionsCreate","handleExceptionMemberClick","GroupUserPermissions","isPriceForMessagesChanged","markPriceForMessagesChanged","unmarkPriceForMessagesChanged","isPriceForMessagesOpen","setIsPriceForMessagesOpen","handleUpdatePaidMessagesPrice","handleUpdatePermissions","exceptionMembers","getMemberExceptions","getLangKeyForBannedRightKey","translatedString","handleChargeStarsForMessages","arePermissionsChanged","arePermissionsLoading","ManageGroupUserPermissions","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","handleBanFromGroup","viewMessages","ManageGroupUserPermissionsCreate","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","ManageInvite","editExportedChatInvite","exportChatInvite","setIsRequestNeeded","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","usageLimit","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleSaveClick","formatFullDate","n","importers","requesters","ManageInviteInfo","loadChatInviteImporters","loadChatInviteRequesters","usage","adminId","renderImporters","importer","joinTime","isFromChatList","renderRequesters","requester","BULLET","inviteComparator","i1","i2","isPermanent","i1IsPermanent","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","ManageInvites","setEditingExportedInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","temporalInvites","revokeInvite","askToRevoke","handleCreateNewClick","EditInvite","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","InviteInfo","deleteInvite","askToDelete","copyLink","prepareUsageText","requested","formatCountdown","getInviteIconClass","prepareContextActions","editInvite","Invite","STICKER_SIZE_INVITES","JoinRequest","hideChatJoinRequest","createClassNameBuilder","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","ManageJoinRequests","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","MAX_UNIQUE_REACTIONS","ManageReactions","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","localReactionsLimit","setLocalReactionsLimit","reactionsOptions","handleSaveReactions","availableActiveReactions","localAllowedReactions","enabledAllowedReactions","localReaction","enabledReaction","handleReactionsOptionChange","handleReactionChange","local","handleReactionsLimitChange","renderReactionsMaxCountValue","shouldShowReactionsLimit","isCenteredLayout","notPersonalPhoto","ManageUser","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","isNotificationsEnabled","setIsNotificationsEnabled","handleNotificationChange","handleDeleteContact","handleSuggestPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","canSetPersonalPhoto","noEmojiStatus","withFullInfo","noPersonalPhoto","trimStart","discussionChannelId","managementType","selectCurrentManagementType","Management","GroupRecentActions","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","Checkout","invoice","shippingPrices","checkoutInfo","totalPrice","onAcceptTos","needAddress","hasShippingOptions","savedCredentials","isPaymentFormUrl","setPaymentStep","isInteractive","termsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","useMediaTransition","handleTipsClick","tips","handlePaymentMethodClick","PaymentStep","SavedPayments","PaymentInfo","handleShippingAddressClick","ShippingInfo","handleShippingMethodClick","Shipping","checkoutPicture","forceAspectRatio","checkoutTitle","checkoutDescription","priceInfo","prices","renderPaymentItem","priceInfoItem","priceInfoItemTitle","tipsList","tip","tipsItem","tipsItem_active","shouldOmitFractions","invoiceInfo","renderCheckoutItem","provider","langStringSplit","renderTosLink","tosCheckbox","priceInfoItemMain","checkoutInfoItemInfoTitle","checkoutInfoItemInfoData","ConfirmPayment","noRedirect","onPaymentFormSubmit","messageKey","form","PasswordConfirm","onPasswordChange","clearPaymentError","cardName","onInputChange","useFocusAfterAnimation","animationDuration","CardInput","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","ExpiryInput","endsWith","formatCardExpiry","canSaveCredentials","needCardholderName","needCountry","needZip","selectCountryRef","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleCountryChange","handleBillingPostCodeChange","handleChangeSaveCredentials","Select","hasArrow","SavedPaymentCredentials","onNewCardClick","shippingOptions","handleShippingSelect","needEmail","needPhone","needName","phoneRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","confirmPaymentUrl","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","nativeParams","nativeProvider","providerName","isProviderError","smartGlocalToken","stripeId","passwordValidUntil","validUntil","PaymentModal","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","setSmartGlocalCardInfo","paymentState","paymentDispatch","twoFaPassword","setTwoFaPassword","prevStep","prevRequestId","canRenderFooter","setStep","nextStep","field","savedInfo","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","sendForm","shippingOptionId","handlePaymentFormSubmit","credentials","validateRequest","requestInfo","getRequestInfo","sendCredentials","expiryMonth","expiryYear","zip","getCredentials","ConfirmPassword","shouldFillRequestedData","isEmailRequested","isPhoneRequested","isNameRequested","isShippingAddressRequested","modalHeader","isSubmitDisabled","getIsSubmitDisabled","isRecurring","cleanupOnlyKey","currentStep","isPasswordMissing","isEmailSentToProvider","isPhoneSentToProvider","renderModalContent","descriptionKey","renderError","optionId","receipt","ReceiptModal","prevReceipt","renderingReceipt","fullAddress","credentialsTitle","totalAmount","InviteViaLinkModal","sendInviteMessages","closeInviteViaLinkModal","missingUsers","setSelectedMemberIds","unselectableIds","selectableIds","requirePremiumIds","regularIds","isRequiringPremiumToMessage","invitableWithPremiumIds","isRequiringPremiumToInvite","isEveryPremiumBlocksPm","topListPeers","handleSendInviteLink","canSendInviteLink","inviteSectionText","premiumSectionText","hasPremiumSection","hasSelectableSection","lockedUnselectedSubtitle","OneTimeMediaModal","closeOneTimeMediaModal","handlePlayVoice","isOwn","isOwnMessage","closeBtnTitle","voice","OneTimeModal","RoundVideo","onStop","renderMedia","WebAppsCloseConfirmationModal","closeWebAppsCloseConfirmationModal","shouldSkipInFuture","setShouldSkipInFuture","shouldSkipConfirmation","handleSelectWithEnter","freezeUntilDate","freezeAppealUrl","botFreezeAppeal","botFreezeAppealId","botFreezeAppealUsername","FrozenAccountModal","closeFrozenAccountModal","handleAppeal","BannedDuck","botLink","headerAvatarPeer","withBalanceBar","avatarPeer","avatarWebPhoto","clickable","webPhoto","badge"],"sourceRoot":""}