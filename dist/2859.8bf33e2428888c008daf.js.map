{"version":3,"file":"2859.8bf33e2428888c008daf.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/reducers/calls.ts"],"sourcesContent":["import type { ApiGroupCall } from '../../../api/types';\nimport type { CallSound } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\n\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport safePlay from '../../../util/safePlay';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectChatFullInfo, selectIsCurrentUserFrozen,\n  selectTabState, selectUser,\n} from '../../selectors';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line @stylistic/max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestNextMutation(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nfunction requestGroupCallParticipants(\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  return callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let inviteLink = selectChatFullInfo(global, chat.id)?.inviteLink;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: {\n      key: 'LinkCopied',\n    },\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.oldTranslate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) {\n    actions.showNotification({\n      message: 'Sorry, your browser doesn\\'t support group calls',\n      tabId,\n    });\n    return;\n  }\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall && groupCall.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash) && chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (!chat) return;\n\n    await loadFullChat(global, actions, chat);\n    global = getGlobal();\n    groupCall = selectChatGroupCall(global, chatId);\n  } else if (!groupCall && id && accessHash) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload;\n\n  if (!sounds?.[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void requestGroupCallParticipants(groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', (global, actions, payload): ActionReturnType => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.oldTranslate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          stream.getTracks().forEach((track) => track.stop());\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.oldTranslate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      } else {\n        stream.getTracks().forEach((track) => track.stop());\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type {\n  ApiChat, ApiChatFolder, ApiChatlistExportedInvite,\n  ApiChatMember, ApiError, ApiMissingInvitedUser,\n  ApiTopic,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport {\n  ChatCreationProgress,\n  type ChatListType,\n  ManagementProgress,\n  NewChatMembersProgress,\n  SettingsScreens,\n  type ThreadId,\n} from '../../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVED_FOLDER_ID,\n  CHAT_LIST_LOAD_SLICE,\n  DEBUG,\n  GLOBAL_SUGGESTED_CHANNELS_ID,\n  MAX_INT_32,\n  RE_TG_LINK,\n  SAVED_FOLDER_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TME_WEB_DOMAINS,\n  TMP_CHAT_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n} from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatShareText, processDeepLink } from '../../../util/deeplink';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omit, pick, unique,\n} from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addChatMembers,\n  addChats,\n  addMessages,\n  addNotifyExceptions,\n  addSimilarBots,\n  addUsers,\n  addUserStatuses,\n  deleteChatMessages,\n  deletePeerPhoto,\n  deleteTopic,\n  leaveChat,\n  removeChatFromChatLists,\n  replaceChatFullInfo,\n  replaceChatListIds,\n  replaceChatListLoadingParameters,\n  replaceMessages,\n  replaceNotifyExceptions,\n  replaceSimilarChannels,\n  replaceThreadParam,\n  replaceUserStatuses,\n  toggleSimilarChannels,\n  updateChat,\n  updateChatFullInfo,\n  updateChatLastMessageId,\n  updateChatListSecondaryInfo,\n  updateChats,\n  updateChatsLastMessageId,\n  updateListedTopicIds,\n  updateManagementProgress,\n  updateMissingInvitedUsers,\n  updatePeerFullInfo,\n  updateThread,\n  updateThreadInfo,\n  updateTopic,\n  updateTopics,\n  updateUser,\n  updateUsers,\n} from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatByUsername,\n  selectChatFolder,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatListLoadingParameters,\n  selectChatListType,\n  selectChatMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsChatPinned,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectLastServiceNotification,\n  selectPeer,\n  selectSimilarChannelIds,\n  selectStickerSet,\n  selectSupportChat,\n  selectTabState,\n  selectThread,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectTopicsInfo,\n  selectUser,\n  selectUserByPhoneNumber,\n} from '../../selectors';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { selectCurrentLimit } from '../../selectors/limits';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst CHATLIST_LIMIT_ERROR_LIST = new Set([\n  'FILTERS_TOO_MUCH',\n  'CHATLISTS_TOO_MUCH',\n  'INVITES_TOO_MUCH',\n]);\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\nfunction abortChatRequests(chatId: string, threadId?: ThreadId) {\n  callApi('abortChatRequests', { chatId, threadId });\n}\n\nfunction abortChatRequestsForCurrentChat<T extends GlobalState>(\n  global: T, newChatId?: string, newThreadId?: ThreadId,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const currentChatId = currentMessageList?.chatId;\n  const currentThreadId = currentMessageList?.threadId;\n\n  if (currentChatId && (currentChatId !== newChatId || currentThreadId !== newThreadId)) {\n    const [isChatOpened, isThreadOpened] = Object.values(global.byTabId)\n      .reduce(([accHasChatOpened, accHasThreadOpened], { id: otherTabId }) => {\n        if (otherTabId === tabId || (accHasChatOpened && accHasThreadOpened)) {\n          return [accHasChatOpened, accHasThreadOpened];\n        }\n\n        const otherMessageList = selectCurrentMessageList(global, otherTabId);\n        const isSameChat = otherMessageList?.chatId === currentChatId;\n        const isSameThread = isSameChat && otherMessageList?.threadId === currentThreadId;\n\n        return [accHasChatOpened || isSameChat, accHasThreadOpened || isSameThread];\n      }, [currentChatId === newChatId, false]);\n\n    const shouldAbortChatRequests = !isChatOpened || !isThreadOpened;\n\n    if (shouldAbortChatRequests) {\n      abortChatRequests(currentChatId, isChatOpened ? currentThreadId : undefined);\n    }\n  }\n}\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, type, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  actions.processOpenChatOrThread({\n    chatId: id,\n    type,\n    threadId: MAIN_THREAD_ID,\n    noForumTopicPanel,\n    shouldReplaceHistory,\n    shouldReplaceLast,\n    tabId,\n  });\n\n  abortChatRequestsForCurrentChat(global, id, MAIN_THREAD_ID, tabId);\n\n  if (!id || id === TMP_CHAT_ID) {\n    return;\n  }\n\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.markChatRead({ id });\n  }\n\n  const isChatOnlySummary = !selectChatLastMessageId(global, id);\n\n  if (!chat) {\n    if (selectIsChatWithSelf(global, id)) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatOnlySummary && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  actions.setWorkspaceSelectedItemId(undefined);\n  actions.closeWebContentsView();\n});\n\naddActionHandler('openSavedDialog', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId(), ...otherParams } = payload;\n\n  actions.openThread({\n    chatId: global.currentUserId!,\n    threadId: chatId,\n    tabId,\n    ...otherParams,\n  });\n});\n\naddActionHandler('openThread', async (global, actions, payload): Promise<void> => {\n  const {\n    type, isComments, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    focusMessageId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { chatId } = payload;\n  let threadId: ThreadId | undefined;\n  let loadingChatId: string;\n  let loadingThreadId: ThreadId;\n\n  if (!isComments) {\n    loadingChatId = payload.chatId;\n    threadId = payload.threadId;\n    loadingThreadId = threadId;\n\n    const originalChat = selectChat(global, loadingChatId);\n    if (threadId === MAIN_THREAD_ID) {\n      actions.openChat({\n        id: chatId,\n        type,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    } else if (originalChat?.isForum || (chatId && getIsSavedDialog(chatId, threadId, global.currentUserId))) {\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    }\n  } else {\n    const { originChannelId, originMessageId } = payload;\n\n    loadingChatId = originChannelId;\n    loadingThreadId = originMessageId;\n  }\n\n  const chat = selectChat(global, loadingChatId);\n  const threadInfo = selectThreadInfo(global, loadingChatId, loadingThreadId);\n  const thread = selectThread(global, loadingChatId, loadingThreadId);\n  if (!chat) return;\n\n  abortChatRequestsForCurrentChat(global, loadingChatId, loadingThreadId, tabId);\n\n  if (chatId\n    && threadInfo?.threadId\n    && (isComments || (thread?.listedIds?.length && thread.listedIds.includes(Number(threadInfo.threadId))))) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadInfo.threadId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n      tabId,\n    });\n    return;\n  }\n\n  let { loadingThread } = selectTabState(global, tabId);\n  if (loadingThread) {\n    abortChatRequests(loadingThread.loadingChatId, loadingThread.loadingMessageId);\n  }\n\n  global = updateTabState(global, {\n    loadingThread: {\n      loadingChatId,\n      loadingMessageId: Number(loadingThreadId),\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const openPreviousChat = () => {\n    const currentGlobal = getGlobal();\n    if (isComments\n      || selectCurrentMessageList(currentGlobal, tabId)?.chatId !== loadingChatId\n      || selectCurrentMessageList(currentGlobal, tabId)?.threadId !== loadingThreadId) {\n      return;\n    }\n    actions.openPreviousChat({ tabId });\n  };\n\n  if (!isComments) {\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadId!,\n      tabId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n    });\n  }\n\n  const result = selectIsCurrentUserFrozen(global) ? undefined\n    : await callApi('fetchDiscussionMessage', {\n      chat: selectChat(global, loadingChatId)!,\n      messageId: Number(loadingThreadId),\n    });\n\n  global = getGlobal();\n  loadingThread = selectTabState(global, tabId).loadingThread;\n  if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n    openPreviousChat();\n    return;\n  }\n\n  if (!result) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n\n    actions.showNotification({\n      message: langProvider.oldTranslate(isComments ? 'ChannelPostDeleted' : 'lng_message_not_found'),\n      tabId,\n    });\n\n    openPreviousChat();\n    return;\n  }\n\n  threadId ??= result.threadId;\n  chatId ??= result.chatId;\n\n  if (!chatId) {\n    openPreviousChat();\n    return;\n  }\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  if (isComments) {\n    global = updateThreadInfo(global, loadingChatId, loadingThreadId, {\n      threadId,\n    });\n\n    global = updateThreadInfo(global, chatId, threadId, {\n      isCommentsInfo: false,\n      threadId,\n      chatId,\n      fromChannelId: loadingChatId,\n      fromMessageId: loadingThreadId,\n      ...(threadInfo\n        && pick(threadInfo, ['messagesCount', 'lastMessageId', 'lastReadInboxMessageId', 'recentReplierIds'])),\n    });\n  }\n  global = updateThread(global, chatId, threadId, {\n    firstMessageId: result.firstMessageId,\n  });\n  setGlobal(global);\n\n  if (focusMessageId) {\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: focusMessageId,\n      tabId,\n    });\n  }\n\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    onError: () => {\n      global = getGlobal();\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.showNotification({\n        message: langProvider.oldTranslate('Group.ErrorAccessDenied'),\n        tabId,\n      });\n    },\n    onLoaded: () => {\n      global = getGlobal();\n      loadingThread = selectTabState(global, tabId).loadingThread;\n      if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n        return;\n      }\n\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId,\n        tabId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n      });\n    },\n  });\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const { whenFirstBatchDone } = payload;\n  const listType = payload.listType;\n  let isCallbackFired = false;\n  let i = 0;\n\n  while (!global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    await loadChats(\n      listType,\n      true,\n    );\n\n    if (!isCallbackFired) {\n      await whenFirstBatchDone?.();\n      isCallbackFired = true;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadPinnedDialogs', async (global, actions, payload): Promise<void> => {\n  const {\n    listType,\n  } = payload;\n\n  const result = await callApi('fetchPinnedDialogs', { listType });\n  if (!result) return;\n\n  const { dialogIds, messages, chats, users } = result;\n\n  global = getGlobal();\n  global = updateChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceMessages(global, messages);\n\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      orderedPinnedIds: {\n        ...global.chats.orderedPinnedIds,\n        [listType]: dialogIds.length ? dialogIds : undefined,\n      },\n    },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, force, withPhotos,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const loadChat = async () => {\n    await loadFullChat(global, actions, chat);\n    if (withPhotos) {\n      actions.loadMoreProfilePhotos({ peerId: chatId, shouldInvalidateCache: true });\n    }\n  };\n\n  if (force) {\n    void loadChat();\n  } else {\n    runDebouncedForLoadFullChat(loadChat);\n  }\n});\n\naddActionHandler('invalidateFullInfo', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n\n  const isUser = isUserId(peerId);\n\n  if (isUser) {\n    return {\n      ...global,\n      users: {\n        ...global.users,\n        fullInfoById: omit(global.users.fullInfoById, [peerId]),\n      },\n    };\n  }\n\n  return {\n    ...global,\n    chats: {\n      ...global.chats,\n      fullInfoById: omit(global.chats.fullInfoById, [peerId]),\n    },\n  };\n});\n\naddActionHandler('loadTopChats', (): ActionReturnType => {\n  runThrottledForLoadTopChats(() => {\n    loadChats('active', undefined, true);\n    loadChats('archived', undefined, true);\n  });\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('requestSavedDialogUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat,\n    isSavedDialog: true,\n    limit: 1,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addMessages(global, result.messages);\n\n  if (result.messages.length) {\n    global = updateChatLastMessageId(global, chatId, result.messages[0].id, 'saved');\n    global = addChatListIds(global, 'saved', [chatId]);\n\n    setGlobal(global);\n  } else {\n    global = removeChatFromChatLists(global, chatId, 'saved');\n\n    setGlobal(global);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      const currentMessageList = selectCurrentMessageList(global, tabId);\n      if (!currentMessageList) return;\n      const { chatId: tabChatId, threadId } = currentMessageList;\n\n      if (selectIsChatWithSelf(global, tabChatId) && threadId === chatId) {\n        actions.openChat({ id: undefined, tabId });\n      }\n    });\n  }\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, isMuted } = payload;\n  let { mutedUntil } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId: getCurrentTabId() });\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n  if (isMuted && !mutedUntil) {\n    mutedUntil = MAX_INT_32;\n  }\n\n  void callApi('updateChatNotifySettings', { chat, settings: { mutedUntil } });\n});\n\naddActionHandler('updateChatSilentPosting', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatNotifySettings', { chat, settings: { isSilentPosting: isEnabled } });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isMuted, mutedUntil,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted, mutedUntil,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, discussionChannelId, tabId = getCurrentTabId(),\n  } = payload;\n  const isChannel = 'isChannel' in payload ? payload.isChannel : undefined;\n  const isSuperGroup = 'isSuperGroup' in payload ? payload.isSuperGroup : undefined;\n\n  const users = memberIds?.map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n  let missingInvitedUsers: ApiMissingInvitedUser[] | undefined;\n  try {\n    const result = await callApi('createChannel', {\n      title,\n      about,\n      users,\n      isBroadcast: isChannel,\n      isMegagroup: isSuperGroup,\n    });\n    createdChannel = result?.channel;\n    missingInvitedUsers = result?.missingUsers;\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  if (discussionChannelId && channelId) {\n    actions.linkDiscussionGroup({\n      channelId: discussionChannelId,\n      chatId: channelId,\n      tabId,\n    });\n  }\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (missingInvitedUsers) {\n    global = getGlobal();\n    global = updateMissingInvitedUsers(global, channelId, missingInvitedUsers, tabId);\n    setGlobal(global);\n  }\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, userId, shouldRevokeHistory, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user, shouldRevokeHistory });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    await callApi('leaveChannel', { channelId, accessHash });\n    global = getGlobal();\n    const chatMessages = selectChatMessages(global, chatId);\n    const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n    global = deleteChatMessages(global, chatId, localMessageIds);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds)\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const { chat: createdChat, missingUsers } = await callApi('createGroupChat', {\n      title,\n      users,\n    }) ?? {};\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n\n    if (missingUsers) {\n      global = getGlobal();\n      global = updateMissingInvitedUsers(global, chatId, missingUsers, tabId);\n      setGlobal(global);\n    }\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (err) {\n    if ((err as ApiError).message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId: getCurrentTabId() });\n    return;\n  }\n\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('toggleSavedDialogPinned', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'savedDialogsPinned');\n\n  const isPinned = selectIsChatPinned(global, id, SAVED_FOLDER_ID);\n\n  const ids = global.chats.orderedPinnedIds.saved;\n  if ((ids?.length || 0) >= limit && !isPinned) {\n    actions.openLimitReachedModal({\n      limit: 'savedDialogsPinned',\n      tabId,\n    });\n    return;\n  }\n  void callApi('toggleSavedDialogPinned', { chat, shouldBePinned: !isPinned });\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n        areLoaded: true,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id).includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach((id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach((id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  const newId = maxId + 1;\n  const folderUpdate = {\n    id: newId,\n    ...newFolder,\n  };\n  await callApi('editChatFolder', {\n    id: newId,\n    folderUpdate,\n  });\n\n  // Update called from the above `callApi` is throttled, but we need to apply changes immediately\n  actions.apiUpdate({\n    '@type': 'updateChatFolder',\n    id: newId,\n    folder: folderUpdate,\n  });\n\n  actions.requestNextFoldersAction({\n    foldersAction: {\n      type: 'setFolderId',\n      payload: maxId + 1,\n    },\n    tabId,\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('markChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId: getCurrentTabId() });\n    return;\n  }\n  const chat = selectChat(global, id);\n  if (!chat) return;\n  void callApi('toggleDialogUnread', {\n    chat,\n    hasUnreadMark: !chat.hasUnreadMark,\n  });\n});\n\naddActionHandler('markChatMessagesRead', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n  const { id } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId: getCurrentTabId() });\n    return;\n  }\n\n  const chat = selectChat(global, id);\n  if (!chat) return;\n  if (!chat.isForum) {\n    await callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    actions.readAllMentions({ chatId: id });\n    actions.readAllReactions({ chatId: id });\n    if (chat.hasUnreadMark) {\n      actions.markChatRead({ id });\n    }\n    return;\n  }\n\n  let hasMoreTopics = true;\n  let lastTopic: ApiTopic | undefined;\n  let processedCount = 0;\n\n  while (hasMoreTopics) {\n    const result = await callApi('fetchTopics', {\n      chat, offsetDate: lastTopic?.date, offsetTopicId: lastTopic?.id, offsetId: lastTopic?.lastMessageId, limit: 100,\n    });\n\n    if (!result?.topics?.length) return;\n\n    result.topics.forEach((topic) => {\n      if (!topic.unreadCount && !topic.unreadMentionsCount && !topic.unreadReactionsCount) return;\n      actions.markTopicRead({ chatId: id, topicId: topic.id });\n    });\n\n    lastTopic = result.topics[result.topics.length - 1];\n    processedCount += result.topics.length;\n    if (result.count <= processedCount) {\n      hasMoreTopics = false;\n    }\n  }\n});\n\naddActionHandler('markChatRead', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) return;\n\n  callApi('toggleDialogUnread', {\n    chat,\n    hasUnreadMark: !chat.hasUnreadMark,\n  });\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return;\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const topic = selectTopic(global, chatId, topicId);\n\n  const lastTopicMessageId = topic?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n  actions.readAllMentions({ chatId, threadId: topicId });\n  actions.readAllReactions({ chatId, threadId: topicId });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('checkChatInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  if (result.chat) {\n    global = addChats(global, buildCollectionByKey([result.chat], 'id'));\n    setGlobal(global);\n    actions.openChat({ id: result.chat.id, tabId });\n    return;\n  }\n\n  if (result.invite.subscriptionFormId) {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice: {\n          type: 'chatInviteSubscription',\n          hash,\n        },\n        subscriptionInfo: result.invite,\n        status: 'pending',\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    chatInviteModal: {\n      hash,\n      inviteInfo: result.invite,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, text, tabId = getCurrentTabId(),\n  } = payload;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  if (text) {\n    actions.openChatWithDraft({ chatId: chat.id, text: { text }, tabId });\n  } else {\n    actions.openChat({ id: chat.id, tabId });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', async (global, actions, payload): Promise<void> => {\n  const {\n    url,\n    shouldIgnoreCache,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    openChatByPhoneNumber,\n    checkChatInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    openInvoice,\n    checkChatlistInvite,\n    openChatByUsername: openChatByUsernameAction,\n    openStoryViewerByUsername,\n    checkGiftCode,\n  } = actions;\n\n  if (isDeepLink(url)) {\n    const isProcessed = processDeepLink(url);\n    if (isProcessed || url.match(RE_TG_LINK)) {\n      return;\n    }\n  }\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n\n  const adaptedPathname = uri.pathname.replace(/^\\/?s\\//, '');\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${adaptedPathname}` : adaptedPathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const storyId = part2 === 's' && (Number(part3) || undefined);\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach: params.startattach,\n      attach: params.attach,\n      text: params.text,\n      tabId,\n    });\n    return;\n  }\n\n  if (storyId) {\n    openStoryViewerByUsername({\n      username: part1,\n      storyId,\n      tabId,\n    });\n\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    checkChatInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      shouldIgnoreCache,\n      tabId,\n    });\n    return;\n  }\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n    return;\n  }\n\n  if (part1 === 'addlist') {\n    const slug = part2;\n    checkChatlistInvite({ slug, tabId });\n    return;\n  }\n\n  if (part1 === 'giftcode') {\n    const slug = part2;\n    checkGiftCode({ slug, tabId });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  const isWebApp = await checkWebAppExists(global, part1, part2);\n\n  const shouldTryOpenChat = (part1 && !part2) || Number.isInteger(Number(part2)) || isWebApp;\n\n  if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      type: 'slug',\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      type: 'slug',\n      slug: part2,\n      tabId,\n    });\n  } else if (shouldTryOpenChat) {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach: params.startattach,\n      attach: params.attach,\n      startApp: params.startapp,\n      mode: params.mode,\n      originalParts: [part1, part2, part3],\n      tabId,\n    });\n  } else {\n    actions.openUrl({\n      url, shouldSkipModal: true, tabId, ignoreDeepLinks: true,\n    });\n  }\n});\n\naddActionHandler('processBoostParameters', async (global, actions, payload): Promise<void> => {\n  const { usernameOrId, isPrivate, tabId = getCurrentTabId() } = payload;\n\n  let chat: ApiChat | undefined;\n\n  if (isPrivate) {\n    chat = selectChat(global, usernameOrId);\n    if (!chat) {\n      actions.showNotification({ message: { key: 'PrivateChannelInaccessible' }, tabId });\n      return;\n    }\n  } else {\n    chat = await fetchChatByUsername(global, usernameOrId);\n    if (!chat) {\n      actions.showNotification({ message: { key: 'NoUsernameFound' }, tabId });\n      return;\n    }\n  }\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    actions.openChat({ id: chat.id, tabId });\n    return;\n  }\n\n  actions.openBoostModal({\n    chatId: chat.id,\n    tabId,\n  });\n});\n\naddActionHandler('acceptChatInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId, originalParts, startApp, mode,\n    text, onChatChanged, choose, ref, timestamp,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  const webAppName = originalParts?.[1];\n  const isWebApp = webAppName && !Number(webAppName) && !originalParts?.[2];\n\n  if (!commentId) {\n    if (startAttach === undefined && messageId && !startParam && !ref\n      && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, timestamp, tabId,\n      });\n      return;\n    }\n\n    if (startAttach !== undefined && choose) {\n      actions.processAttachBotParameters({\n        username,\n        filter: choose,\n        startParam: startAttach || startApp,\n        tabId,\n      });\n      return;\n    }\n\n    if (startApp !== undefined && !webAppName) {\n      const theme = extractCurrentThemeParams();\n      const chatByUsername = await fetchChatByUsername(global, username);\n      global = getGlobal();\n      const user = chatByUsername && selectUser(global, chatByUsername.id);\n      if (!chatByUsername || !chat || !user?.hasMainMiniApp) return;\n      actions.requestMainWebView({\n        botId: chatByUsername.id,\n        peerId: chat.id,\n        theme,\n        startParam: startApp,\n        mode,\n        tabId,\n      });\n      return;\n    }\n    if (!isWebApp) {\n      await openChatByUsername(\n        global, actions, {\n          username,\n          threadId,\n          channelPostId: messageId,\n          startParam,\n          ref,\n          startAttach,\n          attach,\n          text,\n          timestamp,\n        }, tabId,\n      );\n      if (onChatChanged) {\n        // @ts-ignore\n        actions[onChatChanged.action](onChatChanged.payload);\n      }\n      return;\n    }\n  }\n\n  const usernameChat = selectChatByUsername(global, username);\n  if (commentId && messageId && usernameChat) {\n    actions.openThread({\n      isComments: true,\n      originChannelId: usernameChat.id,\n      originMessageId: messageId,\n      tabId,\n      focusMessageId: commentId,\n    });\n    if (timestamp) {\n      actions.openMediaFromTimestamp({\n        chatId: usernameChat.id,\n        messageId: commentId,\n        timestamp,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (!isWebApp) actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  if (isWebApp && chatByUsername) {\n    const theme = extractCurrentThemeParams();\n\n    actions.requestAppWebView({\n      appName: webAppName,\n      botId: chatByUsername.id,\n      tabId,\n      startApp,\n      mode,\n      theme,\n    });\n    return;\n  }\n\n  if (!messageId) return;\n\n  actions.openThread({\n    isComments: true,\n    originChannelId: chatByUsername.id,\n    originMessageId: messageId,\n    tabId,\n    focusMessageId: commentId,\n  });\n\n  if (timestamp) {\n    actions.openMediaFromTimestamp({\n      chatId: chatByUsername.id,\n      messageId: commentId || messageId,\n      timestamp,\n      tabId,\n    });\n  }\n\n  if (onChatChanged) {\n    // @ts-ignore\n    actions[onChatChanged.action](onChatChanged.payload);\n  }\n});\n\naddActionHandler('openPrivateChannel', (global, actions, payload): ActionReturnType => {\n  const {\n    id, commentId, messageId, threadId, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    actions.showNotification({\n      message: {\n        key: 'PrivateChannelInaccessible',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  if (!commentId && !messageId && !threadId) {\n    actions.openChat({ id, tabId });\n    return;\n  }\n\n  if (timestamp) {\n    actions.openMediaFromTimestamp({\n      chatId: id,\n      messageId: commentId || messageId!,\n      timestamp,\n      tabId,\n    });\n  }\n\n  if (commentId && messageId) {\n    actions.openThread({\n      isComments: true,\n      originChannelId: id,\n      originMessageId: messageId,\n      tabId,\n      focusMessageId: commentId,\n    });\n    return;\n  }\n\n  openChatWithParams(global, actions, chat, {\n    messageId,\n    threadId,\n    timestamp,\n  }, tabId);\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: isEnabled });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const updatedFullInfo = selectChatFullInfo(global, chat.id);\n  if (!updatedFullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = updatedFullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChatFullInfo(global, chat.id, {\n    ...(members && isBanned && {\n      members: members.filter((m) => m.userId !== userId),\n    }),\n    ...(members && !isBanned && {\n      members: members.map((m) => (\n        m.userId === userId\n          ? { ...m, bannedRights }\n          : m\n      )),\n    }),\n    ...(isUnblocked && kickedMembers && {\n      kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n    }),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  if (newAdminMembersById) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { adminMembersById: newAdminMembersById });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    fullInfo?.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (photo) {\n    actions.loadFullChat({ chatId, withPhotos: true });\n  }\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  actions.loadFullChat({ chatId, withPhotos: true });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  let isDeleted;\n  if (photo.id === chat.avatarPhotoId) {\n    isDeleted = await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n    });\n  } else {\n    isDeleted = await callApi('deleteProfilePhotos', [photo]);\n  }\n  if (!isDeleted) return;\n\n  global = getGlobal();\n  global = deletePeerPhoto(global, chatId, photo.id);\n  setGlobal(global);\n\n  actions.loadFullChat({ chatId, withPhotos: true });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, areProfilesEnabled, areSignaturesEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, areProfilesEnabled, areSignaturesEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let fullInfo = selectChatFullInfo(global, chat.id);\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: false });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const fullInfo = selectChatFullInfo(global, channelId);\n  let chat: ApiChat | undefined;\n  if (fullInfo?.linkedChatId) {\n    chat = selectChat(global, fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = selectChatFullInfo(global, chat.id)?.members?.length;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', { chat, offset });\n  if (!result) {\n    return;\n  }\n\n  const { members, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = memberIds.map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  const missingUsers = await callApi('addChatMembers', chat, users);\n  if (missingUsers) {\n    global = getGlobal();\n    global = updateMissingInvitedUsers(global, chatId, missingUsers, tabId);\n    setGlobal(global);\n  }\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, enabledReactions, reactionsLimit,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n    reactionsLimit,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat);\n});\n\naddActionHandler('fetchChat', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    return;\n  }\n\n  if (selectIsChatWithSelf(global, chatId)) {\n    void callApi('fetchChat', { type: 'self' });\n  } else {\n    const user = selectUser(global, chatId);\n    if (user) {\n      void callApi('fetchChat', { type: 'user', user });\n    }\n  }\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  actions.toggleStoryRibbon({ isShown: false, tabId });\n  actions.toggleStoryRibbon({ isShown: false, isArchived: true, tabId });\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  const isForChat = Boolean(filter);\n\n  if (!isForChat) {\n    actions.callAttachBot({\n      isFromSideMenu: true,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n  const { chatId, force } = payload;\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const topicsInfo = selectTopicsInfo(global, chatId);\n\n  if (!force && topicsInfo?.listedTopicIds && topicsInfo.listedTopicIds.length === topicsInfo.totalCount) {\n    return;\n  }\n\n  const offsetTopic = !force ? topicsInfo?.listedTopicIds?.reduce((acc, el) => {\n    const topic = selectTopic(global, chatId, el);\n    const accTopic = selectTopic(global, chatId, acc);\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && selectTopic(global, chatId, offsetTopic)) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  let result: true | undefined;\n  try {\n    result = await callApi('toggleForum', { chat, isEnabled });\n  } catch (error) {\n    if ((error as ApiError).message === 'FLOOD') {\n      actions.showNotification({ message: langProvider.oldTranslate('FloodWait'), tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (result) {\n    global = getGlobal();\n    global = updateChat(global, chat.id, { isForum: isEnabled });\n    setGlobal(global);\n\n    if (!isEnabled) {\n      actions.closeForumPanel({ tabId });\n    } else {\n      actions.openForumPanel({ chatId: chat.id, tabId });\n    }\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = selectChatFullInfo(global, chat.id)?.areParticipantsHidden;\n  global = updateChatFullInfo(global, chatId, { areParticipantsHidden: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chatId, { areParticipantsHidden: prevIsEnabled });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openThread({\n      chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('deleteTopic', { chat, topicId });\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = selectTopic(global, chatId, topicId);\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  const topics = selectTopics(global, chatId);\n  if (!chat || !topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\naddActionHandler('checkChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatlistInvite', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_group_invite_bad_link'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    chatlistModal: {\n      invite: result.invite,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('joinChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { invite, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const peers = peerIds.map((peerId) => selectChat(global, peerId)).filter(Boolean);\n  const currentNotJoinedCount = peers.filter((peer) => peer.isNotJoined).length;\n\n  const existingFolder = 'folderId' in invite ? selectChatFolder(global, invite.folderId) : undefined;\n  const folderTitle = ('title' in invite ? invite.title : existingFolder?.title)!;\n\n  try {\n    const result = await callApi('joinChatlistInvite', { slug: invite.slug, peers });\n    if (!result) return;\n\n    if (existingFolder) {\n      actions.showNotification({\n        title: {\n          key: 'FolderLinkNotificationUpdatedTitle',\n          variables: {\n            title: folderTitle.text,\n          },\n        },\n        message: {\n          key: 'FolderLinkNotificationUpdatedSubtitle',\n          variables: {\n            count: currentNotJoinedCount,\n          },\n          options: {\n            pluralValue: currentNotJoinedCount,\n          },\n        },\n        tabId,\n      });\n\n      return;\n    }\n\n    actions.showNotification({\n      title: {\n        key: 'FolderLinkNotificationAddedTitle',\n        variables: {\n          title: folderTitle.text,\n        },\n      },\n      message: {\n        key: 'FolderLinkNotificationAddedSubtitle',\n        variables: {\n          count: currentNotJoinedCount,\n        },\n        options: {\n          pluralValue: currentNotJoinedCount,\n        },\n      },\n      tabId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHATLISTS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'chatlistJoined', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('leaveChatlist', async (global, actions, payload): Promise<void> => {\n  const { folderId, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n\n  const peers = peerIds?.map((peerId) => selectChat(global, peerId)).filter(Boolean) || [];\n\n  const result = await callApi('leaveChatlist', { folderId, peers });\n\n  if (!result) return;\n  if (!folder) return;\n\n  actions.showNotification({\n    title: {\n      key: 'FolderLinkNotificationDeletedTitle',\n      variables: {\n        title: folder.title.text,\n      },\n    },\n    message: {\n      key: 'FolderLinkNotificationDeletedSubtitle',\n      variables: {\n        count: peers.length,\n      },\n      options: {\n        pluralValue: peers.length,\n      },\n    },\n    tabId,\n  });\n});\n\naddActionHandler('loadChatlistInvites', async (global, actions, payload): Promise<void> => {\n  const { folderId } = payload;\n\n  const result = await callApi('fetchChatlistInvites', { folderId });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: result.invites,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('createChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let result: { filter: ApiChatFolder; invite: ApiChatlistExportedInvite | undefined } | undefined;\n\n  try {\n    result = await callApi('createChalistInvite', {\n      folderId,\n      peers: folder.includedChatIds.concat(folder.pinnedChatIds || [])\n        .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean),\n    });\n  } catch (error) {\n    if (CHATLIST_LIMIT_ERROR_LIST.has((error as ApiError).message)) {\n      actions.openLimitReachedModal({ limit: 'chatlistInvites', tabId });\n      actions.openSettingsScreen({ screen: SettingsScreens.Folders, tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!result || !result.invite) return;\n\n  const { shareFolderScreen } = selectTabState(global, tabId);\n\n  if (!shareFolderScreen) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      byId: {\n        ...global.chatFolders.byId,\n        [folderId]: {\n          ...global.chatFolders.byId[folderId],\n          ...result.filter,\n        },\n      },\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: [\n          ...(global.chatFolders.invites[folderId] || []),\n          result.invite,\n        ],\n      },\n    },\n  };\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...shareFolderScreen,\n      url: result.invite.url,\n      isLoading: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    folderId, peerIds, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const slug = url.split('/').pop();\n  if (!slug) return;\n\n  const peers = peerIds\n    .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean);\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const result = await callApi('editChatlistInvite', { folderId, slug, peers });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        invites: {\n          ...global.chatFolders.invites,\n          [folderId]: global.chatFolders.invites[folderId]?.map((invite) => {\n            if (invite.url === url) {\n              return result;\n            }\n            return invite;\n          }),\n        },\n      },\n    };\n    setGlobal(global);\n  } catch (error) {\n    actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n  } finally {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      shareFolderScreen: {\n        ...selectTabState(global, tabId).shareFolderScreen!,\n        isLoading: false,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, url } = payload;\n\n  const slug = url.split('/').pop();\n\n  if (!slug) return;\n\n  const result = await callApi('deleteChatlistInvite', { folderId, slug });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: global.chatFolders.invites[folderId]?.filter((invite) => invite.url !== url),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openDeleteChatFolderModal', async (global, actions, payload): Promise<void> => {\n  const { folderId, isConfirmedForChatlist, tabId = getCurrentTabId() } = payload;\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  if (folder.isChatList && (!folder.hasMyInvites || isConfirmedForChatlist)) {\n    const currentIds = getOrderedIds(folderId);\n    const suggestions = await callApi('fetchLeaveChatlistSuggestions', { folderId });\n    global = getGlobal();\n    global = updateTabState(global, {\n      chatlistModal: {\n        removal: {\n          folderId,\n          suggestedPeerIds: unique([...(suggestions || []), ...(currentIds || [])]),\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateChatDetectedLanguage', (global, actions, payload): ActionReturnType => {\n  const { chatId, detectedLanguage } = payload;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    detectedLanguage,\n  }, undefined, true);\n\n  return global;\n});\n\naddActionHandler('togglePeerTranslations', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('togglePeerTranslations', { chat, isEnabled });\n\n  if (result === undefined) return;\n\n  global = getGlobal();\n  global = updatePeerFullInfo(global, chatId, {\n    isTranslationDisabled: isEnabled ? undefined : true,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('setViewForumAsMessages', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat?.isForum || chat.isForumAsMessages === isEnabled) {\n    return;\n  }\n\n  global = updateChat(global, chatId, { isForumAsMessages: isEnabled || undefined });\n  setGlobal(global);\n\n  void callApi('setViewForumAsMessages', { chat, isEnabled });\n});\n\naddActionHandler('loadChannelRecommendations', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId } = payload;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  if (chatId && !chat) {\n    return;\n  }\n\n  if (!chatId) {\n    const similarChannelIds = selectSimilarChannelIds(global, GLOBAL_SUGGESTED_CHANNELS_ID);\n    if (similarChannelIds) return; // Already cached\n  }\n\n  const result = await callApi('fetchChannelRecommendations', {\n    chat,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { similarChannels, count } = result;\n\n  const chatsById = buildCollectionByKey(similarChannels, 'id');\n\n  global = getGlobal();\n  global = replaceSimilarChannels(global, chatId || GLOBAL_SUGGESTED_CHANNELS_ID, Object.keys(chatsById), count);\n  setGlobal(global);\n});\n\naddActionHandler('loadBotRecommendations', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { userId } = payload;\n  const user = selectChat(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchBotsRecommendations', {\n    user,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { similarBots, count } = result;\n\n  const users = buildCollectionByKey(similarBots, 'id');\n\n  global = getGlobal();\n  global = addUsers(global, users);\n  global = addSimilarBots(global, userId, Object.keys(users), count);\n  setGlobal(global);\n});\n\naddActionHandler('toggleChannelRecommendations', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  global = toggleSimilarChannels(global, chatId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePaidMessagesPrice', async (global, actions, payload): Promise<void> => {\n  const { chatId, paidMessagesStars, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('updatePaidMessagesPrice', {\n    chat,\n    paidMessagesStars,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = updateChat(global, chatId, { paidMessagesStars });\n  setGlobal(global);\n});\n\naddActionHandler('resolveBusinessChatLink', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('resolveBusinessChatLink', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('BusinessLink.ErrorExpired'),\n      tabId,\n    });\n    return;\n  }\n\n  const { chatLink } = result;\n\n  actions.openChatWithDraft({\n    chatId: chatLink.chatId,\n    text: chatLink.text,\n    tabId,\n  });\n});\n\naddActionHandler('requestCollectibleInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    type, collectible, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  let inputCollectible;\n  if (type === 'phone') {\n    inputCollectible = { phone: collectible };\n  }\n  if (type === 'username') {\n    inputCollectible = { username: collectible };\n  }\n  if (!inputCollectible) return;\n\n  const result = await callApi('fetchCollectionInfo', inputCollectible);\n  if (!result) {\n    copyTextToClipboard(collectible);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    collectibleInfoModal: {\n      ...result,\n      type,\n      collectible,\n      peerId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function loadChats(\n  listType: ChatListType,\n  isFullDraftSync?: boolean,\n  shouldIgnorePagination?: boolean,\n) {\n  let global = getGlobal();\n  let lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n\n  const params = !shouldIgnorePagination ? selectChatListLoadingParameters(global, listType) : {};\n  const offsetPeer = params.nextOffsetPeerId ? selectPeer(global, params.nextOffsetPeerId) : undefined;\n  const offsetDate = params.nextOffsetDate;\n  const offsetId = params.nextOffsetId;\n\n  const isFirstBatch = !shouldIgnorePagination && !offsetPeer && !offsetDate && !offsetId;\n  const shouldReplaceStaleState = listType === 'active' && isFirstBatch;\n  const isAccountFreeze = selectIsCurrentUserFrozen(global);\n\n  const result = listType === 'saved' ? await callApi('fetchSavedChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    offsetId,\n    offsetPeer,\n    withPinned: isFirstBatch && !isAccountFreeze,\n  }) : await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    offsetId,\n    offsetPeer,\n    archived: listType === 'archived',\n    withPinned: isFirstBatch && !isAccountFreeze,\n    lastLocalServiceMessageId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  global = getGlobal();\n  lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n\n  const newChats = buildCollectionByKey(result.chats, 'id');\n\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, newChats);\n  if (isFirstBatch) {\n    global = replaceChatListIds(global, listType, chatIds);\n  } else {\n    global = addChatListIds(global, listType, chatIds);\n  }\n\n  if (shouldReplaceStaleState) {\n    global = replaceUserStatuses(global, result.userStatusesById);\n    global = replaceNotifyExceptions(global, result.notifyExceptionById);\n  } else {\n    global = addUserStatuses(global, result.userStatusesById);\n    global = addNotifyExceptions(global, result.notifyExceptionById);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n  global = replaceMessages(global, result.messages);\n  global = updateChatsLastMessageId(global, result.lastMessageByChatId, listType);\n\n  if (!shouldIgnorePagination) {\n    global = replaceChatListLoadingParameters(\n      global, listType, result.nextOffsetId, result.nextOffsetPeerId, result.nextOffsetDate,\n    );\n  }\n\n  const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n  idsToUpdateDraft.forEach((chatId) => {\n    const draft = result.draftsById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!draft && !thread) return;\n\n    if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'draft', draft,\n      );\n    }\n  });\n\n  if ((chatIds.length === 0 || chatIds.length === result.totalChatCount) && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n) {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    chats, userStatusesById, fullInfo, groupCall, membersCount, isForumAsMessages,\n  } = result;\n\n  global = getGlobal();\n  global = updateChats(global, buildCollectionByKey(chats, 'id'));\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState', 'isLoaded']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  if (membersCount !== undefined) {\n    global = updateChat(global, chat.id, { membersCount });\n  }\n  if (chat.isForum) {\n    global = updateChat(global, chat.id, { isForumAsMessages });\n  }\n  global = replaceChatFullInfo(global, chat.id, fullInfo);\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  const localSet = stickerSet && selectStickerSet(global, stickerSet);\n  if (stickerSet && !localSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n    });\n  }\n\n  const emojiSet = fullInfo.emojiSet;\n  const localEmojiSet = emojiSet && selectStickerSet(global, emojiSet);\n  if (emojiSet && !localEmojiSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: emojiSet.id,\n        accessHash: emojiSet.accessHash,\n      },\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n  referrer?: string,\n) {\n  global = getGlobal();\n  const localChat = !referrer ? selectChatByUsername(global, username) : undefined;\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username, referrer) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function checkWebAppExists<T extends GlobalState>(\n  global: T, botName: string, appName: string,\n) {\n  if (!botName || !appName) return false;\n  global = getGlobal();\n  const chatByUsername = await fetchChatByUsername(global, botName);\n  global = getGlobal();\n  const bot = chatByUsername && selectUser(global, chatByUsername.id);\n  const botApp = bot && await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  return Boolean(botApp);\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n  setGlobal(global);\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  params: {\n    username: string;\n    threadId?: ThreadId;\n    channelPostId?: number;\n    startParam?: string;\n    ref?: string;\n    startAttach?: string;\n    attach?: string;\n    text?: string;\n    timestamp?: number;\n  },\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    username, threadId, channelPostId, startParam, ref, startAttach, attach, text, timestamp,\n  } = params;\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach !== undefined && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat?.id || bot.id,\n      startParam: startAttach,\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const starRefStartPrefixes = global.appConfig?.starRefStartPrefixes;\n  let referrer = ref;\n  if (startParam && starRefStartPrefixes?.length) {\n    const prefix = starRefStartPrefixes.find((p) => startParam.startsWith(p));\n    if (prefix) {\n      referrer = startParam.slice(prefix.length);\n    }\n  }\n\n  const chat = await fetchChatByUsername(global, username, referrer);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  openChatWithParams(global, actions, chat, {\n    isCurrentChat,\n    threadId,\n    messageId: channelPostId,\n    startParam,\n    referrer,\n    startAttach,\n    attach,\n    text,\n    timestamp,\n  }, tabId);\n}\n\nasync function openChatWithParams<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chat: ApiChat,\n  params: {\n    isCurrentChat?: boolean;\n    threadId?: ThreadId;\n    messageId?: number;\n    startParam?: string;\n    referrer?: string;\n    startAttach?: string;\n    attach?: string;\n    text?: string;\n    timestamp?: number;\n  },\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    isCurrentChat, threadId, messageId, startParam, referrer, startAttach, attach, text, timestamp,\n  } = params;\n\n  if (messageId) {\n    let isTopicProcessed = false;\n    // In forums, link to a topic start message should open the topic\n    if (chat.isForum && !threadId) {\n      let topic = selectTopics(global, chat.id)?.[messageId];\n      if (!topic) {\n        const topicResult = await callApi('fetchTopicById', { chat, topicId: messageId });\n        topic = topicResult?.topic;\n      }\n\n      if (topic) {\n        actions.openThread({\n          chatId: chat.id, threadId: topic.id, tabId,\n        });\n        isTopicProcessed = true;\n      }\n    }\n\n    if (!isTopicProcessed) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, timestamp, tabId,\n      });\n    }\n  } else if (!isCurrentChat) {\n    actions.openThread({ chatId: chat.id, threadId: threadId ?? MAIN_THREAD_ID, tabId });\n  }\n\n  if (startParam && !referrer) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n\n  if (text) {\n    actions.openChatWithDraft({ chatId: chat.id, text: { text }, tabId });\n  }\n\n  if (messageId && timestamp) {\n    actions.openMediaFromTimestamp({\n      chatId: chat.id, threadId, messageId, timestamp, tabId,\n    });\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.loadFullChat({ chatId: newChat.id });\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { ApiGroupCall } from '../../api/types';\nimport type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\n\nimport { omit } from '../../util/iteratees';\nimport { selectChat } from '../selectors';\nimport { selectGroupCall } from '../selectors/calls';\nimport { updateChatFullInfo } from './chats';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChatFullInfo(global, groupCall.chatId, {\n        groupCallId: undefined,\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n"],"names":["silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","Promise","all","Object","values","map","sound","prevSrc","src","muted","volume","play","then","pause","currentTime","requestNextMutation","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","addActionHandler","global","actions","payload","force","tabId","getCurrentTabId","updateTabState","isCallPanelVisible","selectTabState","async","chatId","chat","selectChat","result","callApi","peer","getGlobal","updateGroupCall","id","setGlobal","requestMasterAndJoinGroupCall","accessHash","groupCall","selectActiveGroupCall","hasPublicUsername","Boolean","getMainUsername","inviteLink","selectChatFullInfo","call","canSelfUnmute","copyTextToClipboard","showNotification","message","key","username","inviteHash","fetchChatByUsername","langProvider","full","loadFullChat","requestMasterAndCallAction","action","undefined","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","window","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","checkNavigatorUserMediaPermissions","groupCalls","activeGroupCallId","selectGroupCall","selectChatGroupCall","leaveGroupCall","rejoin","selectIsCurrentUserFrozen","existingGroupCall","omit","isLoaded","participantsCount","fetchGroupCall","nextOffset","offset","requestGroupCallParticipants","userId","isVideo","selectUser","state","participantId","adminId","currentUserId","oscillator","createOscillator","dst","createMediaStreamDestination","start","MediaStream","assign","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","length","getTracks","forEach","track","stop","checkMicrophonePermission","catch","audio","CHATLIST_LIMIT_ERROR_LIST","Set","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","abortChatRequests","threadId","abortChatRequestsForCurrentChat","newChatId","newThreadId","currentMessageList","selectCurrentMessageList","currentChatId","currentThreadId","isChatOpened","isThreadOpened","byTabId","reduce","accHasChatOpened","accHasThreadOpened","otherTabId","otherMessageList","isSameChat","loadChats","listType","isFullDraftSync","shouldIgnorePagination","lastLocalServiceMessageId","selectLastServiceNotification","params","selectChatListLoadingParameters","offsetPeer","nextOffsetPeerId","selectPeer","offsetDate","nextOffsetDate","offsetId","nextOffsetId","isFirstBatch","shouldReplaceStaleState","isAccountFreeze","limit","CHAT_LIST_LOAD_SLICE","withPinned","archived","chatIds","newChats","buildCollectionByKey","chats","updateUsers","users","updateChats","replaceChatListIds","addChatListIds","replaceUserStatuses","userStatusesById","replaceNotifyExceptions","notifyExceptionById","addUserStatuses","addNotifyExceptions","updateChatListSecondaryInfo","replaceMessages","messages","updateChatsLastMessageId","lastMessageByChatId","replaceChatListLoadingParameters","keys","draftsById","draft","thread","selectThread","MAIN_THREAD_ID","selectDraft","isLocal","replaceThreadParam","totalChatCount","isFullyLoaded","fullInfo","membersCount","isForumAsMessages","updateChat","isForum","replaceChatFullInfo","stickerSet","localSet","selectStickerSet","loadStickers","stickerSetInfo","emojiSet","localEmojiSet","referrer","localChat","selectChatByUsername","isMin","user","updateUser","getAttachBotOrNotify","isUserBot","bot","openChatWithParams","isCurrentChat","messageId","startParam","startAttach","attach","text","timestamp","isTopicProcessed","topic","selectTopics","topicResult","topicId","openThread","focusMessage","startBot","botId","param","openAttachMenuFromLink","openChatWithDraft","openMediaFromTimestamp","callAttachBot","ensureIsSuperGroup","isChatBasicGroup","newChat","error","openLimitReachedModal","showDialog","data","hasErrorKey","migrateChat","openChat","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","currentChatIds","filter","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","includes","has","add","loadViewportMessages","type","noForumTopicPanel","shouldReplaceHistory","shouldReplaceLast","processOpenChatOrThread","TMP_CHAT_ID","hasUnreadMark","markChatRead","isChatOnlySummary","selectChatLastMessageId","requestChatUpdate","selectIsChatWithSelf","setWorkspaceSelectedItemId","closeWebContentsView","otherParams","isComments","focusMessageId","loadingChatId","loadingThreadId","originChannelId","originMessageId","originalChat","getIsSavedDialog","threadInfo","selectThreadInfo","listedIds","Number","loadingThread","loadingMessageId","openPreviousChat","currentGlobal","addMessages","updateThreadInfo","isCommentsInfo","fromChannelId","fromMessageId","pick","updateThread","firstMessageId","onError","onLoaded","chatFullInfo","linkedChatId","selectSupportChat","whenFirstBatchDone","isCallbackFired","DEBUG","console","connectionState","authState","dialogIds","orderedPinnedIds","withPhotos","loadChat","loadMoreProfilePhotos","peerId","shouldInvalidateCache","isUserId","fullInfoById","SERVICE_NOTIFICATIONS_USER_ID","lastLocalMessage","isSavedDialog","updateChatLastMessageId","removeChatFromChatLists","tabChatId","isMuted","mutedUntil","openFrozenAccountModal","MAX_INT_32","settings","isEnabled","isSilentPosting","title","about","photo","memberIds","discussionChannelId","isChannel","isSuperGroup","createdChannel","missingInvitedUsers","chatCreation","progress","ChatCreationProgress","InProgress","isBroadcast","isMegagroup","channel","missingUsers","Error","channelId","Complete","linkDiscussionGroup","updateMissingInvitedUsers","shouldRevokeHistory","leaveChat","chatMessages","selectChatMessages","localMessageIds","isLocalMessageId","deleteChatMessages","createdChat","err","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","selectIsChatPinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","ids","isChatArchived","SAVED_FOLDER_ID","saved","chatFolders","areLoaded","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","concat","emoticon","orderedIds","byId","maxId","Math","max","recommendedId","description","newFolder","newId","apiUpdate","requestNextFoldersAction","foldersAction","folderIds","readAllMentions","readAllReactions","lastTopic","hasMoreTopics","processedCount","date","offsetTopicId","lastMessageId","topics","unreadCount","unreadMentionsCount","unreadReactionsCount","markTopicRead","count","selectTopic","lastTopicMessageId","updateTopic","lastReadInboxMessageId","hash","addUsers","addChats","invite","subscriptionFormId","starsPayment","inputInvoice","subscriptionInfo","status","chatInviteModal","inviteInfo","phoneNumber","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","replace","url","shouldIgnoreCache","openChatByPhoneNumber","checkChatInvite","openStickerSet","joinVoiceChatByLink","openInvoice","checkChatlistInvite","openChatByUsername","openChatByUsernameAction","openStoryViewerByUsername","checkGiftCode","isDeepLink","processDeepLink","match","RE_TG_LINK","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","open","toString","hostParts","split","adaptedPathname","part1","part2","part3","part","decodeURI","fromEntries","searchParams","storyId","substr","startattach","shortName","formatShareText","slug","chatOrChannelPostId","commentId","comment","isWebApp","botName","appName","chatByUsername","botApp","checkWebAppExists","shouldTryOpenChat","isInteger","hasOwnProperty","voicechat","livestream","substring","startApp","startapp","mode","originalParts","openUrl","shouldSkipModal","ignoreDeepLinks","usernameOrId","isPrivate","isChatChannel","isChatSuperGroup","openBoostModal","onChatChanged","choose","ref","selectCurrentChat","webAppName","usernames","c","processAttachBotParameters","theme","extractCurrentThemeParams","hasMainMiniApp","requestMainWebView","channelPostId","currentChat","starRefStartPrefixes","appConfig","prefix","p","slice","usernameChat","requestAppWebView","updateChatFullInfo","isPreHistoryHidden","bannedRights","updatedFullInfo","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","chatAfterUpdate","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","isDeleted","avatarPhotoId","deletePeerPhoto","areProfilesEnabled","areSignaturesEnabled","groups","addedById","group","forDiscussionIds","fullChat","activeChatFolder","requestedDraft","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","Loading","Closed","isProtected","enabledReactions","reactionsLimit","toggleStoryRibbon","isShown","isArchived","forumPanelChatId","isFromSideMenu","attachMenu","bots","requestedAttachBotInstall","onConfirm","requestAttachBotInChat","topicsInfo","selectTopicsInfo","listedTopicIds","totalCount","offsetTopic","acc","el","accTopic","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","updateTopics","updateListedTopicIds","entries","readInboxMessageIdByTopicId","shouldCloseChatOnError","openForumPanel","closeForumPanel","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","chatlistModal","peerIds","peers","currentNotJoinedCount","isNotJoined","existingFolder","folderTitle","variables","options","pluralValue","invites","shareFolderScreen","openSettingsScreen","screen","SettingsScreens","Folders","pop","isConfirmedForChatlist","isChatList","hasMyInvites","currentIds","suggestions","removal","suggestedPeerIds","unique","deleteFolderDialogModal","detectedLanguage","updatePeerFullInfo","isTranslationDisabled","selectSimilarChannelIds","GLOBAL_SUGGESTED_CHANNELS_ID","similarChannels","chatsById","replaceSimilarChannels","similarBots","addSimilarBots","toggleSimilarChannels","paidMessagesStars","chatLink","collectible","inputCollectible","phone","collectibleInfoModal","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount"],"sourceRoot":""}